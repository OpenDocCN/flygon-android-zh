- en: Chapter 7. Image Handling and Memory Management
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第七章. 图像处理与内存管理
- en: In this chapter, we will take a look at how to show images downloaded from a
    URL. We will discuss how to do this using the Android native SDK as well as the
    commonly used third-party libraries. We will consider key concepts and features
    such as download, compression, cache systems, and storage in memory or disk.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨如何显示从URL下载的图片。我们将讨论如何使用Android原生SDK以及常用的第三方库来实现这一点。我们会考虑关键概念和特性，如下载、压缩、缓存系统以及在内存或磁盘上的存储。
- en: We will also discuss what a nine patch is and how to create it, and we will
    speak about the different size and density folder for drawables by introducing
    vector drawables.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将讨论什么是九宫格图片以及如何创建它，并且会通过介绍矢量图像，讲解不同尺寸和密度文件夹中的可绘制资源。
- en: The final section will be focused on memory management. Identifying memory leaks
    in our app is a critical task, which usually happens while working with images.
    We will take a look at the common mistakes that can lead to these leaks as well
    as general tips on how to prevent them.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一节将重点关注内存管理。识别我们应用中的内存泄漏是一项关键任务，这通常发生在处理图像时。我们将探讨可能导致这些泄漏的常见错误以及如何预防的一般性技巧。
- en: Displaying images from the network
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示网络图像
- en: The traditional way
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 传统方式
- en: Volley ImageDownloader
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Volley ImageDownloader
- en: Picasso
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Picasso库
- en: Images
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图像
- en: Vector drawables
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 矢量图像
- en: Animated vector drawables
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动画矢量图像
- en: Nine patch
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 九宫格图片
- en: Memory management
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存管理
- en: Detecting and locating leaks
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检测和定位内存泄漏
- en: Preventing leaks
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 防止内存泄漏
- en: Downloading images
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载图片
- en: Downloading an image and displaying it with the help of `ImageView` can be done
    in a single line. Since Android development started, this is something that every
    developer has done. Android is a technology that is more than five years old,
    so we can expect this technique to be quite advanced and to find-third party solutions
    that facilitate it. That said, this book wouldn't be called *Mastering Android*
    if it didn't explain the process of downloading an image and displaying it without
    any third-party library.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`ImageView`下载并显示图片可以在一行代码中完成。自从Android开发起步，这是每个开发者都会做的事情。Android是一项超过五年历史的技术，因此我们可以预期这项技术相当先进，也能找到简化它的第三方解决方案。话虽如此，如果这本书不解释在没有任何第三方库的情况下下载和显示图片的过程，它就不会被称为《精通Android》。
- en: It is good to use the latest library in your apps, but it is better to understand
    the solution that you are implementing, and it is even better to be able to build
    this library yourself.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的应用中使用最新库是好的，但理解你所实施的解决方案更好，能够自己构建这个库则是最好不过了。
- en: While working with images, we need to handle everything from network connection
    to the downloading of array bytes and their conversion to **Bitmap**. On some
    occasions, it makes sense to store the images on a disk so that the next time
    we open the app, these images will already be there.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理图像时，我们需要从网络连接到数组字节的下载及其转换为**位图**的一切。在某些情况下，将图像存储在磁盘上有意义，这样下次我们打开应用时，这些图像就已经在那里了。
- en: Even if we are able to display an image, the matter doesn't finish here; we
    should be able to manage the downloading of images inside a list view. The downloading,
    storing, and displaying of systems need to be in sync for the app to work without
    glitches and have a fluent list that can scroll without problems. Keep in mind
    that when we scroll through a list, the views are recycled. This means that if
    we scroll fast, we might start the downloading of an image. By the time this download
    finishes, the view will not be visible on the screen anymore, or it will be recycled
    in another view.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 即使我们能够显示一张图片，事情并没有就此结束；我们应该能够在列表视图中管理图片的下载。下载、存储和显示系统的同步是应用无故障运行、拥有流畅列表且能无问题滚动的关键。请记住，当我们滚动列表时，视图是被回收的。这意味着如果我们快速滚动，可能会开始下载一张图片。等到下载完成时，该视图可能已经不再屏幕上显示，或者它可能被回收用于另一个视图。
- en: The traditional way of downloading images
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下载图片的传统方式
- en: To display an image without using any third-party libraries (an image hosted
    on the Internet with a URL), we need to establish a connection using `HttpURLConnection`.
    We would need to open an input stream and consume the information, which can be
    transformed into a Bitmap image with the factory method, `BitmpapFactory.decodeStream(InputStream
    istream)`. We could convert it from an input stream to a file so that the image
    could be stored in the disk and accessed later. For the moment, let's try to download
    it first and convert it into a Bitmap image, which we will keep in the memory
    and show in `ImageView`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要在不使用任何第三方库（互联网上托管的带有URL的图片）的情况下显示图片，我们需要使用`HttpURLConnection`建立连接。我们需要打开一个输入流并消费信息，这可以通过工厂方法`BitmapFactory.decodeStream(InputStream
    istream)`转换为Bitmap图像。我们可以将其从输入流转换为文件，以便将图片存储在磁盘上，以后再访问。目前，让我们先尝试下载它并将其转换为Bitmap图像，我们将把它保存在内存中并在`ImageView`中显示。
- en: We will show the logo of the company in `OfferDetailActivity` for every offer.
    Remember that in Parse, we created a database, and with it we created a field
    called `imageLink`. You just need to fill that field with the URL of the logo
    of that company.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`OfferDetailActivity`中为每个职位展示公司的标志。请记住，在Parse中，我们创建了一个数据库，并创建了一个名为`imageLink`的字段。你只需要用该公司的标志URL填充该字段。
- en: '![The traditional way of downloading images](img/4887_07_01.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![传统下载图片的方式](img/4887_07_01.jpg)'
- en: 'We need to have the image link in `OfferDetailActivity`; for this, we need
    to send an extra parameter in the intent in `JobOfferAdapter` for when we tap
    on a card. Use the following code:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在`OfferDetailActivity`中添加图片链接；为此，在`JobOfferAdapter`中点击卡片时，我们需要在意图中发送一个额外的参数。使用以下代码：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The method in charge of the image download will be a static method that can
    be called from anywhere in the app. This method will be placed in the `ImageUtils`
    class inside a package called `utils`. We will first check whether the URL is
    correct, and after this, we will consume the content from `HttpURLConnection`,
    converting the input stream into a Bitmap image as we explained before:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 负责图片下载的方法将是一个静态方法，可以从应用程序的任何位置调用。这个方法将被放在名为`utils`的包内的`ImageUtils`类中。我们首先检查URL是否正确，然后从`HttpURLConnection`消费内容，将输入流转换为之前解释的Bitmap图像：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We will create a method called `displayImageFromUrl()` that receives `ImageView`
    and a string with the link to do all the work instead of having all this logic
    inside `onCreate`. In `onCreate`, we just need to retrieve the parameters and
    call the method:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个名为`displayImageFromUrl()`的方法，该方法接收`ImageView`和一个带有链接的字符串，以代替在`onCreate`中拥有所有这些逻辑。在`onCreate`中，我们只需要检索参数并调用该方法：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'At this stage, we can be tempted to call `ImageUtils.getImage(link)` and set
    Bitmap to `ImageView`. However, we are missing one thing; we can''t just call
    the method that opens a network connection in the main activity thread. We need
    to do this in the background, or we would get an exception. An `AsyncTask` method
    is a nice solution to this problem:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，我们可能会想要调用`ImageUtils.getImage(link)`并将Bitmap设置到`ImageView`。然而，我们忽略了一件事；我们不能在主活动线程中直接调用打开网络连接的方法。我们需要在后台进行，否则可能会引发异常。`AsyncTask`方法是这个问题的不错解决方案：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Depending on the shape and background of the images used, it will look better
    with the `ImageView` attribute, `scaleType`, with the `centerInside` or `centerCrop`
    value. The `CenterInside` value will scale down the image to ensure that it fits
    in the recipient while keeping the proportions. The `CenterCrop` value will scale
    up the image until it fills the smallest side of the recipient. The rest of the
    image will go out of the bounds of `ImageView`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 根据所使用的图片的形状和背景，使用`ImageView`的属性`scaleType`，设置为`centerInside`或`centerCrop`值会更好看。`centerInside`值会将图片缩小以确保它适应接收器同时保持比例。`centerCrop`值将放大图片，直到它填满接收器最短的一边。图片的其余部分将超出`ImageView`的边界。
- en: At the beginning of the chapter, I mentioned that this could have been done
    just with a single line of code, but as you can see, doing it by ourselves takes
    much more than one line and involves different concepts such as background threading,
    `HttpURLConnection`, and so on. This is just the beginning; we implemented the
    simplest possible scenario. If we were setting the image in the same way in the
    rows of a list view, we would have problems. One of these problems would be firing
    infinite `AsyncTask` calls while scrolling. This could be controlled if we had
    a queue with a maximum number of `AsyncTask` and a cancellation mechanism to ignore
    or cancel the requests of the views that are not on the screen.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章开头，我提到这可以用一行代码就完成，但正如你所见，自己动手做远不止一行代码，还涉及不同的概念，比如后台线程、`HttpURLConnection`等。这仅仅是开始；我们实现了最简单的情况。如果我们以同样的方式在列表视图的行中设置图像，会遇到问题。这些问题之一就是在滚动时无限触发`AsyncTask`调用。如果我们有一个带有最大`AsyncTask`数量的队列以及一个取消机制，以忽略或取消不在屏幕上的视图的请求，这种情况是可以控制的。
- en: When we launch the `AsyncTask`, we have a reference to `ImageView`, and in `PostExecute`,
    we set `Bitmap` to it. This downloading operation can take some time so that `ImageView`
    can be recycled while scrolling. This means that we are downloading an image for
    `ImageView` that is recycled in a different position on the list to display a
    different element. For instance, if we had a list of contacts with their faces,
    we would see the faces of people with the wrong names. To solve this, what we
    can do is set the String with the image link to `ImageView` as a tag, `myImageView.setTag(link)`.
    If the view is recycled, it will have a different item with a new link; therefore,
    we can check in `onPostExecute`, just before displaying the image, whether the
    link that we have now is the same as the one in the `ImageView` tag.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们启动`AsyncTask`时，我们有一个指向`ImageView`的引用，在`PostExecute`中，我们将`Bitmap`设置给它。这个下载操作可能需要一些时间，这样在滚动时`ImageView`可能会被回收。这意味着我们正在为在列表不同位置回收的`ImageView`下载图像，以显示不同的元素。例如，如果我们有一个带有联系人面孔的列表，我们可能会看到与名字不符的人脸。为了解决这个问题，我们可以做的是将图像链接的字符串设置为`ImageView`的标签，`myImageView.setTag(link)`。如果视图被回收，它将具有带有新链接的不同项目；因此，我们可以在`onPostExecute`中检查，在显示图像之前，当前的链接是否与`ImageView`标签中的链接相同。
- en: These are two common problems and their respective solutions, but we haven't
    finished here. The most tedious thing, if we continue down this road, is to create
    a cache system. Depending on the application and on the situation, we might want
    to permanently store a downloaded image. For instance, if we were creating a music
    app with a list of your favorite albums, it would make sense to store the cover
    of an album in the disk. If you are going to see the list of favorites every time
    you open the app and we know that the cover is not going to change, why not store
    the image permanently so that the next time we open the app, it loads much quicker
    and doesn't consume any data? For the user, it would mean seeing the first screen
    loaded instantly all the time and be a huge improvement to the user's experience.
    To do this, we need to download the image on a file and have a third method to
    read the image from the file later, including the logic to check whether we already
    have this image downloaded or it's the first time that we have asked for it.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个是常见问题及其相应的解决方案，但我们还没有就此结束。如果继续这样下去，最繁琐的事情就是创建一个缓存系统。根据应用和情况的不同，我们可能希望永久存储下载的图像。例如，如果我们正在创建一个带有你最喜欢的专辑列表的音乐应用，将专辑封面存储在磁盘上是有意义的。如果你每次打开应用都会看到最喜欢的列表，并且我们知道封面不会改变，为什么不永久存储图像，以便下次打开应用时加载更快，不消耗任何数据呢？对于用户来说，这意味着每次都能立即看到首屏加载，这将大大提升用户体验。为此，我们需要将图像下载到文件中，并有一个第三种方法稍后从文件中读取图像，包括检查我们是否已经下载了此图像，或者这是我们第一次请求它。
- en: Another example can be a newsfeed reader app. We know that the images are going
    to change almost every day, so there is no point in keeping them on the disk.
    However, we might still want to keep them in memory while navigating through the
    app not to download them again in the same session while coming back to an activity
    from another. In this case, we need to keep an eye on the memory usage.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个例子可以是新闻源阅读应用。我们知道图片几乎每天都会变化，所以将其保存在磁盘上没有意义。然而，在应用中导航时，我们可能仍然希望将它们保留在内存中，这样在从另一个活动回到当前活动时，在同一个会话中不需要重新下载。在这种情况下，我们需要密切关注内存使用情况。
- en: It's time to introduce some third-party libraries to help us with this topic.
    We can start with Volley, the same Volley that we implemented for network requests.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候引入一些第三方库来帮助我们处理这个问题了。我们可以从 Volley 开始，就是我们之前为网络请求实现的那个Volley。
- en: Downloading images with Volley
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Volley 下载图片
- en: 'Volley offers two mechanisms to request images. The first mechanism, `ImageRequest`,
    is very similar to what we have just done with an `AsyncTask` using Volley''s
    request queue and resizing the image on demand. This is the constructor for a
    request:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Volley 提供了两种请求图片的机制。第一种机制`ImageRequest`与我们刚才使用Volley请求队列和按需调整图片大小完成的`AsyncTask`非常相似。以下是请求的构造函数：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The `maxWidth` and `maxHeight` params will be used to resize the image; if
    we don''t want to resize, we can set the value to `0`. This is a method in our
    example used to fetch the image:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`maxWidth`和`maxHeight`参数将用于调整图片大小；如果我们不想调整大小，可以将其值设置为`0`。这是我们示例中用于获取图片的方法：'
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The second mechanism, the really interesting one, is `ImageLoader`. It handles
    multiple requests at the same time and is the mechanism to use in a list view
    for the reasons we explained in the previous section. We can create the cache
    mechanism that we want it to use—memory or disk.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个机制，真正有趣的是`ImageLoader`。它可以同时处理多个请求，并且是我们之前解释的原因在列表视图中使用的机制。我们可以创建我们希望它使用的缓存机制——内存或磁盘。
- en: 'It works using a special type of `ImageView: NetworkImageView`. When the `ImageLoader`
    object is ready, we can simply download an image with one line using `NetworkImageView`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 它通过使用一种特殊的`ImageView`：`NetworkImageView`来工作。当`ImageLoader`对象准备就绪时，我们可以使用`NetworkImageView`仅用一行代码下载图片：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'It allows us to perform different operations such as setting a default image
    or setting an image in case the request fails. Use the following code:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 它允许我们执行不同的操作，例如设置默认图片或设置请求失败时的图片。使用以下代码：
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The complexity here, if there is any, comes when we implement `ImageLoader`.
    First, we need to create it in the same way that we did with `RequestQueue` in
    the `Application` class so that it can be accessed from anywhere in our app:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的复杂性，如果有的话，在我们实现`ImageLoader`时出现。首先，我们需要以在`Application`类中创建`RequestQueue`的相同方式创建它，以便可以在我们应用中的任何位置访问：
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The constructor needs a cache implementation. Google is an example of a memory-based
    cache whose size is equal to three screens worth of images:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 构造函数需要一个缓存实现。Google 是基于内存缓存的示例，其大小等于三个屏幕的图片量：
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We can see that choosing between cache implementations is a manual process;
    we have to create the class with the implementation required and set it in the
    constructor of `ImageLoader`. That is why, the next library that we are going
    to see was a revolution when it came out.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，选择缓存实现是一个手动过程；我们必须创建具有所需实现的类，并在`ImageLoader`的构造函数中设置它。这就是为什么接下来我们要了解的库在推出时是一次革命。
- en: Introducing Picasso
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 引入 Picasso
- en: The same people that created `OkHttp` brought Picasso to the Android community.
    Picasso allows us to download and display an image in one line of code without
    creating an `ImageLoader` and with a cache implementation that automatically works
    using disk and memory. It includes image transformation, `ImageView` recycling,
    and request cancellations. All of this is free. It is unbelievable what the people
    at Square are bringing to the community.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`OkHttp`的同一批人将 Picasso 引入了 Android 社区。Picasso 允许我们仅用一行代码下载并显示图片，无需创建`ImageLoader`，并自动使用磁盘和内存的缓存实现。它包括图像转换，`ImageView`回收和请求取消。所有这些都是免费的。Square
    公司带给社区的东西令人难以置信。
- en: 'If this is not enough, the debug mode will display indicators in the images,
    a small triangle in the corner with different colors to indicate when we download
    an image for the first time (which is when it comes from the network), when it
    comes from the memory cache, and when it comes from the disk cache:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这还不够，调试模式将在图片中显示指示器，角落里的小三角形有不同的颜色，以表示我们第一次下载图片时（即从网络获取时），从内存缓存中获取，以及从磁盘缓存中获取：
- en: '![Introducing Picasso](img/4887_07_02.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![引入 Picasso](img/4887_07_02.jpg)'
- en: Mastering images
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 掌握图片处理
- en: There are two concepts that we must cover in this book before finishing this
    chapter about images. As you know, the images can be placed in multiple folders
    depending on the density of the screen—from low-density `drawable-ldpi` to high-density
    `drawable-hdpi`, extra extra-extra high-density `drawable-xxxhdpi`, and possibly
    more in the future. When we do this, we need to consider whether we want top quality
    images in all screens or a light APK. Replicating images will increase the size
    of our installer. This problem will disappear with the following component introduced
    in Android 5.0.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在结束关于图片这一章节之前，本书必须介绍两个概念。正如你所知，图片可以根据屏幕密度放在多个文件夹中——从低密度`drawable-ldpi`到高密度`drawable-hdpi`，超超高密度`drawable-xxxhdpi`，将来可能还有更多。当我们这样做时，需要考虑是希望所有屏幕都有高质量的图片，还是一个轻量级的APK。复制图片将增加我们安装程序的大小。这个问题在Android
    5.0引入的以下组件中将会消失。
- en: Vector drawables
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 矢量可绘制资源
- en: These drawables are based on vector graphics; vector graphics can be scaled
    up and scaled down without losing any quality. With this, we just need a single
    drawable, and it will have excellent quality no matter the screen we use for it,
    be it an Android watch or an Android TV.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这些可绘制资源基于矢量图形；矢量图形可以放大或缩小而不损失任何质量。有了这个特点，我们只需要一个单一的可绘制资源，无论在哪种屏幕上使用，它都能保持优良的品质，无论是安卓手表还是安卓电视。
- en: 'Vector drawables are defined in the same way that we define a shape—in an XML
    file. This is a simple `vectordrawable.xml` file:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 矢量可绘制资源的定义方式与形状的定义方式相同——在XML文件中。这是一个简单的`vectordrawable.xml`文件：
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note that the vector tag has a height and a width; if we set this drawable in
    `ImageView` and the size is smaller than the container, it will look pixelated.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 注意矢量标签有高度和宽度；如果我们把这个可绘制资源设置在`ImageView`中，且大小小于容器，它看起来会像素化。
- en: 'You may be asking yourself, where do we get the `pathData` attribute from?
    You will probably have a `.svg` image, a format for scalable graphics. This image
    can be opened with a text editor, and you should be able to see something similar
    to the path data here:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会问，我们从哪里获取`pathData`属性？你可能有一个`.svg`图像，这是可扩展图形的一种格式。这个图像可以用文本编辑器打开，你应该能看到类似以下路径数据的内容：
- en: '[PRE11]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Google provides a pack of material design icons, and these icons come with an
    SVG version; with this, you can start adding infinite scalable images to your
    app. The path that we displayed is a media player icon from this pack of icons.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌提供了一系列的材料设计图标，这些图标包含SVG版本；有了这个，你可以在应用中添加无限可扩展的图像。我们展示的路径是这组图标中的媒体播放器图标。
- en: '![Vector drawables](img/4887_07_03.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![矢量可绘制资源](img/4887_07_03.jpg)'
- en: Vector drawable will be added to the design support libraries, so it will be
    possible to use it with the previous versions of Android, not only 5.0.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 矢量可绘制资源将被添加到设计支持库中，因此它也可以在Android 5.0之前的版本中使用。
- en: The next component might not be included in the design support library, so we
    will have to consider if we want to use it or not, depending on how extensive
    version 5.0 and above is. In any case, it's worth explaining it because sooner
    or later, it will be seen more due to its amazing results.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个组件可能不包括在设计支持库中，因此我们需要考虑是否要使用它，这取决于Android 5.0及以上版本的普及程度。无论如何，它值得解释，因为迟早它会因为其惊人的效果而被更广泛地看到。
- en: Animating with AnimatedVectorDrawable
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`AnimatedVectorDrawable`进行动画制作
- en: As the name suggests, `AnimatedVectorDrawable` is a vector drawable with animations,
    and it is an important feature. These animations are not only rotation, scale,
    alpha, and so on, which are the ones we have seen previously in Android; these
    animations also allow us to transform the `pathData` attribute of the drawable.
    This means that we can have an image that changes shape or one that converts into
    another image.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 顾名思义，`AnimatedVectorDrawable`是一个带有动画的矢量可绘制资源，这是一个重要的特性。这些动画不仅仅是旋转、缩放、透明度等，这些都是我们在之前的Android版本中见过的；这些动画还允许我们改变可绘制资源的`pathData`属性。这意味着我们可以有一个改变形状的图像，或者一个转换成另一个图像的图像。
- en: This brings an infinite number of UI possibilities. For instance, we could have
    a play button converted into a semicircle that keeps spinning as a progress bar
    or a play button that transforms into a pause button.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这带来了无限多的UI可能性。例如，我们可以有一个播放按钮变成一个不断旋转的半圆进度条，或者一个播放按钮变成暂停按钮。
- en: 'We can define traditional animations, such a rotation, as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以如下定义传统动画，比如旋转：
- en: '[PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Here''s how we can define the shape transformation from a triangle to a rectangle:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是如何定义从三角形到矩形的形状转换：
- en: '[PRE13]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'To combine them together in an `AnimatedVectorDrawable` object, execute the
    following code:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 要将它们组合在一个 `AnimatedVectorDrawable` 对象中，执行以下代码：
- en: '[PRE14]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This is restricted to the paths with the same length and the same length of
    commands.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这仅限于具有相同长度和相同命令长度的路径。
- en: Working with the nine patch
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用九宫格
- en: Before explaining what a nine patch is, I will show you when it's needed. If
    we were doing a messaging application and we had to display what a user writes
    inside a chat bubble, we could think about creating `TextView` and setting an
    image of a message bubble as a background. If the message is very long, this is
    what happens without and with a nine patch background respectively.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在解释九宫格是什么之前，我将先展示在什么情况下需要它。如果我们正在开发一个消息应用，并且需要在聊天气泡中显示用户输入的内容，我们可以考虑创建一个 `TextView`
    并将消息气泡的图像设置为背景。如果消息非常长，下面分别展示了没有九宫格背景和有九宫格背景的情况。
- en: '![Working with the nine patch](img/4887_07_04.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![使用九宫格](img/4887_07_04.jpg)'
- en: We can see that the first image is stretched, and it looks bad; however, we
    don't want to stretch the borders. What we want is to keep the borders the same
    but make the text area taller or wider depending on the message.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到第一张图像被拉伸了，看起来很糟糕；然而，我们不想拉伸边界。我们想要保持边界不变，但根据消息内容使文本区域变高或变宽。
- en: A nine patch image is an image that can be resized based on its content, but
    it involves leaving some areas without any stretching. It can be created from
    an image in a PNG file. Basically, it's the same PNG file with one pixel extra
    on every side and saved with the extension, `.9.png`. When we place this in the
    `drawable` folder, Android will know that in the extra pixel, there is information
    to know which areas to stretch and which ones to not.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 九宫格图像是一种可以根据其内容调整大小的图像，但它涉及到留下一些区域不进行拉伸。它可以从 PNG 文件中的图像创建。基本上，它和 PNG 文件一样，只是在每个边上多了一个像素，并以
    `.9.png` 的扩展名保存。当我们把这个文件放在 `drawable` 文件夹中时，Android 会知道在额外的像素中有关哪些区域需要拉伸和不需要拉伸的信息。
- en: If you look at the image, you will see that the extra pixel lines to the left
    and to the top are used to specify which content is scalable, and the lines to
    the bottom and to the right are used to specify which space can be filled. We
    want to fill the box completely, but we only want to scale a certain part to the
    left.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你观察这幅图像，你会看到左侧和顶部额外的像素线用于指定哪些内容是可缩放的，底部和右侧的线条用于指定哪些空间可以被填充。我们希望完全填充这个盒子，但我们只想对左侧的某部分进行缩放。
- en: '![Working with the nine patch](img/4887_07_05.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![使用九宫格](img/4887_07_05.jpg)'
- en: Android provides a tool to create these nine patch images, and you can find
    them in your SDK folder under `tools`. Just open `draw9patch` and drag an image
    into it.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Android 提供了一个工具来创建这些九宫格图像，你可以在 SDK 文件夹下的 `tools` 目录中找到它。只需打开 `draw9patch` 并将图像拖入其中。
- en: '![Working with the nine patch](img/4887_07_06.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![使用九宫格](img/4887_07_06.jpg)'
- en: Memory management
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内存管理
- en: Every Java developer has heard of the **garbage collector** (**GC**); this is
    a mechanism that automatically frees the resources in memory for us. On some occasions,
    we can prevent the garbage collector from freeing some resources; if the resources
    keep growing, we will inevitably see `OutOfMemoryError`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 Java 开发者都听说过 **垃圾回收器** (**GC**)；这是一个自动为我们释放内存资源的机制。在某些情况下，我们可以防止垃圾回收器释放某些资源；如果资源持续增长，我们不可避免地会遇到
    `OutOfMemoryError`。
- en: If this happens, we need to locate the leak and then stop it. In this section,
    we will take a look at how to locate the source of the problem and a series of
    good practices to prevent this from happening.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果发生这种情况，我们需要定位泄漏并阻止它。在本节中，我们将了解如何定位问题的来源以及一系列防止这种情况发生的好习惯。
- en: This is not something to look into only when an error has occurred; our app
    might have leaks, not big enough to be detected with a quick test, that can lead
    to an error in a device with a smaller memory heap. Therefore, it's good to do
    a quick check on the memory levels before releasing an app.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是只有在发生错误时才需要关注的事情；我们的应用程序可能存在内存泄漏，这些泄漏在快速测试中可能不足以被检测出来，但在内存堆较小的设备上可能会导致错误。因此，在发布应用程序之前，对内存水平进行快速检查是很有必要的。
- en: Detecting and locating leaks
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检测和定位内存泄漏
- en: Android Studio provides a quick way to check the memory status. At the bottom
    window, you will find a tab called **Memory** next to `logcat` and the **ADB**
    logs.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio 提供了一种快速检查内存状态的方法。在底部窗口中，你会在 `logcat` 和 **ADB** 日志旁边找到一个名为 **Memory**
    的标签页。
- en: '![Detecting and locating leaks](img/4887_07_07.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![检测和定位内存泄漏](img/4887_07_07.jpg)'
- en: If you click on the small truck icon, which we call the garbage collector, you
    will see how the free memory increases.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你点击了被称为垃圾收集器的小卡车图标，你会看到可用内存增加了。
- en: Don't take this as a reference to the free memory because the heap is dynamic.
    This means that the heap can be 64 MB at first; we have 60 MB allocated and 4
    MB free, but we allocate 10 MB more. The heap can grow higher, and we will end
    up having a 128 MB heap, with 70MB allocated and 58 MB free.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 不要将此作为可用内存的参考，因为堆内存是动态的。这意味着堆内存最初可能是64 MB，我们有60 MB已分配和4 MB空闲，但我们再分配10 MB。堆内存可能会增长，最终我们会有一个128
    MB的堆内存，其中70MB已分配和58 MB空闲。
- en: To detect a leak, we need to take the reference of the memory allocated. Click
    on the garbage collector constantly and navigate through the app, open and close
    activities, load images, scroll the lists, and perform these actions multiple
    times. If the allocated memory keeps growing and never goes down, it means that
    we are leaking memory and preventing some resources from being collected. We can
    roughly locate in which activity or fragment the leak is happening as we will
    see the increase always at the same point (assuming we don't have more than one
    leak).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 要检测泄漏，我们需要获取分配的内存引用。不断点击垃圾收集器，并在应用中导航，打开和关闭活动，加载图片，滚动列表，多次执行这些操作。如果分配的内存持续增长并且从未下降，这意味着我们在泄漏内存，阻止了一些资源被回收。我们可以大致定位泄漏发生在哪个活动或片段，因为我们将始终在相同点看到增长（假设不止一个泄漏）。
- en: 'To locate the source more precisely, we need to use **Android Device** **Monitor**:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更精确地定位问题源头，我们需要使用**Android设备监控器**：
- en: '![Detecting and locating leaks](img/4887_07_08.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![检测和定位泄漏](img/4887_07_08.jpg)'
- en: 'Select your app process and click on **Update Heap**:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 选择你的应用进程，并点击**更新堆内存**：
- en: '![Detecting and locating leaks](img/4887_07_09.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![检测和定位泄漏](img/4887_07_09.jpg)'
- en: 'Once this is selected, we can see the allocations of the objects; this will
    be a good lead in case of bitmap or thread leaks:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 选择此项后，我们可以看到对象的分配情况；在位图或线程泄漏的情况下，这将是一个很好的线索：
- en: '![Detecting and locating leaks](img/4887_07_10.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![检测和定位泄漏](img/4887_07_10.jpg)'
- en: If we still have no clear idea of what is leaking the memory, we can click on
    the **Dum HPROF** file button and open this file with **MAT**, a memory analyzer
    tool from Eclipse. We will have to download Eclipse for this.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们仍然不清楚是什么在泄漏内存，可以点击**导出HPROF文件**按钮，并使用来自Eclipse的内存分析工具**MAT**打开此文件。为此，我们将需要下载Eclipse。
- en: 'When we import the file, we can double-click in our process and click on **List
    Objects**, which will identify what is happening. For instance, we can see how
    many objects we have in an activity and how much heap is being used:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们导入文件时，可以双击我们的进程并点击**列出对象**，这将识别正在发生的情况。例如，我们可以看到活动中有多少对象以及使用了多少堆内存：
- en: '![Detecting and locating leaks](img/4887_07_11.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![检测和定位泄漏](img/4887_07_11.jpg)'
- en: Preventing leaks
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 防止泄漏
- en: Better than fixing a memory leak is to not have it in the first place. If, during
    development, we keep in mind the most common causes of leaks, this will save us
    problems in the future.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 比起修复内存泄漏，更好的办法是根本不让它发生。如果在开发过程中，我们牢记导致泄漏最常见的原因，这将为我们将来省去许多问题。
- en: Activity and context references
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动和上下文引用
- en: Activity references are one of the main causes of this problem. It's very common
    to send a reference of our activity to a download listener or to an event listener.
    If a reference to our activity is held in another object, this will prevent the
    garbage collector from freeing our activity. For instance, if we change the orientation,
    our activity will be created again by default, and the old activity with the old
    orientation will be destroyed.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 活动引用是导致此问题的主要原因之一。我们经常将活动的引用发送给下载监听器或事件监听器，这是很常见的。如果另一个对象持有了我们活动的引用，这将阻止垃圾收集器释放我们的活动。例如，如果我们改变了屏幕方向，默认情况下将重新创建我们的活动，而具有旧方向的老活动将被销毁。
- en: Remember to unsubscribe from the listeners in the `onDestroy` method of our
    Activity and keep an eye on the objects where you send the Context; this is a
    strong reference to our Activity.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 记得在活动的`onDestroy`方法中取消监听器的订阅，并关注你发送上下文的对象；这是我们活动的强引用。
- en: Using WeakReference
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用WeakReference（弱引用）
- en: By default, when we create an object in Java, it is created with a hard reference.
    Objects different from null with hard references won't be garbage collected.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java中，当我们默认创建一个对象时，它是以强引用的形式创建的。非null对象若持有强引用，则不会被垃圾回收器回收。
- en: An object that contains only weak references will be garbage collected in the
    next cycle. The same object can have more than one reference; therefore, if we
    need to use an object temporarily, we can create a weak reference to it, and when
    the hard references are removed, it will be garbage collected.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 只包含弱引用的对象将在下一个周期被垃圾回收。同一个对象可以有多个引用；因此，如果我们需要临时使用一个对象，可以为其创建弱引用，当硬引用被移除时，它将被垃圾回收。
- en: 'This is a real-world example included in the Facebook SDK source code. They
    create a custom popup called **ToolTipPopup**, which looks similar to the following
    image:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个包含在Facebook SDK源代码中的真实世界示例。他们创建了一个名为**ToolTipPopup**的自定义弹出窗口，其外观类似于以下图像：
- en: '![Using WeakReference](img/4887_07_12.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![使用弱引用](img/4887_07_12.jpg)'
- en: 'This popup needs an anchor view, and this anchor view is referenced with a
    weak reference:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这个弹出窗口需要一个锚视图，这个锚视图是通过弱引用来引用的：
- en: '[PRE15]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The reason behind this is that by the time the popup is shown, we don't need
    the anchor view anymore. Once the popup is displayed, the anchor view can be set
    to null or made to disappear, and it won't affect us. Therefore, with a weak reference,
    if the original anchor view is destroyed and loses its hard references, it will
    also free the weak referenced object in the `ToolTipPopup` class.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这背后的原因是，在弹出窗口显示的时候，我们不再需要锚视图了。一旦弹出窗口显示，锚视图可以设置为null或使其消失，这不会影响我们。因此，使用弱引用，如果原始锚视图被销毁并失去了其硬引用，它也会在`ToolTipPopup`类中释放弱引用对象。
- en: Summary
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned how to download an image without any help from
    third-party libraries in order to understand their usage. An overview of Volley
    and Picasso leaves us ready to implement any app with perfect handling. We also
    spent some time with images that are added into our app, such as vector drawables
    and nine patch images. To finish the chapter, we saw how to manage memory problems
    in our app, and more importantly, how to prevent them.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何在不依赖任何第三方库的情况下下载图像，以理解它们的用法。对Volley和Picasso的概述使我们准备好实现任何具有完美处理的应用程序。我们还花了一些时间研究添加到我们应用程序中的图像，如矢量可绘制图像和九宫格图像。为了完成本章，我们探讨了如何在应用程序中管理内存问题，更重要的是，如何预防这些问题。
- en: In the next chapter, we will create an SQLite database. We will export this
    database through a content provider and sync the UI data with this content provider
    through `CursorLoader`.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将创建一个SQLite数据库。我们将通过内容提供者导出此数据库，并通过`CursorLoader`与内容提供者同步UI数据。
