- en: Chapter 1. Using Command-line Tools
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章. 使用命令行工具
- en: In this chapter, we will take a tour of the main command-line tools, specifically
    related to the creation and packaging of Android applications. We will learn how
    to install and configure Android NDK on Microsoft Windows, Apple OS X, and Ubuntu/Debian
    Linux, and how to build and run your first native application on an Android-based
    device. Usage of command-line tools to build your projects is essential for cross-platform
    mobile development using C++.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍主要与Android应用程序的创建和打包相关的命令行工具。我们将学习如何在Microsoft Windows、Apple OS X和Ubuntu/Debian
    Linux上安装和配置Android NDK，以及如何在Android设备上构建和运行你的第一个本地应用程序。使用命令行工具构建项目对于使用C++进行跨平台移动开发至关重要。
- en: Note
  id: totrans-2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This book is based on the Android SDK revision 24.3.3 and the Android NDK r10e.
    The source code was tested with Android API Level 23 (Marshmallow).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本书基于Android SDK修订版24.3.3和Android NDK r10e。源代码已使用Android API级别23（Marshmallow）进行测试。
- en: Our main focus will be the command-line centric and platform-independent development
    process.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的主要关注点将是命令行为中心和平台无关的开发过程。
- en: Note
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Android Studio is a very nice new portable development IDE, which has recently
    arrived at version 1.4\. However, it still has very limited NDK support and will
    not be discussed in this book.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio是一个非常不错的新便携式开发IDE，最近已更新至1.4版本。然而，它对NDK的支持仍然非常有限，本书将不对其进行讨论。
- en: Using Android command-line tools on Windows
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Windows上使用Android命令行工具
- en: To start developing native C++ applications for Android in a Microsoft Windows
    environment, you will need some essential tools to be installed on your system.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Microsoft Windows环境中开始开发Android的原生C++应用程序，你需要在系统上安装一些基本工具。
- en: 'Start NDK development for Android using the following list of all the prerequisites
    you will need:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下所需前提条件的列表开始为Android开发NDK：
- en: 'The Android SDK: You can find this at [http://developer.android.com/sdk/index.html](http://developer.android.com/sdk/index.html).
    We use revision 24.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android SDK：你可以在[http://developer.android.com/sdk/index.html](http://developer.android.com/sdk/index.html)找到它。我们使用修订版24。
- en: 'The Android NDK: You can find this at [http://developer.android.com/tools/sdk/ndk/index.html](http://developer.android.com/tools/sdk/ndk/index.html).
    We use version r10e.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android NDK：你可以在[http://developer.android.com/tools/sdk/ndk/index.html](http://developer.android.com/tools/sdk/ndk/index.html)找到它。我们使用版本r10e。
- en: 'The **Java Development Kit** (**JDK**): You can find this at [http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html).
    We use Oracle JDK Version 8.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Java开发工具包**（**JDK**）：你可以在[http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html)找到它。我们使用Oracle
    JDK版本8。'
- en: 'Apache Ant: You can find this at [http://ant.apache.org](http://ant.apache.org).
    This is a tool used to build Java applications.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache Ant：你可以在[http://ant.apache.org](http://ant.apache.org)找到它。这是用于构建Java应用程序的工具。
- en: 'Gradle: You can find this at [https://www.gradle.org](https://www.gradle.org).
    Compared to Ant, this is a more modern Java build automation tool capable of managing
    external dependencies.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Gradle：你可以在[https://www.gradle.org](https://www.gradle.org)找到它。与Ant相比，这是一个更现代的Java构建自动化工具，能够管理外部依赖。
- en: The current versions of these tools will run on Windows without using any intermediate
    compatibility layer; they do not require Cygwin any more.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这些工具的当前版本在Windows上运行时无需使用任何中间兼容层；它们不再需要Cygwin。
- en: As much as it pains us to write this, Android SDK and NDK should still be installed
    into folders that do not contain any whitespaces in their names. This is a limitation
    of build scripts within the Android SDK; the unquoted environment variables content
    are split into words based on tab, space and newline characters.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这让我们感到痛苦，但Android SDK和NDK仍应安装到不包含空格的文件夹中。这是Android SDK内部构建脚本的限制；未加引号的环境变量内容会根据制表符、空格和新行字符分割成单词。
- en: We will install the Android SDK to `D:\android-sdk-windows`, the Android NDK
    to `D:\ndk`, and other software to their default locations.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把Android SDK安装到`D:\android-sdk-windows`，Android NDK安装到`D:\ndk`，其他软件安装到它们的默认位置。
- en: In order to compile our portable C++ code for Windows, we need a decent toolchain.
    We recommend using the latest version of the MinGW from the Equation package available
    at [http://www.equation.com](http://www.equation.com). You can choose 32- or 64-bit
    versions as you go.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为了编译我们可移植的C++代码以在Windows上运行，我们需要一个像样的工具链。我们推荐使用Equation软件包提供的最新版MinGW，可在[http://www.equation.com](http://www.equation.com)获取。你可以根据需要选择32位或64位版本。
- en: 'Once all the tools are in their folders, you need to set environment variables
    to point to those install locations. The `JAVA_HOME` variable should point to
    the Java Development Kit folder:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有工具放入各自的文件夹后，你需要设置环境变量以指向这些安装位置。`JAVA_HOME` 变量应指向 Java 开发工具包文件夹：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The `NDK_HOME` variable should point to the Android NDK installation folder:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`NDK_HOME` 变量应指向 Android NDK 安装目录：'
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `ANDROID_HOME` should point to the Android SDK folder:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`ANDROID_HOME` 应指向 Android SDK 文件夹：'
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note the double backslash in the last line.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 注意最后一行中的双反斜杠。
- en: Both NDK and SDK will have new versions from time to time, so it might be helpful
    to have the version number on the folder name and manage NDK folders per project
    if necessary.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: NDK 和 SDK 将会不定期推出新版本，因此如果需要在文件夹名称中包含版本号，并按项目管理 NDK 文件夹可能会有帮助。
- en: Using Android command-line tools on OS X
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 OS X 上使用 Android 命令行工具
- en: Installation of Android development tools on OS X is straightforward. First
    of all, you will need to download the required official SDK and NDK packages from
    [http://developer.android.com/sdk/index.html](http://developer.android.com/sdk/index.html).
    As we are going for command-line tools, we can use the SDK Tools Only package
    available at [http://dl.google.com/android/android-sdk_r24.0.2-macosx.zip](http://dl.google.com/android/android-sdk_r24.0.2-macosx.zip).
    As for the NDK, OS X Yosemite works with the 64-bit Android NDK, which can be
    downloaded from [http://developer.android.com/tools/sdk/ndk/index.html](http://developer.android.com/tools/sdk/ndk/index.html).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在 OS X 上安装 Android 开发工具非常直接。首先，你需要从 [http://developer.android.com/sdk/index.html](http://developer.android.com/sdk/index.html)
    下载所需的官方 SDK 和 NDK 包。由于我们使用的是命令行工具，我们可以使用在 [http://dl.google.com/android/android-sdk_r24.0.2-macosx.zip](http://dl.google.com/android/android-sdk_r24.0.2-macosx.zip)
    可用的 SDK 工具包。至于 NDK，OS X Yosemite 可以使用 64 位 Android NDK，可以从 [http://developer.android.com/tools/sdk/ndk/index.html](http://developer.android.com/tools/sdk/ndk/index.html)
    下载。
- en: We will install all these tools into the user's home folder; in our case, it
    is `/Users/sk`.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将所有这些工具安装到用户的 home 文件夹中；在我们的例子中，它是 `/Users/sk`。
- en: 'To get Apache Ant and Gradle, the best way would be to install the package
    manager Homebrew from [http://brew.sh](http://brew.sh) and bring in the required
    tools using the following commands:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取 Apache Ant 和 Gradle，最好的方式是安装包管理器 Homebrew，访问 [http://brew.sh](http://brew.sh)
    并使用以下命令安装所需的工具：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This way you will not be bothered with installation paths and other low-level
    configuration stuff. The following are the steps to install packages and set path
    for them:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这样你就不会被安装路径和其他低级配置问题所困扰。以下是安装包和设置路径的步骤：
- en: Note
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Since the notion of this book is doing stuff from the command line, we will
    indeed do so the hard way. However, you are encouraged to actually visit the download
    page, [http://developer.android.com/sdk/index.html](http://developer.android.com/sdk/index.html),
    in your browser and check for updated versions of the Android SDK and NDK.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这本书的理念是通过命令行执行操作，我们确实会采取较为复杂的方式。不过，我们建议你实际上在浏览器中访问下载页面，[http://developer.android.com/sdk/index.html](http://developer.android.com/sdk/index.html)，检查
    Android SDK 和 NDK 的更新版本。
- en: 'Download the Android SDK for OS X from the official page and put it into your
    home directory:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从官方网站下载适用于 OS X 的 Android SDK 并将其放入你的 home 目录：
- en: '[PRE4]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Unpack it:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解压它：
- en: '[PRE5]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Then, download the Android NDK. It comes as a self-extracting binary:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，下载 Android NDK。它是一个自解压的二进制文件：
- en: '[PRE6]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'So, just make it executable and run it:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因此，只需将其设置为可执行并运行：
- en: '[PRE7]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The packages are in place. Now, add paths to your tools and all the necessary
    environment variables to the `.profile` file in your home directory:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包已就位。现在，在你的 home 目录中的 `.profile` 文件中添加工具的路径以及所有必要的环境变量：
- en: '[PRE8]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Use these variables within Android scripts and tools:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Android 脚本和工具中使用这些变量：
- en: '[PRE9]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Edit the `local.properties` file to set up the paths on a per-project basis.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑 `local.properties` 文件以按项目设置路径。
- en: Using Android command-line tools on Linux
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Linux 上使用 Android 命令行工具
- en: Installation on Linux is as easy as its OS X counterpart.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 上的安装与 OS X 一样简单。
- en: Note
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Indeed, Linux development environment is truly native for all kinds of Android
    development since all the toolchains and Android Open Source Project are based
    on Linux tools.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，由于所有工具链和 Android 开源项目都基于 Linux 工具，Linux 开发环境确实是所有类型 Android 开发的原生环境。
- en: 'Here, we will point out just some differences. First of all, we don''t need
    to install Homebrew. Just go with the available package manager. On Ubuntu, we
    prefer using `apt`. The following are the steps to install the packages as well
    as set path on Linux:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们仅指出一些不同之处。首先，我们不需要安装 Homebrew。只需使用可用的包管理器。在 Ubuntu 上，我们更愿意使用 `apt`。以下是安装包以及设置
    Linux 上的路径的步骤：
- en: 'Let''s start with updating all `apt` packages and installing the default Java
    Development Kit:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们来更新所有的 `apt` 包并安装默认的 Java 开发工具包：
- en: '[PRE10]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Install the Apache Ant build automation tool:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 Apache Ant 构建自动化工具：
- en: '[PRE11]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Install Gradle:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 Gradle：
- en: '[PRE12]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Download the official Android SDK which suits your version of Linux from [http://developer.android.com/sdk/index.html](http://developer.android.com/sdk/index.html),
    and unpack it into a folder in your home directory:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [http://developer.android.com/sdk/index.html](http://developer.android.com/sdk/index.html)
    下载适合你 Linux 版本的官方 Android SDK，并将其解压到你的主目录下的一个文件夹中：
- en: '[PRE13]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Download the official NDK package suitable for your Linux, 32- or 64-bit, and
    run it:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载适合你 Linux 系统（32位或64位）的官方 NDK 包并运行它：
- en: '[PRE14]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The executable will unpack the content of the NDK package into the current directory.
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该可执行文件将把 NDK 包的内容解压到当前目录。
- en: 'Now you can set up the environment variables to point to the actual folders:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你可以设置环境变量以指向实际的文件夹：
- en: '[PRE15]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Note
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It is useful to add environment variables definitions to `/etc/profile` or `/etc/environment`.
    This way these settings will be applicable to all the users of the system.
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将环境变量定义添加到 `/etc/profile` 或 `/etc/environment` 中很有用。这样，这些设置将适用于系统的所有用户。
- en: Creating an Ant-based application template manually
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 手动创建基于 Ant 的应用程序模板
- en: Let's start with the lowest level and create a template for our applications
    buildable with Apache Ant. Every Android application which is to be built using
    Apache Ant should contain a predefined directories structure and configuration
    `.xml` files. This is usually done using Android SDK tools and IDEs. We will explain
    how to do it by hand to let you know the machinery behind the curtains.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从最低级别开始，创建一个可使用 Apache Ant 构建的应用程序模板。每个要使用 Apache Ant 构建的应用程序都应包含预定义的目录结构和配置
    `.xml` 文件。这通常使用 Android SDK 工具和 IDE 完成。我们将解释如何手动完成，以让你了解幕后的机制。
- en: Tip
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从 [http://www.packtpub.com](http://www.packtpub.com) 的账户下载你购买的所有 Packt Publishing
    书籍的示例代码文件。如果你在其他地方购买了这本书，可以访问 [http://www.packtpub.com/support](http://www.packtpub.com/support)
    并注册，我们会直接将文件通过电子邮件发送给你。
- en: 'For this book, the source code files can be downloaded or forked from the following
    GitHub repository as well: [https://github.com/corporateshark/Mastering-Android-NDK](https://github.com/corporateshark/Mastering-Android-NDK)'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这本书，源代码文件也可以从以下 GitHub 仓库下载或派生：[https://github.com/corporateshark/Mastering-Android-NDK](https://github.com/corporateshark/Mastering-Android-NDK)
- en: 'The directory structure of our minimalistic project looks like the following
    screenshot (see the source code bundle for the complete source code):'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最小化项目的目录结构如下截图所示（完整的源代码请参见源代码包）：
- en: '![Creating an Ant-based application template manually](img/image00212.jpeg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![手动创建基于 Ant 的应用程序模板](img/image00212.jpeg)'
- en: 'We need to create the following files within this directory structure:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在此目录结构中创建以下文件：
- en: '`res/drawable/icon.png`'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`res/drawable/icon.png`'
- en: '`res/values/strings.xml`'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`res/values/strings.xml`'
- en: '`src/com/packtpub/ndkmastering/App1Activity.java`'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src/com/packtpub/ndkmastering/App1Activity.java`'
- en: '`AndroidManifest.xml`'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AndroidManifest.xml`'
- en: '`build.xml`'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`build.xml`'
- en: '`project.properties`'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`project.properties`'
- en: 'The icon `icon.png` should be there, and currently contains a dummy image of
    an Android application:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图标 `icon.png` 应该在那里，目前包含一个安卓应用程序的示例图像：
- en: '![Creating an Ant-based application template manually](img/image00213.jpeg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![手动创建基于 Ant 的应用程序模板](img/image00213.jpeg)'
- en: 'The file `strings.xml` is required to make use of the Android localization
    system. In the manifest `AndroidManifest.xml`, we use the string parameter `app_name`
    instead of the actual application name. The file `strings.xml` resolves this parameter
    into a human readable string:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 文件`strings.xml`是使用Android本地化系统所必需的。在`AndroidManifest.xml`清单文件中，我们使用字符串参数`app_name`而不是实际的应用程序名称。文件`strings.xml`将此参数解析为人类可读的字符串：
- en: '[PRE16]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The Java source code of the minimal buildable application is in the `App1Activity.java`
    file:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 最小可构建应用程序的Java源代码在`App1Activity.java`文件中：
- en: '[PRE17]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The rest three files, `AndroidManifest.xml`, `build.xml`, and `project.properties`,
    contain the description of the project necessary for Ant to build it.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 其他三个文件`AndroidManifest.xml`、`build.xml`和`project.properties`，包含了Ant构建项目所需的描述。
- en: 'The manifest `AndroidManifest.xml` is as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 清单文件`AndroidManifest.xml`如下所示：
- en: '[PRE18]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Our application will require Android 4.4 (API Level 19) and is tested with
    Android 6.0 (API Level 23):'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序将需要Android 4.4（API级别19），并且已经在Android 6.0（API级别23）上进行了测试：
- en: '[PRE19]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Most of the examples in this book will require OpenGL ES 3\. Let''s mention
    it here:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的大多数示例将需要OpenGL ES 3。在此提及一下：
- en: '[PRE20]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Here is the name of the main activity:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这是主活动的名称：
- en: '[PRE21]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We want a fullscreen application in the landscape orientation:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望应用程序在全屏模式下，且为横屏方向：
- en: '[PRE22]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Our application can be started from the system launcher. The displayable name
    of the application is stored in the `app_name` parameter:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序可以从系统启动器中启动。应用程序的可显示名称存储在`app_name`参数中：
- en: '[PRE23]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Note
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can read the official Google documentation on the application manifest at
    [http://developer.android.com/guide/topics/manifest/manifest-intro.html](http://developer.android.com/guide/topics/manifest/manifest-intro.html).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[http://developer.android.com/guide/topics/manifest/manifest-intro.html](http://developer.android.com/guide/topics/manifest/manifest-intro.html)阅读官方关于应用程序清单的Google文档。
- en: 'The file `build.xml` is much simpler and will resemble mostly what Android
    tools would generate:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 文件`build.xml`要简单得多，主要与Android工具生成的类似：
- en: '[PRE24]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: There is a difference to Android SDK Tools, since we don't use `ant.properties`
    here. This was done just for the sake of simplicity and just has an educational
    purpose.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 与Android SDK Tools相比，这里我们没有使用`ant.properties`。这样做只是为了简单起见，仅具有教育目的。
- en: 'The same situation exists with the file `project.properties`, which contains
    platform-specific declarations:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 文件`project.properties`同样包含特定平台的声明，情况类似：
- en: '[PRE25]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now, our first application (which does not even contain any native code yet)
    is ready to be built. Use the following one-liner to build it:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的第一个应用程序（甚至还没有包含任何本地代码）已经准备好构建了。使用以下命令行构建它：
- en: '[PRE26]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'If everything was done correctly, you should see the tail of the output similar
    to the following:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切操作都正确，你应该会看到类似于以下的输出尾部：
- en: '![Creating an Ant-based application template manually](img/image00214.jpeg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![手动创建基于Ant的应用程序模板](img/image00214.jpeg)'
- en: To install an `.apk` file from the command line, run `adb install -r bin/App1-debug.apk`
    to install the freshlybuilt `.apk` on your device. Start the application from
    your launcher (**AntApp1**) and enjoy the black screen. You can use the **BACK**
    key to exit the application.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 要从命令行安装`.apk`文件，请运行`adb install -r bin/App1-debug.apk`以将新构建的`.apk`安装到你的设备上。从启动器（**AntApp1**）启动应用程序，并享受黑色的屏幕。你可以使用**BACK**键退出应用程序。
- en: Creating a Gradle-based application template manually
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 手动创建基于Gradle的应用程序模板
- en: Gradle is a more versatile Java building tool compared to Ant, which lets you
    handle external dependencies and repositories with ease.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 相比于Ant，Gradle是一个更加多功能的Java构建工具，它能轻松地处理外部依赖和仓库。
- en: Note
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We recommend that you watch this video from Google available at [https://www.youtube.com/watch?v=LCJAgPkpmR0](https://www.youtube.com/watch?v=LCJAgPkpmR0)
    and read this official command-line building manual available at [http://developer.android.com/tools/building/building-cmdline.html](http://developer.android.com/tools/building/building-cmdline.html)
    before proceeding with Gradle.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议在继续使用Gradle之前，观看Google提供的[https://www.youtube.com/watch?v=LCJAgPkpmR0](https://www.youtube.com/watch?v=LCJAgPkpmR0)这个视频，并阅读官方的命令行构建手册[http://developer.android.com/tools/building/building-cmdline.html](http://developer.android.com/tools/building/building-cmdline.html)。
- en: The recent versions of Android SDK are tightly integrated with Gradle, and Android
    Studio is built using it as its build system. Let's extend our previous `1_AntApp`
    application to make it buildable with Gradle.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 近期的Android SDK版本与Gradle紧密集成，Android Studio就是使用它作为其构建系统的。让我们扩展之前的`1_AntApp`应用程序，使其能够用Gradle构建。
- en: 'First, go to the root folder of the project, and create the `build.gradle`
    file with the following content:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，进入项目的根目录，并创建一个包含以下内容的`build.gradle`文件：
- en: '[PRE27]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'After this, run the command `gradle init`. The output should be similar to
    the following:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，运行命令`gradle init`。输出结果应类似于以下内容：
- en: '[PRE28]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The subfolder `.gradle` will be created in the current folder. Now, run the
    following command:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 当前文件夹中将创建`.gradle`子文件夹。现在，运行以下命令：
- en: '[PRE29]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The tail of the output should look as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 输出的末尾应如下所示：
- en: '[PRE30]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The resulting `.apk` packages can be found in the `build\outputs\apk` folder.
    Try installing and running `2_GradleApp-debug.apk` on your device.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的`.apk`包可以在`build\outputs\apk`文件夹中找到。尝试在您的设备上安装并运行`2_GradleApp-debug.apk`。
- en: Embedding native code
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 嵌入本地代码
- en: 'Let''s stick to the topic of this book and write some native C++ code for our
    template application. We will start with the `jni/Wrappers.cpp` file, which will
    contain a single function definition:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续这本书的主题，为我们的模板应用程序编写一些本地C++代码。我们将从包含单个函数定义的`jni/Wrappers.cpp`文件开始：
- en: '[PRE31]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'This function will be called from Java using the JNI mechanism. Update `AppActivity.java`
    as follows:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数将通过JNI机制从Java中调用。如下更新`AppActivity.java`：
- en: '[PRE32]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Now, we have to build this code into an installable `.apk` package. We need
    a couple of configuration files for this. The first one, `jni/Application.mk`,
    contains the platform and toolchain information:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要将这段代码构建成一个可安装的`.apk`包。为此我们需要几个配置文件。第一个是`jni/Application.mk`，它包含平台和工具链信息：
- en: '[PRE33]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: We use the latest version of the Clang compiler—that is 3.6, as we write these
    lines, and the `armeabi-v7a-hard` target, which enables support of hardware floating
    point computations and function arguments passing via hardware floating point
    registers resulting in a faster code.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用最新版本的Clang编译器——即在我们编写这些内容时的3.6版本，以及`armeabi-v7a-hard`目标，它支持硬件浮点计算和通过硬件浮点寄存器传递函数参数，从而实现更快的代码。
- en: 'The second configuration file is `jni/Android.mk`, and it specifies which `.cpp`
    files we want to compile and what compiler options should be there:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个配置文件是`jni/Android.mk`，它指定了我们想要编译的`.cpp`文件以及应使用的编译器选项：
- en: '[PRE34]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Here, we link against OpenGL ES 2, specify compiler switches to enable the hardware
    floating point for non-x86 targets and list the required `.cpp` source files.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们链接到OpenGL ES 2，为非x86目标启用硬件浮点数的编译器开关，并列出所需的`.cpp`源文件。
- en: 'Use the following command from the root folder of the project to build the
    native code:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令从项目根目录构建本地代码：
- en: '[PRE35]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The output should be as follows:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果应如下所示：
- en: '[PRE36]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The last thing is to tell Gradle that we want to pack the resulting native
    library into the `.apk`. Edit the `build.gradle` file and add the following line
    to the `main` section of `sourceSets`:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要告诉Gradle，我们希望将生成的本地库打包进`.apk`。编辑`build.gradle`文件，在`sourceSets`的`main`部分添加以下行：
- en: '[PRE37]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Now, if we run the command `gradle build`, the resulting package `build\outputs\apk\3_NDK-debug.apk`
    will contain the required `libNativeLib.so` file. You can install and run it as
    usual. Check the line **Hello Android NDK!** printed into the Android system log
    with `adb logcat`.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们运行命令`gradle build`，生成的包`build\outputs\apk\3_NDK-debug.apk`将包含所需的`libNativeLib.so`文件。您可以像往常一样安装并运行它。使用`adb
    logcat`检查Android系统日志中打印的**Hello Android NDK!**这一行。
- en: Note
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Those who do not want to tackle Gradle in such a small project without dependencies
    will be able to use good old Apache Ant. Just run the command `ant debug` to make
    it happen. No additional configuration files are required to put shared C++ libraries
    into `.apk` this way.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 那些不想在这样的小项目中处理Gradle的人可以使用古老的Apache Ant。只需运行命令`ant debug`即可实现。这种方式不需要额外的配置文件将共享的C++库放入`.apk`。
- en: Building and signing release Android applications
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建并签署发布版的Android应用
- en: We learned how to use the command line to create Android applications with the
    native code. Let's put the final stroke on the topic of the command-line tools
    and learn how to prepare and sign the release version of your application.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学习了如何使用命令行创建带有本地代码的Android应用。让我们在命令行工具的话题上画上圆满的句号，学习如何准备并签署应用程序的发布版本。
- en: The detailed explanation of the signing procedure on Android is given in the
    developer manual at [http://developer.android.com/tools/publishing/app-signing.html](http://developer.android.com/tools/publishing/app-signing.html).
    Let's do it using Ant and Gradle.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 关于在 Android 上签名过程的详细解释，可以在开发者手册中找到，地址是 [http://developer.android.com/tools/publishing/app-signing.html](http://developer.android.com/tools/publishing/app-signing.html)。让我们使用
    Ant 和 Gradle 来完成签名。
- en: 'First of all, we need to rebuild the project and create a release version of
    the `.apk` package. Let''s do it with our `3_NDK` project. We invoke `ndk-build`
    and Apache Ant using the following commands:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要重新构建项目并创建 `.apk` 包的发布版本。让我们用 `3_NDK` 项目来做这件事。我们使用以下命令调用 `ndk-build` 和
    Apache Ant：
- en: '[PRE38]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The tail of the output from Ant looks as follows:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: Ant 输出的末尾如下所示：
- en: '[PRE39]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Let's do the same thing with Gradle. Maybe you have already noticed when we
    run gradle build there is a `3_NDK-release-unsigned.apk` file in the `build/outputs/apk`
    folder. This is exactly what we need. This will be our raw material for the signing
    procedure.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用 Gradle 做同样的事情。也许您已经注意到，当我们运行 gradle build 时，`build/outputs/apk` 文件夹中有一个
    `3_NDK-release-unsigned.apk` 文件。这正是我们所需要的。这将是我们签名过程的原材料。
- en: 'Now, we need to have a valid release key. We can create a self-signed release
    key using `keytool` from the Java Development Kit using the following command:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要一个有效的发布密钥。我们可以使用 Java 开发工具包中的 `keytool` 创建自签名的发布密钥，使用以下命令：
- en: '[PRE40]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'This will ask us to fill out all the fields necessary for the key:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 这将要求我们填写创建 `release key` 和 `keystore` 时所需的所有字段。
- en: '[PRE41]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Now, we are ready to proceed with the actual `.apk` package signing. Use the
    `jarsigner` tool from the Java Development Kit to do this:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们准备进行实际的 `.apk` 包签名。使用 Java 开发工具包中的 `jarsigner` 工具来完成这个操作：
- en: '[PRE42]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'This command is interactive, and it will require the user to enter the `keystore`
    and the `key passwords`. However, we can provide both passwords as arguments to
    this command in the following way:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令是交互式的，它将要求用户输入 `keystore` 和 `key passwords`。但是，我们可以以下面的方式将这两个密码作为参数提供给这个命令：
- en: '[PRE43]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Of course, passwords should match with what you have entered while creating
    your `release key` and `keystore`.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，密码应与您在创建 `release key` 和 `keystore` 时输入的密码相匹配。
- en: 'There is one more important thing left before we can safely proceed with publishing
    our `.apk` package on Google Play. Android applications can access uncompressed
    content within `.apk` using memory-mapped files and `mmap()` system calls, yet
    `mmap()` may imply some alignment restrictions on the underlying data. We need
    to align all uncompressed data within `.apk` on 4-byte boundaries. The Android
    SDK has the `zipalign` tool to do this, as seen in the following command:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们能够安全地在 Google Play 上发布 `.apk` 包之前，还有一件重要的事情要做。Android 应用程序可以使用内存映射文件和 `mmap()`
    系统调用来访问 `.apk` 中的未压缩内容，但 `mmap()` 可能会对底层数据施加一些对齐限制。我们需要将 `.apk` 中的所有未压缩数据按照 4
    字节边界对齐。Android SDK 有 `zipalign` 工具来完成这个操作，如下面的命令所示：
- en: '[PRE44]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Now, our `.apk` is ready to be published on Google Play.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的 `.apk` 已准备好在 Google Play 上发布。
- en: Organizing the cross-platform code
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组织跨平台代码
- en: 'This book continues the idea from our previous book *Android NDK Game Development
    Cookbook*, *Packt Publishing*: the possibility of cross-platform development using
    the principle *What You See (on a desktop PC) is What You Get (on a mobile device)*.
    Most of the application logic can be developed and tested in a familiar desktop
    environment such as Windows with all necessary tools at hand, and this can be
    built for Android using the NDK whenever necessary.'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 本书延续了我们之前出版的《*Android NDK 游戏开发手册*, *Packt Publishing*> 的思想：即使用“所见即所得”原则进行跨平台开发的可能。大部分应用程序逻辑可以在熟悉的桌面环境如
    Windows 中开发并测试，手头拥有所有必要的工具，必要时可以构建为 Android 使用 NDK。
- en: To organize and maintain the cross-platform C++ source code, we need to split
    everything into platform-specific and platform-independent parts. Our Android-specific
    native code will be stored in the `jni` subfolder of the project, exactly as we
    did in our previous minimalistic example. The shared platform-independent C++
    code will go into the `src-native` subfolder.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 为了组织和维护跨平台的 C++ 源代码，我们需要将所有内容分为平台特定和平台独立部分。我们的 Android 特定本地代码将存储在项目的 `jni` 子文件夹中，这与我们之前的简约示例完全相同。共享的平台独立
    C++ 代码将放入 `src-native` 子文件夹。
- en: Using TeamCity continuous integration server with Android applications
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 TeamCity 持续集成服务器与 Android 应用程序
- en: TeamCity is a powerful continuous integration and deployment server, which can
    be used to automate your Android application builds. This can be found at [https://www.jetbrains.com/teamcity](https://www.jetbrains.com/teamcity).
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: TeamCity 是一个强大的持续集成和部署服务器，可用于自动化你的 Android 应用构建。这可以在 [https://www.jetbrains.com/teamcity](https://www.jetbrains.com/teamcity)
    找到。
- en: Note
  id: totrans-174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: TeamCity is free for small projects that require no more than 20 build configurations
    and 3 build agents and is absolutely free for open source projects. Ask for an
    open-source license at [https://www.jetbrains.com/teamcity/buy](https://www.jetbrains.com/teamcity/buy).
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: TeamCity 对最多需要 20 个构建配置和 3 个构建代理的小型项目是免费的，对于开源项目则是完全免费的。在 [https://www.jetbrains.com/teamcity/buy](https://www.jetbrains.com/teamcity/buy)
    申请开源许可。
- en: The server installation procedure is straightforward. Windows, OS X, or Linux
    machine can be used as the server or a build agent. Here, we will show how to
    install TeamCity on Windows.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器安装过程非常直接。Windows、OS X 或 Linux 机器可以作为服务器或构建代理。这里，我们将展示如何在 Windows 上安装 TeamCity。
- en: 'Download the latest version of the installer from [https://www.jetbrains.com/teamcity/download](https://www.jetbrains.com/teamcity/download)
    and run it using the following command:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 从 [https://www.jetbrains.com/teamcity/download](https://www.jetbrains.com/teamcity/download)
    下载最新版本的安装程序，并使用以下命令运行它：
- en: '[PRE45]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Install all components and run it as **Windows Service**. For simplicity, we
    will run both the server and the agent on a single machine, as shown in the following
    screenshot:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 安装所有组件并将其作为 **Windows 服务** 运行。为了简单起见，我们将在一台机器上同时运行服务器和代理，如下面的屏幕截图所示：
- en: '![Using TeamCity continuous integration server with Android applications](img/image00215.jpeg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![在 Android 应用程序中使用 TeamCity 持续集成服务器](img/image00215.jpeg)'
- en: Choose the desired TeamCity server port. We will use the default HTTP port 80\.
    Run the **TeamCity Server** and **Agent** services under the `SYSTEM` account.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 选择所需的 TeamCity 服务器端口。我们将使用默认的 HTTP 端口 80。在 `SYSTEM` 账户下运行 **TeamCity 服务器** 和
    **代理** 服务。
- en: Once the server is online, open your browser and connect to it using the address
    `http://localhost`. Create a new project and a build configuration.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦服务器上线，打开你的浏览器并通过地址 `http://localhost` 连接到它。创建一个新项目和构建配置。
- en: Note
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To work with TeamCity, you should put the source code of your project into a
    version control system. Git and GitHub will be a good choice.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 TeamCity，你应该将你的项目源代码放入版本控制系统。Git 和 GitHub 将是一个不错的选择。
- en: If your project is already on GitHub, you can create a Git VCS root pointing
    to the URL of your GitHub repository, like this `https://github.com/<your login>/<your
    project>.git`.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的项目已经在 GitHub 上，你可以创建一个指向你的 GitHub 仓库 URL 的 Git 版本控制系统根目录，如下所示 `https://github.com/<你的登录名>/<你的项目>.git`。
- en: 'Add a new command-line build step and type the content of the script:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 添加一个新的命令行构建步骤并输入脚本的内容：
- en: '[PRE46]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: You can also add signing using `jarsigner` here and use the `zipalign` tool
    to create the final production `.apk`.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在这里添加使用 `jarsigner` 的签名，并使用 `zipalign` 工具创建最终的 `.apk` 生产文件。
- en: Now, go to the **General Settings** step and add an artifact path to `bin/3_NDK-release.apk`.
    The project is ready for continuous integration.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，进入 **通用设置** 步骤并将工件路径添加到 `bin/3_NDK-release.apk`。项目已准备好进行持续集成。
- en: Summary
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概括
- en: In this chapter, we learned how to install and configure the essential tools
    for Android native development using the command line, and how to write Android
    application basic configuration files manually without falling back to graphical
    IDEs. In the subsequent chapters, we will practice these skills and build some
    projects.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用命令行安装和配置 Android 原生开发的基本工具，以及如何不依赖图形 IDE 而手动编写 Android 应用基本配置文件。在后续章节中，我们将练习这些技能并构建一些项目。
