- en: Chapter 1. Fragments and UI Modularization
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章. 碎片和用户界面模块化
- en: This chapter introduces fragments, UI modularization, and the role fragments
    play in developing a modularized UI. The chapter demonstrates creating simple
    fragments and using fragments statically within activities.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍碎片、用户界面模块化以及碎片在开发模块化用户界面中所扮演的角色。本章将演示如何创建简单的碎片，并在活动中静态使用碎片。
- en: 'Let us have a look at the topics to be covered:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看将要讨论的主题：
- en: The need for UI modularization
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对用户界面模块化的需求
- en: Fragments are the foundation of modularization
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 碎片是模块化的基础
- en: Support for fragments across Android versions
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对跨 Android 版本的碎片支持
- en: Creating fragments
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建碎片
- en: By the end of this chapter, we will be able to create and use fragments within
    a static activity layout.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，我们将能够在静态活动布局中创建和使用碎片。
- en: The need for a new approach to UI creation
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对 UI 创建新方法的需求
- en: Chances are that the first class you learned to use when you became an Android
    developer was the `Activity` class. After all, the `Activity` class provided your
    app with a user interface. By organizing your user interface components onto an
    activity, the activity became the canvas on which you were painting your application
    masterpiece.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 你成为 Android 开发者后，可能学的第一个类就是`Activity`类。毕竟，`Activity`类为你的应用程序提供了用户界面。通过将用户界面组件组织到活动中，活动就成为了你绘制应用程序杰作的地方。
- en: In the early days of Android, building an application's user interface directly
    within an activity worked reasonably well. The majority of early applications
    had a relatively simple user interface and the number of different Android device
    form factors was small. In most cases, with the help of a few layout resources,
    a single activity worked fine across different device form factors.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android 早期，直接在活动中构建应用程序的用户界面还是相当可行的。早期的多数应用程序用户界面相对简单，而且不同的 Android 设备形态也较少。在大多数情况下，借助一些布局资源，单个活动就能很好地适应不同的设备形态。
- en: Today, Android devices come in a wide variety of form factors with incredible
    variation in their size and shape. Combine this with the rich, highly interactive
    user interfaces of modern Android applications, and the creation of a single activity
    that effectively manages the user interface across such divergent form factors
    becomes extremely difficult.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，Android 设备具有各种各样的形态，其尺寸和形状的差异性令人惊叹。结合现代 Android 应用程序丰富的、高度交互的用户界面，创建一个能够有效管理跨如此多样形态因子的用户界面的单一活动变得极其困难。
- en: A possible solution is to define one activity to provide the user experience
    for a subset of device form factors; for example, smartphones. Then define another
    activity for a different subset of form factors such as tablets. The problem with
    this approach is that activities tend to have a lot of responsibilities beyond
    simply rendering the user interface. With multiple activities performing essentially
    the same tasks, we must either duplicate the logic within each of the activities,
    or increase the complexity of our program by finding ways to share the logic across
    the activities. The approach of using different activities for different form
    factors also substantially increases the number of activities in the program,
    easily doubling or tripling the number of activities required.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 一个可能的解决方案是定义一个活动，以为一部分设备形态因子提供用户体验，例如智能手机。然后再为另一部分形态因子，如平板电脑，定义另一个活动。这种做法的问题是，活动往往需要负责很多除了渲染用户界面之外的任务。当多个活动实质上执行相同的任务时，我们必须在每个活动中复制逻辑，或者通过找到在活动间共享逻辑的方法来增加程序的复杂性。为不同形态因子使用不同活动的方法也会大大增加程序中的活动数量，容易将所需的活动数量翻倍甚至三倍。
- en: We need a better solution. We need a solution that allows us to modularize our
    application user interface into sections that we can arrange as needed within
    an activity. Fragments are that solution.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要更好的解决方案。我们需要一个能够将应用程序用户界面模块化为可以在活动中按需排列的区域的解决方案。碎片就是这样的解决方案。
- en: Android fragments allow us to partition the user interface into functional groupings
    of user interface components and logic. An activity can load and arrange the fragments
    as needed for a given device form factor. The fragments take care of the form
    factor details while the activity manages the overall user interface issues.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Android 碎片允许我们将用户界面划分为功能性用户界面组件和逻辑的分组。活动可以根据给定的设备形态因子按需加载和排列碎片。碎片负责处理形态因子的细节，而活动则管理整体的用户界面问题。
- en: The broad platform support of fragments
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 片段的广泛平台支持
- en: The `Fragment` class was added to Android at API Level 11 (Android 3.0). This
    was the first version of Android that officially supported tablets. The addition
    of tablet support exacerbated an already difficult problem; developing Android
    applications was becoming increasingly difficult because of the wide variety of
    Android device form factors.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`Fragment`类在API级别11（Android 3.0）时被添加到Android中。这是第一个正式支持平板电脑的Android版本。平板电脑支持的增加加剧了一个已经困难的问题；由于Android设备形态因素的多样性，开发Android应用程序变得越来越困难。'
- en: Fortunately, fragments provide a solution to the problem. With fragments, we
    can much more easily create applications that support a variety of form factors,
    because we can partition our user interfaces into effective groupings of components
    and their associated logic.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，片段为我们提供了一个解决问题的方案。通过片段，我们可以更容易地创建支持各种形态因素的应用程序，因为我们能够将用户界面划分为有效的组件组合及其相关的逻辑。
- en: There was one problem with fragments. Up until very recently, the majority of
    Android devices had an API Level below 11 and therefore didn't support fragments.
    Fortunately, Google released the Android Support Library, available at [http://developer.android.com/tools/extras/support-library.html](http://developer.android.com/tools/extras/support-library.html),
    which makes fragments available to any device running API Level 4 (Android 1.6)
    or above. With the Android Support Library, fragments are now available to virtually
    every Android device in use.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 片段有一个问题。直到最近，大多数Android设备的API级别都在11以下，因此不支持片段。幸运的是，谷歌发布了Android支持库，可以在[http://developer.android.com/tools/extras/support-library.html](http://developer.android.com/tools/extras/support-library.html)获取，这使得任何运行API级别4（Android
    1.6）或更高版本的设备都能使用片段。通过Android支持库，片段现在几乎可以在所有正在使用的Android设备上使用。
- en: Note
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Applications created with Android Studio automatically include the Android Support
    Library, and therefore support fragments on virtually all SDK versions in use.
    If you will be using a development tool other than Android Studio to create applications
    that target devices running on a SDK level below 11, see the Android Developers
    Blog post, *Fragments For All*, available at [http://android-developers.blogspot.com/2011/03/fragments-for-all.html](http://android-developers.blogspot.com/2011/03/fragments-for-all.html),
    for directions on manually adding the Android Support Library to your projects.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Android Studio创建的应用程序会自动包含Android支持库，因此几乎在所有使用的SDK版本上都支持片段。如果你将使用除Android
    Studio以外的开发工具来创建针对运行在SDK级别11以下设备的应用程序，请访问[http://android-developers.blogspot.com/2011/03/fragments-for-all.html](http://android-developers.blogspot.com/2011/03/fragments-for-all.html)，查看Android开发者博客文章《*Fragments
    For All*》，了解如何手动将Android支持库添加到你的项目中。
- en: Fragments simplify common Android tasks
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 片段简化了常见的Android任务
- en: Fragments not only simplify the way we create our application user interfaces
    but they also simplify many of the built-in Android user interface tasks. User
    interface concepts such as tabbed displays, list displays, and dialog boxes have
    all historically had distinctly different approaches. When we think about it,
    though, they are all variations on a common concept, that is, combining user interface
    components and logic into a functional group. Fragments formalize this concept,
    and therefore allow us to take a consistent approach to these formerly disparate
    tasks. We talk about each of these issues in detail as well as some of the specialized
    fragment classes such as the `DialogFragment` class and the `ListFragment` class
    later in this book.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 片段不仅简化了我们创建应用程序用户界面的方式，还简化了许多内置的Android用户界面任务。诸如标签显示、列表显示和对话框等用户界面概念，在历史上都有明显不同的处理方法。然而，当我们深入思考时，它们实际上都是将用户界面组件和逻辑组合成一个功能组的共同概念的变体。片段正式化了这一概念，因此允许我们以前对这些不同的任务采取一致的处理方法。我们将在本书后面详细讨论这些问题以及一些专门的片段类，如`DialogFragment`类和`ListFragment`类。
- en: The relationship between fragments and activities
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 片段与活动之间的关系
- en: Fragments do not replace activities but rather supplement them. A fragment always
    exists within an activity. An activity instance can contain any number of fragments
    but a given fragment instance can only exist within a single activity. A fragment
    is closely tied to the activity on which it exists and the lifetime of that fragment
    is tightly coupled to the lifetime of the containing activity. We'll talk much
    more about the close relationship between the lifetime of a fragment and the containing
    activity in [Chapter 3](ch03.html "Chapter 3. Fragment Lifecycle and Specialization"),
    *Fragment Lifecycle and Specialization*.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 片段并不替代活动，而是对其进行补充。一个片段总是存在于一个活动中。一个活动实例可以包含任意数量的片段，但给定的片段实例只能存在于一个单一活动中。一个片段与其所在的活动紧密相关，该片段的生命周期与其包含活动的生命周期紧密耦合。我们将在[第3章](ch03.html
    "第3章. 片段生命周期和专业化")，*片段生命周期和专业化*中更多地讨论片段的生命周期与其包含活动的紧密关系。
- en: One thing we don't want to do is make the common mistake of overusing fragments.
    So often when someone learns about fragments, they make the assumption that every
    activity must contain fragments, and that's simply not the case.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不想犯的一个常见错误是过度使用片段。通常当有人了解到片段时，他们会假设每个活动都必须包含片段，但这并非总是如此。
- en: As we go through this book, we'll discuss the features and capabilities of fragments
    and a variety of scenarios where they work well. We'll always want to keep those
    in mind as we're building our applications. In those situations where fragments
    add value, we definitely want to use them. However, it is equally important that
    we avoid complicating our applications by using fragments in those cases where
    they do not provide value.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在阅读本书的过程中，我们将讨论片段的功能和特性以及它们在各种场景中的优势。在构建应用程序时，我们始终要牢记这些。在片段能增加价值的情况下，我们当然希望使用它们。然而，同样重要的是，我们应避免在片段不能提供价值的情况下使用片段，以免使应用程序复杂化。
- en: Making the shift to fragments
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 转向使用片段
- en: Although fragments are a very powerful tool, fundamentally they do something
    very simple. Fragments group user interface components and their associated logic.
    Creating the portion of your user interface associated with a fragment is very
    much like doing so for an activity. In most cases, the view hierarchy for a particular
    fragment is created from a layout resource; although, just as with activities,
    the view hierarchy can be programmatically generated.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管片段是一个非常强大的工具，但它们本质上做的事情非常简单。片段将用户界面组件及其相关逻辑分组。为与片段相关的用户界面创建部分与为活动创建非常相似。在大多数情况下，特定片段的视图层次结构是从一个布局资源创建的；尽管如此，与活动一样，视图层次结构也可以编程生成。
- en: Creating a layout resource for a fragment follows the same rules and techniques
    as doing so for an activity. The key difference is that we're looking for opportunities
    to partition our user interface layout into manageable subsections when working
    with fragments.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为片段创建布局资源遵循与为活动创建相同的规则和技术。关键的区别在于，在使用片段时，我们正在寻找将用户界面布局划分为可管理的子部分的机会。
- en: The easiest way to get started working with fragments is for us to walk through
    converting a traditional activity-oriented user interface to use fragments.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过将传统的以活动为中心的用户界面转换为使用片段来开始使用片段是最简单的方法。
- en: The old thinking – activity-oriented
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 旧的思维方式——以活动为中心
- en: 'To get started, let''s first look at the appearance and structure of the application
    we''re going to convert. This application contains a single activity that, when
    run, looks like the following screenshot:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看看我们要转换的应用程序的外观和结构。这个应用程序包含一个单一活动，运行时看起来如下截图所示：
- en: '![The old thinking – activity-oriented](img/3095_01_01_NEW.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![旧的思维方式——以活动为中心](img/3095_01_01_NEW.jpg)'
- en: The activity displays a list of five book titles in the top portion of the activity.
    When the user selects one of those books titles, the description of that book
    appears in the bottom portion of the activity.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 活动在活动顶部显示五个书名的列表。当用户选择这些书名中的一个时，所选书籍的描述将出现在活动的底部。
- en: Defining the activity appearance
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义活动的外观
- en: 'The appearance of the activity is defined in a layout resource file named `activity_main.xml`
    that contains the following layout description:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 活动的显示外观在名为`activity_main.xml`的布局资源文件中定义，该文件包含以下布局描述：
- en: '[PRE0]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Tip
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您的账户 [http://www.packtpub.com](http://www.packtpub.com) 下载您购买的所有 Packt 书籍的示例代码文件。如果您在别处购买了这本书，可以访问
    [http://www.packtpub.com/support](http://www.packtpub.com/support) 注册，我们会将文件直接通过电子邮件发送给您。
- en: 'This layout resource is reasonably simple and is explained as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这个布局资源相对简单，以下是其解释：
- en: The overall layout is defined within a vertically-oriented `LinearLayout` element
    containing the two `ScrollView` elements
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 整体布局是在一个垂直方向的 `LinearLayout` 元素中定义的，其中包含两个 `ScrollView` 元素。
- en: Both of the `ScrollView` elements have a `layout_weight` value of `1` that causes
    the top-level `LinearLayout` element to divide the screen equally between the
    two `ScrollView` elements
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个 `ScrollView` 元素都有一个 `layout_weight` 值为 `1`，这使得顶级 `LinearLayout` 元素能够在两个 `ScrollView`
    元素之间平均分配屏幕。
- en: The top `ScrollView` element, with the `id` value of `scrollTitles`, wraps a
    `RadioGroup` element containing a series of the `RadioButton` elements, one for
    each book
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 顶部的 `ScrollView` 元素，其 `id` 值为 `scrollTitles`，包装了一个包含一系列 `RadioButton` 元素的 `RadioGroup`
    元素，每个书籍对应一个。
- en: The bottom `ScrollView` element, with the `id` value of `scrollDescription`,
    contains a `TextView` element that displays the selected book's description
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 底部的 `ScrollView` 元素，其 `id` 值为 `scrollDescription`，包含一个 `TextView` 元素，用于显示所选书籍的描述
- en: Displaying the activity UI
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 显示活动用户界面
- en: The application's activity class, `MainActivity`, inherits directly from the
    `android.app.Activity` class. To display the activity's user interface, we override
    the `onCreate` method and call the `setContentView` method passing the `R.layout.activity_main`
    layout resource ID.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序的活动类 `MainActivity` 直接继承自 `android.app.Activity` 类。为了显示活动的用户界面，我们重写 `onCreate`
    方法并调用 `setContentView` 方法，传递 `R.layout.activity_main` 布局资源ID。
- en: '[PRE1]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The new thinking – fragment-oriented
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 新的思考方式——面向片段
- en: The activity-oriented user interface we currently have would be fine if all
    Android devices had the same form factor. As we've discussed, that's not the case.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们目前的活动导向型用户界面在所有Android设备具有相同形态因数的情况下是没问题的。正如我们所讨论的，情况并非如此。
- en: We need to partition the application user interface so that we can switch to
    a fragment-oriented approach. With proper partitioning, we can be ready to make
    some simple enhancements to our application to help it adapt to device differences.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要将应用程序用户界面进行分区，这样我们就可以转向面向片段的方法。通过适当的分区，我们可以准备对我们的应用程序进行一些简单的增强，以帮助它适应设备差异。
- en: Let's look at some simple changes we can make that will partition our user interface.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们可以进行的一些简单更改，这些更改会将我们的用户界面分区。
- en: Creating the fragment layout resources
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建片段布局资源
- en: The first step in moving to a fragment-oriented user interface is to identify
    the natural partitions in the existing user interface. In the case of this application,
    the natural partitions are reasonably easy to identify. The list of book titles
    is one good candidate, and the book description is the other. We'll make them
    each a separate fragment.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 向面向片段的用户界面转变的第一步是识别现有用户界面中的自然分区。在这个应用程序的案例中，自然分区相对容易识别。书名列表是一个很好的候选者，书籍描述是另一个。我们将它们各自做成一个独立的片段。
- en: Defining the layout as a reusable list
  id: totrans-55
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 将布局定义为可重用的列表
- en: For the list of book titles, we have the option to define the fragment to contain
    either the `ScrollView` element that's nearest to the top (has an `id` value of
    `scrollTitles`) or just the `RadioGroup` element within that `ScrollView` element.
    When creating a fragment, we want to structure it such that the fragment is most
    easily reused. Although the `RadioGroup` element is all we need to display the
    list of titles, it seems likely that we'll always want the user to be able to
    scroll the list of titles if necessary. With this being the case, it makes sense
    to include the `ScrollView` element in this fragment.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 对于书名列表，我们可以选择定义一个包含最靠近顶部的 `ScrollView` 元素（其 `id` 值为 `scrollTitles`）的片段，或者只包含该
    `ScrollView` 元素内的 `RadioGroup` 元素。创建片段时，我们希望构建它，以便片段最容易复用。尽管我们只需要 `RadioGroup`
    元素来显示标题列表，但似乎我们总是希望用户在必要时能够滚动标题列表。在这种情况下，将 `ScrollView` 元素包含在此片段中是有意义的。
- en: 'To create a fragment for the book list, we define a new layout resource file
    called `fragment_book_list.xml`. We copy the top `ScrollView` element and its
    contents from the `activity_main.xml` resource file to the `fragment_book_list.xml`
    resource file. The resulting `fragment_book_list.xml` resource file is as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建书籍列表的片段，我们定义了一个名为`fragment_book_list.xml`的新布局资源文件。我们从`activity_main.xml`资源文件中复制顶部的`ScrollView`元素及其内容到`fragment_book_list.xml`资源文件中。结果`fragment_book_list.xml`资源文件如下：
- en: '[PRE2]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This gives us a layout resource consistent with the book title portion of the
    user interface as it appeared in the activity layout resource. This is a good
    start.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这让我们得到了一个与用户界面中书名部分一致的活动布局资源。这是一个良好的开始。
- en: Minimize assumptions
  id: totrans-60
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 最小化假设
- en: An effective fragment-oriented user interface is constructed with layout resources
    that minimize assumptions about where and how the fragment is used. The fewer
    assumptions we make about a fragment's use, the more reusable the fragment becomes.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 一个有效的以片段为导向的用户界面是由最小化关于片段如何以及在哪里使用的假设的布局资源构建的。我们对片段使用的假设越少，片段的可重用性就越高。
- en: The layout in the `fragment_book_list.xml` resource file as we now have it is
    very limiting because it includes significant assumptions. For example, the root
    `ScrollView` element includes a `layout_height` attribute with a value of `0`.
    This assumes that the fragment will be placed within a layout that calculates
    the height for the fragment.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当前我们在`fragment_book_list.xml`资源文件中的布局非常受限，因为它包含了很多假设。例如，根`ScrollView`元素包含一个`layout_height`属性，其值为`0`。这假设了片段将被放置在计算片段高度的布局中。
- en: A `layout_height` attribute value of `0` prevents the `ScrollView` element from
    properly rendering when we use the fragment within any of the many layouts that
    require the `ScrollView` element to specify a meaningful height. A `layout_height`
    attribute value of `0` prevents the fragment from properly rendering even when
    doing something as simple as placing the fragment within a horizontally oriented
    `LinearLayout` element. The `layout_weight` attribute has similar issues.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用`layout_height`属性值为`0`的片段时，在需要`ScrollView`元素指定有意义的高度的许多布局中，`ScrollView`元素无法正确渲染。即使将片段放入水平方向的`LinearLayout`元素中这样简单的操作，`layout_height`属性值为`0`也会导致片段无法正确渲染。`layout_weight`属性也存在类似问题。
- en: In general, a good practice is to design the fragment to fully occupy whatever
    space it is placed within. This gives the layout in which the fragment is used
    the most control over the placement and sizing of the fragment.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，一个好的实践是设计片段以完全占据其所在的任何空间。这样，使用该片段的布局就能最大程度地控制片段的位置和大小。
- en: To do this, we'll remove the `layout_weight` attribute from the `ScrollView`
    element and change the `layout_height` attribute value to `match_parent`. Because
    the `ScrollView` element is now the root node of the layout resource, we also
    need to add the `android` namespace prefix declaration.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们将从`ScrollView`元素中移除`layout_weight`属性，并将`layout_height`属性值更改为`match_parent`。因为现在`ScrollView`元素是布局资源的根节点，我们还需要添加`android`命名空间前缀声明。
- en: 'The following code snippet shows the updated `ScrollView` element:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码片段展示了更新后的`ScrollView`元素：
- en: '[PRE3]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: With the updated `ScrollView` element, the fragment layout can now adapt to
    almost any layout it's referenced within.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 使用更新后的`ScrollView`元素，片段布局现在可以适应几乎任何引用它的布局。
- en: Encapsulating the display layout
  id: totrans-69
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 封装显示布局
- en: For the book description, we'll define a layout resource file called `fragment_book_desc.xml`.
    The fragment layout includes the contents of the activity layout resource's bottom
    `ScrollView` element (has an `id` value of `scrollDescription`). Just as in the
    book list fragment, we'll remove the `layout_weight` attribute, set the `layout_height`
    attribute to `match_parent`, and add the `android` namespace prefix declaration.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 对于书籍描述，我们将定义一个名为`fragment_book_desc.xml`的布局资源文件。片段布局包括活动布局资源底部`ScrollView`元素的内容（其`id`值为`scrollDescription`）。就像在书籍列表片段中一样，我们将移除`layout_weight`属性，将`layout_height`属性设置为`match_parent`，并添加`android`命名空间前缀声明。
- en: 'The `fragment_book_desc.xml` layout resource file appears as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`fragment_book_desc.xml`布局资源文件如下所示：'
- en: '[PRE4]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Creating the Fragment class
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建片段类
- en: Just like when creating an activity, we need more than a simple layout definition
    for our fragment; we also need a class.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 与创建活动时一样，我们的片段不仅需要简单的布局定义；还需要一个类。
- en: Wrapping the list in a fragment
  id: totrans-75
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在片段中包装列表
- en: All fragment classes must extend the `android.app.Fragment` class either directly
    or indirectly.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 所有片段类必须直接或间接扩展 `android.app.Fragment` 类。
- en: Note
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For projects that rely on the Android Support Library to provide fragment support
    for pre-API Level 11 (Android 3.0) devices, use the `android.support.v4.app.Fragment`
    class in place of the `android.app.Fragment` class.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 对于依赖 Android 支持库为 API 级别 11（Android 3.0）之前的设备提供片段支持的项目，请使用 `android.support.v4.app.Fragment`
    类代替 `android.app.Fragment` 类。
- en: 'We''ll call the class for the fragment that manages the book list, `BookListFragment`.
    The class will directly extend the `Fragment` class as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将管理书籍列表的片段类称为 `BookListFragment`。这个类将直接扩展 `Fragment` 类，如下所示：
- en: '[PRE5]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: During the creation of a fragment, the Android framework calls a number of methods
    on that fragment. One of the most important of these is the `onCreateView` method.
    The `onCreateView` method is responsible for returning the view hierarchy represented
    by the fragment. The Android framework attaches that returned view hierarchy for
    the fragment to the appropriate place in the activity's overall view hierarchy.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建片段时，Android 框架会调用片段上的许多方法。其中最重要的方法之一是 `onCreateView`。`onCreateView` 方法负责返回由片段表示的视图层次结构。Android
    框架将返回的片段视图层次结构附加到活动的整体视图层次结构中的适当位置。
- en: In a case like the `BookListFragment` class where the `Fragment` class inherits
    directly from the `Fragment` class, we must override the `onCreateView` method
    and perform the work necessary to construct the view hierarchy.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在像 `BookListFragment` 类这样的情况中，如果 `Fragment` 类直接从 `Fragment` 类继承，我们必须重写 `onCreateView`
    方法并执行构造视图层次结构所需的工作。
- en: 'The `onCreateView` method receives three parameters. We''ll focus on just the
    first two for now:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`onCreateView` 方法接收三个参数。现在我们重点关注前两个：'
- en: '`inflater`: This is a reference to a `LayoutInflater` instance that is able
    to read and expand layout resources within the context of the containing activity'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`inflater`：这是对 `LayoutInflater` 实例的引用，它能够在包含活动的上下文中读取和扩展布局资源。'
- en: '`container`: This is a reference to the `ViewGroup` instance within the activity''s
    layout where the fragment''s view hierarchy is to be attached'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`container`：这是对活动布局中 `ViewGroup` 实例的引用，片段的视图层次结构将附加到该位置。'
- en: 'The `LayoutInflater` class provides a method called `inflate` that handles
    the details of converting a layout resource into the corresponding view hierarchy
    and returns a reference to the root view of that hierarchy. Using the `LayoutInflater.inflate`
    method, we can implement our `BookListFragment` class'' `onCreateView` method
    to construct and return the view hierarchy corresponding to the `R.layout.fragment_book_list`
    layout resource as shown in the following code:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`LayoutInflater` 类提供了一个名为 `inflate` 的方法，该方法处理将布局资源转换为相应的视图层次结构并返回该层次结构的根视图的引用。使用
    `LayoutInflater.inflate` 方法，我们可以实现 `BookListFragment` 类的 `onCreateView` 方法，以构造并返回与
    `R.layout.fragment_book_list` 布局资源对应的视图层次结构，如下面的代码所示：'
- en: '[PRE6]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You'll notice in the preceding code we include the `container` reference and
    a Boolean value of `false` in the call to the `inflate` method. The `container`
    reference provides the necessary layout parameters for the `inflate` method to
    properly format the new view hierarchy. The parameter value of `false` indicates
    that `container` is to be used only for the layout parameters. If this value were
    true, the `inflate` method would also attach the new view hierarchy to the `container`
    view group. We do not want to attach the new view hierarchy to the `container`
    view group in the `onCreateView` method because the activity will handle that.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到在前面的代码中，我们在调用 `inflate` 方法时包含了 `container` 引用和一个布尔值 `false`。`container`
    引用为 `inflate` 方法提供了必要的布局参数，以便正确格式化新的视图层次结构。参数值 `false` 表示 `container` 只用于布局参数。如果这个值是
    true，`inflate` 方法还会将新的视图层次结构附加到 `container` 视图组。我们不想在 `onCreateView` 方法中将新的视图层次结构附加到
    `container` 视图组，因为活动会处理这个问题。
- en: Providing the display fragment
  id: totrans-89
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 提供显示片段
- en: 'For the book description fragment, we''ll define a class called `BookDescFragment`.
    This class is identical to the `BookListFragment` class except the `BookDescFragment`
    class uses the `R.layout.fragment_book_desc` layout resource as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 对于书籍描述片段，我们将定义一个名为 `BookDescFragment` 的类。这个类与 `BookListFragment` 类相同，不同之处在于
    `BookDescFragment` 类使用 `R.layout.fragment_book_desc` 布局资源，如下所示：
- en: '[PRE7]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Converting the activity to use fragments
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将活动转换为使用片段
- en: 'With the fragments defined, we can now update the activity to use them. To
    get started, we''ll remove all the book titles and description layout information
    from the `activity_main.xml` layout resource file. The file now contains just
    the top-level `LinearLayout` element and comments to show where the book titles
    and description belong as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 定义了片段之后，我们现在可以更新活动以使用它们。首先，我们将从 `activity_main.xml` 布局资源文件中删除所有书籍标题和描述布局信息。现在该文件只包含顶级
    `LinearLayout` 元素和注释，以显示书籍标题和描述应该放置的位置，如下所示：
- en: '[PRE8]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Using the `fragment` element, we can add a fragment to the layout by referencing
    the fragment''s class name with the `name` attribute. For example, we reference
    the book list fragment''s class, `BookListFragment`, as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `fragment` 元素，我们可以通过引用片段类的类名来将片段添加到布局中，使用 `name` 属性。例如，以下是我们如何引用书籍列表片段类 `BookListFragment`：
- en: '[PRE9]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We want our activity user interface to appear the same using fragments as it
    did before we converted it to use fragments. To do this, we add the same `layout_width`,
    `layout_height`, and `layout_weight` attribute values to the fragment elements
    as were on the `ScrollView` elements in the original layout.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望使用片段时，活动的用户界面看起来与转换前一样。为此，我们在片段元素上添加与原始布局中 `ScrollView` 元素相同的 `layout_width`、`layout_height`
    和 `layout_weight` 属性值。
- en: 'With that, the complete layout resource file for the activity, `activity_main.xml`,
    now looks like the following code:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，活动的完整布局资源文件 `activity_main.xml` 现在如下所示：
- en: '[PRE10]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you are working with Android Studio, you might find a `tools:layout` attribute
    on the `fragment` element. This attribute is used by Android Studio to provide
    a preview of the layout within the graphical designer. It has no effect on your
    application's appearance when the application is run.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在使用 Android Studio，你可能会在 `fragment` 元素上发现一个 `tools:layout` 属性。这个属性由 Android
    Studio 使用，以便在图形设计器中提供布局预览。当应用程序运行时，它对应用程序的外观没有任何影响。
- en: When the application is run, the user interface will now appear exactly as it
    did when it was defined entirely within the activity. If we're targeting Android
    devices running API Level 11 (Android 3.0) or later, there is no need to make
    any changes to the `Activity` class because the `Activity` class is simply loading
    and displaying the layout resource at this point.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序运行时，用户界面现在将完全按照在活动中定义时的样子出现。如果我们针对的是运行 API 级别 11（Android 3.0）或更高版本的 Android
    设备，那么无需对 `Activity` 类进行任何更改，因为此时 `Activity` 类只是加载并显示布局资源。
- en: Activities and backward compatibility
  id: totrans-103
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 活动和向后兼容性
- en: When using the Android Support Library to provide pre-API Level 11 (Android
    3.0) fragment support, we have one additional step. In this case, we have to make
    one small, but important change to our activity. We must change the `MainActivity`
    class' base class from the `Activity` class to the `android.support.v4.app.FragmentActivity`
    class. Because the pre-API Level 11 `Activity` class doesn't understand fragments,
    we use the `FragmentActivity` class from the Android Support Library to add fragment
    support to our `MainActivity` class.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 Android 支持库来提供 API 级别 11（Android 3.0）之前的片段支持时，我们还需要多做一步。在这种情况下，我们必须对活动进行一个小但重要的更改。我们必须将
    `MainActivity` 类的基础类从 `Activity` 类更改为 `android.support.v4.app.FragmentActivity`
    类。因为 API 级别 11 之前的 `Activity` 类不理解片段，所以我们使用 Android 支持库中的 `FragmentActivity` 类来为
    `MainActivity` 类添加片段支持。
- en: Summary
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: The shift from the old thinking of being activity-oriented to the new thinking
    of being fragment-oriented opens our applications up to rich possibilities. Fragments
    allow us to better organize both the appearance of the user interface and the
    code we use to manage it. With fragments, our application user interface has a
    more modular approach that frees us from being tied to the specific capabilities
    of a small set of devices and prepares us to work with the rich devices of today,
    and the wide variety of new devices to come tomorrow.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 从以活动为导向的旧思维转向以片段为导向的新思维，为我们的应用程序开启了丰富的可能性。片段使我们能更好地组织用户界面的外观以及用于管理它的代码。借助片段，我们应用程序的用户界面采用了更加模块化的方法，使我们摆脱了特定设备功能的限制，为应对当今丰富多样的设备以及未来可能出现的新设备做好了准备。
- en: In the next chapter, we'll build on the modularized user interface we've created
    with fragments to enable our application to automatically adapt to differences
    in the various device form factors with only minimal changes to our application.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将基于用片段创建的模块化用户界面继续构建，以使我们的应用程序能够自动适应各种设备形态的差异，而只需对我们的应用程序进行最小的更改。
