- en: Chapter 4. User Input
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章 用户输入
- en: 'So far, we have added the graphics that move around the screen and collide
    with each other, but it is not fun yet, since the player cannot control our main
    character and it would not be a game unless our user can interact with it. In
    this chapter we will add user interaction to our game. The following topics will
    be covered within this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经添加了在屏幕上移动并相互碰撞的图形，但这还不够有趣，因为玩家无法控制我们的主角，除非用户能够与之互动，否则它就不能算是一个游戏。在本章中，我们将向游戏中添加用户交互。本章将涵盖以下主题：
- en: Understanding the Event Dispatcher mechanism
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解事件分发机制
- en: Handling the touch event
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理触摸事件
- en: Handling the accelerometer events
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理加速计事件
- en: Keeping the screen alive
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保持屏幕活跃
- en: Handling the Android back key pressed event
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理Android返回键按下事件
- en: Understanding the Event Dispatcher mechanism
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解事件分发机制
- en: Event handling is now different from how it was in the previous version (version
    2) of Cocos2d-x. From version 3.0 onwards, we now have a unified event dispatching
    mechanism, called Event Dispatcher, that handles all sorts of user input events,
    which may happen during the game.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 从Cocos2d-x的先前版本（版本2）开始，事件处理现在有所不同。从3.0版本开始，我们现在有一个统一的事件分发机制，称为事件分发器，它处理游戏中可能发生的各种用户输入事件。
- en: We can handle many kinds of user input events, such as touches, keyboard key
    press, acceleration, and mouse motion. In the following sections we will cover
    how to handle the user input events that relate to mobile games, such as touch,
    and accelerometer.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以处理多种类型的用户输入事件，例如触摸、键盘按键按下、加速度和鼠标移动。在以下各节中，我们将介绍如何处理与移动游戏相关的用户输入事件，例如触摸和加速计。
- en: There are many classes that allow us to listen for each of the previously mentioned
    events; once we have instantiated any of these classes, we need to add them to
    the event dispatcher so, when a user event is triggered, it will call the method
    defined by its corresponding listener.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多类允许我们监听之前提到的事件；一旦我们实例化了这些类中的任何一个，我们需要将其添加到事件分发器中，以便在触发用户事件时，它会调用相应监听器定义的方法。
- en: You can access the event dispatcher either by the `_eventDispatcher` instance
    attribute inherited from the `Node` class, or by calling the `getEventDispatcher`
    static method located in the Cocos2d-x API `Director` class.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过从`Node`类继承的`_eventDispatcher`实例属性访问事件分发器，或者调用位于Cocos2d-x API `Director`类中的`getEventDispatcher`静态方法。
- en: Note
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Cocos2d-x Event Dispatcher mechanism uses the observer design pattern, which
    is the pattern used for handling the user input events on the Android native applications.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Cocos2d-x的事件分发机制使用了观察者设计模式，这是用于处理Android原生应用程序上用户输入事件的模式。
- en: Handling the touch event
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理触摸事件
- en: The most common way to create interaction between games and users is through
    touch events. Handling the touch event is very straightforward in Cocos2d-x.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在游戏和用户之间创建交互的最常见方式是通过触摸事件。在Cocos2d-x中处理触摸事件非常直接。
- en: In this section, we will allow the user to move our player sprite by touching
    it and moving it to the desired position.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将允许用户通过触摸并移动到所需位置来移动我们的玩家精灵。
- en: 'The first thing that we will do is create the `initTouch`, `movePlayerByTouch`,
    and `movePlayerIfPossible` methods in the `HelloWorldScene.h` class header file,
    as we can see in the following code listing:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先要做的是在`HelloWorldScene.h`类头文件中创建`initTouch`、`movePlayerByTouch`和`movePlayerIfPossible`方法，正如我们以下代码清单中看到的那样：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now let us add the initialization code to the `initTouch` method in the implementation
    file `HelloWorldScene.cpp`. In this simple game, we are going to use a single
    touch that is going to be used to move around our bunny character, no multi-touch
    handling is required.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们将初始化代码添加到实现文件`HelloWorldScene.cpp`中的`initTouch`方法中。在这个简单的游戏中，我们将使用单一触摸来四处移动我们的兔子角色，不需要处理多点触控。
- en: In order to handle the single touch, we will create a new instance of the `EventListenerTouchOneByOne`
    class, then we are going to specify what our game should do when the touch event
    begins, when the touch is moving, and when the touch event ends. In the following
    code listing, after instantiating the `EventListenerTouchOneByOne` class, we will
    specify the methods that should be called when the events `onTouchBegan`, `onTouchMoved`,
    and `onTouchEnded` are triggered. For the purpose of the current game, we are
    only going to be using the `onTouchMoved` event. For this we are going to create
    a callback to our method, `movePlayerByTouch`, for the other two methods we are
    going to create empty structures through the lambda functions. You can learn more
    about the C++ lambda functions from the link [http://en.cppreference.com/w/cpp/language/lambda](http://en.cppreference.com/w/cpp/language/lambda).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理单一触摸，我们将创建`EventListenerTouchOneByOne`类的新实例，然后我们将指定当触摸事件开始、移动和结束时游戏应该做什么。在以下代码清单中，实例化`EventListenerTouchOneByOne`类之后，我们将指定当触发`onTouchBegan`、`onTouchMoved`和`onTouchEnded`事件时应调用的方法。出于当前游戏的目的，我们只使用`onTouchMoved`事件。为此，我们将创建一个回调到我们的方法`movePlayerByTouch`，对于另外两个方法，我们将通过lambda函数创建空的结构。你可以通过链接[http://en.cppreference.com/w/cpp/language/lambda](http://en.cppreference.com/w/cpp/language/lambda)了解更多关于C++
    lambda函数的信息。
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: By convention, all the C++ member variables are named with an underscore prefix.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 按照约定，所有的C++成员变量都使用下划线前缀命名。
- en: 'Now that we have encapsulated all the touch listener initialization codes into
    one method, let us call it our `init` method by adding the following line at the
    end of the method:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经将所有触摸监听器初始化代码封装到一个方法中，让我们在方法的末尾添加以下行来调用它，我们称之为`init`方法：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We will now create the `movePlayerIfPossible` method. This will move the player
    sprite only if the new requested position on the horizontal axis is not out of
    the screen limits, as we can see in the illustration. This method will be used
    to move our player sprite with the touch input event, and it is also going to
    be used in the next section where we are going to move our player sprite by using
    the accelerometer.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将创建`movePlayerIfPossible`方法。这个方法只会在水平轴上的新请求位置没有超出屏幕限制时移动玩家精灵，正如我们可以在插图中看到的那样。这个方法将用于通过触摸输入事件移动我们的玩家精灵，并且在下一节中我们也将使用它通过加速度计移动我们的玩家精灵。
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![Handling the touch event](img/B04193_04_01.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![处理触摸事件](img/B04193_04_01.jpg)'
- en: Note
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In this method, we have used the "Tell, Don't Ask" design principle by making
    the validation in the method that verifies whether the player goes out of the
    screen in the method. This has saved us from repeating the logic of validating
    if the player sprite is out of the screen in the touch and accelerometer event
    handling methods.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个方法中，我们采用了“告诉，不要询问”的设计原则，通过在验证玩家是否超出屏幕的方法中进行验证。这使我们避免了在触摸和加速度事件处理方法中重复验证玩家精灵是否超出屏幕的逻辑。
- en: 'Finally, we will now create the `movePlayerByTouch` method, which will be called
    by the event dispatcher as soon as a touch event is triggered. In this method,
    we are going to evaluate the location on the screen, and whether the place where
    the user has touched the screen intersects the sprite''s bounding rectangle:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们现在将创建`movePlayerByTouch`方法，该方法将在触发触摸事件后立即由事件调度器调用。在这个方法中，我们将评估屏幕上的位置，以及用户触摸屏幕的地方是否与精灵的边界矩形相交：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Handling multi-touch events
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理多点触控事件
- en: In the previous sections, we enabled the touch event required for this game,
    which is a single touch; nevertheless, Cocos2d-x also handles the multi-touch
    capability, which we will cover in this section.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的部分中，我们启用了这个游戏所需的触摸事件，这是一个单一触摸；然而，Cocos2d-x也处理多点触控功能，我们将在本节中介绍。
- en: 'Although our game does not require the multi-touch feature, we will create
    a test code so that we can move our player sprite and our bomb simultaneously.
    In order to do this, we are going to add the methods, `initMultiTouch` and `moveByMultitouch`,
    at the end of our `HelloWorldScene.h` header file as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们的游戏不需要多点触控功能，但我们将创建一个测试代码，以便我们可以同时移动我们的玩家精灵和炸弹。为了做到这一点，我们将在`HelloWorldScene.h`头文件的末尾添加`initMultiTouch`和`moveByMultitouch`方法，如下所示：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, let us add its implementation to the `HelloWorldScene.cpp` implementation
    file. We will begin by the `initMultiTouch` initialization method:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将实现添加到`HelloWorldScene.cpp`实现文件中。我们将从`initMultiTouch`初始化方法开始：
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here we can find similarities with the previous single-touch initialization
    method, but there are many differences, the most notorious one is that we are
    now instantiating the `EventListenerTouchAllAtOnce` class, instead of instantiating
    the `EventListenerTouchOneByOne` class as we had previously done. Although its
    event properties are named like its single-touch version, you may notice that
    they are now written in the plural, so that it is now referring to the touches
    instead of the touch, for example, `onTouchesBegan`. Now, it will also expect
    a different set of parameters, since we will now work with multiple touches, the
    event methods will now receive a `std::vector` parameter, where it will receive
    the collection of the touches that have occurred simultaneously.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以找到与之前单点触控初始化方法的相似之处，但有许多不同之处，最显著的是我们现在实例化的是`EventListenerTouchAllAtOnce`类，而不是像之前那样实例化`EventListenerTouchOneByOne`类。尽管它的事件属性与单点触控版本命名相似，但您可能注意到它们现在是用复数形式书写的，因此现在指的是touches而不是touch，例如`onTouchesBegan`。现在，它也将期待一组不同的参数，因为我们将处理多点触控，事件方法将接收一个`std::vector`参数，其中包含同时发生的触控集合。
- en: 'As shown in the previous code, we are going to call our `moveByMultiTouch`
    method every time our player moves the touches around, so we are now showing the
    implementation code for this method:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如之前的代码所示，每当玩家移动触控时，我们将调用我们的`moveByMultiTouch`方法，因此我们现在展示此方法的实现代码：
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As you can see from the previous code we are now handling multiple touches,
    and in the `moveByMultiTouch` method we are iterating through all the touches,
    and for each one, we are verifying if it is touching either our bomb or our bunny
    player sprite, and if it does so, then it will move the touched sprite to the
    touched location.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在前面的代码中所见，我们现在正在处理多点触控，在`moveByMultiTouch`方法中，我们正在遍历所有的触控，并对每一个触控进行验证，看它是否触摸到我们的炸弹或兔子玩家精灵，如果是，那么它将把被触摸的精灵移动到触摸位置。
- en: 'Finally, let us call the `initMultiTouch` initialization method at the end
    of our `init` method as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们在`init`方法的末尾调用`initMultiTouch`初始化方法，如下所示：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: As previously mentioned, the objective of this section is to show you how simple
    it is to handle the multi-touch events; nevertheless, since we are not going to
    use it in our game, you may remove the call to the `initMultiTouch` method that
    we have just added to our `init` method, as soon as you finish testing the multi-touch
    feature.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，本节的目的是向您展示处理多点触控事件是多么简单；然而，由于我们的游戏中不会使用它，一旦您完成多点触控功能的测试，就可以从我们的`init`方法中删除对`initMultiTouch`方法的调用。
- en: Handling accelerometer events
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理加速度计事件
- en: Another common way of interacting between the game and the player is the accelerometer,
    which allows us to have hours of fun by moving our phone around in order to move
    our character and achieve the game's objective.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏与玩家之间互动的另一种常见方式是加速度计，它允许我们通过移动手机来移动我们的角色，以达到游戏的目标，从而获得数小时的乐趣。
- en: 'In order to add the accelerometer support to our game, we are first going to
    add the following method declaration to our `HelloWorldScene.h` header file:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将加速度计支持添加到我们的游戏中，我们首先将在`HelloWorldScene.h`头文件中添加以下方法声明：
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, let us create the code to our `HelloWorld.cpp` implementation file that
    corresponds to our accelerometer initialization. The first thing that we are going
    to do is enable the accelerometer sensor on the device, by calling the static
    method `setAccelerometerEnabled` located on the `Device` class, then we are going
    to create the event listener that will listen to the accelerometer''s events and
    finally, we will add it to the event dispatcher, as shown in the following code:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们为对应的加速度计初始化创建`HelloWorld.cpp`实现文件中的代码。我们首先要做的是通过调用`Device`类上的静态方法`setAccelerometerEnabled`来启用设备上的加速度计传感器，然后我们将创建一个事件监听器来监听加速度计的事件，最后，我们将它添加到事件分发器中，如下面的代码所示：
- en: '[PRE10]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The most common way to add an event listener to the dispatcher is through the
    `addEventListenerWithSceneGraphPriority` method, which will assign the *z* order
    of the node sent as the second parameter as its priority. This is useful when
    we have many listeners that are triggered at the same time and we want to specify
    which code should run first.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 向分发器添加事件监听器的最常见方式是通过`addEventListenerWithSceneGraphPriority`方法，该方法将把作为第二个参数传递的节点的*z*顺序作为其优先级。当我们有多个同时被触发的监听器，而想要指定哪个代码应该首先运行时，这非常有用。
- en: At this point, we have initialized the accelerometer, and we have created in
    the previous section, the `movePlayerIfPossible` method that will move the player
    sprite and make sure that it will not go out of the screen limits. Now we are
    going to create the implementation code for the `movePlayerByAccelerometer` method,
    which is going to be called as soon as an accelerometer event is triggered. Since
    the acceleration value that we get is very low, we multiply it by ten so that
    our player sprite moves faster.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在此阶段，我们已经初始化了加速度计，并且在上一节中创建了`movePlayerIfPossible`方法，该方法将移动玩家精灵，并确保其不会超出屏幕限制。现在我们将要为`movePlayerByAccelerometer`方法编写实现代码，该方法将在加速度计事件触发后立即被调用。由于我们获得的加速度值非常低，因此我们将其乘以十，以便我们的玩家精灵移动得更快。
- en: '[PRE11]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Finally, let us call our accelerometer initialization code at the end of our
    `init` method from the `HelloWorldScene.cpp` implementation file as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们在`HelloWorldScene.cpp`实现文件的`init`方法末尾调用我们的加速度计初始化代码，如下所示：
- en: '[PRE12]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Keeping the screen alive
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保持屏幕常亮
- en: In the previous section we added the accelerometer interaction to our game,
    which means that our player is controlling the main character by moving the phone
    rather than by touching the screen, this will cause many android devices to turn
    off the screen after a period of inactivity (not touching the screen). Of course,
    no one would like that our Android device's screen suddenly goes black; in order
    to prevent this from happening, we will call the `setKeepScreenOnJni` method,
    introduced in the previous version 3.3 of the framework. Prior to this version,
    this annoying situation was considered a framework flaw, and now it has finally
    been fixed.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们向游戏中添加了加速度计交互，这意味着我们的玩家是通过移动手机而不是触摸屏幕来控制主角的，这将导致许多Android设备在一段时间不活动（不触摸屏幕）后关闭屏幕。当然，没有人希望我们的Android设备的屏幕突然变黑；为了防止这种情况发生，我们将调用`setKeepScreenOnJni`方法，这是在框架的前一个版本3.3中引入的。在此版本之前，这种恼人的情况被认为是框架的缺陷，现在终于得到了修复。
- en: 'We first need to include the helper in our `HelloWorldScene.cpp` header file
    as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要在`HelloWorldScene.cpp`头文件中包含助手，如下所示：
- en: '[PRE13]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Then, we are going to add the following line at the end of our `init` method
    in the `HelloWorldScene.cpp` implementation file:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将在`HelloWorldScene.cpp`实现文件的`init`方法末尾添加以下行：
- en: '[PRE14]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Handling the Android back key pressed event
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理Android后退键按下事件
- en: A common mistake that I have seen in many games developed by using Cocos2d-x
    is that the game does nothing when the back button is pressed. Android users are
    used to pressing the back button whenever they want to go back to the previous
    activity. If the application does nothing when the back button is pressed, then
    it would confuse the user because it would not be an expected behavior, less experienced
    users may even have a hard time trying to exit the game.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我在很多使用Cocos2d-x开发的游戏中看到的一个常见错误是，当按下后退按钮时游戏不做任何反应。Android用户习惯于在想要返回上一个活动时按下后退按钮。如果应用程序在按下后退按钮时没有任何反应，那么它会让用户感到困惑，因为这不符合预期行为，经验不足的用户甚至可能很难退出游戏。
- en: We can easily trigger a custom code any time the user presses the back button
    by adding an `EventListenerKeyboard` method to our event dispatcher.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过向事件分发器中添加`EventListenerKeyboard`方法，轻松地在用户按下后退按钮时触发自定义代码。
- en: 'First we are going to add the `initBackButtonListener` and `onKeyPressed` method
    declarations in our `HelloWorldScene.h` header file, as shown in the following
    code listing:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将在`HelloWorldScene.h`头文件中添加`initBackButtonListener`和`onKeyPressed`方法的声明，如下代码清单所示：
- en: '[PRE15]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now, let us add the implementation code for our `initBackButtonListener` in
    our `HelloWorldScene.cpp` implementation file. We are first going to instantiate
    the `EventListenerKeyboard` class, then we are required to specify the methods
    that are going to be called on the `onKeyPressed` event and the `onKeyReleased`
    event or we will get a runtime error. We are going to create an empty method implementation
    and assign it to the `onKeyPressed` property through the C++11 lambda expressions,
    and then we are going to add a callback to our `onKeyPressed` method for the listener''s
    `onkeyRelease` property. Then, as we had done previously, we will add this listener
    to the event dispatcher mechanism:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在`HelloWorldScene.cpp`实现文件中添加`initBackButtonListener`的实现代码。我们首先实例化`EventListenerKeyboard`类，然后需要指定在`onKeyPressed`事件和`onKeyReleased`事件发生时要调用的方法，否则我们将遇到运行时错误。我们将创建一个空的方法实现，并通过C++11的lambda表达式将其分配给`onKeyPressed`属性，然后我们将为监听器的`onKeyReleased`属性添加一个回调到我们的`onKeyPressed`方法。然后，像之前所做的那样，我们将这个监听器添加到事件分发机制中：
- en: '[PRE16]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We are now going to implement the code for our `onKeyPressed` method. This
    will tell the `Director` to end the game, if the key pressed is the back button
    key:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将实现`onKeyPressed`方法的代码。这将告诉`Director`，如果按下的键是后退按钮键，则结束游戏：
- en: '[PRE17]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Finally, we will call the `initBackButtonListener` method at the end of the
    `init` method as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将在`init`方法的末尾调用`initBackButtonListener`方法，如下所示：
- en: '[PRE18]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Note
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Be aware that you should add the `EventListenerKeyboard` listener to the event
    dispatcher in each scene where you want to catch the back button pressed event.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，你应该在每个想要捕获后退按钮按下事件的场景中，将`EventListenerKeyboard`监听器添加到事件分发器中。
- en: Putting everything together
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将所有内容整合到一起
- en: 'After all the codes that we have added during this chapter, now, our `HelloWorldScene.h`
    header file will look like this:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中添加了所有代码之后，现在我们的`HelloWorldScene.h`头文件将如下所示：
- en: '[PRE19]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The final `HelloWorldScene.cpp` implementation file will look like this:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 最终的`HelloWorldScene.cpp`实现文件将如下所示：
- en: '[PRE20]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Next, we will try to move the player, so that it does not go outside the screen:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将尝试移动玩家，使其不会移出屏幕外：
- en: '[PRE21]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'As you can see in the following two methods, `initTouch` and `initAccelerometer`,
    we have created functions for each initializing task. This will allow us to simplify
    our code, and make it easier to read:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，在以下两个方法`initTouch`和`initAccelerometer`中，我们为每个初始化任务创建了函数。这将使我们能够简化代码，使其更容易阅读：
- en: '[PRE22]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now, we will initialize physics. To do this, we will call the initPhysics()
    method from within init():'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将初始化物理引擎。为此，我们将在`init()`方法中调用`initPhysics()`方法：
- en: '[PRE23]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: As we can see in the following image, we finally got our bunny to move around
    the screen and leave its initial central position.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如下图所示，我们最终让兔子在屏幕上移动并离开了它的初始中心位置。
- en: '![Putting everything together](img/B04193_04_02.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![将所有内容整合到一起](img/B04193_04_02.jpg)'
- en: Note
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Please note that in the previous code listing we have omitted the segments of
    the code that are not relevant to this chapter. If you want to see how the complete
    code listing looks at this point, then you can find it in the resource materials
    bundled with this book.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在之前的代码列表中，我们省略了与本章不相关的代码部分。如果你想了解到目前为止完整的代码列表是什么样子，你可以查看随书附带的资源材料。
- en: Summary
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we allowed the user to control our game by using two different
    input mechanisms, that is, touching the screen and moving the phone around in
    order to use the accelerometer sensor; we have also made our game stop whenever
    the back button is pressed.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们允许用户通过两种不同的输入机制来控制游戏，即触摸屏幕和移动手机以使用加速度传感器；同时，我们还实现了按下后退按钮时游戏暂停的功能。
- en: In the next chapter, we will cover the different ways of adding text to our
    games.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将介绍向游戏中添加文本的不同方法。
