- en: Chapter 6. Audio
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第六章. 音频
- en: The Cocos2d-x framework comes with an audio engine called `CocosDenshion`, which
    has been inherited from Cocos2d for iPhone. This engine encapsulates all the complexity
    of playing sound effects and background music. Now, Cocos2d-x has another audio
    engine that was built from scratch with the aim of providing more flexibility
    than the `CocosDenshion` library. Be aware that there is no plan to eliminate
    the `CocosDenshion` audio engine from the Cocos2d-x framework, it is now common
    in Cocos2d-x to have redundant components so that programmers can pick whatever
    fits their needs better.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Cocos2d-x框架带有一个名为`CocosDenshion`的音频引擎，它从Cocos2d for iPhone继承而来。这个引擎封装了播放声音效果和背景音乐的所有复杂性。现在，Cocos2d-x有一个从零开始构建的新的音频引擎，旨在提供比`CocosDenshion`库更多的灵活性。请注意，没有计划从Cocos2d-x框架中消除`CocosDenshion`音频引擎，现在在Cocos2d-x中通常会有冗余的组件，以便程序员可以选择更适合他们需求的部分。
- en: 'The following topics will be covered within this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Playing background music and sound effects
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 播放背景音乐和声音效果
- en: Modifying the audio properties
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改音频属性
- en: Handling audio when leaving the game
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 离开游戏时处理音频
- en: The new audio engine
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的音频引擎
- en: Playing background music and sound effects
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 播放背景音乐和声音效果
- en: 'In order to add the background music to our game by using the `CocosDenshion`
    audio engine, the first step is to add the following file inclusion to our `HelloWorldScene.cpp`
    implementation file:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为了通过使用`CocosDenshion`音频引擎向我们的游戏中添加背景音乐，第一步是在我们的`HelloWorldScene.cpp`实现文件中添加以下文件包含：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In this header file, within the private member segment, we will also add the
    declaration of our new `initAudio` method, which we are going to use for starting
    our background music and for preloading the audio effect that is going to be played
    each time a bomb crashes into our `player` sprite:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个头文件中，我们将在私有成员部分也添加我们新的`initAudio`方法的声明，该方法将用于启动背景音乐以及预加载每次`player`精灵被炸弹撞击时要播放的音效：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now in the `HelloWorld.cpp` implementation file, we are going to use the `CocosDenshion`
    namespace so that we don''t have to implicitly refer to this namespace each time
    that we access the audio engine singleton instance:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在`HelloWorld.cpp`实现文件中，我们将使用`CocosDenshion`命名空间，这样我们在每次访问音频引擎单例实例时就不必隐式引用这个命名空间：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now in the same implementation file, we are going to write the body of the `initAudio`
    method, which as we have previously mentioned will start playing a looped music
    background. We are providing this along with the source code of this chapter,
    and we are going to preload the audio effect that is going to be played each time
    our player loses. The second parameter of the `playBackgroundMusic` method is
    a Boolean, which determines whether or not we would like our background music
    to repeat forever.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在同一个实现文件中，我们将编写`initAudio`方法的主体，正如我们之前提到的，它将开始播放循环的背景音乐。我们提供了这一章的源代码，并将预加载每次我们的玩家失败时要播放的音效。`playBackgroundMusic`方法的第二个参数是一个布尔值，它决定了我们是否希望背景音乐永远重复。
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Let us create a folder called `sounds` in our `Resources` directory, so that
    we can add all our sound files there in an organized way. After doing this, we
    will need to add the following line to our `AppDelegate.cpp` implementation file
    after the instantiation of `searchPaths std::vector` for adding the `sounds` directory
    to the search path so that the audio engine can find our files:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`Resources`目录中创建一个名为`sounds`的文件夹，这样我们可以把所有的声音文件以有组织的方式放在那里。完成此操作后，我们需要在`AppDelegate.cpp`实现文件中实例化`searchPaths
    std::vector`之后添加以下行，将`sounds`目录添加到搜索路径中，以便音频引擎可以找到我们的文件：
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We encourage you to organize your `Resources` folder, create a folder for sounds
    with subfolders for audio and music, so that we don't have everything in the root
    directory.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们鼓励您组织您的`Resources`文件夹，为音频和音乐创建一个声音文件夹以及子文件夹，这样我们就不必把所有内容都放在根目录下。
- en: 'Let us go to the `onCollision` method that is called each time two physics
    bodies collide. If the player sprite''s physics body is involved in a crash, then
    we are going to stop the background music and play the `uh.wav` sound effect before
    changing to the game over scene by adding the following lines of code:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们转到每次两个物理体碰撞时调用的`onCollision`方法。如果玩家的精灵物理体涉及到碰撞，那么我们将在添加以下代码行之后停止背景音乐并播放`uh.wav`音效，然后切换到游戏结束场景：
- en: '[PRE5]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Finally, we are going to add a call for our `initAudio` method at the end of
    the `init` method in the `HelloWorld.cpp` implementation file:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将在`HelloWorld.cpp`实现文件中的`init`方法末尾添加对我们`initAudio`方法的调用：
- en: '[PRE6]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Modifying audio properties
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改音频属性
- en: 'You can easily modify the background music and the basic audio properties of
    the sound effect by calling the `setBackgroundMusicVolume` method and the `setEffectsVolume`
    method. Both receive a `float` value as a parameter, where `0.0` means mute and
    `1.0` means maximum volume, as the following code listing shows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过调用`setBackgroundMusicVolume`方法和`setEffectsVolume`方法轻松修改背景音乐和声音效果的基本音频属性。两者都接收一个`float`类型的参数，其中`0.0`表示静音，`1.0`表示最大音量，如下面的代码清单所示：
- en: '[PRE7]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Handling audio when leaving the game
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理离开游戏时的音频
- en: 'When the game activity is no longer active, the background music and the sound
    effects will not stop automatically, they should be stopped manually by removing
    the following comment block from the `applicationDidEnterBackgound` method in
    the `AppDelegate` class:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当游戏活动不再处于活动状态时，背景音乐和声音效果不会自动停止，应该通过从`AppDelegate`类的`applicationDidEnterBackgound`方法中移除以下注释块来手动停止：
- en: '[PRE8]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In order to make this new line of code work, we need to add the same line that
    we have added to the `HelloWorld.cpp` implementation file in order to use the
    `CocosDenshion` namespace:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让这行新代码工作，我们需要在`HelloWorld.cpp`实现文件中添加相同的行，以便使用`CocosDenshion`命名空间：
- en: '[PRE9]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Your game will stop all the current sounds when the user switches to another
    application. We need to resume the music as soon as the user returns to our game.
    We can do that in the same way as we did before, but now, we will remove the following
    comment block from the `applicationWillEnterForeground` method in the `AppDelegate`
    class:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户切换到另一个应用程序时，您的游戏将停止所有当前的声音。用户一回到我们的游戏，我们就需要恢复音乐。我们可以像以前一样做，但现在，我们将从`AppDelegate`类的`applicationWillEnterForeground`方法中移除以下注释块：
- en: '[PRE10]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The new audio engine
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 新的音频引擎
- en: Cocos2d-x 3.4 in its experimental phase had a new audio engine built from scratch
    in order to add more functionalities and flexibility. The new audio engine of
    Cocos2d-x is now available for the Android, iOS, the Mac OS, and the win-32 platforms.
    It is able to reproduce up to 24 simultaneous sounds on the Android platform;
    this number may change depending on the platform.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在Cocos2d-x 3.4的实验阶段，从头开始构建了一个新的音频引擎，以便添加更多功能和灵活性。现在Cocos2d-x的新音频引擎可用于Android、iOS、Mac
    OS和win-32平台。它能够在Android平台上同时播放多达24个声音；这个数字可能会根据平台的不同而改变。
- en: If you run the tests bundled with the Cocos2d-x framework, then you can test
    both of the audio engines. At runtime, they may sound without any apparent difference
    but they are internally very different.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您运行与Cocos2d-x框架捆绑的测试，那么您可以测试两个音频引擎。在运行时，它们可能听起来没有明显差异，但它们在内部是非常不同的。
- en: Unlike the `CocosDenshion` engine, there is no distinction between the sound
    effect and the background music in this new engine. Therefore, the framework has
    only one `setVolume` method in contrast to `CocosDenshion`, which has two methods—`setBackgroundMusicVolume`
    and the `setEffectsVolume`. Later on in this section, we will show you how to
    adjust the volume of each played audio regardless of whether or not it is a sound
    effect of the background music.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 与`CocosDenshion`引擎不同，这个新引擎中声音效果和背景音乐没有区别。因此，与`CocosDenshion`的两个方法—`setBackgroundMusicVolume`和`setEffectsVolume`相比，框架只有一个`setVolume`方法。在本节后面，我们将向您展示如何调整每个播放音频的音量，无论它是声音效果还是背景音乐。
- en: Let us add a new method declaration to our `HelloWorldScene.h` header file named
    `initAudioNewEngine`, which as its name suggests will initialize the audio capabilities
    of our game, but it will now use the new audio engine for the same.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`HelloWorldScene.h`头文件中添加一个新的方法声明，名为`initAudioNewEngine`，顾名思义，它将初始化我们游戏的音频功能，但现在它将使用新的音频引擎来完成同样的任务。
- en: 'We need to include the new engine header in our `HelloWorldScene.h` file as
    follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在我们的`HelloWorldScene.h`文件中包含新的引擎头文件，如下所示：
- en: '[PRE11]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Let us include the following line of code in our `HelloWorld.cpp` implementation
    file, so that we can invoke the `AudioEngine` class directly without referring
    to its namespace each time we want to use it:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`HelloWorld.cpp`实现文件中包含以下代码行，以便我们可以直接调用`AudioEngine`类，而无需每次使用时都引用其命名空间：
- en: '[PRE12]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now, let us write our code for the `initAudioNewEngine` method inour implementation
    file as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们按照以下方式在我们的实现文件中编写`initAudioNewEngine`方法的代码：
- en: '[PRE13]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In contrast to `CocosDenshion`, which uses a singleton instance, the new audio
    engine has all of its methods declared static.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 与使用单例实例的`CocosDenshion`不同，新音频引擎的所有方法都是静态声明的。
- en: As we can see from the previous code listing, we are calling the `lazyInit`
    method before calling the `play2d` method. Despite the fact that `play2d` calls
    the `lazyInit` method internally, we want to know as soon as possible whether
    or not our Android system is going to be able to reproduce the audio and take
    actions. Be aware that you also need to find out whether something is wrong with
    the audio initialization when the `play2d` method returns the `AudioEngine::INVALID_AUDIO_ID`
    value.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的代码清单中我们可以看到，在调用`play2d`方法之前，我们调用了`lazyInit`方法。尽管`play2d`内部调用了`lazyInit`方法，但我们希望尽快知道我们的Android系统是否能够播放音频并采取行动。请注意，当`play2d`方法返回`AudioEngine::INVALID_AUDIO_ID`值时，您还需要找出音频初始化是否出现了问题。
- en: Each time that we play any given sound by calling the `play2d` method, it will
    return a unique incremental `audioID` zero-basedindex, which we will store, so
    that we can refer to that specific audio instance each time that we want to perform
    a particular action on it, such as change volume, move to a specific position,
    stop, pause, or resume.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 每次我们通过调用`play2d`方法播放任意声音时，它都会返回一个唯一的递增的基于零的`audioID`索引，我们将保存它，这样每次我们想要对该特定音频实例执行特定操作时，比如更改音量、移动到特定位置、停止、暂停或恢复，我们都可以引用它。
- en: 'One disadvantage of the new audio engine is that it still has a limited amount
    of supported audio formats. It does not currently support the `.wav` files. So
    in order to play the `uh.wav` sound, we will convert it to mp3 and then we will
    play it in the `onCollision` method by invoking `play2d` as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 新音频引擎的一个缺点是它仍然支持有限的音频格式。它目前不支持`.wav`文件。因此，为了播放`uh.wav`声音，我们将它转换为mp3，然后在`onCollision`方法中通过如下调用`play2d`来播放：
- en: '[PRE14]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We have included the new `uh.mp3` audio file in the code resources archive provided
    with this chapter.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章提供的代码资源存档中包含了新的`uh.mp3`音频文件。
- en: For our game, we are going to implement both; the traditional `CocosDenshion`
    engine, which is the most mature audio engine that provides us with the basic
    features that we need, such as playing the sound effects and the background music;
    and the same audio functionalities in the new engine.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的游戏，我们将实施两种方案；传统的`CocosDenshion`引擎，这是最成熟的音频引擎，为我们提供了所需的基本功能，比如播放音效和背景音乐；以及新引擎中的相同音频功能。
- en: New features included in the new audio engine
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 新音频引擎中包含的新功能
- en: 'The `play2d` method is overloaded so that we can specify whether we want to
    loop the sound, the initial volume, and the audio profile that we would like to
    apply to it. The `AudioProfile` class is a part of the Cocos2d-x framework, it
    has only three properties: `name`, which cannot be empty; `maxInstances`, which
    will define how many sounds will be played simultaneously; and `minDelay`, which
    is a `double` data type that will specify what the minimum delay between the sounds
    is going to be.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`play2d`方法被重载，以便我们可以指定是否希望声音循环播放、初始音量以及我们希望应用的声音配置文件。`AudioProfile`类是Cocos2d-x框架的一部分，它只有三个属性：`name`，不能为空；`maxInstances`，将定义将同时播放多少个声音；以及`minDelay`，它是一个`double`数据类型，将指定声音之间的最小延迟。'
- en: Another feature that the new audio engine has is the ability to play an audio
    from a custom position by calling the `setCurrentTime` method and passing the
    `audioID` method and the custom position in seconds, which are represented by
    a `float`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 新音频引擎具有的另一个功能是，通过调用`setCurrentTime`方法并传递`audioID`方法和以秒为单位的自定义位置（由`float`表示）来从自定义位置播放音频。
- en: In the new audio engine, you can specify that you would like to invoke a function
    when a given audio instance has completed playing. This can be done by calling
    the `setFinishCallback` method.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在新音频引擎中，您可以指定在给定音频实例播放完成时您希望调用的函数。这可以通过调用`setFinishCallback`方法来实现。
- en: Each time an audio is played, it is cached so that it is not necessary to read
    it again from the filesystem. If we would like to free some resources, then we
    could call the `uncacheAll` method to remove all the buffer that is used internally
    by the audio engine for playing back the audio, or you could remove any specific
    audio from the cache by calling the `uncache` method and specifying the path of
    the file of the filesystem that you want to remove.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 每次播放音频时，它都会被缓存，因此无需再次从文件系统中读取。如果我们想要释放一些资源，可以调用`uncacheAll`方法来移除音频引擎内部用于回放音频的所有缓冲区，或者可以通过调用`uncache`方法并指定要移除的文件系统中的文件路径来从缓存中移除任何特定的音频。
- en: The purpose of this section was to make you aware of another audio engine that
    is in an experimental phase, and if there is any audio feature that you would
    like to add to your game, which `CocosDenshion` does not have, then you should
    check the other audio engine to see whether it has what you are looking for.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的目的是让您了解另一个处于实验阶段的音频引擎，如果`CocosDenshion`没有您想要添加到游戏中的任何音频功能，那么您应该检查另一个音频引擎，看看它是否具备您所需的功能。
- en: Note
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The new audio engine can play up to 32 sounds simultaneously on the Mac OS,
    iOS, and the win-32 platforms, but it can only play up to 24 simultaneous sounds
    on Android.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 新的音频引擎可以在Mac OS、iOS和win-32平台上同时播放多达32个声音，但在Android上只能同时播放多达24个声音。
- en: Adding a mute button to our game
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向我们的游戏添加静音按钮
- en: Before ending this chapter, we are going to add a mute button to our game so
    that we can simply set our sound effects and our background music volume to zero
    in a single touch.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束之前，我们将在游戏中添加一个静音按钮，这样我们就可以通过一次触摸将音效和背景音乐音量设置为零。
- en: In order to achieve this, we are going to add two methods to the `HelloWorld`
    class; one for initializing the buttons and the other for actually muting all
    the sounds.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，我们将在`HelloWorld`类中添加两个方法；一个用于初始化按钮，另一个用于实际静音所有声音。
- en: 'In order to achieve this, we are going to add the following lines to our `HelloWorldScene.h`
    header file under the private section:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，我们将在`HelloWorldScene.h`头文件的私有部分添加以下几行：
- en: '[PRE15]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now, we are going to add the `initMuteButton` implementation code to the `HelloWorldScene.cpp`
    file as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将以下`initMuteButton`实现代码添加到`HelloWorldScene.cpp`文件中：
- en: '[PRE16]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'As you can see we have just created a new menu, where we have added two buttons,
    one for muting our game and the other invisible for unmuting it. We have stored
    each of these in the member variables, so that we can access them by the `muteCallback`
    method, which we have declared in the following code listing:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们刚刚创建了一个新的菜单，我们在其中添加了两个按钮，一个用于静音游戏，另一个不可见用于取消静音。我们将这些分别存储在成员变量中，这样我们就可以通过在以下代码清单中声明的`muteCallback`方法访问它们：
- en: '[PRE17]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Here, we are basically just asking whether or not the `_muteItem` menu item
    is visible. If it is visible, then set the volume to zero by using `CocosDenshion`,
    the new audio engine, else set the volume to its maximum value, that is, one.
    In either case, change the actual visibility value in both mute and unmute menu
    items.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们基本上只是判断`_muteItem`菜单项是否可见。如果可见，则通过使用新的音频引擎`CocosDenshion`将音量设置为零，否则将音量设置为最大值，即一。在任何一种情况下，都要改变静音和取消静音菜单项的实际可见值。
- en: 'We can see the final result in the following screenshot:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在以下屏幕截图中看到最终结果：
- en: '![Adding a mute button to our game](img/B04193_06_01.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![向我们的游戏添加静音按钮](img/B04193_06_01.jpg)'
- en: Putting everything together
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 把所有内容放在一起
- en: 'This is how our `applicationDidFinishLaunching` method from our `AppDelegate.cpp`
    implementation file looks after we have added the line for including the `sounds`
    folder in the `resources` path:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们添加了将`sounds`文件夹包含在`resources`路径中的行之后，我们的`AppDelegate.cpp`实现文件中的`applicationDidFinishLaunching`方法如下所示：
- en: '[PRE18]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The following code listing shows how our `HelloWorldScene.h` header file looks
    after the changes we have made during this chapter:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码清单显示了我们在本章中进行更改后`HelloWorldScene.h`头文件的样子：
- en: '[PRE19]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'And finally, after adding the audio management code, this is how our `HelloWorldScene.cpp`
    implementation file looks:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在添加了音频管理代码之后，我们的`HelloWorldScene.cpp`实现文件如下所示：
- en: '[PRE20]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'In the following method, we will initialize the audio by using the new audio
    engine. Notice that we will store the ID that corresponds to the background music
    of the audio instance in the `_musicId` integer member variable:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下方法中，我们将通过使用新的音频引擎来初始化音频。注意，我们会将音频实例的背景音乐的ID存储在`_musicId`整型成员变量中：
- en: '[PRE21]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Here, we are performing the same initialization job that we did in the previous
    method, but now we are doing so by using the `CocosDenshion` audio engine:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们执行了与上一个方法中相同的初始化工作，但现在我们是使用`CocosDenshion`音频引擎来完成：
- en: '[PRE22]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'In the following method, we are creating a simple menu for presenting the options
    for muting and unmuting the game. Here we are storing the mute and the unmute
    sprites in their corresponding member variables, so that we can later access them
    within the `muteCallback` method for manipulating their `visibility` property:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下方法中，我们创建了一个简单的菜单，以展示静音和取消静音游戏的选项。这里我们将静音和取消静音的精灵存储在对应的成员变量中，以便我们可以在`muteCallback`方法中稍后访问它们，并操作它们的`visibility`属性：
- en: '[PRE23]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The following method will be called each time the mute or the unmute menu item
    is pressed, in this method we just set the volume to zero and show the mute or
    unmute button depending on the option that was touched:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 以下方法将在每次按下静音或取消静音菜单项时被调用，在这个方法中，我们只需将音量设置为0，并根据触摸的选项显示静音或取消静音按钮：
- en: '[PRE24]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The single modification that we made to the `init` method was to add the call
    to the `initMuteButton();` method at the end of it:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对`init`方法做的唯一修改是在其最后添加了对`initMuteButton();`方法的调用：
- en: '[PRE25]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: As you can see, despite the fact that we have used the new audio engine for
    playing sounds, we have shown all the code that is required for using the traditional
    `CocosDenshion` audio engine. To enable the `CocosDenshion` implementation, you
    would only need to call the `initAudio` method at the bottom of the `init` method
    of the `HelloWorld.cpp` file, instead of calling the `initAudioNewEngine` method,
    and finally, you will need to remove the comment slashes for the `CocosDenshion`
    implementation code in the `onCollision` method and comment the new audio engine
    playback code.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，尽管我们使用了新的音频引擎来播放声音，但我们展示了使用传统`CocosDenshion`音频引擎所需的所有代码。为了启用`CocosDenshion`实现，你只需在`HelloWorld.cpp`文件的`init`方法的底部调用`initAudio`方法，而不是调用`initAudioNewEngine`方法，最后，你还需要在`onCollision`方法中移除`CocosDenshion`实现代码的注释斜杠，并注释掉新的音频引擎播放代码。
- en: Summary
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have added the background music and the sound effects to
    our game in a very simple way by using the two audio engines bundled with the
    Cocos2d-x framework.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们通过使用Cocos2d-x框架捆绑的两个音频引擎，以非常简单的方式为我们的游戏添加了背景音乐和音效。
- en: In the next chapter, we will cover how to add particle systems to our games
    in order to simulate more realistic explosions each time a bomb hits our `player`
    sprite.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍如何将粒子系统添加到我们的游戏中，以模拟每次炸弹击中`player`精灵时的更真实的爆炸效果。
