- en: Chapter 2. Graphics
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章 图形
- en: In this chapter, we will cover how to create and handle all your game graphics.
    We will create the scenes, the transitions between those using the game director,
    create sprites, locate them in the desired position, move them around using actions,
    and bring our characters to life using animation.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍如何创建和处理所有游戏图形。我们将创建场景，使用游戏导演处理这些场景之间的过渡，创建精灵，将它们定位到所需的位置，使用动作移动它们，以及使用动画为角色赋予生命。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Creating scenes
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建场景
- en: Understanding nodes
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解节点
- en: Understanding sprites
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解精灵
- en: Understanding actions
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解动作
- en: Animating sprites
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动画精灵
- en: Adding the game menus
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加游戏菜单
- en: Handling multiple screen resolutions
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理多种屏幕分辨率
- en: Creating scenes
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建场景
- en: The scene concept is very important within the Cocos2d-x game engine, since
    all the displayed screens in our game are considered scenes. Creating an analogy
    between Cocos2d-x and the Android native Java development, we can say that a Cocos2d-x
    scene is equivalent to what Android calls activity.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 场景概念在Cocos2d-x游戏引擎中非常重要，因为游戏中所有显示的屏幕都被视为场景。如果将Cocos2d-x与Android原生Java开发进行类比，我们可以说Cocos2d-x的场景相当于Android所称的活动。
- en: 'In the previous chapter we introduced the `AppDelegate` class, and we explained
    that it has the responsibility of loading the framework on the device and then
    executing the game-specific code. This class contains the `ApplicationDidFinishLaunching`
    method, which is the entry point of our code. In this method, we instantiate the
    scene that is going to first be displayed in our game, and then request the `director`
    to load it, as we can see in the following code listing:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们介绍了`AppDelegate`类，并解释了它有责任在设备上加载框架，然后执行游戏特定的代码。这个类包含了`ApplicationDidFinishLaunching`方法，这是我们代码的入口点。在这个方法中，我们实例化了将在游戏中首次显示的场景，然后请求`director`加载它，如下面的代码清单所示：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: All the C++ code is run in a single Android activity; nevertheless, we can add
    native activities to our game.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 所有C++代码都在一个单一的Android活动中运行；尽管如此，我们仍然可以向游戏中添加原生活动。
- en: Understanding Layers
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解图层
- en: Scene, in itself, is not an object container, that is why it should contain
    at least one instance of the `Layer` class so that we can add objects to it. This
    layer creation process has been encapsulated in the framework of macro `CREATE_FUNC`.
    You just have to invoke the macro and pass the name of the class as a parameter,
    and it will generate the Layer creation code.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 场景本身不是一个对象容器，因此它应该至少包含一个`Layer`类的实例，这样我们才能向其中添加对象。这个图层创建过程在框架宏`CREATE_FUNC`中被封装。你只需调用宏并将类名作为参数传递，它就会生成图层创建代码。
- en: Layer manipulation had multiple uses related to event handling in the previous
    versions of the framework; nevertheless, the event dispatcher engine was completely
    rewritten in version 3.0\. The only reason why the Layer concept still exists
    in Cocos2d-x 3.4 is compatibility. The framework creators officially announced
    that they may remove the Layer concept in further versions.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在框架的前一个版本中，图层操作与事件处理有关多种用途；然而，在3.0版本中，事件分发引擎被完全重写。Cocos2d-x 3.4中仍然存在图层概念的唯一原因是兼容性。框架创建者官方宣布，他们可能会在后续版本中移除图层概念。
- en: Using the director
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用导演
- en: Scenes are controlled by the Cocos2d-x director, which is a class that handles
    our game flow. It applies the singleton design pattern, which ensures that there
    is only one instance of the class. It controls the kind of scene that should be
    presented through a scene stack, similar to how Android handles scenes.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 场景由Cocos2d-x导演控制，这是一个处理游戏流程的类。它应用了单例设计模式，确保类只有一个实例。它通过场景堆栈控制应该呈现的场景类型，类似于Android处理场景的方式。
- en: This means that the last scene pushed to the stack is the one that is going
    to be presented to the user. When the scene is removed, the user will be able
    to see the scene that was previously visible.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着最后一个推送到堆栈的场景是即将呈现给用户的那一个。当场景被移除时，用户将能够看到之前可见的场景。
- en: 'When we are using the single director instance more than once in a single function,
    we can store its reference on a local variable as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在单个函数中使用单一导演实例不止一次时，我们可以将它的引用存储在局部变量中，如下所示：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We can also store it on a class attribute so that it is accessible from all
    over the class. This will allow us to type less, and it will also represent a
    performance improvement, so that we are not making several calls to the `getInstance`
    static method each time we want to access the singleton instance.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以将其存储在类属性中，以便在类的各个部分都可以访问。这样做可以让我们少写一些代码，同时也代表了性能的提升，因为我们每次想要访问单例实例时，不需要多次调用`getInstance`静态方法。
- en: Director instance can also provide us with useful information, such as screen
    dimensions, and debug information, which is enabled in our Cocos project by default.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Director实例还可以为我们提供有用的信息，比如屏幕尺寸和调试信息，在我们的Cocos项目中默认是启用的。
- en: Pausing the game
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 暂停游戏
- en: Let us start and create our game. The first feature that we are going to add
    is the functionality for pausing and resuming our game. Let's start building –
    we'll start by setting up the screen that will appear when we pause the game.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始创建我们的游戏。我们要添加的第一个功能是暂停和恢复游戏的功能。让我们开始构建——首先设置当我们暂停游戏时将显示的屏幕。
- en: 'We will achieve this by adding a new pause scene to the scene stack. When this
    screen is removed from the stack, the HelloWorld scene will show up because it
    was the displayed screen before the pause scene was pushed into the scene stack.
    The following code listing shows how we can easily pause our game:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过向场景堆栈中添加一个新的暂停场景来实现这一点。当这个屏幕从堆栈中移除时，HelloWorld场景将显示出来，因为它是在暂停场景推入场景堆栈之前显示的屏幕。以下代码清单展示了我们如何轻松地暂停游戏：
- en: Organizing our resources files
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组织我们的资源文件
- en: When we created our Cocos2d-x project, some resources such as images and fonts
    have been added by default to the `Resources` folder of our project. We are going
    to organize them, so that it is easier to handle them. For that matter, we are
    going to create an `Image` folder in the `Resources` directory. In this new folder,
    we are going to put all our images. Later on in this chapter, we will explain
    how we are going to organize the different versions of each image according to
    the Android device screen resolution.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们创建Cocos2d-x项目时，一些资源，比如图片和字体，默认被添加到我们项目的`Resources`文件夹中。我们将组织它们，以便更容易处理。为此，我们将在`Resources`目录中创建一个`Image`文件夹。在这个新文件夹中，我们将放置所有的图片。在本章稍后，我们将解释如何根据Android设备屏幕分辨率来组织每个图片的不同版本。
- en: Within the resources bundled with this chapter, we have provided you with the
    images that you will need in order to build the code for this chapter.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章附带资源中，我们为你提供了构建本章代码所需的图片。
- en: Creating our pause scene header file
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建我们的暂停场景头文件
- en: 'First, let us create our pause scene header file. We have created it using
    the `HelloWorld.h` header file as a reference:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们创建我们的暂停场景头文件。我们是参考`HelloWorld.h`头文件创建它的：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Tip
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You can avoid typing `cocos2d` each time you refer to the Cocos2d-x class contained
    in the `cocos2d` namespace by typing `using namespace cocos2d`; nevertheless,
    using it in a header file is considered a bad practice, because the code may fail
    to compile it when there are any repeated field names within all the included
    namespaces.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过输入`using namespace cocos2d`来避免每次引用`cocos2d`命名空间中的Cocos2d-x类时输入`cocos2d`，然而，在头文件中使用它被认为是一个坏习惯，因为当包含的命名空间中有重复的字段名时，代码可能无法编译。
- en: Creating the pause scene implementation file
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建暂停场景实现文件
- en: Now, let us create our pause scene implementation file. Analogous to what we
    did in the previous section, we will create this file based on the `HelloWorld.cpp`
    file created by the project creation script.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建我们的暂停场景实现文件。类似于前一部分的做法，我们将基于项目创建脚本生成的`HelloWorld.cpp`文件来创建这个文件。
- en: Within the following code, you will find the menu creation code bundled in the
    Cocos2d-x template project. We will explain how to create the game menus in a
    further section of this chapter, you will also learn font creation, and this will
    be explained in detail in [Chapter 5](ch05.html "Chapter 5. Handling Text and
    Fonts"), *Handling Texts and Fonts*.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码中，你会发现Cocos2d-x模板项目中捆绑的菜单创建代码。我们将在本章的后续部分解释如何创建游戏菜单，你还将学习字体创建，这将在[第5章](ch05.html
    "第5章.处理文本和字体")《处理文本和字体》中详细解释。
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In the generated `HelloWorldScene.h` scene, we are now adding the following
    line of code after the definition of the `menuCloseCallback` method:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在生成的`HelloWorldScene.h`场景中，我们现在在`menuCloseCallback`方法定义后添加以下代码行：
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now, let us create the implementation for the `pauseCallBack` method in the
    `HelloWorldScene.cpp` implementation file:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在`HelloWorldScene.cpp`实现文件中为`pauseCallBack`方法创建实现：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Finally, modify the `closeItem` creation by making it call the `pauseCallBack`
    method rather than the `menuCloseCallBack` method, so this line will look like
    this:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，通过使`closeItem`调用`pauseCallBack`方法而不是`menuCloseCallBack`方法来修改其创建，这样这行代码将看起来像这样：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now we have created a simple pause scene, and this is pushed to the scene stack
    when the close button is pressed and it is closed when the blue button is pressed
    from within the pause scene.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经创建了一个简单的暂停场景，当按下关闭按钮时，它会被推送到场景堆栈中，当从暂停场景中按下蓝色按钮时，它会被关闭。
- en: We will now add the `PauseScene.cpp` file to the android makefile named `Android.mk`
    located on the `jni` folder of your eclipse project on the `LOCAL_SRC_FILES` section
    above `HelloWorldScene.cpp`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将`PauseScene.cpp`文件添加到eclipse项目中`jni`文件夹下的名为`Android.mk`的Android makefile中，位于`LOCAL_SRC_FILES`部分的`HelloWorldScene.cpp`上方。
- en: Transitions
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 过渡
- en: The director is also responsible for playing the transitions while swapping
    scenes, Cocos2d-x 3.4 currently offers more than 35 different scene transition
    effects, such as fades, flips, page turn, split, and zoom among others.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 导演还负责在切换场景时播放过渡效果，Cocos2d-x 3.4目前提供超过35种不同的场景过渡效果，例如渐变、翻转、翻页、分裂和缩放等。
- en: Transition is a subclass of the `Scene` class, which means that you can pass
    a transition instance to any method that receives a scene object, such as `runWithScene`,
    `replaceScene`, or `pushScene` methods from the `director` class.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Transition是`Scene`类的子类，这意味着你可以将过渡实例传递给任何接收场景对象的方法，如`director`类的`runWithScene`、`replaceScene`或`pushScene`方法。
- en: 'Let us use a simple transition effect, when passing from the gameplay scene
    to the pause scene. We will simply do this by creating a new instance of the `TransitionFlipX`
    class and passing it to the director''s `pushScene` method:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 当从游戏场景切换到暂停场景时，让我们使用一个简单的过渡效果。我们只需通过创建`TransitionFlipX`类的新实例并将其传递给导演的`pushScene`方法来实现这一点：
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Understanding nodes
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解节点
- en: Node represents all the visible objects on the screen, it is, in fact, the superclass
    of all the scene elements, including the scene itself. It is the base framework
    class, and it has the basic methods that allow you to handle graphics characteristics,
    such as position and depth.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Node表示屏幕上所有的可见对象，实际上它是所有场景元素的超类，包括场景本身。它是基础框架类，具有处理图形特性的基本方法，如位置和深度。
- en: Understanding sprites
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解精灵
- en: In our game, the sprites represent the images of our scenes, just like the background,
    the enemies, and our player.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的游戏中，精灵代表我们场景的图像，就像背景、敌人和我们的玩家。
- en: Later in [Chapter 4](ch04.html "Chapter 4. User Input"), *User Input*, we will
    add event listeners to the scenes, so that it can interact with the user.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第四章](ch04.html "第四章. 用户输入")《用户输入》中，我们将向场景添加事件监听器，使其能够与用户交互。
- en: Creating sprites
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建精灵
- en: 'It is very easy to instantiate the Cocos2d-x core classes. We have seen that
    the `scene` class has a `create` method; similarly, the `sprite` class has a static
    method with the same name, as we can see in the following code snippet:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Cocos2d-x的核心类实例化非常简单。我们已经看到`scene`类有一个`create`方法；同样，`sprite`类也有一个同名静态方法，如下面的代码片段所示：
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Cocos2d-x currently supports PNG, JPG, and TIF image formats for sprites; nevertheless,
    it is highly recommended that we use the PNG images, because of its transparency
    capabilities, which are not present in either the JPG or the TIF format, and also
    because of the image quality that is provided by this format in a fair file size.
    That is why you will see that all the Cocos2d-x-generated templates and samples
    use this image format.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Cocos2d-x目前支持PNG、JPG和TIF图像格式的精灵；然而，我们强烈建议使用PNG图像，因为它具有透明度能力，而JPG或TIF格式没有，同时也因为这种格式在合理的文件大小下提供的图像质量。这就是为什么你会看到所有Cocos2d-x生成的模板和示例都使用这种图像格式。
- en: Positioning sprites
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定位精灵
- en: Once we have created our own sprite, we can easily position it on the screen
    by using the `setPosition` method, but before doing it, we will explain the anchor
    point concept.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 创建我们自己的精灵后，我们可以通过使用`setPosition`方法轻松地在屏幕上定位它，但在这样做之前，我们将解释锚点的概念。
- en: Setting anchor points
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置锚点
- en: 'All sprites have a reference point called the **anchor point**. When we position
    a sprite using the `setPosition` method, what the framework actually does is that
    it sets the specified two-dimensional position to the anchor point so that it
    affects the whole image. By default, the anchor point is set to the sprite''s
    center, as we can see in the following image:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 所有精灵都有一个称为**锚点**的参考点。当我们使用`setPosition`方法定位一个精灵时，框架实际所做的是将指定的二维位置设置到锚点，从而影响整个图像。默认情况下，锚点被设置为精灵的中心，正如我们在以下图片中看到的：
- en: '![Setting anchor points](img/B04193_02_01.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![设置锚点](img/B04193_02_01.jpg)'
- en: Understanding the Cocos2d-x coordinate system
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解Cocos2d-x坐标系统
- en: 'The Cocos2d-x coordinate system, unlike most of the computerized graphic engines,
    has its origin (0,0) at the lower left part of the screen, as we can see in the
    following image:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 与大多数计算机图形引擎不同，Cocos2d-x的坐标系统在屏幕左下角有原点(0,0)，正如我们在以下图片中看到的：
- en: '![Understanding the Cocos2d-x coordinate system](img/B04193_02_02.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![理解Cocos2d-x坐标系统](img/B04193_02_02.jpg)'
- en: So if we want to position our sprite at the origin point (0,0), we can achieve
    it by calling the `setPosition` method contained in the sprite class. It is overloaded,
    so it can receive either two floats indicating x and y position, a `Point` class
    instance, or a `Vec2` instance. Although the `Vec2` instances are used in the
    generated code, the official Cocos2d-x documentation states that passing the floating
    numbers is up to 10 times faster.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果我们想将精灵定位在原点(0,0)，我们可以通过调用精灵类中的`setPosition`方法来实现。它是重载的，所以它可以接收两个表示x和y位置的浮点数，一个`Point`类实例，或者一个`Vec2`实例。尽管生成的代码中使用`Vec2`实例，但官方Cocos2d-x文档指出，传递浮点数最多可以快10倍。
- en: '[PRE9]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'After executing this code, we can see that only the upper right zone of the
    sprite is visible, which represents only 25 percent of its size, as we have shown
    in the following image:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此代码后，我们可以看到只有精灵的右上区域可见，这仅占其大小的25%，正如我们在以下图片中所示：
- en: '![Understanding the Cocos2d-x coordinate system](img/B04193_02_03.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![理解Cocos2d-x坐标系统](img/B04193_02_03.jpg)'
- en: 'So, in case you would like the sprite to be shown at the origin, you have many
    options, such as positioning the sprite at the point that corresponds to half
    of the sprite''s height and half of its width, which could be determined by using
    the sprite method, `getContentSize`, which returns a size object that has the
    sprite height and width properties. Another option, which might be easier than
    this, is to reset the sprite anchor point to (0,0) ; so that when the sprite is
    positioned at the origin of the screen, it is completely visible and located at
    the lower leftmost region of the screen. The `setAnchorPoint` method receives
    a `Vec2` instance as the parameter. In the following code listing, we are passing
    a `Vec2` instance pointing to the origin (0,0):'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望精灵显示在原点，有多种方法可以选择，比如将精灵定位在对应精灵高度一半和宽度一半的点，这可以通过使用精灵方法`getContentSize`来确定，它返回一个包含精灵高度和宽度属性的大小对象。另一个可能更简单的方法是将精灵的锚点重置为(0,0)，这样当精灵在屏幕原点定位时，它完全可见并且位于屏幕左下角区域。《setAnchorPoint》方法接收一个`Vec2`实例作为参数。在以下代码清单中，我们传递了一个指向原点(0,0)的`Vec2`实例：
- en: '[PRE10]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `Vec2` class has a constructor that receives no parameters, it creates a
    `Vec2` object with an initial value of 0,0.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`Vec2`类有一个不接受参数的构造函数，它会创建一个初始值为0,0的`Vec2`对象。'
- en: 'When we execute our code, we get the following result:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们执行代码时，得到以下结果：
- en: '![Understanding the Cocos2d-x coordinate system](img/B04193_02_04.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![理解Cocos2d-x坐标系统](img/B04193_02_04.jpg)'
- en: Tip
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The reason why the default anchor point location is at the center of the sprite
    is because it makes it easier to be positioned at the center of the screen.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 默认锚点位于精灵中心的原因是，这样更容易将其定位在屏幕中心。
- en: Adding sprites to the scene
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将精灵添加到场景中
- en: 'After our sprite object is created and positioned, we need to add it to our
    scene by using the `addChild` method, which contains two parameters: the pointer
    to the node that you want to add to the scene and an integer that represents its
    position in *z* axis. The node with the highest *z* value will be displayed above
    those with lower values:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建并定位了我们的精灵对象之后，我们需要使用`addChild`方法将其添加到场景中，该方法包含两个参数：要添加到场景中的节点的指针和一个表示其在*z*轴位置的整数。*z*值最高的节点将显示在那些值较低的节点之上：
- en: '[PRE11]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now let us add the background image to our `HelloWorld` scene: we are going
    to do it by following the same steps we used in order to position the bomb at
    the lower left area of the screen in the `init` method:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们向`HelloWorld`场景添加背景图像：我们将在`init`方法中将炸弹定位在屏幕左下区域时所用的相同步骤来完成它：
- en: '[PRE12]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We have now added our background in a *z* position of -1, so any node with
    a position of 0 or higher will be displayed on top of the background, as we can
    see in the following image:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在*z*位置为-1的地方添加了背景，因此任何位置为0或更高的节点都将显示在背景之上，如下面的图片所示：
- en: '![Adding sprites to the scene](img/B04193_02_05.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![向场景中添加精灵](img/B04193_02_05.jpg)'
- en: Positioning sprites outside the visible area
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在可见区域外定位精灵
- en: Now we have a bomb, which doesn't move, at the bottom of the screen. We will
    now position it at the top center zone of the screen, outside the visible region,
    so that when we get this sprite to move, it will look like it is raining bombs.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个位于屏幕底部的炸弹，它不会移动。我们现在将其定位在屏幕顶部中心区域，位于可见区域之外，这样当我们让这个精灵移动时，它看起来就像是下炸弹雨。
- en: 'As we previously mentioned, let us position our bomb in the visible area, and
    then, in the next section we will make it move toward the ground using the actions
    functionality:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的，让我们将炸弹定位在可见区域内，然后在下一节中我们将使用动作功能使其向地面移动：
- en: '[PRE13]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We have removed the `setAnchorPoint` sentence; so, now, the bombs have a default
    anchor point, and we have modified the `setPosition` statement, so that now, we
    are positioning it just in the visible area.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们移除了`setAnchorPoint`语句；现在，炸弹拥有默认的锚点，并且我们修改了`setPosition`语句，现在将其正好定位在可见区域内。
- en: Positioning the player sprite
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定位玩家精灵
- en: Now, let us create and position our player sprite.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建并定位我们的玩家精灵。
- en: '[PRE14]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In the previous code we created a player sprite. We used the default anchor
    point that points directly to the center of the image and centered it horizontally
    by positioning it to half of the screen width and 23 percent of the screen height,
    since the background image provided in this book for this chapter was drawn within
    those proportions. We have added it with a z value of 0, so this means that it
    will be displayed in the background.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的代码中，我们创建了一个玩家精灵。我们使用了默认的锚点，它直接指向图像的中心，并通过将其定位在屏幕宽度的一半和屏幕高度的23%，使其水平居中，因为本章提供的背景图像是在这些比例下绘制的。我们以z值为0添加它，这意味着它将被显示在背景中。
- en: 'Now let us take care of the bomb, let us position it in the visible area, and
    then, in the next section, we will make it move it toward the ground using the
    actions functionality:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来处理炸弹，将其放置在可见区域内，然后在下一节中，我们将使用动作功能使其向地面移动：
- en: '[PRE15]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We have removed the `setAnchorPoint` sentence; so now, the bombs have the default
    anchor point, and we have modified the `setPosition` statement, so now, we are
    positioning it in the visible area.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们移除了`setAnchorPoint`语句；现在，炸弹拥有默认的锚点，并且我们修改了`setPosition`语句，现在将其放置在可见区域内。
- en: Throughout this chapter we have used many images, which, as we have previously
    mentioned are stored in the `Resources` folder of our Cocos2d-x project. You could
    create sub folders to organize your files.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们使用了许多图像，正如我们之前提到的，这些图像存储在我们的Cocos2d-x项目的`Resources`文件夹中。你可以创建子文件夹来组织你的文件。
- en: Understanding actions
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解动作
- en: We can easily tell our sprites to perform concrete actions, such as jump, move,
    skew, and so on. It requires a few lines to get our sprites to execute the desired
    action.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以轻松地让精灵执行具体的动作，如跳跃、移动、倾斜等。只需要几行代码就能让我们的精灵执行所需的动作。
- en: Moving sprites
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 移动精灵
- en: We can make our sprite move to a specific area of the screen by creating a `MoveTo`
    action and then making the sprite execute the action.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过创建一个`MoveTo`动作，使精灵移动到屏幕的特定区域，然后让精灵执行该动作。
- en: 'In the following code listing, we are making the bomb fall to the bottom of
    the screen by simply writing the following code lines:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码清单中，我们通过简单地编写以下代码行，使炸弹掉落到屏幕底部：
- en: '[PRE16]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We have created a `moveTo` node that will move the bomb sprite to the current
    horizontal position, but it will also move it to the bottom of the screen until
    it is not visible. In order to achieve this, we made it move to the y position
    of the negative half of the height of the sprite. Since the anchor point is set
    to the center point of the sprite, moving it to the negative half of its height
    will be enough to make it move outside the screen's visible area.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个`moveTo`节点，它将把炸弹精灵移动到当前的横向位置，同时也会把它移动到屏幕底部直到不可见。为了实现这一点，我们让它移动到精灵高度负一半的y位置。由于锚点被设置为精灵的中心点，将其移动到其高度的负一半就足以让它移动到屏幕可见区域之外。
- en: As you can see, it is crashing with our player sprite, but the bomb just continues
    downward as it still doesn't detect the collisions. In the next chapter, we will
    add collision handling to our game.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，它与我们的玩家精灵相撞，但炸弹只是继续向下移动，因为它仍然没有检测到碰撞。在下一章中，我们将为游戏添加碰撞处理。
- en: Note
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Cocos2d-x 3.4 has its own physics engine, which includes an easy mechanism to
    detect the collisions among sprites.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Cocos2d-x 3.4拥有自己的物理引擎，其中包括一个易于检测精灵之间碰撞的机制。
- en: 'If we want to move our sprite to a position that is relative to its current
    location, we can use the `MoveBy` class, which receives the parameters of how
    much we want the sprite to move horizontally and vertically:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想将精灵移动到相对于其当前位置的位置，我们可以使用`MoveBy`类，它接收我们想要精灵在水平和垂直方向上移动多少的参数：
- en: '[PRE17]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Note
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can make the sprite move in the opposite direction by using the `reverse`
    method.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`reverse`方法使精灵向相反方向移动。
- en: Creating sequences
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建序列
- en: Sometimes we have a predefined sequence of actions that we want to execute in
    several parts of our code, this can be handled by sequences. As the name suggests,
    it consists of a list of actions that are executed in a predefined order, which
    can be reversed if necessary.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 有时我们有一个预定义的动作序列，我们希望在代码的多个部分执行它，这可以通过序列来处理。顾名思义，它由一系列按预定义顺序执行的动作组成，如有必要可以反向执行。
- en: It is very common to use sequences each time we use actions, so in the sequence
    we add the `moveTo` node, and then a function call that executes a method after
    the movement has finished, so that it will allow us to delete the sprite from
    the memory, reposition it, or do any other common tasks that are required in video
    games.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用动作时经常使用序列，因此在序列中我们添加了`moveTo`节点，然后是一个函数调用，该调用在移动完成后执行一个方法，这样它将允许我们从内存中删除精灵，重新定位它，或者在视频游戏中执行任何其他常见任务。
- en: 'In the following code, we are creating a sequence where we first demand the
    bombs to move to the ground, and we request to execute the `moveFinished` method:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码中，我们创建了一个序列，首先要求炸弹移动到地面，然后请求执行`moveFinished`方法：
- en: '[PRE18]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Note that we pass a `nullptr` parameter at the end of the sequence, so Cocos2d-x
    will stop executing the items in the sequence, when it sees this value; if you
    don't specify it, then this will cause your game to crash.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在序列的末尾我们传递了一个`nullptr`参数，所以当Cocos2d-x看到这个值时，它会停止执行序列中的项目；如果你不指定它，这可能会导致你的游戏崩溃。
- en: Note
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Since version 3.0, Cocos2d-x recommends using the `nullptr` keyword for referring
    to the null pointers rather than utilizing the conventional NULL macro, which
    will still work, but is not considered as best practice within C++.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 自从3.0版本以来，Cocos2d-x建议使用`nullptr`关键字来引用空指针，而不是使用传统的NULL宏，后者仍然有效，但不是在C++中认为的最佳实践。
- en: Animating sprites
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 制作精灵动画
- en: 'In order to give a more professional aspect to our game, we could animate our
    sprites so that it does not constantly show a still image but rather displays
    animated characters, enemies, and obstacles. Cocos2d-x provides an easy mechanism
    to add these kinds of animations to our sprites, as we can appreciate in the following
    code listing:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使我们的游戏看起来更加专业，我们可以使精灵具有动画效果，这样就不会一直显示静态图像，而是显示动画角色、敌人和障碍物。Cocos2d-x提供了一种简单机制，可以将这类动画添加到我们的精灵中，如下面的代码清单所示：
- en: '[PRE19]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Improving performance with sprite sheets
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用精灵表提高性能
- en: Although we can create sprite animations based on the images located in several
    files, as we have done in our previous code, it would be very inefficient to load
    a large number of files. That is why we prefer loading a single file that contains
    several images. In order to achieve this, a plain text file with the `plist` extension
    indicates the exact location of each image within the file, Cocos2d-x is able
    to read this plain text file and extract all the images from a single sprite sheet
    file. There are many tools that allow you to create your own sprite sheet, the
    most popular one is the texture packer, which you can download from [https://www.codeandweb.com/texturepacker](https://www.codeandweb.com/texturepacker)
    and try for free on Windows or Mac OS.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们可以基于位于多个文件中的图像创建精灵动画，就像我们在之前的代码中所做的那样，但加载大量文件将非常低效。这就是为什么我们更愿意加载包含多个图像的单个文件。为了实现这一点，一个带有`plist`扩展名的纯文本文件指出了文件中每个图像的确切位置，Cocos2d-x能够读取这个纯文本文件，并从一个单一的精灵表文件中提取所有图像。有许多工具可以让你创建自己的精灵表，最受欢迎的是纹理打包器，你可以从[https://www.codeandweb.com/texturepacker](https://www.codeandweb.com/texturepacker)下载并在Windows或Mac
    OS上免费试用。
- en: 'In this chapter, the resources we are including are: a `plist` file named `bunny.plist`
    and the `bunny_ss.png` sprite sheet created with texture packer. You can load
    any frame of this sheet with the following code:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们包含的资源有：一个名为`bunny.plist`的`plist`文件和用纹理打包器创建的`bunny_ss.png`精灵表。你可以使用以下代码加载此表的任何帧：
- en: '[PRE20]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Game menus
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 游戏菜单
- en: It is very common to have menus in some part of our games, such as the main
    screen and the configuration screen. This framework provides us with a simple
    way to add menus to our games.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们游戏的一部分中拥有菜单是很常见的，比如主屏幕和配置屏幕。这个框架为我们提供了一种简单的方法将菜单添加到游戏中。
- en: 'The following code listing shows the menu creation process:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码清单显示了菜单创建过程：
- en: '[PRE21]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'As we can see from the previous listing, we have first created a menu item
    by instantiating the `MenuItemImage` class and passing three parameters to the
    `create` method: the first parameter indicates what image should be displayed
    for the menu item, the second is the image that should be displayed when the image
    is selected, and the third parameter specifies the method that should be invoked
    when the menu item is selected.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的列表中我们可以看到，我们首先通过实例化`MenuItemImage`类并传递三个参数给`create`方法来创建一个菜单项：第一个参数表示菜单项应该显示的图像，第二个是选中图像时应该显示的图像，第三个参数指定当选择菜单项时应调用的方法。
- en: Note
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Cocos2d-x branch 3 now allows the programmer to use the lambda expressions to
    handle the menu items.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: Cocos2d-x分支3现在允许程序员使用lambda表达式来处理菜单项。
- en: Handling multiple screen resolutions
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理多屏幕分辨率
- en: When creating games, you should decide which screen resolutions you are planning
    to support, and then create all the images with a size that will neither look
    pixelated on high resolution screens nor affect performance while loading on the
    low capability devices. All those versions of images should have the same name
    but they should be stored in different directories in the `Resources` folder.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建游戏时，你需要决定打算支持哪些屏幕分辨率，然后创建所有图像的大小，使其在高分辨率屏幕上不会显得像素化，在低性能设备上加载时也不会影响性能。所有这些版本的图像应该有相同的名称，但它们应该存储在`Resources`文件夹中的不同目录里。
- en: 'In this example, we have three directories: the first with the images in high
    resolution, the second with the images in mid resolution, and the third with the
    images in low resolution.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们有三个目录：第一个包含高分辨率的图像，第二个包含中等分辨率的图像，第三个包含低分辨率的图像。
- en: 'After having all our images in the adequate sizes so as to suit all the resolution
    needs, we have to write the code that picks the right image set based on the device''s
    screen resolution. As we have mentioned before, the `AppDelegate` class contains
    `applicationDidFinishLaunching`, which is launched immediately after the Cocos2d-x
    framework is loaded on the device. In this method we are going to write our multiple
    screen resolution code, as we can see in the following code listing:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在准备好适合所有分辨率需求的所有图像大小之后，我们必须编写根据设备屏幕分辨率选择正确图像集的代码。正如我们之前提到的，`AppDelegate`类包含`applicationDidFinishLaunching`，该函数在Cocos2d-x框架在设备上加载后立即启动。在这个方法中，我们将编写多屏幕分辨率的代码，如下面的代码清单所示：
- en: '[PRE22]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Modify the `AndroidManifest.xml` file by setting the value of `android:screenOrientation`
    to `portrait`.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将`AndroidManifest.xml`文件中的`android:screenOrientation`值设置为`portrait`来进行修改。
- en: Putting everything together
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将所有内容整合到一起
- en: 'Here is the complete code of the `HelloWorldScene.cpp` implementation file,
    where we have created and positioned our background, our animated player, and
    our moving bomb:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`HelloWorldScene.cpp`实现文件的完整代码，我们在其中创建并定位了背景、动画玩家和移动的炸弹：
- en: '[PRE23]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Next in the `init` function, we are going to instantiate and initialize our
    sprites:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来在`init`函数中，我们将实例化和初始化我们的精灵：
- en: '[PRE24]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Next, we will add animations using the following code:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将使用以下代码添加动画：
- en: '[PRE25]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Here we are going to create the sequence that will move our bomb from the top
    to the bottom of the screen. After the movement is complete, we will specify to
    call the `moveFinished` method. We just use this for printing a log message for
    testing purposes:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将创建一个序列，该序列将把炸弹从屏幕顶部移动到底部。移动完成后，我们将指定调用`moveFinished`方法。我们只是出于测试目的使用它来打印一条日志信息：
- en: '[PRE26]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The following image shows us how our game looks after putting together all
    the codes done during this chapter:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了在本章中完成所有代码后，我们的游戏看起来是什么样子：
- en: '![Putting everything together](img/B04193_02_06.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![将所有内容整合到一起](img/B04193_02_06.jpg)'
- en: Summary
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have seen how to create our game scenes, and how to add
    sprites and menus to it. We have also learned how to animate sprites easily and
    move them around the screen.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了如何创建游戏场景，以及如何向其中添加精灵和菜单。我们还学会了如何轻松地动画化精灵并在屏幕上移动它们。
- en: In the next chapter, we will learn how to move our sprites in a more realistic
    way by using the built-in physics engine; with it, we will easily configure the
    motion and add collision detection to our game.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何使用内置的物理引擎以更真实的方式移动我们的精灵；通过它，我们将轻松配置运动并为游戏添加碰撞检测。
