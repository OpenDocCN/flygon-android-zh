- en: Chapter 6. Google Play Services
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第六章. 谷歌播放服务
- en: Now that you have become familiar with the use of components on layouts, you
    should start thinking about extra functionality. Google Play Services give you
    features to attract users using Google features such as Google Maps, Google+,
    and more. How can you easily add these features to your application? What features
    are available? What are the Android version requirements to use Google Play Services?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 既然你已经熟悉了在布局中使用组件，那么你应该开始考虑额外的功能。谷歌播放服务提供了使用谷歌地图、谷歌+等功能来吸引用户的功能。你如何轻松将这些功能添加到你的应用程序中？有哪些功能可用？使用谷歌播放服务需要满足哪些安卓版本要求？
- en: This chapter focuses on the creation, integration, and use of Google Play Services
    using Android Studio. We will learn about which Google services are available.
    We will also learn about the standard authorization API in order to have a safe
    way to grant and receive access tokens to Google Play Services. We will also learn
    about the limitations of these services and the benefits of using them.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章重点介绍如何使用Android Studio创建、集成和使用谷歌播放服务。我们将了解哪些谷歌服务可用。我们还将学习标准的授权API，以安全地授予和接收访问谷歌播放服务的令牌。我们还将了解这些服务的限制及其使用的好处。
- en: 'These are the topics we''ll be covering in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本章将要讨论的主题：
- en: Existing Google Services
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现有的谷歌服务
- en: Adding Google Play Services from the IDE
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从IDE中添加谷歌播放服务
- en: Integrating Google Play Services in your app
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在你的应用中集成谷歌播放服务
- en: Understanding automatic updates
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解自动更新
- en: Using Google Services in your app
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在你的应用中使用谷歌服务
- en: How Google Play Services work
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 谷歌播放服务的工作原理
- en: When Google previewed Google Play Services at Google I/O 2012, it said that
    the platform ([https://developers.google.com/events/io/2012/](https://developers.google.com/events/io/2012/))...
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当谷歌在2012年的谷歌I/O大会上预览谷歌播放服务时，它表示这个平台（[https://developers.google.com/events/io/2012/](https://developers.google.com/events/io/2012/)）...
- en: '...consists of a services component that runs on the device and a thin client
    library that you package with your app.'
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '...由在设备上运行的服务组件和一个与你应用一起打包的轻量级客户端库组成。'
- en: 'This means that Google Play Services work thanks to two main components: the
    Google Play Services client library and the Google Play Services APK.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着谷歌播放服务之所以能够工作，得益于两个主要组件：谷歌播放服务客户端库和谷歌播放服务APK。
- en: '**Client library**: The Google Play Services client library includes the interfaces
    to each Google Service that is used by your app. The library is included when
    you pack your app and it allows your users to authorize the app with access to
    these services using their credentials. The client library is upgraded from time
    to time by Google, adding new features and services. You may upgrade the library
    in your app through an update to your app, although it is not necessary if you
    are not including any of the new features.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**客户端库**：谷歌播放服务客户端库包含了你的应用所使用的每个谷歌服务的接口。当你打包应用时，会包含这个库，它允许你的用户使用他们的凭据授权应用访问这些服务。客户端库会定期由谷歌进行升级，增加新的功能和服务。你可以在应用更新时升级这个库，当然，如果你不打算使用任何新功能，这并非必须。'
- en: '**Google Play Services APK**: The Google Play Services **Android Package**
    (**APK**) runs as a background service in the Android operating system. Using
    the client library, your app accesses this service, which is the one that carries
    out the actions during runtime. The APK is not guaranteed to be installed on all
    devices. In case the device does not come with it installed, the APK is available
    in the Google Play Store.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**谷歌播放服务APK**：谷歌播放服务**安卓软件包**（**APK**）在安卓操作系统中作为后台服务运行。使用客户端库，你的应用程序可以访问这项服务，它负责在运行时执行操作。并不保证所有设备上都安装有此APK。如果设备未预装此APK，可以在谷歌播放商店中获取。'
- en: This way, Google manages to separate the runtime of its services from the implementation
    you do as a developer, so you do not need to upgrade your application every time
    Google Play Services are upgraded.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，谷歌将其服务的运行时与作为开发者的你所做的实现分离开来，因此你无需在谷歌播放服务每次升级时都更新你的应用程序。
- en: Although Google Play Services are not included in the Android platform itself,
    they are supported by most Android-based devices. Any Android device running Android
    2.2 or newer is ready to install any application that uses Google Play Services.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管谷歌播放服务并未包含在安卓平台本身，但它们得到了大多数基于安卓的设备的支持。任何运行安卓2.2或更新版本的安卓设备都可以安装使用谷歌播放服务的应用程序。
- en: Services available
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可用的服务
- en: 'Google Play Services are thought to easily add more features to attract users
    on a wide range of devices while using well-known features powered by Google.
    Using these services, you can add new revenue sources, manage the distribution
    of the app, access statistics and learn about your application''s users customs,
    and improve your application with easy to implement Google features such as maps
    or Google''s social network, Google+. The services are explained as follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Google Play服务被认为是轻松为各种设备上的用户添加更多特性的方式，同时使用由Google提供支持的知名功能。使用这些服务，你可以添加新的收入来源，管理应用程序的分布，访问统计信息并了解应用程序用户的习惯，以及通过易于实现的Google功能（如地图或Google的社交网络Google+）来改进你的应用程序。以下是对这些服务的说明：
- en: '**Games**: Using this Google Play Game Service, you can improve your game with
    a more social experience.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**游戏**：使用Google Play游戏服务，你可以通过更社交的体验来改进你的游戏。'
- en: '**Location**: Integrating the location APIs, you can make your application
    location-aware.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**位置**：整合位置API，你可以使你的应用程序具有位置感知功能。'
- en: '**Google Maps**: Google Maps API allows you to use the maps provided by Google
    in your application and to customize them.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Google地图**：Google地图API允许你在应用程序中使用Google提供的地图，并对其进行自定义。'
- en: '**Google+**: Using Google+ Platform for Android, you can authenticate the user
    of your app. Once authenticated, you can also access their public profile and
    social graph.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Google+**：通过使用Android的Google+平台，你可以验证你的应用程序的用户。一旦验证成功，你还可以访问他们的公开资料和社交网络图。'
- en: '**In-app Billing**: Selling digital content from your apps is possible using
    Google Play In-app Billing. You can use this service to sell one-time billing
    or temporal subscriptions to premium services and features.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用内购买**：使用Google Play应用内购买，你可以从你的应用程序中出售数字内容。你可以使用这项服务来销售一次性购买或对高级服务和特性的时间订阅。'
- en: '**Cloud Messaging**: **Google Cloud Messaging** (**GCM**) for Android allows
    you to exchange data between the app running in an Android-based device and your
    server.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**云消息传递**：**Google云消息传递**（**GCM**）允许你在运行在基于Android的设备和你的服务器之间的应用程序中交换数据。'
- en: '**Panorama**: It enables the user to see a 360-degree panorama picture.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**全景图**：它使用户能够看到360度的全景图片。'
- en: Adding Google Play Services to Android Studio
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向Android Studio添加Google Play服务
- en: The first thing we need to know is what we need to add to our Android Studio.
    We have just learned that the APK is available in Google Play Store and it is
    the actual runtime of the services. We, as developers, only need this package
    to be available in our testing device while debugging our application. What we
    need to add to Android Studio is the Google Play Services client library.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要知道的第一件事是什么需要添加到我们的Android Studio中。我们刚刚了解到APK在Google Play商店中可用，它是服务的实际运行时。作为开发者的我们，在调试应用程序时只需要这个包在测试设备上可用。我们需要添加到Android
    Studio的是Google Play服务客户端库。
- en: This library is distributed through the Android SDK Manager (Software Development
    Kit Manager), which will be explained in detail in [Chapter 7](ch07.html "Chapter 7. Tools"),
    *Tools*. To open it, navigate to **Tools** | **Android** | **SDK Manager**. We
    can find Google Play Services in the packages list under the folder **Extras**.
    Select the **Google Play Services** checkbox and click on the **Install 1 package...**
    button.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这个库通过Android SDK管理器（软件开发工具包管理器）进行分发，具体将在[第7章](ch07.html "第7章. 工具")《工具》中进行详细介绍。要打开它，请导航到**工具**
    | **Android** | **SDK管理器**。在**Extras**文件夹下的软件包列表中我们可以找到Google Play服务。勾选**Google
    Play服务**复选框，然后点击**安装1个软件包...**按钮。
- en: '![Adding Google Play Services to Android Studio](img/5273OS_06_01.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![向Android Studio添加Google Play服务](img/5273OS_06_01.jpg)'
- en: Performing these actions will add the library project into the location of our
    SDK installation folder, `/sdk/extras/google/google_play_services/`. You can check
    the exact path by hovering the mouse over the Google Play Services row in the
    SDK manager and looking at the tool tip.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 执行这些操作将把库项目添加到我们SDK安装文件夹的位置，`/sdk/extras/google/google_play_services/`。你可以在SDK管理器中悬停在Google
    Play服务行上，查看工具提示来检查确切的路径。
- en: '![Adding Google Play Services to Android Studio](img/5273OS_06_02.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![向Android Studio添加Google Play服务](img/5273OS_06_02.jpg)'
- en: Navigate to the library folder to examine its content. The `samples` folder
    contains sample projects of the authentication service (`auth/`), the Google Maps
    v2 service (`maps/`), the Google+ service (`plus/`), and the Panorama service
    (`panorama/`). The folder that contains the Google Play Services library project
    is `libproject/`. In this project folder is where the `google-play-services.jar`
    file is placed, `libproject/google-play-services_lib/libs/ google-play-services.jar`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到库文件夹以检查其内容。`samples`文件夹包含身份验证服务（`auth/`）、Google Maps v2服务（`maps/`）、Google+服务（`plus/`）以及全景服务（`panorama/`）的示例项目。包含
    Google Play Services 库项目的文件夹是`libproject/`。在这个项目文件夹中放置了`google-play-services.jar`文件，即`libproject/google-play-services_lib/libs/google-play-services.jar`。
- en: Add this JAR file to your project by just dragging it into the `libs/` folder.
    Once this is done, select the JAR file and press the right mouse button on it.
    Select the **Add as Library** option. In the **create library** dialog, select
    the project library level, select your application module, and click on **OK**.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 只需将此 JAR 文件拖放到`libs/`文件夹中即可将其添加到项目中。完成此操作后，选择 JAR 文件并在其上按鼠标右键。选择**作为库添加**的选项。在**创建库**对话框中，选择项目库级别，选择您的应用程序模块，然后点击**确定**。
- en: You now have the `google-play-services.jar` file available in your project libraries,
    under the `libs/` folder, and you will now be able to reference Google Play Services
    from your code.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以在项目库的`libs/`文件夹下找到`google-play-services.jar`文件，现在您将能够从代码中引用 Google Play
    服务。
- en: 'Finally, you will need to add the library to your Gradle''s build file. To
    do this just edit the file `MyApplication/build.gradle` and add the following
    line in the `dependencies` section:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您需要将库添加到您的 Gradle 构建文件中。为此，只需编辑`MyApplication/build.gradle`文件，并在`dependencies`部分添加以下行：
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Google Maps Android API v2
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Google Maps Android API v2
- en: Google Maps Android API allows the user of your application to explore the maps
    available at the Google service. The new Maps Version 2 offers more functionalities
    such as 3D maps, indoor and satellite maps, efficient caching and drawing using
    vector-based technology, and animated transitions through the map.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Google Maps Android API 允许您的应用程序用户探索 Google 服务上可用的地图。新的地图版本2提供了更多功能，如3D地图、室内和卫星地图、基于矢量技术的有效缓存和绘制，以及地图上的动画过渡。
- en: Let's import the sample project to examine the most important classes. Click
    on **File** | **Import Project**. Search for the sample project in your SDK installation
    folder and select the project root directory, /`google_play_services/samples/maps/`.
    In the next dialog, check the **Create project from existing sources** option.
    Continue clicking on **Next** in the successive dialogs and finally click on the
    **Finish** button and open the sample project in a new window. Now we have the
    Google Play Services project and the maps sample project loaded in a new window
    in Android Studio.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们导入示例项目以检查最重要的类。点击**文件** | **导入项目**。在你 SDK 安装文件夹中搜索示例项目，并选择项目根目录，即 `/google_play_services/samples/maps/`。在下一个对话框中，勾选**从现有源创建项目**的选项。在后续的对话框中继续点击**下一步**，最后点击**完成**按钮，在新的窗口中打开示例项目。现在我们在
    Android Studio 的新窗口中加载了 Google Play Services 项目和地图示例项目。
- en: Open the `BasicMapActivity` class to examine a simple example of the use of
    Google Maps. You can find this activity in the maps project inside the `src/`
    folder. The package `com.google.android.gms.maps` contains the Google Maps Android
    API classes.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`BasicMapActivity`类，查看一个使用 Google Maps 的简单示例。你可以在`src/`文件夹中的 maps 项目里找到这个活动。`com.google.android.gms.maps`包包含了
    Google Maps Android API 的类。
- en: 'This activity declares a private `GoogleMap` object named as `mMap`. The **GoogleMap
    class** is the main class of the API and it is the entry point for all the methods
    related to a map. You may change the theme colors and the icons of your map to
    match your application style. You can also customize your map by adding markers
    to your maps. To add a simple marker you can use the `addMarker` method of the
    `GoogleMap` class. Examine the `setUpMap` method in the `BasicMapActivity` class
    to see the following code example:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 此活动声明了一个名为`mMap`的私有`GoogleMap`对象。**GoogleMap 类**是 API 的主要类，它是与地图相关的所有方法的入口点。您可以更改地图的主题颜色和图标以匹配您应用程序的风格。您还可以通过向地图添加标记来自定义地图。要添加一个简单的标记，你可以使用`GoogleMap`类的`addMarker`方法。在`BasicMapActivity`类中检查`setUpMap`方法，查看以下代码示例：
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The method `addMarker` has a `MarkerOptions` object as parameter. Using the
    method `position` we indicate the coordinates of the marker on the map and using
    the method `title` we can add a custom string to show up on the marker.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`addMarker`方法有一个`MarkerOptions`对象作为参数。使用`position`方法我们指定地图上标记的坐标，使用`title`方法我们可以添加一个自定义字符串在标记上显示。'
- en: To add a map into a layout we can use the `MapView` class, which extends the
    class `View` and displays a map. But the easiest way to place a map in an application
    is using a `MapFragment` object. A fragment represents a piece of the user interface
    or behavior that can be embedded in an activity. A fragment is a reusable module.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要将地图添加到布局中，我们可以使用`MapView`类，它扩展了`View`类并显示了一个地图。但在应用程序中放置地图的最简单方法是使用`MapFragment`对象。片段表示可以嵌入活动中的用户界面或行为的一部分。片段是一个可重用的模块。
- en: 'The **MapFragment class** wraps a view of a map to automatically handle the
    necessary life cycle needs of a component. It extends the class `Fragment` and
    can therefore be added to a layout by adding the following XML code:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**MapFragment类**包装了一个地图视图，以自动处理组件的生命周期需求。它扩展了`Fragment`类，因此可以通过添加以下XML代码将其实例添加到布局中：'
- en: '[PRE2]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: To see an example of the previous code, open the layout associated to the `BasicMapActivity`
    class; this is the `basic_demo.xml` file in the `/res/layout/` folder.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看前面代码的示例，请打开与`BasicMapActivity`类关联的布局；这是`/res/layout/`文件夹中的`basic_demo.xml`文件。
- en: Finally, we need the code to obtain the `GoogleMap` object from the fragment.
    We can find the map `Fragment` using the method `findFragmentById`, and then we
    get the map from the `Fragment` using the method `getMap`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要从片段中获取`GoogleMap`对象的代码。我们可以使用`findFragmentById`方法找到地图`Fragment`，然后使用`getMap`方法从`Fragment`中获取地图。
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The example of this code in the `BasicMapActivity` class is in the `setUpMapIfNeeded`
    method.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在`BasicMapActivity`类中，此代码的示例位于`setUpMapIfNeeded`方法中。
- en: 'One last important class is the `GoogleMapOptions` class, which defines the
    configuration for a map. You can also modify the initial state of a map by editing
    the layout XML code. Here are some interesting options available:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个重要的类是`GoogleMapOptions`类，它定义了地图的配置。您还可以通过编辑布局XML代码来修改地图的初始状态。以下是一些可用的有趣选项：
- en: '`mapType`: Specify the type of a map. Its value can be `none`, `normal`, `hybrid`,
    `satellite,` and `terrain`.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mapType`：指定地图的类型。其值可以是`none`、`normal`、`hybrid`、`satellite`和`terrain`。'
- en: '`uiCompass`: Define whether compass controls are enabled or disabled.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`uiCompass`：定义罗盘控制是否启用或禁用。'
- en: '`uiZoomControls`: Define whether zoom controls are enabled or disabled.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`uiZoomControls`：定义缩放控制是否启用或禁用。'
- en: '`cameraTargetLat` and `cameraTargetLong`: Specify the initial camera position.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cameraTargetLat`和`cameraTargetLong`：指定初始相机位置。'
- en: Google+ Platform for Android
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Android上的Google+平台
- en: Using the Google+ Platform for Android lets the developer authenticate users
    with the same credentials they use on Google+. You can also use the public profile
    and social graph to be able to welcome the users by their name, display their
    pictures, or connect with friends.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Android上的Google+平台可以让开发者用用户在Google+上使用的相同凭据对用户进行身份验证。您还可以使用公开的个人资料和社会关系图来欢迎用户，显示他们的名字、照片，或者与朋友建立联系。
- en: The package `com.google.android.gms.plus` contains the Google+ Platform for
    Android classes. Import the Google+ sample project to learn about the most important
    classes. The Google+ sample project can be found in the Google Play Services installation
    folder, in /`google_play_services/samples/plus/`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 包`com.google.android.gms.plus`包含了Android上的Google+平台类。导入Google+示例项目以了解最重要的类。Google+示例项目可以在Google
    Play Services安装文件夹中找到，位于`/google_play_services/samples/plus/`。
- en: '`PlusClient` and `PlusClient.Builder`: `PlusClient` is the main class of the
    API. It is the entry point for Google+ integration. `PlusClient.Builder` is a
    builder to configure the `PlusClient` object to communicate properly with the
    Google+ APIs.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PlusClient`和`PlusClient.Builder`：`PlusClient`是API的主要类。它是Google+集成的入口点。`PlusClient.Builder`是一个构建器，用于配置`PlusClient`对象以正确与Google+
    API通信。'
- en: '`PlusOneButton`: The class to implement a +1 button to recommend a URL on Google+.
    Add it to a layout using the following code:'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PlusOneButton`：实现Google+上的+1按钮以推荐URL的类。使用以下代码将其添加到布局中：'
- en: '[PRE4]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The available sizes are small, medium, tall, or standard.
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可用的尺寸有小型、中型、大型或标准。
- en: Example code about this functionality can be found in the sample project, in
    the `PlusOneActivity` class in the `src/` folder and its associated layout, `plus_one_activity.xml`
    in the `res/layout/` folder.
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 关于此功能的示例代码可以在示例项目中找到，在`src/`文件夹中的`PlusOneActivity`类及其关联的布局`res/layout/plus_one_activity.xml`中。
- en: '`PlusShare`: Include resources in posts shared on Google+. Example code about
    sharing resources can be found in the `ShareActivity` class in the `src/` folder
    and its associated layout, `share_activity.xml` in the `res/layout/` folder.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PlusShare`：在Google+上共享的帖子中包含资源。关于共享资源的示例代码可以在`src/`文件夹中的`ShareActivity`类及其关联的布局`res/layout/share_activity.xml`中找到。'
- en: First of all, a `PlusClient` object should be instantiated in the `onCreate`
    method of your activity class to call its asynchronous method `connect`, which
    will connect the client to Google+ services. When the app is done using a `PlusClient`
    instance, it should call the method `disconnect,` which terminates the connection,
    and should also always be called from the `onStop` method of the activity.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，应在活动类的`onCreate`方法中实例化一个`PlusClient`对象，以调用其异步方法`connect`，这将连接客户端到Google+服务。当应用完成使用`PlusClient`实例时，它应该调用`disconnect`方法，该方法将终止连接，并且也应该始终从活动的`onStop`方法中调用。
- en: Google Play In-app Billing v3
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Google Play应用内购买v3
- en: In-app Billing v3 allows you to sell virtual content from your apps. This virtual
    content may be paid once with a one-time billing or may be a timed concession
    through subscriptions or fees. Using this service, you can allow users to pay
    for extra features and access premium content.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 应用内购买v3允许您从应用中出售虚拟内容。这种虚拟内容可以通过一次性计费支付一次，也可以通过订阅或费用进行计时特许。使用这项服务，您可以允许用户为额外功能付费并访问高级内容。
- en: 'Any app published in Google Play Store can implement the In-app Billing API,
    since it only requires the same accounts as publishing an app: a Google Play Developer
    Console account and a Google Wallet merchant account.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 任何在Google Play商店发布的应用都可以实现应用内购买API，因为它只需要与发布应用相同的账户：一个Google Play开发者控制台账户和一个Google
    Wallet商家账户。
- en: 'Using the Google Play Developer Console you can define your products, including
    type, identification code (SKU), price, description, and more. Once you have your
    products defined, you can access this content from this application. When the
    user wants to buy this content, the following purchase flow will happen between
    your In-app Billing application and Google Play App:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Google Play开发者控制台，您可以定义您的产品，包括类型、识别代码（SKU）、价格、描述等。定义好产品后，您可以从这个应用程序访问这些内容。当用户想要购买这些内容时，以下购买流程将在您的应用内购买应用和Google
    Play应用之间发生：
- en: Your app calls `isBillingSupported()` to Google Play to check if the In-app
    Billing version you are using is supported.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的应用调用`isBillingSupported()`来检查Google Play是否支持您正在使用的应用内购买版本。
- en: If the In-app Billing API version is supported, you may use `getPurchases()`
    to get a list of the SKUs of the purchased items. This list will be returned in
    a `Bundle` object.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果支持应用内购买API版本，您可以使用`getPurchases()`来获取已购买物品的SKU列表。这个列表将返回在一个`Bundle`对象中。
- en: You will probably want to inform your user of the in-app purchases available.
    To do this your app may send a `getSkuDetails()` request, which will result in
    a list with the product's price, title, description, and more information available
    for the item.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可能想要通知用户可用的应用内购买选项。为此，您的应用可以发送一个`getSkuDetails()`请求，这将导致一个列表生成，其中包含产品的价格、标题、描述以及更多关于该物品的信息。
- en: Google Cloud Messaging
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Google云消息传递
- en: GCM for Android allows the communication between your server and your application
    through the use of asynchronous messages. You do not have to worry about handling
    low-level aspects of this communication such as queuing and message construction.
    Using this service, you can easily implement a notification system for your application.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Android的GCM允许通过使用异步消息在您的服务器和应用程序之间进行通信。您无需担心处理这种通信的低级别方面，如排队和消息构造。使用这项服务，您可以轻松地为您的应用实现一个通知系统。
- en: 'You have two options when using GCM:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 使用GCM时，您有两个选项：
- en: The server can inform your app that there is new data available to be fetched
    from the server and then the application gets this data.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器可以通知您的应用有新的数据可供从服务器获取，然后应用程序获取这些数据。
- en: The server can send the data directly in a message. The message payload can
    be up to 4 KB. This allows your application to access the data at once and act
    accordingly.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器可以直接在消息中发送数据。消息负载可以达到4 KB。这使得您的应用程序可以一次性访问数据并相应地采取行动。
- en: 'In order to send or receive messages, you will need to get a registration ID.
    This registration ID identifies the combination of device and application. To
    allow your app to use the GCM service, you need to add the following line to the
    manifest file of your project:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 为了发送或接收消息，您需要获取一个注册ID。这个注册ID标识了设备和应用程序的组合。为了让您的应用程序使用GCM服务，您需要将以下行添加到项目的清单文件中：
- en: '[PRE5]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The main class you will need to use is `GoogleCloudMessaging`. This class is
    available in the package `com.google.android.gms.gcm`.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要使用的主要类是`GoogleCloudMessaging`。这个类在`com.google.android.gms.gcm`包中可用。
- en: Summary
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: By the end of this chapter, we know about the available Google Play Services.
    We learned how to improve our application using Google Play Services through its
    client library and Android package. The reader should have successfully installed
    the Google Play Services client library in Android Studio using the SDK Manager
    and should be able to build applications using the library features. We have also
    learned some tips about Google Maps v2, Google+ Platform for Android authentication,
    Google Play In-app Billing, and GCM.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，我们将了解可用的Google Play服务。我们学习了如何通过其客户端库和Android包来改善我们的应用程序。读者应该已经通过SDK管理器在Android
    Studio中成功安装了Google Play服务客户端库，并且应该能够使用库功能构建应用程序。我们还学习了一些关于Google Maps v2、用于Android身份验证的Google+平台、Google
    Play应用内购买和GCM的技巧。
- en: In the next chapter we will learn about some useful tools available in the Android
    Studio. We will again use the SDK Manager in detail to install different packages.
    We will also learn about the AVD Manager to be able to have different virtual
    devices to test our applications on. We will generate Javadoc documentation for
    our project using the Javadoc utility and we will learn about the version control
    systems available in Android Studio.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将了解Android Studio中提供的某些有用工具。我们将再次详细使用SDK管理器来安装不同的包。我们还将学习关于AVD管理器，以便能够拥有不同的虚拟设备来测试我们的应用程序。我们将使用Javadoc工具为我们的项目生成Javadoc文档，并且我们将了解Android
    Studio中可用的版本控制系统。
