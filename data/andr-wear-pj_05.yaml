- en: Measuring Your Wellness and Syncing Collected Sensor Data
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测量您的健康状态并同步收集的传感器数据
- en: In the previous chapter, we built a Wear app that reminds us to drink water,
    and has the ability to check step counts and heart pulse rate through embedded
    Wear sensors. The ideology of Wear and mobile applications is to have better glanceability
    and never miss anything important, and project Upbeat seems, with few functionalities,
    to have a strong place in a user's wrist and pocket. The current functionality
    of the upbeat Wear app is limited to displaying the data received from the sensors.
    In this chapter, we are going to sweeten the app with interoperability with Wear
    and mobile apps. We will persist all transmitted data through `RealmDB`. We will
    fire a notification from a mobile to Wear to start the app for checking the pulse
    rate. We will have a list of health tips and food calorie cards in the Wear application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们构建了一个提醒我们喝水的Wear应用，并通过内置的Wear传感器检查步数和心率。Wear和移动应用的理念是提高浏览的便捷性，不错过任何重要信息，而Upbeat项目看似功能不多，但在用户的腕上和口袋中占有一席之地。目前upbeat
    Wear应用的功能仅限于显示从传感器接收到的数据。在本章中，我们将通过Wear和移动应用的互操作性来增强这个应用。我们将通过`RealmDB`持久化所有传输的数据。我们将从移动设备向Wear发送通知，启动应用以检查心率。我们将在Wear应用中拥有健康提示和食物卡路里卡片列表。
- en: 'In this chapter, we will explore the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨以下内容：
- en: Collecting Wear sensor's data
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 收集Wear传感器的数据
- en: Processing received data to find calories and distance
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理接收到的数据以查找卡路里和距离
- en: '`WearableListenerService` and Messaging API'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WearableListenerService`和消息传递API'
- en: Sending data to a Wear app from the mobile app
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从移动应用向Wear应用发送数据
- en: '`RealmDB` integration'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RealmDB`集成'
- en: '`WearableRecyclerview` with `CardView`'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`CardView`的`WearableRecyclerview`
- en: Collecting Wear sensors' data
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 收集Wear传感器的数据
- en: Collecting sensor data from Wear devices needs a communication mechanism, and
    the Wearable DataLayer API, which is part of the Google Play services, plays a
    major role in the communication process. We will deeply explore the communication
    process in later lessons but in this chapter, we need to receive the sensor data
    in the mobile app. We have created the project, which already has a mobile module
    and the simple plain old Hello World boilerplate code. We will work on the mobile
    module once we set our data sending mechanism from the Wear app. Let's start with
    the step count sensor in the services package of the Wear module and go to the
    `WearStepService` class. We have built this service to fire a notification and
    listen to the step counter data. Now, with the help of `GoogleApiClient` and the
    Wear Messaging API, we need to send the data to the mobile app.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 从Wear设备收集传感器数据需要一个通信机制，而Wearable DataLayer API作为Google Play服务的一部分，在通信过程中扮演着重要角色。我们将在后续课程中深入探讨通信过程，但本章我们需要在移动应用中接收传感器数据。我们已经创建了一个项目，其中已经包含移动模块和简单的“Hello
    World”样板代码。当我们从Wear应用设置数据发送机制后，我们将处理移动模块。让我们从Wear模块的服务包中的步数传感器开始，进入`WearStepService`类。我们已经构建了这个服务，用于发送通知并监听步数计数器数据。现在，在`GoogleApiClient`和Wear消息传递API的帮助下，我们需要将数据发送到移动应用。
- en: 'In the `WearStepService` class, instantiate `GoogleApiClient` in the global
    scope of the class:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在`WearStepService`类中，在类的全局范围内实例化`GoogleApiClient`：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In `onStartCommand`, call a method that initializes `mGoogleApiClient`:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在`onStartCommand`中，调用初始化`mGoogleApiClient`的方法：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'For initializing `GoogleClient`, we will utilize the builder pattern of the
    `GoogleClient` and we need to add `Wearable.API`. Later, we can connect `GoogleClient`
    using the `connect()` method followed by the `build()` method of the builder:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了初始化`GoogleClient`，我们将使用`GoogleClient`的构建器模式，并需要添加`Wearable.API`。然后，我们可以使用`connect()`方法后跟构建器的`build()`方法连接`GoogleClient`：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Within the `WearStepService` class, we shall override the `onBind` method that
    belongs to the `IBinder` interface. We can use it for client interactions through
    the remote service as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在`WearStepService`类中，我们将重写属于`IBinder`接口的`onBind`方法。我们可以通过以下方式使用它进行远程服务的客户端交互：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We are returning null, since after sending data, we don''t want anything to
    return. If we want certain information to be returned, then we can return the
    `IBinder` instance as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们返回null，因为发送数据后我们不希望有任何返回。如果我们希望返回某些信息，那么我们可以按以下方式返回`IBinder`实例：
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: To be able to send data to mobile devices, we need two DataLayer API mechanisms,
    which are Wearable Node and Message API. We will get the connected nodes using
    Node API. Using the Messaging API, we will fire the data to a particular path,
    and on the receiver end, we should listen to that path for fetching the data.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够向移动设备发送数据，我们需要两个DataLayer API机制，即可穿戴节点和消息API。我们将使用Node API获取连接的节点。使用消息API，我们将数据发送到特定路径，而在接收端，我们应该监听该路径以获取数据。
- en: 'In the Node API, we will have the `Resultcallback` class, which returns a list
    of `ConnectedNodes`, and we have to implement the `onResult` method that has the
    ability to return the list of connected nodes. We can fire the message to all
    the connected nodes or for one that is connected. We can get the connected node''s
    name using `getDisplayname` of the node class, as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在Node API中，我们将有`Resultcallback`类，它返回`ConnectedNodes`的列表，我们必须实现具有返回连接节点列表能力的`onResult`方法。我们可以向所有连接的节点发送消息，或者只向已连接的节点发送。我们可以使用节点类的`getDisplayname`获取连接节点的名称，如下所示：
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'For now, we will use the Node and Message API and send the data to the connected
    node:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们将使用Node和Message API并将数据发送到连接的节点：
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the previous method, we will use the `PendingResults` class to retreive the
    connected node's results. After we receive the list of connected nodes, we can
    fire Messages using the `wearableMessageApi` class. Do not forget to send and
    receive the data to the same path.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个方法中，我们将使用`PendingResults`类来获取连接节点的结果。在我们收到连接节点的列表后，我们可以使用`wearableMessageApi`类发送消息。别忘了发送和接收数据到相同的路径。
- en: Completed WearStepService class
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 完成的WearStepService类
- en: 'The complete `WearStepService` class code is as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的`WearStepService`类代码如下：
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We are successfully firing a message to the mentioned path. Now, let's see how
    to retrieve the message from the Wear device. Inside the mobile module, create
    the additional package for code readability. We are going to name the packages
    models, services, and utils.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们成功地向提到的路径发送了消息。现在，让我们看看如何从Wear设备接收消息。在移动模块内部，为代码可读性创建额外的包。我们将把包命名为models、services和utils。
- en: 'It''s time to create a class that extends to `WearableListenerService` with
    the override method `onMessageReceived`. Create a class called `StepListener`
    and extend it to `WearableListenerService`; the code is as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候创建一个扩展了`WearableListenerService`并覆盖了`onMessageReceived`方法的类了。创建一个名为`StepListener`的类，并让它扩展`WearableListenerService`；代码如下：
- en: '[PRE8]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Registering the earlier service class in the manifest with the same path that
    the data sent over, the following code illustrates Wearable `DATA_CHANGED` and
    `MESSAGE_RECEIVED` actions with the data path:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在清单文件中使用与发送数据相同的路径注册之前的服务类，以下代码说明了可穿戴设备的`DATA_CHANGED`和`MESSAGE_RECEIVED`动作以及数据路径：
- en: '[PRE9]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The `Steplistner` class is completed; we can use this class to process the
    data further. In the `steplistener` class, we are registering the `localbroadcast`
    receiver class to send the received data across the scope of the broadcast receiver.
    Before we build a UI, we shall receive all the data in the mobile app in `MainActivity`.
    Write an inner class to read through the steps received:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`Steplistner`类已完成；我们可以使用这个类进一步处理数据。在`steplistener`类中，我们注册了`localbroadcast`接收器类，以在广播接收器的作用域内发送接收到的数据。在我们构建用户界面之前，我们将在移动应用程序的`MainActivity`中接收所有数据。编写一个内部类以读取收到的步骤：'
- en: '[PRE10]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Register the class in the `oncreate` method with the following code:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下代码在`oncreate`方法中注册该类：
- en: '[PRE11]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We are successfully collecting the step counter data. Let's do the same process
    to collect the pulse rate. We will persist the step counts and, later, we will
    have a live stream of the heart pulse rate transmitting over the connected nodes
    in real time.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们成功收集了步数计数器数据。让我们用同样的过程来收集脉搏速率。我们将持久化步数计数，稍后，我们将实时传输连接节点的心跳脉搏速率的实时流。
- en: Switching back to the Wear module
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 切换回Wear模块
- en: 'Switch the project scope to the Wear module and select `HeartRateFragment`
    to instantiate a `GoogleClient` object:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 将项目范围切换到Wear模块，并选择`HeartRateFragment`以实例化`GoogleClient`对象：
- en: '[PRE12]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Initialize the `GoogleClient` instance within the `oncreate` method as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在`oncreate`方法中初始化`GoogleClient`实例，如下所示：
- en: '[PRE13]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Write a method that sends the pulse rate count to the connected nodes, as we
    did earlier for the step counter:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个将脉搏速率计数发送到连接节点的方法，就像我们之前为步数计数器所做的那样：
- en: '[PRE14]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Call the method inside the `onSensorchanged` callback with the BPM count received
    from the sensor event trigger:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在`onSensorchanged`回调内部调用方法，并从传感器事件触发中接收BPM计数：
- en: '[PRE15]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Switch to the mobile project scope. We need one more `WearableListenerService`
    class to talk with the heart rate data:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 切换到移动项目范围。我们需要一个`WearableListenerService`类来与心率数据进行通信：
- en: '[PRE16]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Register a `localbroadcast` event inside the `onMessageReceived` callback to
    receive the data in activities. The complete listener class code is as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在`onMessageReceived`回调中注册一个`localbroadcast`事件，以在活动中接收数据。完整的监听器类代码如下：
- en: '[PRE17]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Register the `service` class in Manifest as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在Manifest中注册`service`类如下：
- en: '[PRE18]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'In `MainActivity`, we shall write another Broadcast receiver. Let''s call it
    `HeartRateReceiver`:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在`MainActivity`中，我们将编写另一个广播接收器。我们称之为`HeartRateReceiver`：
- en: '[PRE19]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Register `BroadcastReceiver` in the `oncreate` method as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在`oncreate`方法中如下注册`BroadcastReceiver`：
- en: '[PRE20]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: We are successfully receiving heart rate data directly from `HeartListener`
    to `broadcastreceiver`. Now, let's work on the User Interface for a Mobile project.
    We need to keep the UI comprehensively simple and powerful; the following design
    talks about interoperability with the Wear app and distance and calorie burn prediction.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经成功从`HeartListener`直接接收心率数据到`broadcastreceiver`。现在，让我们处理移动项目的用户界面。我们需要保持UI简单而强大；以下设计涉及到与Wear应用的互操作性以及距离和卡路里消耗预测。
- en: Conceptualizing the application
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概念化应用程序
- en: The upbeat mobile application should display the steps and pulse rate. Upbeat
    needs to send a pulse rate request to the Wear app. History shows the distance
    and calories burned from the database. Reset will clear the database.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Upbeat移动应用程序应显示步数和心率。Upbeat需要向Wear应用发送心率请求。历史记录显示从数据库中消耗的距离和卡路里。重置将清除数据库。
- en: 'Landing screen: when the user opens the app, he or she will see something similar
    to the following design:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 着陆页：当用户打开应用时，他将看到类似于以下设计的内容：
- en: '![](img/00066.jpeg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00066.jpeg)'
- en: 'Before we start working on the design, we need to be sure of a couple of things,
    such as the colors, backgrounds, and so on. Inside the `res/values` directory,
    open the `colors.xml` file and add the following color values:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始设计之前，我们需要确定一些事情，比如颜色、背景等。在`res/values`目录中，打开`colors.xml`文件，并添加以下颜色值：
- en: '[PRE21]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Create a `drawable` resource file, call it `button_bg.xml`, and add the following
    selector code for the background selection:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`button_bg.xml`的`drawable`资源文件，并添加以下选择器代码以选择背景：
- en: '[PRE22]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'In `activity_main.xml`, we need three buttons for the planned functionality
    as per the design and three textviews. We will use a relative layout as the root
    container and the following code explains how to do it:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在`activity_main.xml`中，根据设计和计划的功能，我们需要三个按钮和三个文本视图。我们将使用相对布局作为根容器，以下代码解释了如何操作：
- en: '[PRE23]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: To display heart rate, we have `LinearLayour` with `Imageview` and `Textview`,
    where `imageview` is going to be static. Instead, replace `imageview` with `HeartBeatView`
    we created in the Wear module for heart custom animation. Let's create it one
    last time.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 为了显示心率，我们有一个带有`Imageview`和`Textview`的`LinearLayour`，其中`imageview`将保持静态。相反，用我们在Wear模块中创建的`HeartBeatView`替换`imageview`，以实现心形自定义动画。让我们最后一次创建它。
- en: 'Inside the `res/values` folder, add the `heartbeatview_attrs.xml` file and
    add the following code:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在`res/values`文件夹内，添加`heartbeatview_attrs.xml`文件，并添加以下代码：
- en: '[PRE24]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Inside drawables, create a vector graphic XML file and add the following code
    inside for achieving the heart shape:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在drawables中，创建一个矢量图形XML文件，并在其中添加以下代码以实现心形：
- en: '[PRE25]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We can create a class called `HeartBearView` inside the utils package and add
    the following code for all the animations and custom view logic. For more details
    on the implementation, you can refer to the Wear module `HeartBeatView` class
    in the previous chapter:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在utils包内创建一个名为`HeartBearView`的类，并添加以下代码以处理所有动画和自定义视图逻辑。关于实现的更多细节，可以参考前一章中的Wear模块`HeartBeatView`类：
- en: '[PRE26]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Inside the `activity_main.xml` file, instead of `ImageView`, replace the code
    with a custom view created in the mobile project scope:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在`activity_main.xml`文件中，用项目中创建的自定义视图替换`ImageView`代码：
- en: '[PRE27]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Now that our landing page user interface is ready, we can get started by working
    on `MainActivity`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们的着陆页用户界面已经准备好了，我们可以开始处理`MainActivity`。
- en: 'In `MainActivity`, let''s instantiate all the UI components we used in the
    layout:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在`MainActivity`中，让我们实例化我们在布局中使用的所有UI组件：
- en: '[PRE28]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Map the components with its ID using the `findviewbyid` method inside the `oncreate`
    method:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在`oncreate`方法中使用`findviewbyid`方法将组件与其ID进行映射：
- en: '[PRE29]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Inside the `HeartRateReceiver` class, fetch the data, convert the data into
    integers, and show it in the UI. The following code illustrates activating `HeartBeatAnimation`
    with data received from the Wear app:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在`HeartRateReceiver`类中，获取数据，将数据转换为整数，并在UI中显示。以下代码说明如何使用从Wear应用接收的数据激活`HeartBeatAnimation`：
- en: '[PRE30]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'In `StepReceiver`, we shall set the data to the step count `textview` labelled
    as `mSteps`:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在`StepReceiver`中，我们将数据设置为标记为`mSteps`的步数`textview`：
- en: '[PRE31]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: We have completed receiving the pulse count and step count and showing it in
    the phone's UI. Now, we need to show the calories burned for those steps.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了接收脉搏数和步数并在手机的UI中显示。现在，我们需要显示这些步骤消耗的卡路里。
- en: 'Finding the calories burned from the step count can be achieved by a number
    of different methods based on your body mass index and so on. Research on this
    pedometer steps to calories have introduced a conversion factor, which is as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您的身体质量指数等，可以通过多种不同方法从步数计算消耗的卡路里。关于计步器步数到卡路里的研究引入了一个转换因子，如下所示：
- en: '*Conversion factor = 99.75 calories per mile / 2,200 steps per mile = 0.045
    calories per step*'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '*转换因子 = 每英里99.75卡路里 / 每英里2,200步 = 每步0.045卡路里*'
- en: So using this value, we can determine the calories by simply multiplying this
    value with the steps count.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，使用这个值，我们可以通过简单地将这个值与步数相乘来确定卡路里。
- en: '*Calories burned = 7,000 steps x 0.045 calories per step = 318 calories*'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '*消耗的卡路里 = 7,000步 x 每步0.045卡路里 = 318卡路里*'
- en: 'Within the `StepReceiver` class, inside the `onReceive` method, add the following
    code:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在`StepReceiver`类中，在`onReceive`方法内，添加以下代码：
- en: '[PRE32]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The calorie burn and pulse rate checking from the phone is completed. We still
    have more work in `MainActivity`. We need to persist the data of the step counter
    to show the history of calories and distance. Let's use `RealmDB`, which we tried
    in the first chapter.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 通过手机完成的卡路里消耗和脉搏率检查。在`MainActivity`中我们还有更多工作要做。我们需要将步数计数器的数据持久化，以显示卡路里和距离的历史记录。让我们使用第一章尝试过的`RealmDB`。
- en: 'Add the following classpath to the project level gradle file:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下classpath添加到项目级别的gradle文件中：
- en: '[PRE33]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Apply the previous plugin in the gradle mobile module:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在gradle移动模块中应用上一个插件：
- en: '[PRE34]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Realm is ready in the project. Now, we need setters and getters for the step
    data. Add the following class to the models package:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 项目中的Realm已准备就绪。现在，我们需要为步数数据设置setters和getters。将以下类添加到models包中：
- en: '[PRE35]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'In `MainActivity`, instantiate the Realm and initialize it in the `onCreate`
    method, as follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在`MainActivity`中，实例化Realm并在`onCreate`方法中初始化，如下所示：
- en: '[PRE36]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'When the step count is received, add the data to `RealmDB`. Add the following
    code inside the `onRecieve` method of the `StepReciever` inner class:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 当接收到步数时，将数据添加到`RealmDB`中。在`StepReceiver`内部类的`onReceive`方法内添加以下代码：
- en: '[PRE37]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'To show the last value in the UI, add the following code to the `onCreate`
    method:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在UI中显示最后一个值，在`onCreate`方法中添加以下代码：
- en: '[PRE38]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'For the buttons, now attach the click listeners to the `oncreate` method:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 对于按钮，现在将点击监听器附加到`onCreate`方法中：
- en: '[PRE39]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Let''s create another Activity and call it `HistoryActivity`, which will show
    the list of data received. In the `activity_history.xml` file, add the following
    code:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建另一个Activity，并将其命名为`HistoryActivity`，它将显示接收到的数据列表。在`activity_history.xml`文件中，添加以下代码：
- en: '[PRE40]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Now, we need `row_layout` for each item in `recyclerview` and the layout is
    shown as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要为`recyclerview`中的每个项目创建`row_layout`，布局如下所示：
- en: '[PRE41]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Remember, before using `cardview` and `recyclerview`, we need to add the support
    dependencies to our gradle module:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，在使用`cardview`和`recyclerview`之前，我们需要将依赖项添加到我们的gradle模块中：
- en: '`compile ''com.android.support:cardview-v7:25.1.1''`'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`compile ''com.android.support:cardview-v7:25.1.1''`'
- en: '`compile ''com.android.support:recyclerview-v7:25.1.1''`'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`compile ''com.android.support:recyclerview-v7:25.1.1''`'
- en: Recyclerview Adapter
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Recyclerview适配器
- en: 'We will have to create an `adapter` class that fetches data from the Realm
    and adapts to `row_layout` that is created:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将不得不创建一个`adapter`类，它从Realm获取数据并适配到创建的`row_layout`：
- en: '[PRE42]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: In adapter, we are showing calories burned with the conversion factor value.
    For finding a generic distance, we have another value and we need to multiply
    the steps to it, as shown in the adapter.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在适配器中，我们使用转换因子值显示消耗的卡路里。为了找到通用距离，我们还有另一个值，需要将步数乘以它，如适配器所示。
- en: 'In `HistoryActivity`, in the class global scope, declare the following instances:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在`HistoryActivity`中，在类全局范围内，声明以下实例：
- en: '[PRE43]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Now, in the `oncreate` method of the `HistoryActivity` class, add the following
    code:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在`HistoryActivity`类的`onCreate`方法中，添加以下代码：
- en: '[PRE44]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Completed HistoryActivity Class
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 完成的`HistoryActivity`类
- en: 'The complete class would look as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的类代码如下所示：
- en: '[PRE45]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'In `MainActivity`, start `historyActivity` when the `mHistory` button is clicked:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在`MainActivity`中，当点击`mHistory`按钮时启动`historyActivity`：
- en: '[PRE46]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Now, it's time to send the data from the mobile to wear using the same method
    that we used in Wear.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候使用我们在Wear中使用的方法，将数据从移动设备发送到Wear设备了。
- en: 'We will create a class that extends `Thread` and, using Node and Message API,
    we will send the data as follows:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个扩展了`Thread`的类，并使用Node和Message API，以下方式发送数据：
- en: '[PRE47]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Inside the `mHeartPulse` button click listener, and start the `SendToDataLayerThread`
    class as follows:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在`mHeartPulse`按钮点击监听器内部，按如下方式启动`SendToDataLayerThread`类：
- en: '[PRE48]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Now, switch back to the Wear project scope and add a new class that extends
    to `WearableListenerService`. When it receives a message from the mobile app,
    then fire a notification to start the application. The complete class code is
    as follows:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，切换回Wear项目范围，并添加一个扩展了`WearableListenerService`的新类。当它从移动应用接收到消息时，触发一个通知来启动应用程序。完整的类代码如下：
- en: '[PRE49]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Now, register the previously mentioned service in the manifest with the correct
    path mobile app using the following:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在清单文件中使用正确的路径注册之前提到的服务，使用以下代码为移动应用注册：
- en: '[PRE50]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Let''s switch back to the mobile project scope and finish the reset button
    click event. We will write a method that flushes the `RealmDB` data and recreates
    the activity:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们切换回移动项目范围，完成重置按钮点击事件。我们将编写一个方法，该方法刷新`RealmDB`数据并重新创建活动：
- en: '[PRE51]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Inside the click listener, add the following methods as follows:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在点击监听器内部，以下方式添加以下方法：
- en: '[PRE52]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Switch to Wear project scope and create a new Activity for health tips, and
    we will call the activity `HealthTipsActivity`. Here, on this screen, we will
    list a few good health tips and suggestions.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 切换到Wear项目范围，并为健康建议创建一个新的Activity，我们将这个活动称为`HealthTipsActivity`。在这个屏幕上，我们将列出一些好的健康建议和提示。
- en: 'In `activity_health_tips.xml`, add the following code:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在`activity_health_tips.xml`中，添加以下代码：
- en: '[PRE53]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'We need to add one more layout for the row item for the tips activity. We will
    call this layout `health_tips_row.xml`:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要为建议活动添加一个更多布局的行项目。我们将这个布局称为`health_tips_row.xml`：
- en: '[PRE54]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Create a model that contains the required fields. We shall create setters and
    getters with a full parameterized constructor for all the fields:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个包含所需字段的模型。我们将为所有字段创建带有完整参数化构造函数的设置器和获取器：
- en: '[PRE55]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'We shall have another data class that will keep all the health tips:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将有一个保存所有健康建议的另一个数据类：
- en: '[PRE56]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Now, we shall create an adapter to work with the list of health advice. The
    following code takes the data and loads it in `wearablerecyclerview`:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将创建一个适配器来处理健康建议列表。以下代码获取数据并在`wearablerecyclerview`中加载：
- en: '[PRE57]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Within the global scope of the activity, declare the following instances:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在活动的全局范围内，声明以下实例：
- en: '[PRE58]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Inside the `oncreate` method, we can complete the app by adding the following
    code:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在`oncreate`方法内部，我们可以通过添加以下代码来完成应用：
- en: '[PRE59]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Let's create another Activity for a generic calories chart from an international
    food list and call the activity `CalorychartActivity`.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建另一个Activity，用于通用卡路里图表，从国际食物列表中调用活动`CalorychartActivity`。
- en: 'In the `CaloryChartActivity` layout file, we will add the `WearableRecyclerView`
    component:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在`CaloryChartActivity`布局文件中，我们将添加`WearableRecyclerView`组件：
- en: '[PRE60]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Create another layout for each calorie chart item and add the following code:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 为每个卡路里图表项目创建另一个布局，并添加以下代码：
- en: '[PRE61]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'We shall create the `model` class for the calories as follows:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将以下面的方式为卡路里创建`model`类：
- en: '[PRE62]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'We shall create another adapter for the calorie chart. The adapter is similar
    to the `HealthTips` adapter. Create a file `RecyclerViewCaloryAdapter` and add
    the following code to it:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建另一个卡路里图表的适配器。该适配器与`HealthTips`适配器类似。创建一个文件`RecyclerViewCaloryAdapter`并将以下代码添加到其中：
- en: '[PRE63]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'In the `CaloryChartActivity` global scope of the project, add the following
    instances:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在`CaloryChartActivity`项目的全局范围内，添加以下实例：
- en: '[PRE64]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Add the following code within the `oncreate` method:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在`oncreate`方法内部添加以下代码：
- en: '[PRE65]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: The following screens show the complete mobile and Wear app.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕显示了完整的移动和Wear应用。
- en: 'The following image illustrates the active screen that listens to the steps
    and pulse:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了监听步骤和脉搏的活动屏幕：
- en: '![](img/00067.jpeg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00067.jpeg)'
- en: 'The following image illustrates the healthy food tips screen in the Wear app.
    It is designed with `WearableRecyclerView`:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了Wear应用中健康食物建议屏幕。它使用`WearableRecyclerView`进行设计：
- en: '![](img/00068.jpeg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00068.jpeg)'
- en: 'The calorie chart for learning the calories available in different food items
    is shown in the following image:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图像展示了用于学习不同食品项中可提供热量的热量图表：
- en: '![](img/00069.jpeg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00069.jpeg)'
- en: Summary
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we understood the fundamentals of working with Wear and mobile
    applications. We have explored the API support for sending and receiving data
    from Wear to mobile and vice versa. Now, integrating `RealmDB` for any Wear projects
    will be easier.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了与穿戴设备和移动应用程序协作的基础知识。我们已经探索了从穿戴设备发送和接收数据到移动设备以及反向支持的API。现在，为任何穿戴项目集成`RealmDB`将会更加容易。
- en: In the next chapter, we will build a Google Maps application for Wear devices
    and we will persist the location data, understanding different map types and controls
    for Wear devices.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将为穿戴设备构建一个谷歌地图应用程序，并且我们将持久化位置数据，了解穿戴设备的不同地图类型和控制方法。
