- en: Chapter 7. Creating Particle Systems
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章. 创建粒子系统
- en: You can easily simulate fire, smoke, explosions, snow, and rain by using the
    built-in particle system bundled with the Cocos2d-x framework. This chapter will
    teach you how to create the effects mentioned here and will also teach you to
    customize them.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用Cocos2d-x框架内置的粒子系统，您可以轻松模拟火、烟、爆炸、雪和雨。本章将教您如何创建这里提到的效果，并教您如何自定义它们。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Creating collections of the Cocos2d-x objects
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建Cocos2d-x对象的集合
- en: Adding particle systems to our game
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将粒子系统添加到我们的游戏中
- en: Configuring the particle systems
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置粒子系统
- en: Creating customized particle systems
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义粒子系统
- en: Creating collections of the Cocos2d-x objects
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Cocos2d-x对象的集合
- en: We are going to add a particle system to our game to simulate the explosions
    each time the player touches a bomb. In the interest of doing this, we are going
    to use the `Vector` class located in the Cocos2d-x framework to create a collection
    of all the bomb objects created in our game, so that when the player touches the
    screen, we are going to traverse this collection to verify if the player has touched
    any of the bombs.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将向游戏中添加一个粒子系统，以模拟每次玩家触摸炸弹时的爆炸效果。为了做到这一点，我们将使用Cocos2d-x框架中的`Vector`类来创建游戏中创建的所有炸弹对象的集合，这样当玩家触摸屏幕时，我们将遍历这个集合以验证玩家是否触摸到了任何炸弹。
- en: 'If the player touches any bomb, we are going to:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果玩家触摸到任何炸弹，我们将要：
- en: Show an explosion at the location where the bomb sprite was
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在炸弹精灵所在位置显示爆炸效果
- en: Make the bomb invisible
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使炸弹不可见
- en: Remove the bomb from the screen by using the inherited `removeChild` method,
    and finally
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用继承的`removeChild`方法从屏幕上移除炸弹，最后
- en: Remove the bomb object from the collection, so that the next time we traverse
    the vector, it is disregarded
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从集合中移除炸弹对象，这样下次我们遍历向量时，就会忽略它
- en: 'For this matter, we are going to add the bomb collection to our `HelloWorldScene.h`
    definition file as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们将炸弹集合按照以下方式添加到我们的`HelloWorldScene.h`定义文件中：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Be aware that we are specifying that we want to use the `Vector` class bundled
    with the `cocos2d` namespace, so that the compiler can clearly know that we are
    referring to the framework's built-in collection class and not the `Vector` class
    contained in the `std` namespace. Although it is possible to use the `Vector`
    class in the `std` namespace, the one located in the framework is optimized so
    as to be used in the Cocos2d-x object collection.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们指定要使用`cocos2d`命名空间中捆绑的`Vector`类，这样编译器可以清楚地知道我们是指向框架内置的集合类，而不是`std`命名空间中的`Vector`类。尽管可以使用`std`命名空间中的`Vector`类，但位于框架中的类是针对在Cocos2d-x对象集合中使用而优化的。
- en: Note
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `Vector` class introduced in the Cocos2d-x 3.0 represents the object collections
    by using the C++ standards, as opposed to the deprecated `CCArray` class that
    modeled the Cocos2d-x object collections, by using the objective C container classes.
    This new class takes care of the reference counting mechanism used in Cocos2d-x
    for memory management, it also adds the functionalities that are non-existent
    in `std::vector`, such as the `random`, `contains`, and `equals` methods.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Cocos2d-x 3.0中引入的`Vector`类使用C++标准来表示对象集合，与使用Objective-C容器类来建模Cocos2d-x对象集合的已弃用的`CCArray`类相对。这个新类处理Cocos2d-x中用于内存管理的引用计数机制，它还添加了`std::vector`中不存在的功能，如`random`、`contains`和`equals`方法。
- en: You should only use the `std::vector` instances if you need to pass them as
    a parameter to a function of a Cocos2d-x API class that is expecting the data
    type such as the `setSearchPaths` method in the `FileUtils` class.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 只有在需要将实例作为参数传递给预期数据类型的Cocos2d-x API类函数时，才应使用`std::vector`实例，例如`FileUtils`类中的`setSearchPaths`方法。
- en: 'Now let us go to the `init` method located in our `HelloWorldScene.cpp` implementation
    file, and just next to the declaration of the `_sprBomb` variable that holds a
    reference to the first bomb sprite, we are going to add this reference to our
    new `_bombs` collection as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们转到位于`HelloWorldScene.cpp`实现文件中的`init`方法，在声明持有第一个炸弹精灵引用的`_sprBomb`变量旁边，我们将按照以下方式将此引用添加到我们的新`_bombs`集合中：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, let us go to the `addBombs` method that we have created in our previous
    chapters for adding more bombs to our game. In this method, we are going to add
    each bomb spawned in our game scene to the `_bombs` collection as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们回到在我们之前章节中创建的 `addBombs` 方法，以向我们的游戏中添加更多炸弹。在这个方法中，我们将把游戏中场景中生成的每个炸弹添加到
    `_bombs` 集合中，如下所示：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Exploding bombs
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 爆炸的炸弹
- en: 'We want our bombs to explode when we touch them. To achieve this, we are going
    to create our `explodeBombs` method. In the `HelloWorldScene.h` header file, we
    are going to write the declaration as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望当我们触摸炸弹时它们能爆炸。为了实现这一点，我们将创建我们的 `explodeBombs` 方法。在 `HelloWorldScene.h` 头文件中，我们将按以下方式编写声明：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now we are going to write the method body in the `HelloWorldScene.cpp` implementation
    file; as mentioned earlier, each time the player touches the screen we can verify
    the touched location and compare it to the location of each bomb. If any intersection
    is found, then the touched bombs are going to disappear. As yet, we are not going
    to add any particle systems, we are going do that in later sections:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将在 `HelloWorldScene.cpp` 实现文件中编写方法体；如前所述，每次玩家触摸屏幕时，我们可以验证触摸的位置并与每个炸弹的位置进行比较。如果发现任何交集，那么被触摸的炸弹将会消失。目前，我们还不打算添加任何粒子系统，我们将在后面的章节中做这件事：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Please note that we have created another vector for the purpose of adding all
    the bombs that were touched by the user, and then they were removed from the `_bombs`
    collection in the other loop. The reason we did this instead of removing the objects
    directly from the first loop is that it would have given a runtime error. This
    is because we cannot perform concurrent modifications in a single collection,
    that is, we cannot remove an item from a collection while we are iterating over
    it. If we did that, then we would get a runtime error.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们创建了一个另一个向量，用于添加所有被用户触摸的炸弹，然后在另一个循环中将它们从 `_bombs` 集合中移除。我们这样做而不是直接从第一个循环中移除对象的原因是，这将会导致运行时错误。这是因为我们不能在遍历集合的同时对单一集合进行并发修改，即我们不能在遍历集合时从中移除一个项目。如果我们这样做，那么我们将得到一个运行时错误。
- en: Note
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `Vector` class was introduced in the Cocos2d-x 3.0\. It has replaced the
    `CCArray` class previously used in Cocos2d-x 2.x. We can iterate over the `Vector`
    instances by using C++11 for each feature; therefore, the `CCARRAY_FOREACH` macro
    that we have used in Cocos2d-x 2.x for iterating over the Cocos2d-x objects is
    no longer needed.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`Vector` 类是在 Cocos2d-x 3.0 中引入的。它替代了在 Cocos2d-x 2.x 中使用的 `CCArray` 类。我们可以使用
    C++11 的 for each 特性遍历 `Vector` 实例；因此，在 Cocos2d-x 2.x 中用于遍历 Cocos2d-x 对象的 `CCARRAY_FOREACH`
    宏不再需要。'
- en: 'Now, we are going to add a callback to our touch listener on the `onTouchBegan`
    property by making the following changes in our `initTouch` method located in
    our `HelloWorldScene.cpp` implementation file:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将在 `HelloWorldScene.cpp` 实现文件中的 `initTouch` 方法中通过以下更改向我们的触摸监听器添加一个回调到 `onTouchBegan`
    属性：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: And that is it, now the bombs will disappear whenever you touch them. In the
    next section, we will add an explosion effect to enhance the appearance of our
    game.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这样就完成了，现在当你触摸炸弹时，它们将会消失。在下一节中，我们将添加一个爆炸效果，以增强我们游戏的外观。
- en: Adding particle systems to our game
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向我们的游戏中添加粒子系统
- en: Cocos2d-x has built-in classes that allow you to render the most common visual
    effects such as explosions, fire, fireworks, smoke, and rain, among others, by
    displaying a large number of small graphic objects referred to as particles.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Cocos2d-x 有内置的类，允许你通过显示大量称为粒子的微小图形对象来渲染最常见的视觉效果，如爆炸、火焰、烟花、烟雾和雨等。
- en: 'It is very easy to implement. Let us add a default explosion effect, by simply
    adding the following lines to our `explodeBombs` method:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 实现起来非常简单。让我们通过简单地向我们的 `explodeBombs` 方法中添加以下行来添加一个默认的爆炸效果：
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![Adding particle systems to our game](img/B04193_07_01.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![向我们的游戏中添加粒子系统](img/B04193_07_01.jpg)'
- en: 'You can try the other particle systems embedded in the engine by changing the
    name of the particle class in the first highlighted line of the preceding code
    listing with the following class names: `ParticleFireworks`, `ParticleFire`, `ParticleRain`,
    `ParticleSnow`, `ParticleSmoke`, `ParticleSpiral`, `ParticleMeteor`, and `ParticleGalaxy`.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过更改前一段代码中突出显示的第一行中的粒子类名称，尝试引擎中嵌入的其他粒子系统，可以使用以下类名称：`ParticleFireworks`、`ParticleFire`、`ParticleRain`、`ParticleSnow`、`ParticleSmoke`、`ParticleSpiral`、`ParticleMeteor`
    和 `ParticleGalaxy`。
- en: Configuring the particle systems
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置粒子系统
- en: In the previous section, we created a realistic explosion by simply adding three
    lines of code. We can customize many parameters of a particle system. For instance,
    we could modify how much we would like our particle system to expand by modifying
    the life property.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们仅通过添加三行代码就创建了一个逼真的爆炸效果。我们可以自定义粒子系统的许多参数。例如，我们可以通过修改生命属性来调整我们希望粒子系统扩展的程度。
- en: We could also modify how big or how small we would want our particle system
    to be at the beginning and the size that we want it to have at the end, by setting
    the values to the `startSize` property and the `endSize` property. For example,
    if we would like to simulate the turbine of a rocket, then we could configure
    the emitter to start with a small size and to end with a big size.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过设置`startSize`属性和`endSize`属性来调整粒子系统在开始时的大小以及我们希望它在结束时的大小。例如，如果我们想模拟火箭的涡轮，那么我们可以配置发射器从小尺寸开始，到大尺寸结束。
- en: We can adjust the angle to which the particle is going to move by modifying
    the angle property. You can assign random angles to your particle systems, so
    that it will look more realistic.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过修改角度属性来调整粒子的移动角度。你可以为你的粒子系统分配随机角度，使其看起来更加真实。
- en: The particle systems can have two modes, radius and gravity. The most common
    particle systems use the gravity mode, on which we can parameterize the gravity,
    speed, radial, and tangential acceleration. This means that the particles created
    by the emitter are attracted by a force called gravity, and we can customize theirs
    horizontal and vertical components. The radial mode has the radial movement and
    rotation, so this mode of the particle systems will swirl in a spiral.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 粒子系统可以有两种模式，半径模式和重力模式。最常见的粒子系统使用重力模式，我们可以参数化重力、速度、径向和切向加速度。这意味着发射器创建的粒子会受到一个称为重力的力的吸引，我们可以自定义它们的水平和垂直分量。半径模式具有径向运动和旋转，因此这种模式的粒子系统将以螺旋形旋转。
- en: The total amount of particles can also be changed through the `totalParticles`
    property. The greater the amount of particles, the thicker the particle system
    will appear, but be aware that the amount of particles rendered also impacts the
    running performance. To give you an idea, the default explosion particle system
    has 700 total particles and the smoke effect has 200 total particles.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`totalParticles`属性也可以改变粒子的总数。粒子数量越多，粒子系统看起来越浓密，但要注意，渲染的粒子数量也会影响运行性能。举个例子，默认的爆炸粒子系统有700个粒子，而烟雾效果有200个粒子。
- en: Note
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意事项
- en: You can modify the properties mentioned in this section by calling the method,
    set<property name> in the emitter instance. For instance, if you want to modify
    the total particles of the system, then call the `setTotalParticles` method.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过调用发射器实例中的`set<属性名>`方法来修改本节中提到的属性。例如，如果你想修改系统的总粒子数，那么就调用`setTotalParticles`方法。
- en: 'In the following code listing, we will modify the total amount of particles,
    the speed, and the lifespan of the particle system:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码列表中，我们将修改粒子系统的总粒子数、速度和生命周期：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![Configuring the particle systems](img/B04193_07_02.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![配置粒子系统](img/B04193_07_02.jpg)'
- en: Creating customized particle systems
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义粒子系统
- en: So far, we have tried all the particle systems that are bundled with the Cocos2d-x
    framework, but during our journey as games developers, there will be many situations
    where we will have to create our own particle systems.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经尝试了Cocos2d-x框架中捆绑的所有粒子系统，但在我们作为游戏开发者的旅程中，将有很多情况需要我们创建自己的粒子系统。
- en: There are tools which allow us to create particle systems and adjust their properties
    in a very graphical way. This allows us to create the **What You See Is What You
    Get** (**WYSIWYG**) type of particle system.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些工具允许我们以非常图形化的方式创建和调整粒子系统的属性。这使我们能够创建**所见即所得（WYSIWYG）**类型的粒子系统。
- en: 'The most common application for creating the particle systems, which is actually
    mentioned several times within the official Cocos2d-x documentation, is called
    Particle Designer. It is currently available only for the Mac OS, and you need
    to buy the license in order to export the particle system to a plist file. You
    can download it and try it for free from the following link: [https://71squared.com/particledesigner](https://71squared.com/particledesigner).
    The Particle Designer is shown in the following screenshot:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 创建粒子系统最常用的应用程序，在Cocos2d-x官方文档中多次提到，名为Particle Designer。目前它仅适用于Mac OS，并且你需要购买许可证才能将粒子系统导出为plist文件。你可以从以下链接免费下载并试用：[https://71squared.com/particledesigner](https://71squared.com/particledesigner)。Particle
    Designer如下截图所示：
- en: '![Creating customized particle systems](img/B04193_07_03.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![创建自定义粒子系统](img/B04193_07_03.jpg)'
- en: 'You can also create your particle systems in a graphical way by using the following
    web app hosted at [http://www.particle2dx.com/](http://www.particle2dx.com/) for
    free:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过使用以下免费提供的网页应用程序，以图形化的方式创建你的粒子系统：[http://www.particle2dx.com/](http://www.particle2dx.com/)。
- en: '![Creating customized particle systems](img/B04193_07_04.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![创建自定义粒子系统](img/B04193_07_04.jpg)'
- en: You can also use the V-Play particle editor, which can be downloaded and used
    for free on the Windows, Android, iOS, and Mac platforms. These tools are available
    and can be downloaded from [http://games.v-play.net/particleeditor](http://games.v-play.net/particleeditor).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用V-Play粒子编辑器，它可以在Windows、Android、iOS和Mac平台上免费下载和使用。这些工具可以从以下链接获得：[http://games.v-play.net/particleeditor](http://games.v-play.net/particleeditor)。
- en: '![Creating customized particle systems](img/B04193_07_05.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![创建自定义粒子系统](img/B04193_07_05.jpg)'
- en: By using any of the previously mentioned tools, you can adjust the particle
    system properties, such as max particles, duration, lifetime, emission rate, and
    angle, and then save it in a plist file.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 使用前面提到的任何工具，你可以调整粒子系统的属性，比如最大粒子数、持续时间、生命周期、发射速率和角度等，并将其保存为plist文件。
- en: We have created our own particle system and exported it to a plist file. We
    are including it in the code archive bundled with the source code of this chapter.
    We have placed this plist file in a newly created folder, which is in the `Resources`
    directory named `particles`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了自己的粒子系统，并将其导出为plist文件。这个plist文件包含在本章源代码的代码归档中。我们将这个plist文件放置在一个新建的文件夹中，该文件夹位于`Resources`目录下的`particles`目录。
- en: 'Since our plist file is not in the root of the `Resources` folder, we need
    to add the `particles` directory to the search path within the `applicationDidFinishLaunching`
    method of the `AppDelegate` class by adding the following line of code just after
    adding the `sounds` directory to the `searchPaths`:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的plist文件不在`Resources`目录的根目录下，我们需要在`AppDelegate`类的`applicationDidFinishLaunching`方法中添加`particles`目录到搜索路径，只需在添加`sounds`目录到`searchPaths`之后加入以下代码行：
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The following code listing shows how to display our custom particle system
    by using the `ParticleSystemQuad` class and passing as a parameter to its `create`
    static method the name of the plist file generated by using the tool:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码展示了如何使用`ParticleSystemQuad`类显示我们的自定义粒子系统，并通过其`create`静态方法传递由工具生成的plist文件的名称作为参数：
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As you can see we have also added a line of code for playing an audio each time
    a bomb reaches our player sprite, so that it adds a more realistic effect. We
    have added this MP3 file to the code provided in this chapter.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们还添加了一行代码，以便每次炸弹接触到玩家精灵时播放音效，从而增加更真实的效果。这个MP3文件已包含在本章提供的代码中。
- en: '![Creating customized particle systems](img/B04193_07_06.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![创建自定义粒子系统](img/B04193_07_06.jpg)'
- en: Putting everything together
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将所有内容整合到一起
- en: During this chapter, we have added the particle systems to our game for adding
    realistic explosions each time our player touches a bomb. To achieve this goal,
    we have modified the `HelloWorldScene.h` header file and the `HelloWorldScene.cpp`
    implementation file.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们为游戏添加了粒子系统，使得玩家每次触碰炸弹都能产生逼真的爆炸效果。为了实现这一目标，我们对`HelloWorldScene.h`头文件和`HelloWorldScene.cpp`实现文件进行了修改。
- en: 'This is how our `HelloWorldScene.h` header file looks, after the modifications
    made during this chapter:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章修改后，我们的`HelloWorldScene.h`头文件如下所示：
- en: '[PRE10]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Finally, the following code listing shows how our `HelloWorldScene.cpp` implementation
    file looks after the modifications that we have made during this chapter:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，以下代码展示了在本章中我们修改后的`HelloWorldScene.cpp`实现文件的样子：
- en: '[PRE11]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Within the following method, we first verify whether or not the user has touched
    a bomb, if the user has, then an explosion particle system will be rendered at
    the location where the bomb was at the moment of the touch.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下方法中，我们首先验证用户是否触摸到了炸弹，如果用户触摸到了，那么将在触摸时刻炸弹所在位置渲染一个爆炸粒子系统。
- en: '[PRE12]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In the following method, we have added an event listener that will be triggered
    each time the user touches the screen in order to verify whether a bomb has been
    touched:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下方法中，我们添加了一个事件监听器，每次用户触摸屏幕时都会触发，以验证是否触摸到了炸弹：
- en: '[PRE13]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In the following method, we are adding the newly spawned bombs to our new `cocos2d:Vector`
    collection by using its `pushBack` method:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下方法中，我们通过使用其`pushBack`方法，将新产生的炸弹添加到我们的新的`cocos2d:Vector`集合中：
- en: '[PRE14]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Now we are going to see how our `init` method looks after the modifications
    done in this chapter. Note that we have added the first bomb, which was created
    during the initialization phase, to our new `cocos2d:Vector _bombs` collection.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看看在本章修改后，我们的`init`方法长什么样子。注意，我们已经将初始化阶段创建的第一个炸弹添加到了新的`cocos2d:Vector _bombs`集合中。
- en: '[PRE15]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Summary
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have seen how to use the particle systems to simulate realistic
    fire, explosions, rain, and snow in our game, how to customize them, and how to
    create them from scratch. We have also seen how to use the `Vector` class bundled
    with the Cocos2d-x API for creating collections of the Cocos2d-x objects.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何在游戏中使用粒子系统模拟真实的火焰、爆炸、雨雪，如何自定义它们，以及如何从零开始创建它们。我们还学习了如何使用Cocos2d-x
    API中捆绑的`Vector`类来创建Cocos2d-x对象的集合。
- en: In next chapter, we will show you how to add the Android native code to our
    game by using Java Native Interface (JNI).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将向您展示如何使用Java Native Interface (JNI)向我们的游戏中添加Android原生代码。
