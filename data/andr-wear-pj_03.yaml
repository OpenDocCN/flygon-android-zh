- en: Let us Help Capture What is on Your Mind - Saving Data and Customizing the UI
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让我们帮助捕捉你的想法 - 保存数据和定制 UI
- en: 'Building the note-taking application from scratch was a good learning experience.
    In this chapter, we will understand upgrading the same code for a new user interface
    with Wear design standards. The **Wear-note 1** app will get migrated to **Wear-note
    2** with the following update:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 从零开始构建记事本应用程序是一次很好的学习经历。在本章中，我们将了解如何按照 Wear 设计标准升级同一代码以实现新的用户界面。**Wear-note
    1** 应用程序将通过以下更新迁移到 **Wear-note 2**：
- en: Integrating the Realm database
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成 Realm 数据库
- en: UI updates
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UI 更新
- en: Integrating custom fonts and assets
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成自定义字体和资源
- en: Finalizing the project
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完成项目收尾工作
- en: To further assist the open wear-note 1 project in your Android Studio, compile
    the project and check the project screen by screen. You will discover that the
    main functionality of the application is saving notes on Wear devices. In this
    application, we have a white color background and black color font. `SharedPreferences`
    is helping the application to persist the data.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在 Android Studio 中进一步协助开源 wear-note 1 项目，编译项目并逐屏检查项目。你会发现该应用程序的主要功能是在 Wear
    设备上保存便签。在此应用程序中，我们有白色的背景和黑色的字体颜色。`SharedPreferences` 帮助应用程序持久化数据。
- en: Further recapping, we know how to work with `WearableRecyclerView`, `DelayedConfirmationView`,
    and `BoxInsetLayout` for getting the best application experience on Wear devices.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 进一步回顾，我们知道如何使用 `WearableRecyclerView`、`DelayedConfirmationView` 和 `BoxInsetLayout`
    在 Wear 设备上获得最佳的应用体验。
- en: 'Taking it forward, let''s get started on finishing the project with the changes
    mentioned earlier. Let''s call this application wear-note-2\. Go to your `values`
    directory in the `res` directory, and in the `string.xml` file, change the application
    name to Wear-note-2, as follows:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们按照之前提到的更改来完成项目。我们将这个应用程序称为 wear-note-2。在你的 `res` 目录下的 `values` 目录中，打开
    `string.xml` 文件，将应用程序名称更改为 Wear-note-2，如下所示：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![](img/00043.jpeg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00043.jpeg)'
- en: Wear-note-2
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Wear-note-2
- en: Let's start working on functionality and replacing the database with RealmDB
    in this submodule.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始在这个子模块中用 RealmDB 替换数据库并开发功能。
- en: '**RealmDB** is creating buzz in the modern Android programming world; it is
    a simple alternative to the SQLite database, which comes built into the Android
    SDK. Realm is not using SQLite as its core engine; it has its own C++ core, exclusively
    architected for mobiles. Realm saves the data in a universal, table-based format
    with a C++ core. Realm handles a range of sophisticated queries and can allow
    data accessibility from multiple languages as well as numerous ad hoc queries.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**RealmDB** 在现代 Android 编程世界中引起了轰动；它是内置在 Android SDK 中的 SQLite 数据库的一个简单替代品。Realm
    并没有使用 SQLite 作为其核心引擎；它有自己的 C++ 核心，专为移动设备而设计。Realm 使用 C++ 核心以通用、基于表的形式保存数据。Realm
    处理一系列复杂的查询，并允许从多种语言以及许多临时查询访问数据。'
- en: Advantages of Realm
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Realm 的优势
- en: Realm is 10x faster than SQLite
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Realm 的速度是 SQLite 的 10 倍
- en: Easy to use
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 易于使用
- en: Cross-platform
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跨平台
- en: Memory efficient
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存高效
- en: Well documented and excellent community support
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文档齐全且社区支持优秀
- en: Exploring more about Realm, there are numerous optimizations Realm does, such
    as integer packing and converting common strings into enums, which results in
    better performance than the SQLite + ORM database solutions. The traditional SQLite
    + ORM abstraction is leaky, ORM simply converts objects and their methods into
    SQL statements, which results in poor performance. On the other hand, Realm is
    an object-oriented database, which means your data is saved as objects and this
    is reflected in your database. Realm maps the whole data in the memory using B+
    trees and, whenever data is queried, Realm calculates the offset, reads from the
    memory mapped region, and returns the raw value. By doing this, Realm avoids zero-copy
    (the traditional way of reading data from a database leads to unnecessary copying
    (raw data > deserialized representation > language-level objects)).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 进一步探索 Realm，我们会发现 Realm 做了许多优化，比如整数打包和将常见字符串转换为枚举，这比 SQLite + ORM 数据库解决方案的性能更好。传统的
    SQLite + ORM 抽象是泄漏的，ORM 仅将对象及其方法转换为 SQL 语句，导致性能不佳。另一方面，Realm 是一个面向对象的数据库，这意味着你的数据以对象形式保存，这在你的数据库中得到了体现。Realm
    使用 B+ 树在内存中映射整个数据，每当查询数据时，Realm 计算偏移量，从内存映射区域读取，并返回原始值。通过这种方式，Realm 避免了零拷贝（传统的从数据库读取数据的方式会导致不必要的复制（原始数据
    > 反序列化表示 > 语言级对象））。
- en: Realm is the perfect choice whenever a developer wants to implement lazy-loading;
    because the properties are represented in columns instead of rows, it can lazy
    load the properties as necessary, and because of the column structure, reads are
    much faster, while inserts are slower. But that is a good trade-off for the context
    of a mobile application.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当开发者想要实现延迟加载时，Realm 是一个完美的选择；因为属性以列的形式表示而不是行，它可以按需延迟加载属性，并且由于列结构，读取速度更快，而插入速度较慢。但对于移动应用程序的上下文来说，这是一个很好的权衡。
- en: Realm uses the **Multiversion Concurrency Control** (**MVCC**) model, which
    means that multiple read transactions can be done at the same time and reads can
    also be done while a write transaction is being committed.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Realm 使用 **多版本并发控制**（**MVCC**）模型，这意味着可以同时进行多个读事务，并且在提交写事务的同时也可以进行读取。
- en: For more information, visit [https://realm.io/news/jp-simard-realm-core-database-engine/.](https://realm.io/news/jp-simard-realm-core-database-engine/)
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解更多信息，请访问[https://realm.io/news/jp-simard-realm-core-database-engine/.](https://realm.io/news/jp-simard-realm-core-database-engine/)
- en: Disadvantages of Realm
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Realm 的缺点
- en: 'Realm has a few bottlenecks that should be considered before choosing it. Nevertheless,
    these bottlenecks can be considered for a high scaling Android app:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择 Realm 之前，应该考虑其一些瓶颈。不过，对于高扩展性的 Android 应用程序，这些瓶颈是可以接受的：
- en: We cannot import Realmdb to other applications
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们无法将 Realmdb 导入到其他应用程序中
- en: We can't access the objects across threads
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们不能跨线程访问对象
- en: Doesn't have auto-increment of IDs
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不支持 ID 的自动递增
- en: Migrating Realmdb is a painful job
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 迁移 Realmdb 是一项痛苦的工作
- en: Lacks compound primary key
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缺乏复合主键
- en: Still under active development
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仍在积极开发中
- en: In the **Wear-note-1** project, after changing its name in `string.xml` to Wear-note-2,
    we need to add the appropriate Realm dependency in the gradle-project module.
    As of the time of writing this book, the newest Realm version is 3.0.0, so let's
    discuss the dependency and code in detail.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在 **Wear-note-1** 项目中，将 `string.xml` 中的名称更改为 Wear-note-2 后，我们需要在 gradle-project
    模块中添加适当的 Realm 依赖。在撰写本书时，最新的 Realm 版本是 3.0.0，因此我们将详细讨论依赖项和代码。
- en: Re-structuring the code and dependencies
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重新构建代码和依赖关系
- en: 'Realm has a new mechanism now. It''s not just a gradle dependency, it''s a
    gradle plugin. We will learn how to add and use Realm in the project. The gradle
    plugin dependency should be added to the project scope, which is a project level
    gradle dependency. Add the following classpath and allow it to sync to your project
    through the internet:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Realm 现在有了一个新机制。它不仅仅是一个 Gradle 依赖项，还是一个 Gradle 插件。我们将学习如何在项目中添加和使用 Realm。Gradle
    插件依赖项应该添加到项目范围，即项目级别的 Gradle 依赖项。添加以下类路径，并通过互联网使其与项目同步：
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Add this dependency to the gradle project level file located as shown in the
    following screenshot. Add `classpath` to the dependency section:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 将此依赖项添加到如下截图所示位置的 Gradle 项目级别文件中。在依赖项部分添加 `classpath`：
- en: '![](img/00044.jpeg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00044.jpeg)'
- en: 'After adding the class path dependency, the complete gradle file will look
    as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 添加类路径依赖后，完整的 Gradle 文件将如下所示：
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Next, we will apply the Realm plugin to our project to use all the Realm features
    as shown in the following screenshot:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将把 Realm 插件应用到项目中，以使用如以下截图所示的所有 Realm 功能：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](img/00045.jpeg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00045.jpeg)'
- en: 'A sample of gradle modified files have been open sourced by the Realm community:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Realm 社区已经开源了一些修改过的 Gradle 文件样本：
- en: '[https://github.com/realm/realm-java/blob/master/examples/build.gradle'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/realm/realm-java/blob/master/examples/build.gradle'
- en: https://github.com/realm/realm-java/blob/master/examples/introExample/build.gradle](https://github.com/realm/realm-java/blob/master/examples/build.gradle)
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: https://github.com/realm/realm-java/blob/master/examples/introExample/build.gradle](https://github.com/realm/realm-java/blob/master/examples/build.gradle)
- en: Now, we are all set to go for replacing our `SharedPreferences` with Realm.
    Let's get started.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经准备好将 `SharedPreferences` 替换为 Realm。让我们开始吧。
- en: 'Open Android Studio and, in the model package, we have defined our `Note.java`
    POJO class with primitive data string notes and string ID. We have the getters
    and setters for these variables. Additional changes are as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 Android Studio，在 model 包中，我们定义了 `Note.java` POJO 类，其中包含原始数据字符串 notes 和字符串
    ID。这些变量有它们的 getter 和 setter。额外的更改如下：
- en: 'Extend the POJO model to `RealmObject` and create an empty constructor:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 将 POJO 模型扩展到 `RealmObject` 并创建一个空构造函数：
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In `MainActivity`, we will instantiate the `Realm` class globally and we will
    initiate in the `onCreate` method as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `MainActivity` 中，我们将全局实例化 `Realm` 类，并在 `onCreate` 方法中如下初始化：
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In the `updateAdapter()` method, we will have to add the read query from Realm,
    which looks as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在`updateAdapter()`方法中，我们将必须添加从Realm读取的查询，如下所示：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The complete method will look as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的方法将如下所示：
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Realm database provides numerous queries, which maps one to one and one to many
    relationships for stored data and, for this project, the preceding query does
    all the magic needed.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Realm数据库提供了许多查询，这些查询为存储的数据建立了一对一和一对多的关系，对于这个项目，前面的查询完成了所需的所有神奇工作。
- en: 'In the `createNote()` method, we will change the code to work with Realm instead
    of `SharedPreference`, as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在`createNote()`方法中，我们将更改代码以使用Realm而不是`SharedPreference`，如下所示：
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'For deleting the records, let''s create a new method and call it `deleteRecord()`.
    In this method, we will pass the ID of the note and delete that note from the
    Realm:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 为了删除记录，让我们创建一个新方法，并将其命名为`deleteRecord()`。在这个方法中，我们将传递笔记的ID，并从Realm中删除该笔记：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, let''s call the delete record method in the `updateData()` method as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在`updateData()`方法中调用删除记录的方法，如下所示：
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The complete `MainActivity` code looks as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的`MainActivity`代码如下所示：
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now, functionally, we have Realmdb integrated to our Wear-note-2 app. Let's
    compile and see the result.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，从功能上讲，我们已经将Realmdb集成到了Wear-note-2应用中。让我们编译一下看看结果。
- en: 'The home screen of the Wear note-taking application looks as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Wear记事本应用的主屏幕如下所示：
- en: '![](img/00046.jpeg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00046.jpeg)'
- en: 'The IMF Screen that the Wear operating system handles to get the input from
    the user:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Wear操作系统处理的IMF屏幕，用于获取用户的输入：
- en: '![](img/00047.jpeg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00047.jpeg)'
- en: 'The ''Saved animation'' through default `confirmationActivity` in the Wear
    support library:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 通过Wear支持库中的默认`confirmationActivity`实现的‘保存动画’：
- en: '![](img/00048.jpeg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00048.jpeg)'
- en: 'Home screen with a saved note:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 保存了笔记的主屏幕：
- en: '![](img/00049.jpeg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00049.jpeg)'
- en: Now, we have replaced `Sharedpreference` with the best database of our time
    for Android.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经将`Sharedpreference`替换成了我们这个时代Android的最佳数据库。
- en: Working on the Wear User Interface
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Wear用户界面上的工作
- en: In the Wear-note application, we are using a white color background and a black
    color text with the default Roboto font. When preparing a good Wear application
    design, Google recommends using a dark color for the Wear application for the
    best battery efficiency. Light color schemes used in typical material designed
    mobile applications are not energy efficient in Wear devices. Light colors are
    less energy efficient in OLED displays.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在Wear-note应用中，我们使用白色背景和黑色文字，并使用默认的Roboto字体。在准备一个好的Wear应用设计时，谷歌建议使用深色来提高电池效率。典型材料设计中使用的浅色方案在Wear设备上并不节能。浅色在OLED显示屏上耗能更低。
- en: Light colors need to light up the pixels with brighter intensity. White colors
    need to light up the RGB diodes in the pixels at 100%; the more white and light
    color in the application, the lesser battery efficient the application will be.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 浅色需要以更亮的强度点亮像素。白色需要将像素中的RGB二极管点亮到100%；应用中白色和浅色越多，应用的电池效率就越低。
- en: Light colors are disruptive in dark light or when using your Wear device at
    night. This scenario would probably not happen with dark colors. Unlike light
    colors, dark colors make the screen less bright when they are active and saves
    battery in OLED displays.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 浅色在暗光下或夜间使用Wear设备时会产生干扰。这种情况在使用深色时可能不会发生。与浅色不同，深色在激活时使屏幕亮度降低，从而在OLED显示屏上节省电池。
- en: Let's get started working on the Wear-note-2 user interface
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让我们开始着手Wear-note-2用户界面工作
- en: Let's change the application theme for adapting the standard design guidelines.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更改应用主题以适应标准设计指南。
- en: In the `activity_main.xml` file, we will edit the parent container's background,
    which is the `BoxInsetLayout` background `android:background="#01579B"` to cobalt
    blue.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在`activity_main.xml`文件中，我们将编辑父容器的背景，即`BoxInsetLayout`的背景`android:background="#01579B"`改为钴蓝色。
- en: 'Add a new `color.xml` under the `values` directory and add the following code:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在`values`目录下添加一个新的`color.xml`文件，并加入以下代码：
- en: '[PRE12]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'After adding the color we can use the color in our production application as
    shown below:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 添加颜色后，我们可以在生产应用中使用该颜色，如下所示：
- en: '[PRE13]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Further, let''s change the color of the `EditText` hint color, as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 进一步，让我们更改`EditText`提示文字的颜色，如下所示：
- en: '[PRE14]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In the `each_item.xml` layout, modify the XML code as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在`each_item.xml`布局中，按照以下方式修改XML代码：
- en: '[PRE15]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now, do the same changes in the `activity_delete.xml` layout''s container,
    change its background color and change the color of `TextView`. Changing the color
    of `DelayedConfirmationView` can be done using the `xmlns` properties, as highlighted
    in the following code:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在`activity_delete.xml`布局容器的相同位置进行更改，改变其背景颜色和`TextView`的颜色。使用`xmlns`属性可以更改`DelayedConfirmationView`的颜色，如下代码所示：
- en: '[PRE16]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Developers need not worry about changing the color of animations in `DelayedConfirmationView`,
    Wear 2.0 automatically adapts to the theme of `DelayedConfirmationView` and changes
    the primary color schemes for creating a unified experience.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员无需担心更改`DelayedConfirmationView`中的动画颜色，Wear 2.0会自动适应`DelayedConfirmationView`的主题，并改变主色方案，以创建统一的体验。
- en: 'All these changes reflect in the application as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些更改将如下反映在应用程序中：
- en: '![](img/00050.jpeg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00050.jpeg)'
- en: 'IMF screen for fetching input from the user:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: IMF屏幕用于从用户获取输入：
- en: '![](img/00051.jpeg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00051.jpeg)'
- en: 'After saving the data using Realm:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Realm 保存数据后：
- en: '![](img/00052.jpeg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00052.jpeg)'
- en: 'Deleting the note from the database:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 从数据库中删除便签：
- en: '![](img/00053.jpeg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00053.jpeg)'
- en: Better fonts for better reading
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更好的字体，更好的阅读体验
- en: In the world of digital design, making your application's visuals easy on users'
    eyes is important. The Lora font from Google collections has well-balanced contemporary
    serifs with roots in calligraphy. It is a text typeface with moderate contrast
    well suited for body text. A paragraph set in Lora will be memorable because of
    its brushed curves in contrast with driving serifs. The overall typographic voice
    of Lora perfectly conveys the mood of a modern-day story, or an art essay. Technically,
    Lora is optimized for screen appearance.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在数字设计的世界中，让你的应用程序视觉效果对用户的眼睛友好是很重要的。来自谷歌收藏的Lora字体拥有平衡的现代衬线，其根源在于书法。这是一种中等对比度的文本字体，非常适合正文字体。设置为Lora的段落将因其刷过的曲线与有力的衬线形成对比而令人难忘。Lora的整体排版风格完美传达了现代故事或艺术论文的情绪。从技术上讲，Lora针对屏幕显示进行了优化。
- en: 'To add the custom fonts to an Android project, we need to create the `assets`
    folder in root. Check the following screenshot:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 要将自定义字体添加到Android项目中，我们需要在根目录中创建`assets`文件夹。查看以下截图：
- en: '![](img/00054.jpeg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00054.jpeg)'
- en: 'We can directly add the `.ttf` file assets directory or we can create another
    directory and the fonts. You can download the Lora font via this URL: [https://fonts.google.com/download?family=Lora](https://fonts.google.com/download?family=Lora).'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以直接将`.ttf`文件添加到资产目录中，或者我们可以创建另一个目录和字体。你可以通过这个URL下载Lora字体：[https://fonts.google.com/download?family=Lora](https://fonts.google.com/download?family=Lora)。
- en: After adding the font files to the asset folder, we need to create custom `Textview`
    and `EditText`.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 将字体文件添加到资产文件夹后，我们需要创建自定义的`Textview`和`EditText`。
- en: 'In the `utils` package, let''s create the class called `LoraWearTextView` and
    `LoraWearEditTextView`, as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在`utils`包中，让我们创建一个名为`LoraWearTextView`和`LoraWearEditTextView`的类，如下所示：
- en: '![](img/00055.jpeg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00055.jpeg)'
- en: 'Now, extend `LoraWearTextView` to the `TextView` class and `LoraWearEditTextView`
    to `EditText`. Implement the constructor methods in both the classes. Create a
    new method and call it `init()`. Inside the `init` method, instantiate the `Typeface`
    class and, using the `createFromAsset` method, we can set our custom font:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将`LoraWearTextView`扩展到`TextView`类，`LoraWearEditTextView`扩展到`EditText`类。在两个类中实现构造方法。创建一个名为`init()`的新方法。在`init`方法内部，实例化`Typeface`类，并使用`createFromAsset`方法，我们可以设置我们的自定义字体：
- en: '[PRE17]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The preceding `init` method is the same in both the classes. Call the `init`
    method in all the different parameterised constructors of the two new custom classes.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的`init`方法在这两个类中是相同的。在两个新自定义类的所有不同参数化构造函数中调用`init`方法。
- en: 'The complete class looks as follows: `LoraWearTextView.java`'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的类如下所示：`LoraWearTextView.java`
- en: '[PRE18]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The complete class looks as follows: `LoraWearEditTextView.java`'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的类如下所示：`LoraWearEditTextView.java`
- en: '[PRE19]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'After adding these two classes in our UI layouts, we can replace the actual
    `textview` and `edittext`:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的UI布局中添加这两个类之后，我们可以替换实际的`textview`和`edittext`：
- en: '[PRE20]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'After replacing `textview` and `edittext`, compile the program and let''s see
    the result:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 替换`textview`和`edittext`之后，编译程序，让我们看看结果：
- en: '![](img/00056.jpeg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00056.jpeg)'
- en: 'Remove Note animation through `confirmationViewActivity`:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`confirmationViewActivity`删除便签动画：
- en: '![](img/00057.jpeg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00057.jpeg)'
- en: In this chapter, we have explored how to integrate the Realm popular database,
    understood the design philosophy for wear devices, and created our custom view
    components for better application user experience.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了如何集成Realm流行数据库，理解了可穿戴设备的设计理念，并创建了自定义视图组件以获得更好的应用程序用户体验。
- en: Writing custom layouts for better UX
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写自定义布局以获得更好的用户体验
- en: Android offers great ways to customize the layouts that we use as containers.
    We can have compound views and customize the layout for our own purposes. Wearables
    use the same layout techniques as handheld Android devices, but need to be designed
    with specific constraints and configuration. It's not a good idea to port a functionality
    from a handheld android device component to Wear app designs. For designing a
    great Wear app, follow the Google design guidelines at [https://developer.android.com/design/wear/index.html](https://developer.android.com/design/wear/index.html).
    Let's create custom views and use them in the Wear note application.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: Android提供了很好的方法来定制我们用作容器的布局。我们可以有复合视图并自定义布局以实现我们自己的目的。可穿戴设备使用与手持Android设备相同的布局技术，但需要针对特定的约束和配置进行设计。将手持Android设备组件的功能移植到可穿戴应用设计并不是一个好主意。要设计一个优秀的可穿戴应用，请遵循Google的设计指南，访问[https://developer.android.com/design/wear/index.html](https://developer.android.com/design/wear/index.html)。让我们创建自定义视图并在可穿戴笔记应用程序中使用它们。
- en: Let's implement animations in our layouts with the way we are loading the items.
    We shall have a simple slide animation and we will do that with the custom layout
    we write.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照加载项目的方式来为我们的布局实现动画。我们将有一个简单的滑动动画，我们将用我们编写的自定义布局来实现这一点。
- en: 'Let''s create a class file called `AnimatedLinearLayout` and extend it to `LinearLayout`
    as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个名为`AnimatedLinearLayout`的类文件，并按照以下方式扩展它到`LinearLayout`：
- en: Compound views are the combination of two or more views bundled as one component,
    for instance, the Checkable Relative layout. When a user clicks on the layout,
    it will highlight the layout similar to the checkbox.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 复合视图是将两个或多个视图捆绑为一个组件，例如，可勾选的相对布局。当用户点击布局时，它会像复选框一样突出显示布局。
- en: '[PRE21]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now, we need the `Animation` class from `View`. Apart from the `Animation`
    class, declare the `View` instance for a `currentChild` view. Since we are writing
    a layout and it can hold the child''s hierarchy, we need a view instance for reference:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要从`View`获取`Animation`类。除了`Animation`类，还要为`currentChild`视图声明`View`实例。由于我们正在编写布局，它可以保存子层次结构，因此我们需要一个视图实例作为引用：
- en: '[PRE22]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'When we extend the class to `LinearLayout`, we get a couple of constructor
    `callbacks`, which we have to implement:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们扩展`LinearLayout`类时，我们会得到一些构造函数`回调`，我们必须实现这些回调：
- en: '[PRE23]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'In the `onWindowFocusChanged()` method, we can write our logic for the custom
    animation. Here, the book introduces `SlideDown`, `SlideDownMore`, `RotateClockWise`,
    `RotateAntiClockWise`, and `ZoomInAndRotateClockWise`. Now, to implement this,
    we need to check whether the view is inflated and has got the window to be displayed,
    and how many `childviews` the layout has:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在`onWindowFocusChanged()`方法中，我们可以编写自定义动画的逻辑。在这里，本书介绍了`SlideDown`、`SlideDownMore`、`RotateClockWise`、`RotateAntiClockWise`和`ZoomInAndRotateClockWise`。现在，为了实现这一点，我们需要检查视图是否已膨胀并且有窗口显示，以及布局有多少个`childviews`：
- en: '[PRE24]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Check whether the child is an instance of Viewgroup; if the view is developed
    completely in any other alienated way, then this custom layout will not be able
    to help that view to animate. Using the childviews tag property, we can assign
    a string association for animations, as follows:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 检查子元素是否是`Viewgroup`的实例；如果视图是完全以其他隔离方式开发的，那么这个自定义布局将无法帮助该视图进行动画处理。使用子视图的标签属性，我们可以为动画分配一个字符串关联，如下所示：
- en: '[PRE25]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'For the slide down animation, using the animation instance we created globally,
    we have to set the interpolator and decelerate the interpolation with the childviews
    height by the numeric value 2\. Check the following code:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 对于向下滑动动画，使用我们全局创建的动画实例，我们必须设置插值器并通过子视图的高度和数值2来减速插值。查看以下代码：
- en: '[PRE26]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Similarly, we will complete other cases. Let''s work on completing the `onWindowFocusChanged()`
    method:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们将完成其他情况。让我们开始完成`onWindowFocusChanged()`方法：
- en: '[PRE27]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now, we need to create an `AnimationRunnable` class, which implements the `Runnable`
    interface to start the animation:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要创建一个`AnimationRunnable`类，它实现了`Runnable`接口以启动动画：
- en: '[PRE28]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'We will implement another `AnimationSetRunnable` class to the runnable interface
    for setting the animation:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将实现另一个`AnimationSetRunnable`类到可运行接口以设置动画：
- en: '[PRE29]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now, we have completed our own custom layout that has a couple of animation
    methods to all our view childs in the layout. The complete class code for this
    custom layout looks as follows:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经完成了自己的自定义布局，该布局具有几种动画方法，可以应用于布局中的所有视图子项。这个自定义布局的完整类代码如下所示：
- en: '[PRE30]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now, after completely writing the class, it is time to use it in our project.
    We can use this classname as an XML tag and use it in the `each_item.xml` layout,
    which is the row item layout of `recyclerview`:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在完全编写完这个类之后，是时候在我们的项目中使用它了。我们可以将这个类名作为一个XML标签，并在`recyclerview`的行项布局`each_item.xml`中使用它：
- en: '[PRE31]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Replace the layout code with the new `AnimatedLinearLayout`. We need to pass
    the tag in `childviews` for getting animated. The following code explains this
    in detail:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 使用新的`AnimatedLinearLayout`替换布局代码。我们需要在`childviews`中传递标签以实现动画效果。以下代码详细解释了这一点：
- en: '[PRE32]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: This layout will draw all the views with small animations and display the list
    item.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这种布局将通过小型动画绘制所有视图并显示列表项。
- en: 'The `ZoomInAndRotateClockWise` animation and try changing the string exactly
    the same string given in the `Custom` class:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '`ZoomInAndRotateClockWise`动画，尝试将字符串更改为`Custom`类中给出的完全相同的字符串：'
- en: '![](img/00058.jpeg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00058.jpeg)'
- en: Summary
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, we have understood the importance of dark themes on Wear devices.
    We changed the custom `TextView` with font assets. We have seen how to write custom
    layouts and defined a few animations in it. In later projects, we will explore
    more of the design guidelines and components introduced exclusively in Wear 2.0
    `Wearable action drawer` and `wearable navigation drawer.`
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了暗色主题在穿戴设备上的重要性。我们使用字体资源更改了自定义的`TextView`。我们已经了解了如何编写自定义布局并在其中定义了一些动画。在后续的项目中，我们将进一步探索Wear
    2.0独家引入的设计指南和组件，如`Wearable action drawer`和`wearable navigation drawer`。
