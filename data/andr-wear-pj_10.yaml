- en: Just a Face for Your Time - WatchFace and Services
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 只为时间而生 - 手表表盘与服务
- en: The face, also known as the dial, is the part of the clock that displays the
    time with fixed numbers with moving hands. The appearance of a clock face can
    be designed with various artistic approaches and creativity. Designing a conventional
    watch face is a beautiful art; a watch face artist will know what it takes to
    carve and engineer a watch face for traditional wearable watches. In Android Wear,
    the process is very similar, except you, being the watch face maker, will not
    have any tools in your hands, but will instead need to know which service you
    need to extend and what piece of code will help you customize the look and feel
    of the watch face. The watch face will show the time and date. Here, in Android
    Wear, a watch face can be analog or it can be digital.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 表盘，也称为表盘，是显示固定数字和移动指针的时间的部分。表盘的外观可以通过各种艺术手法和创新来设计。设计传统手表表盘是一门优美的艺术；手表表盘设计师会知道雕刻和设计传统可穿戴手表表盘需要什么。在安卓穿戴中，这个过程非常相似，除了作为表盘制作者，你手中没有任何工具，但需要知道你需要扩展哪个服务以及哪段代码可以帮助你自定义表盘的外观和感觉。表盘将显示时间和日期。在安卓穿戴中，表盘可以是模拟的，也可以是数字的。
- en: 'Android Wear watch faces are services that are packaged inside a wearable app.
    When users select one of the available watch faces, the wearable device shows
    the watch face and invokes its service callback methods. Custom watch faces use
    a dynamic, digital canvas that can incorporate hues, activities, and relevant
    data. When we install a wearable watch face application in Android Wear, we can
    switch between different watch faces through the watch face picker. Users can
    install various watch faces on their watch using the companion application from
    the Google Play Store on their phones. You will learn the following topics in
    this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 安卓穿戴的表盘是包装在可穿戴应用内的服务。当用户选择可用的某个表盘时，可穿戴设备会显示表盘并调用其服务回调方法。自定义表盘使用动态的数字画布，可以融入色彩、活动和相关数据。在安卓穿戴中安装可穿戴表盘应用后，我们可以通过表盘选择器在不同的表盘之间切换。用户可以通过手机上的谷歌应用商店中的配套应用程序，在他们的手表上安装各种表盘。在本章中，你将学习以下主题：
- en: The `CanvasWatchFaceService` class and registering your watch face
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CanvasWatchFaceService` 类和注册你的手表表盘'
- en: The `CanvasWatchFaceService.Engine` and Callback methods
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CanvasWatchFaceService.Engine` 和回调方法'
- en: Writing watch faces and handling gestures and tap events
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写表盘和处理手势和点击事件
- en: Understanding watch face elements and initializing them
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解表盘元素并初始化它们
- en: Common issues
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 常见问题
- en: The CanvasWatchFaceService class and registering your watch face
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CanvasWatchFaceService 类和注册你的手表表盘
- en: 'Watch faces are services with drawing and visual rendering ability; all watch
    faces will extend the `CanvasWatchFaceService` class. The `CanvasWatchFaceService`
    class extracts its functionalities from the `WallpaperSevice` and `WallpaperService.Engine`
    classes. The `Engine` class, with its callback methods, helps the watch face with
    its lifecycle. If you have to make a watch face for an Android Wear, you should
    use the `CanvasWatchfaceService` class instead of plain old vanilla `WallpaperService`.
    A watch face service, like a wallpaper service, must implement only the `onCreateEngine()`
    method. Watch face engines need to implement the method `onTimeTick()` to refresh
    the time and refresh the view and `onAmbientModeChanged(boolean)` to switch between
    different version of watch faces, such as the grey mode and colorful watch face.
    Watch face engines in a like manner implement `onInterruptionFilterChanged(int)`
    to update the view dependent upon how much information the user has inquired.
    For the updates that occur in the ambient mode, `wake_lock` will be held, so the
    device doesn''t go to rest until the watch face finishes the drawing process.
    Registering watch faces in the application works closely to registering wallpapers,
    with a couple of additional steps. However, watch faces require the `wake_lock`
    permission, which is demonstrated as follows:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 表盘是具有绘图和视觉渲染能力的服务；所有表盘都将扩展`CanvasWatchFaceService`类。`CanvasWatchFaceService`类从`WallpaperSevice`和`WallpaperService.Engine`类中提取其功能。`Engine`类及其回调方法帮助表盘处理其生命周期。如果你需要为Android
    Wear制作一个表盘，你应该使用`CanvasWatchfaceService`类，而不是普通的旧`WallpaperService`。表盘服务与壁纸服务一样，只需实现`onCreateEngine()`方法。表盘引擎需要实现`onTimeTick()`方法以刷新时间并更新视图，以及`onAmbientModeChanged(boolean)`方法以在不同版本的表盘之间切换，例如灰色模式和彩色表盘。表盘引擎同样实现`onInterruptionFilterChanged(int)`以根据用户查询的信息量更新视图。对于在环境模式下发生的更新，将持有`wake_lock`，这样设备在表盘完成绘图过程之前不会进入休眠状态。在应用程序中注册表盘与注册壁纸非常相似，但需要几个额外的步骤。然而，表盘需要`wake_lock`权限，如下所示：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Later, your watch face service declaration needs preview metadata:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，你的表盘服务声明需要预览元数据：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Lastly, we need to add a special intent filter with the goal that watch.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要添加一个特殊的意图过滤器，以便手表能够识别。
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The CanvasWatchFaceService.Engine class
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`CanvasWatchFaceService.Engine`类'
- en: 'The `CanvasWatchFaceService.Engine` class extends the `WatchFaceService.Engine`
    class. Here, actual implementation of a watch face that draws on a canvas can
    be accomplished. We ought to implement `onCreateEngine()` to reestablish your
    concrete engine implementation. `CanvasWatchFaceService.Engine` has one public
    constructor with a couple of procedures to enable us to implement the watch face.
    How about we examine a couple of methods that we will implement in the later bit
    of this chapter:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`CanvasWatchFaceService.Engine`类扩展了`WatchFaceService.Engine`类。在这里，可以在画布上绘制表盘的实际实现可以完成。我们应该实现`onCreateEngine()`以恢复你的具体引擎实现。`CanvasWatchFaceService.Engine`有一个公共构造函数和几个过程，使我们能够实现表盘。让我们探讨一下我们将在本章后半部分实现的一些方法：'
- en: '`void invalidate ()`: Plans a call to `onDraw(Canvas, Rect)` to draw the following
    frame. This must be approached on the main thread.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`void invalidate ()`：计划调用`onDraw(Canvas, Rect)`以绘制下一帧。这必须在主线程上处理。'
- en: '`void onDestroy ()`: In this callback, we can release the hardware and other
    resources that we would be using to complete the watch face.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`void onDestroy ()`：在这个回调中，我们可以释放用于完成表盘的硬件和其他资源。'
- en: '`void onDraw(Canvas canvas, Rect bounds)`: Draws the watch face, all the visual
    components, and clock revive rationale, and other clock arrangements are accomplished
    in this method.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`void onDraw(Canvas canvas, Rect bounds)`：绘制表盘、所有视觉组件以及时钟更新逻辑，此方法中完成其他时钟排列。'
- en: '`void onSurfaceChanged()`: This method takes four params, `void onSurfaceChanged
    (SurfaceHolder holder, int organise, int width, int stature)`. The `SurfaceHolder`
    parameter enables you to control the surface size and different arrangements.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`void onSurfaceChanged()`：这个方法包含四个参数，`void onSurfaceChanged (SurfaceHolder
    holder, int organise, int width, int stature)`。`SurfaceHolder`参数允许你控制表面大小和不同的排列方式。'
- en: '`void postInvalidate()`: Posts a message to schedule a call to `onDraw(Canvas,
    Rect)` to draw the following frame. Furthermore, this method is thread-safe. We
    can call this method from any thread.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`void postInvalidate()`：发布一个消息以安排调用`onDraw(Canvas, Rect)`以绘制下一帧。此外，这个方法是线程安全的。我们可以从任何线程调用这个方法。'
- en: These methods play a noteworthy part in planning your watch face. Let's begin
    making a watch face. In the following exercise, we will figure out how to make
    a digital watch face.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法在规划您的表盘时起着重要的作用。让我们开始制作表盘。在以下练习中，我们将了解如何制作数字表盘。
- en: Writing your own watch face
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写自己的表盘
- en: Android Studio is the primary tool that we should use to write Wear apps for
    numerous reasons; since we have already configured our development environment
    for Wear 2.0 development, it shouldn't be a challenge. Let's fire up Android Studio
    and create a Wear project.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio是我们应该使用的主要工具，用于编写Wear应用，原因有很多；由于我们已经为Wear 2.0开发配置了开发环境，因此这不应成为挑战。让我们启动Android
    Studio并创建一个Wear项目。
- en: 'In Activity chooser, select Add No Activity. Since a watch face is a service,
    we don''t need activity:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在活动选择器中，选择添加无活动。由于表盘是一个服务，我们不需要活动：
- en: '![](img/00131.jpeg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00131.jpeg)'
- en: We have read in the previous section that we will be extending the class to
    `CanvasWatchFaceService`, where watch face is being drawn on a canvas, and another
    class is `CanvasWatchFaceService.Engine`**,** where we will work on the actual
    implementation of the watch face and more important methods that we have discussed.
    It will help us to achieve the necessary setup for the watch face.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在前一节中读到，我们将扩展类到`CanvasWatchFaceService`，在画布上绘制表盘，另一个类是`CanvasWatchFaceService.Engine`**，**在那里我们将处理表盘的实际实现以及我们讨论的更重要方法。这将帮助我们实现表盘的必要设置。
- en: Now, let's create a class file called `PacktWatchFace` in the package.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在包中创建一个名为`PacktWatchFace`的类文件。
- en: 'The `PacktWatchFace` class will extend to the `CanvasWatchFaceService` class:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`PacktWatchFace`类将扩展到`CanvasWatchFaceService`类：'
- en: '![](img/00132.jpeg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00132.jpeg)'
- en: After creating the class file, extend it to the **`CanvasWatchFaceService`**
    class; this is the service class that we will register in the manifest. Inside
    this class, we need to create one subclass for the Wear design implementation.
    After that, inside the same class, we need to override an `onCreateEngine()` method.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 创建类文件后，将其扩展到**`CanvasWatchFaceService`**类；这是我们将在清单中注册的服务类。在这个类内部，我们需要为Wear设计实现创建一个子类。之后，在同一个类中，我们需要覆盖`onCreateEngine()`方法。
- en: 'The following code is the entry point setup for the Wear watch face design:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码是Wear表盘设计的入口点设置：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `PacktWatchFace` class implements only one method `onCreateEngine()` that
    returns the actual implementation of `CanvasWatchFaceService.Engine`. Now, it
    is time to register the `watchFace` service class in the manifest file.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`PacktWatchFace`类仅实现一个方法`onCreateEngine()`，该方法返回`CanvasWatchFaceService.Engine`的实际实现。现在，是时候在清单文件中注册`watchFace`服务类了。'
- en: 'Within in the application scope of manifest register, add the `PacktWatchFace`
    class:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在清单注册的应用范围内，添加`PacktWatchFace`类：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Create a file under the `xml` folder in the `res` directory and call it `watch_face.xml`.
    Inside, add the `wallpaper` XML tag, as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在`res`目录下的`xml`文件夹中创建一个文件，并将其命名为`watch_face.xml`。在内部，添加如下`wallpaper` XML标签：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Watch face service declaration needs preview metadata, as shown earlier. The
    same metadata is used in the preview of the watch face picker in wearables. These
    elements would specify the metadata of watch face service. The watch face will
    use the preview image and other information that we provide in this metadata tag.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 表盘服务声明需要预览元数据，如前所示。在可穿戴设备的表盘选择器预览中也会使用相同的元数据。这些元素将指定表盘服务的元数据。表盘将使用我们在元数据标签中提供的预览图片和其他信息。
- en: 'Add the following permission to your manifest:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的清单中添加以下权限：
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Let''s set up the essential instances for graphical elements and chronology
    instance, globally:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们设置图形元素和年代实例的全局基本实例：
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the `onDraw` method, we can draw what we need to display on the watch face.
    The drawn visual is going to be static; we cannot make it dynamic just by drawing
    on the canvas. The implementation of the chronological time display plays an important
    role.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在`onDraw`方法中，我们可以绘制需要在表盘上显示的内容。绘制的视觉将保持静态；仅通过在画布上绘制，我们不能使其动态。时间显示的实现起着重要的作用。
- en: 'What information the watch face needs to show and other cosmetics are decided
    by the watch face designer. Now, let''s initialize all the instances in the `onCreate`
    method:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 表盘需要显示的信息和其他外观由表盘设计师决定。现在，让我们在`onCreate`方法中初始化所有实例：
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Next, we will write a separate method, which is `createPaint()`, for returning
    the values of all the calls:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将编写一个单独的方法`createPaint()`，用于返回所有调用的值：
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Handling tap events and gestures
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理点击事件和手势
- en: 'On the watch face, users can interact, but the `CanvasWatchService.Engine`
    class provides only a single interaction method, which is a single tap. If we
    want to have other interactions, we need to override the `onTapCommand` method.
    We need to request `tapevents` in the `onCreate` method by changing the style
    of the Wear application:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在表盘上，用户可以进行交互，但`CanvasWatchService.Engine`类仅提供了一个交互方法，即单次点击。如果我们想要有其他的交互方式，需要重写`onTapCommand`方法。我们还需要在`onCreate`方法中通过更改Wear应用的风格来请求`tapevents`。
- en: '[PRE10]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Thereafter, we can override the `onTapCommand()` method to handle the tap events
    and we can override the function to provide features and services when a user
    taps on the application.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们可以重写`onTapCommand()`方法来处理点击事件，并且可以重写函数，以便在用户点击应用时提供功能和服务。
- en: 'The following shows toast message when a user clicks on the watch face:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码展示了当用户点击表盘时显示的提示信息：
- en: '[PRE11]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This way, we can customize the tap functionality. The default function signature
    gives two coordinates, *x* and *y*; by using these coordinates, we can determine
    where a user has clicked, which helps watch face designers to customize gestures
    and tap events accordingly.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们可以自定义点击功能。默认的函数签名提供了两个坐标，*x* 和 *y*；通过使用这些坐标，我们可以确定用户点击的位置，这有助于表盘设计师相应地自定义手势和点击事件。
- en: Supporting different form factors
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 支持不同的形态因素
- en: 'Android Wear devices comes in square and rectangle designs. It''s a watch face
    developer''s responsibility to make the watch face looks same in both the form
    factors. Most of the UI arrangements that are designed for rectangular displays
    will fail on circular displays, and vice versa. To resolve this issue, the `WallpaperService`
    Engine has a facility called the `onApplyWindowInsets` function. The `onApplyWindowInsets`
    method helps to check whether the device is round or not; by determining this,
    we can draw either a round or a square watch face:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Android Wear设备有方形和矩形设计。让表盘在这两种形态上看起来一样是表盘开发者的责任。大多数为矩形显示屏设计的UI布局在圆形显示屏上会失败，反之亦然。为了解决这个问题，`WallpaperService`
    Engine有一个名为`onApplyWindowInsets`的函数。`onApplyWindowInsets`方法帮助检查设备是否为圆形；通过确定这一点，我们可以绘制圆形或方形表盘：
- en: '[PRE12]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now, let''s write a complete method that draws the watch face with timely updates:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们编写一个能够定时更新表盘的完整方法：
- en: '[PRE13]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The `onVisibilityChanged` method helps in registering and unregistering the
    receiver that tells the time to watch face:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`onVisibilityChanged`方法帮助注册和解注册告知表盘时间的接收器：'
- en: '[PRE14]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'To make sure the timer is running only when the watch face is visible, we will
    set the following configuration:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保计时器只在表盘可见时运行，我们将设置以下配置：
- en: '[PRE15]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'To update the time periodically in the watch face, do the following:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 要在表盘中定期更新时间，请执行以下操作：
- en: '[PRE16]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now, let''s finalize the code with the `WeakReference` class implementation.
    Weak reference objects will allow referents to be finalized, and can be accessed
    later. Weak reference will make all of the previous weakly reachable objects to
    be finalized. Finally, it will en queue those recently cleared weak references
    that registered with the reference queues:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们用`WeakReference`类的实现来完善代码。弱引用对象将允许引用对象被最终确定，并且可以在之后访问。弱引用将使所有之前弱可达的对象被最终确定。最后，它将把那些最近清除的、注册在引用队列中的弱引用入队：
- en: '[PRE17]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'To add a drawable, we can make use of the `BitmapFactory` class:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加一个可绘制对象，我们可以使用`BitmapFactory`类：
- en: '[PRE18]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now that the complete logic definition is complete, let''s see the complete
    finalized class for watch face:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 既然完整的逻辑定义已经完成，让我们看看最终定稿的表盘类：
- en: '[PRE19]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The final, compiled watch face will be available in your Wear device''s watch
    face picker:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 最终编译的表盘将出现在你的Wear设备的表盘选择器中：
- en: '![](img/00133.jpeg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00133.jpeg)'
- en: Congratulations on building your first watch face.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜你构建了你的第一个表盘。
- en: Understanding watch face elements and initializing them
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解表盘元素并初始化它们
- en: Depending on what kind of watch face we are developing, we need to plan out
    certain elements for the watch face. We have seen what it takes to build a digital
    watch face, but to build an analog watch face, we need to understand a few watch
    face elements that will help in constructing watch face.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们正在开发的表盘类型，我们需要规划表盘的某些元素。我们已经了解了构建数字表盘需要什么，但要构建模拟表盘，我们需要了解一些有助于构建表盘的表盘元素。
- en: 'Generally, analog watch face is the combination of three essential components,
    as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，模拟表盘是由以下三个基本组件组成的：
- en: '`HOUR_STROKE`'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HOUR_STROKE`'
- en: '`MINUTE_STROKE`'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MINUTE_STROKE`'
- en: '`SECOND_TICK_STROKE`'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SECOND_TICK_STROKE`'
- en: Now, to construct an analog watch face, we need these three components and the
    rest of the things are going to be almost similar as constructing a digital watch
    face. Here, we need to make a little more effort in animating the strokes.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，要构建一个模拟表盘，我们需要这三个组件，其余的事情与构建数字表盘几乎相同。在这里，我们需要在动画化笔画上投入更多的努力。
- en: 'First, we need to design `Strokes`, as shown in the following code:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要设计`Strokes`，如下代码所示：
- en: '[PRE20]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Now, with the previously designed `Strokes`, we can design and customize the
    watch face the way we want, and can add different backgrounds on the canvas, along
    with other cosmetic elements that will make your analog watch special.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用之前设计的`Strokes`，我们可以按照自己的想法设计和定制表盘，还可以在画布上添加不同的背景以及其他装饰元素，使你的模拟表盘变得特别。
- en: For a digital watch face, you need a reference for the text and other graphical
    elements you will be using in the watch face.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 对于数字表盘，你需要为文本以及表盘中使用的其他图形元素提供一个参考。
- en: Common issues
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常见问题
- en: Wear watch face applications are different than Wear apps. The most common issue
    that watch face apps encounter is different form factors, such as square and round
    dial chin. To resolve this issue, programmers have to detect the Wear form factor
    before the watch face executes. As we have already discussed, the `onApplyWindowInsets()`
    method of `CanvasWatchFaceService.Engine` helps in finding the shape of the Wear.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Wear 表盘应用与 Wear 应用不同。表盘应用遇到的最常见问题是不同的形态因素，如方形和圆形表盘下巴。为解决这个问题，程序员需要在表盘执行前检测 Wear
    的形态因素。正如我们已经讨论的，`CanvasWatchFaceService.Engine`的`onApplyWindowInsets()`方法可以帮助找到
    Wear 的形状。
- en: 'Watch face apps are always running; essentially, watch face service extends
    to wallpaper service. When we have a lot of services that fetch data from the
    network API calls, the battery might drain quickly. Such services might include:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 表盘应用始终在运行；实际上，表盘服务扩展了壁纸服务。当我们有大量从网络 API 调用获取数据的服务时，电池可能会很快耗尽。这些服务可能包括：
- en: Different form factors
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同的形态因素
- en: Battery efficacy
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电池效率
- en: UI accommodation
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户界面适应
- en: Too much of animations
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过多的动画
- en: Assets we use to build the Wear watch face
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们用来构建 Wear 表盘的资源
- en: Watch face depending on hardware
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 依赖硬件的表盘
- en: 'UI accommodation is another challenge for watch face makers; while we enable
    `setHotwordIndicator()` in the watch face style, the Android system should be
    able to post and overlay notification cards on top of the watch face we build.
    The analog watches we build must take care of this scenario, since analog watches
    are little reluctant to resize and, in the continuous animation of strokes, it
    will not coordinate with system notifications. Too much of animations in watch
    face is not a good idea. Having many animations results in CPU and GPU performance
    issues. The things to consider when we have animations in watch face are as follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 用户界面适应是表盘制作者面临的另一个挑战；当我们启用表盘样式中的`setHotwordIndicator()`时，Android 系统应该能够在我们构建的表盘上方发布和叠加通知卡片。我们构建的模拟表盘必须考虑这种情况，因为模拟表盘在调整大小方面有些不情愿，并且在连续的笔画动画中，它不会与系统通知协调。表盘中过多的动画不是一个好主意。有许多动画会导致
    CPU 和 GPU 性能问题。当我们在表盘中使用动画时需要考虑以下事项：
- en: Reducing the frame rate of animations
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 减少动画的帧率
- en: Letting the CPU sleep between animations
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让 CPU 在动画之间休眠
- en: Reducing the size of bitmaps assets used
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 减小所使用的位图资源的大小
- en: Disabling anti-aliasing when drawing scaled bitmaps
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绘制缩放位图时禁用抗锯齿
- en: Moving expensive operations outside the drawing method
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将昂贵的操作移出绘图方法
- en: When your watch face depends on a hardware to show data, you should make sure
    you are periodically accessing the hardware and releasing it. For instance, when
    we are using the GPS to show the current location and the watch face is continuously
    listening to the GPS, we will not just drain the battery, the garbage collector
    will also throw an error.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的表盘依赖于硬件来显示数据时，你应该确保周期性地访问硬件并释放它。例如，当我们使用 GPS 来显示当前位置，并且表盘不断监听 GPS 时，不仅会耗尽电池电量，垃圾回收器还可能会抛出错误。
- en: Interactive watch faces
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交互式表盘
- en: The trend changes every time when a Wear 2.0 update arrives which gives new
    interactive watch faces, which also can have unique interaction and style expression.
    All the watch face developers for Wear might have to start thinking of interactive
    watch faces.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 每当Wear 2.0更新到来时，趋势都会发生变化，带来新的互动表盘，这些表盘也可以具有独特的互动和风格表达。所有为Wear开发表盘的开发者可能需要开始考虑互动表盘。
- en: What is exactly an interactive watch face?
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是一个真正的互动表盘？
- en: The idea is to have the user like and love watch face by giving them delightful
    and useful information on a timely basis, which changes the user experience about
    the watch face.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这个想法是让用户通过及时提供令人愉悦和有用的信息来喜欢和爱上表盘，这改变了用户对表盘的体验。
- en: 'Google addresses the following methodologies to achieve interactive watch faces:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌提出以下方法来实现互动表盘：
- en: Creative vision
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创意视觉
- en: Different form factors
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同的形态因素
- en: Display modes
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示模式
- en: System UI elements
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统UI元素
- en: Data integrated watch faces
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成数据的表盘
- en: Android Wear offers a digital canvas to express time in a very efficient way.
    Android Wear offers to integrate a data on watch faces for higher level of personalization
    as well. Watch faces and designs need to be glanceable and should convey prioritized
    information to the watch face user.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: Android Wear以非常高效的方式表达时间提供了一个数字画布。Android Wear还提供了在表盘上集成数据，以实现更高层次的个性化。表盘和设计需要一目了然，并且应向表盘用户传达优先信息。
- en: We know that the different form factors of Android Wear is an implementation
    challenge for the watch face developers. The watch face should be identical across
    different form factors with regards to its design language, which is a common
    set of colors, line width, shading, and other design elements.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道，Android Wear的不同形态因素是表盘开发者的实现挑战。表盘在设计语言上应保持一致，这包括一套通用的颜色、线宽、阴影和其他设计元素。
- en: 'In Wear 2.0, there are two display modes:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在Wear 2.0中，有两种显示模式：
- en: Active mode
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 活跃模式
- en: Always active mode
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 常亮模式
- en: Active mode is when a user moves their wrist or touches the display to glance
    the time. Wear will light up the display and make the watch face active. In this
    mode, the watch face can use colorful animations and fluid design language to
    express the time and other information.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 活跃模式是当用户扭动手腕或触摸显示屏来查看时间时。Wear将点亮显示屏并激活表盘。在这个模式下，表盘可以使用丰富多彩的动画和流畅的设计语言来表达时间和其他信息。
- en: Always active mode helps to save battery power and the display capabilities
    are limited to black, white, and gray when the Wear device enters to the always
    active mode. We need to carefully design what to display in the always active
    mode that looks similar to the design of the watch face, but with less color and
    animations.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 常亮模式有助于节省电池电量，当Wear设备进入常亮模式时，显示能力仅限于黑、白和灰色。我们需要仔细设计在常亮模式下显示的内容，使其与表盘设计相似，但颜色和动画较少。
- en: System UI elements indicate the status of the Wear devices; for instance, battery
    level and other system UI elements. The watch face should allow these indicators
    to be displayed in some specific location of Wear device.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 系统UI元素指示Wear设备的状态；例如，电池水平和其他系统UI元素。表盘应允许这些指示器显示在Wear设备的特定位置。
- en: Data integrated watch faces help watch face users to check out the chosen information
    at a glance, for example, step counts, weather reports, and so on can be displayed
    on the watch face.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 集成数据的表盘可以帮助表盘用户一目了然地查看所选信息，例如，步数、天气预报等可以显示在表盘上。
- en: Summary
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter, we have explored the fundamental understanding of designing
    watch faces and we have built a digital watch face. We have understood how the
    `CanvasWatchFaceService` class helps in building watch faces and we have also
    seen the following watch face-related concepts:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了设计表盘的基本理解，并构建了一个数字表盘。我们了解了`CanvasWatchFaceService`类如何在构建表盘时提供帮助，并且也了解了以下与表盘相关的概念：
- en: The `CanvasWatchFaceService` class
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CanvasWatchFaceService`类'
- en: The `canvasWatchFaceService.Engine` method
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`canvasWatchFaceService.Engine`方法'
- en: Registering watch face in a Wear module manifest
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Wear模块清单中注册表盘
- en: Handling tap gesture
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理轻触手势
- en: Different form factors
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同的形态因素
- en: Adding bitmap images to the watch face
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向表盘添加位图图像
- en: Watch face elements
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表盘元素
- en: Common issues
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 常见问题
- en: Interactive watch faces
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 互动表盘
- en: Making watch faces is an excellent artistic engineering, including what data
    we should express in the watch face and how time and date data is being displayed.
    The `ComplicationsAPI` is new in Wear 2.0\. Let's discuss that in the next chapter
    along with a few advanced concepts.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 制作手表表盘是一项卓越的艺术工程技术，包括我们应该在表盘上表达哪些数据，以及时间和日期数据是如何被展示的。`ComplicationsAPI`是Wear
    2.0中的新特性。我们将在下一章讨论这个内容，同时也会涉及一些高级概念。
