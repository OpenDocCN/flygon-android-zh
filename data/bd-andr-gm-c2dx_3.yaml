- en: Chapter 3. Understanding Game Physics
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章. 理解游戏物理
- en: 'In this chapter, we will cover how to add physics to our games by using the
    built-in engine provided by Cocos2d-x based on the popular Chipmunk framework.
    We are going to explain the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍如何通过使用基于流行的Chipmunk框架的Cocos2d-x内置引擎，向游戏中添加物理效果。我们将解释以下主题：
- en: Setting up the physics world
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置物理世界
- en: Detecting collisions
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检测碰撞
- en: Handling gravity
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理重力
- en: Handling physics properties
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理物理属性
- en: For more information about the Chipmunk physics engine, you may visit [https://chipmunk-physics.net](https://chipmunk-physics.net).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Chipmunk物理引擎的更多信息，你可以访问[https://chipmunk-physics.net](https://chipmunk-physics.net)。
- en: Physics engines encapsulate all the complexity related to giving our scene realistic
    motions, such as adding gravity to an object so it is attracted to the bottom
    of the screen, or detecting collision between bodies and so on.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 物理引擎封装了与给场景真实运动相关的所有复杂性，例如给物体添加重力使其被吸引到屏幕底部，或检测实体之间的碰撞等等。
- en: While working with physics, we should keep in mind that we are dealing with
    a physics world in our scene, and that all the physics elements participating
    in the world are known as physics bodies. These bodies have properties such as
    mass, position, and rotation. These may be changed to customize the bodies. One
    physics body may be attached to another by a joint definition.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理物理时，我们应该记住我们在场景中处理的是一个物理世界，所有参与世界的物理元素都被称为物理实体。这些实体具有质量、位置和旋转等属性。这些属性可以更改以自定义实体。一个物理实体可以通过关节定义附着在另一个实体上。
- en: Take in to consideration that, from a physics perspective, the physics body
    is not aware of the sprites and other objects outside of the physics world, but
    we will see in this chapter how to link the sprites to the physics bodies.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，从物理学的角度来看，物理实体并不知道物理世界外的精灵和其他对象，但我们将在这章中看到如何将精灵与物理实体连接起来。
- en: One of the most common characteristics of video games is collision detection;
    we often need to know when the objects collide with each other. This can be easily
    done by defining the shapes that would represent the collision area on each body,
    and then specifying a collision listener, as we will show later in this chapter.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 视频游戏最常见的特征之一是碰撞检测；我们经常需要知道物体何时与其他物体发生碰撞。这可以通过定义代表每个实体碰撞区域的形状轻松完成，然后指定一个碰撞监听器，我们将在本章后面展示如何操作。
- en: Finally, we will be covering the Box2D physics engine, which is a completely
    separate physics engine and has nothing to do with Chipmunk. Box2D is written
    in C++, and Chipmunk is written in C.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将介绍Box2D物理引擎，这是一个完全独立的物理引擎，与Chipmunk无关。Box2D是用C++编写的，而Chipmunk是用C编写的。
- en: Setting up the physics world
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置物理世界
- en: 'In order to enable physics in our game, we need to add the following lines
    to our `HelloWorldScene.h` header file:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在游戏中启用物理，我们需要向我们的`HelloWorldScene.h`头文件中添加以下几行：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here we have created an instance variable for the `_sprBomb` variable, so that
    it can be accessed from within all the instance methods. In this particular case,
    we would like to have access to the bomb instance in the `onCollision` method
    that will be called each time the collisions between the physics bodies are detected,
    so that we can make the bomb disappear by simply setting its visible attribute
    to false.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们为`_sprBomb`变量创建了一个实例变量，这样它就可以被所有实例方法访问。在这种情况下，我们希望能够在每次检测到物理实体之间的碰撞时调用的`onCollision`方法中访问炸弹实例，这样我们只需将它的可见属性设置为false，就可以让炸弹消失。
- en: Now let us move to our `HelloWorld.cpp` implementation file, and make a few
    changes in order to set up our physics world.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们转到我们的`HelloWorld.cpp`实现文件，并进行一些更改以设置我们的物理世界。
- en: 'First, let us modify our `createScene` method, so that it will now look like
    this:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们修改我们的`createScene`方法，现在它看起来应如下所示：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In the previous versions of the Cocos2d-x branch 3, you needed to specify the
    physics world that the current scene layer would use. But, it is not necessary
    in version 3.4 and the `setPhysicsWorld` method has been removed from the `Layer`
    class.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在Cocos2d-x 3分支的早期版本中，你需要指定当前场景层将要使用的物理世界。但在3.4版本中，这不再必要，`Layer`类中移除了`setPhysicsWorld`方法。
- en: Here we can see that we are now creating the scene instance using the `createWithPhysics`
    static method contained in the `Scene` class, rather than using the simple create
    method.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到我们现在是通过`Scene`类中的`createWithPhysics`静态方法创建场景实例，而不是使用简单的创建方法。
- en: The second step that we are going to perform here is to set the gravity to (0,0),
    so that the physics world's gravity will not attract our sprites to the bottom
    of the screen.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来要进行的第二步是将重力设置为（0,0），这样物理世界的重力就不会将我们的精灵吸引到屏幕底部。
- en: 'Then, we will enable the physic''s engine debug draw, which will allow us to
    see all the physics bodies. This option will help us during the development phase,
    we will use the COCOS2D_DEBUG macro so that it only displays the debug draw when
    running in the debug mode as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将启用物理引擎的调试绘制功能，这样我们就能看到所有的物理实体。这个选项将有助于我们在开发阶段，我们将使用 COCOS2D_DEBUG 宏，使其仅在调试模式下运行时显示调试绘制，如下所示：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In the following screenshot, we can see the red circles that surround the bomb
    and the player sprite. This represents the physics body attached to each player
    sprite:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下屏幕截图中，我们可以看到围绕炸弹和玩家精灵的红色圆形。这表示附加到每个玩家精灵的物理实体：
- en: '![Setting up the physics world](img/B04193_03_01.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![设置物理世界](img/B04193_03_01.jpg)'
- en: Now let us implement our `setPhysicsBody` method, which receives, as a parameter,
    a sprite object pointer referring to the sprite to which I will add a physics
    body. This method will create a circle that will represent the physics body, and
    therefore, the collision area. The circle will be created with a radius that is
    half of the width of the sprite, so that it covers as much of the sprite's area
    as possible.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们实现我们的`setPhysicsBody`方法，它接收一个指向我将添加物理实体的精灵对象的指针作为参数。此方法将创建一个表示物理实体和碰撞区域的圆形。该圆形的半径将是精灵宽度的一半，以尽可能覆盖精灵的面积。
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Circles are commonly used for detecting the collisions since they require less
    CPU effort for detecting the collisions in each frame; nevertheless, their precision
    can be unacceptable in some cases.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 圆形通常用于检测碰撞，因为它们在每个帧中检测碰撞所需的 CPU 努力较小；然而，在某些情况下，它们的精度可能无法接受。
- en: Now let us add the physics bodies to our player and to our bomb sprite, within
    our `init` method. In order to do this, we will call our instance method setPhysicsBody
    after the initialization of each of those sprites.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在`init`方法中为我们的玩家和炸弹精灵添加物理实体。为此，我们将在每个精灵初始化后调用我们的实例方法 setPhysicsBody。
- en: Collision detection
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 碰撞检测
- en: 'First, let us implement our `onCollision` instance method. This is going to
    be called each time a collision between two physics bodies is detected. As we
    can see in the following code, when the bomb physics body collides with our player,
    it makes the bomb invisible:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们实现我们的`onCollision`实例方法。每次检测到两个物理实体之间的碰撞时，都会调用它。正如在下面的代码中我们可以看到，当炸弹物理实体与我们的玩家碰撞时，它使炸弹变得不可见：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'This is a good place for putting some logs during the development process in
    order to find out when the collisions are being detected. In Cocos2d-x 3.4 you
    can print the log messages using the `CCLOG` macro. This could be turned on by
    defining the macro `COCOS2D_DEBUG` as follows: `#define COCOS2D_DEBUG 1`.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发过程中，这里是一个放置一些日志的好地方，以了解何时检测到碰撞。在 Cocos2d-x 3.4 中，你可以使用`CCLOG`宏打印日志消息。通过以下方式定义宏`COCOS2D_DEBUG`可以开启它：`#define
    COCOS2D_DEBUG 1`。
- en: As we can see, this method returns a Boolean value. It indicates whether these
    two bodies can collide again. In this particular case, we will return false, indicating
    that as soon as these two physics bodies collide they should not continue to collide.
    If we return the true indication, then these two objects will continue to collide,
    and this will cause our player sprite to move, thus giving our game an undesired
    visual effect.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，这个方法返回一个布尔值。它表示这两个实体是否可以再次碰撞。在这个特定的情况下，我们将返回 false，表示一旦这两个物理实体碰撞，它们就不应该继续碰撞。如果我们返回
    true，那么这两个对象将继续碰撞，这将导致我们的玩家精灵移动，从而给我们的游戏带来不希望出现的视觉效果。
- en: 'Now, let us enable our game to detect when our bomb collides with our player.
    In order to do this we will create an `EventListenerPhysicsContact` instance,
    we are going to set it so that when two physics bodies start colliding, it should
    call our `onCollision` instance method. Then, we will add our event listener to
    the event dispatcher. We are going to create these three simple steps inside our
    `initPhysics` instance method. So, our code will look like this:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使我们的游戏能够在炸弹与玩家碰撞时检测到。为此，我们将创建一个`EventListenerPhysicsContact`实例，我们将设置它，以便当两个物理体开始碰撞时，它应该调用我们的`onCollision`实例方法。然后，我们将事件监听器添加到事件分发器中。我们将在`initPhysics`实例方法中创建这三个简单步骤。所以，我们的代码将如下所示：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Our `init` method code will look like this:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`init`方法的代码将如下所示：
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Handling gravity
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理重力
- en: Now that we have successfully used the built-in physics engine to detect the
    collision, let us play a little bit with gravity. Go to the `createScene` method
    and modify the parameters that we have sent to the constructor. In our game, we
    have used the `(0,0)` value, since we did not want our world to have any gravity
    force that moves our bodies on either the *x* or the *y* axis.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经成功使用内置物理引擎来检测碰撞，那么让我们来玩弄一下重力。转到`createScene`方法，并修改我们发送到构造函数的参数。在我们的游戏中，我们使用了`(0,0)`值，因为我们不希望我们的世界有任何在*x*或*y*轴上移动我们物体的重力。
- en: Now, give it a try, change the values to positive or negative. When we use a
    negative value on the *x* axis, it will attract the body toward the left, and
    when we use the negative value on the *y* axis, it will attract the body toward
    the bottom.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，尝试一下，将值改为正数或负数。当我们在*x*轴上使用负值时，它会将物体吸引向左，而在*y*轴上使用负值时，它会将物体吸引向下。
- en: Note
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Changing these values and understanding the physics added to our game might
    give you some ideas for your next games.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 改变这些值并理解添加到我们游戏中的物理可能会为你的下一个游戏提供一些想法。
- en: Handling physics properties
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理物理属性
- en: Now that we have created our scene, which corresponds to the physics world,
    we now have the ability to change the physics properties, such as the velocity,
    linear damping, force, impulse, and torque for each body.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经创建了对应于物理世界的场景，我们现在有能力改变物理属性，比如每个物体的速度、线性阻尼、力、冲量和扭矩。
- en: Applying velocity
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 应用速度
- en: In the previous chapter, we managed to move our bomb from the top of the screen
    to the bottom using a `MoveTo` action. Now that we are using the built-in physics
    engine, we can achieve the same effect just by setting a velocity to the bomb.
    This can be done by simply calling the `setVelocity` method of the bomb sprite's
    physics body. Velocity is a vector quantity; therefore, the method mentioned receives
    a `Vect` instance as the parameter. The value of *x* will represent its horizontal
    component; on this axis a positive value means that the body will move to the
    right and a negative value means that the body will move to the left. The *y*
    value affects the vertical movement. Positive values move the body toward the
    top of the screen and negative values move the body to the bottom of the screen.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们设法使用`MoveTo`动作将炸弹从屏幕顶部移动到底部。现在我们使用了内置的物理引擎，只需为炸弹设置速度就能实现同样的效果。这可以通过简单地调用炸弹精灵物理体的`setVelocity`方法来完成。速度是一个矢量量；因此，提到的方法接收一个`Vect`实例作为参数。*x*的值表示其水平分量；在这个轴上，正值意味着物体将向右移动，负值意味着物体将向左移动。*y*值影响垂直运动。正值将物体向屏幕顶部移动，负值将物体向屏幕底部移动。
- en: 'We have added the following line to the `init` method of the `HelloWorld.cpp`
    implementation file just before the return statement:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`HelloWorld.cpp`实现文件的`init`方法中，在返回语句之前添加了以下行：
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Remember to remove the line of code that requests the bomb sprite to execute
    the `MoveTo` action so that you can confirm that the bomb is now moving because
    of its velocity parameter.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 记得删除请求炸弹精灵执行`MoveTo`动作的代码行，以便确认炸弹现在是因为其速度参数而移动。
- en: Now let us go to the `onCollision` method, there we are going to set the bomb's
    velocity to zero when it collides with our player sprite.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们转到`onCollision`方法，当炸弹与我们的玩家精灵发生碰撞时，我们将把炸弹的速度设置为零。
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Note
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Similar to the `Vec2` class, the null constructor will initialize all the vector
    values to zero.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 与`Vec2`类相似，空构造函数会将所有向量值初始化为零。
- en: Linear damping
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 线性阻尼
- en: We can decrease the velocity of our physics body to create a friction effect.
    One way to achieve this is by calling the `linearDamping` method and specifying
    the rate of change of the body's velocity. The value should be a float between
    `0.0` and `1.0`.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以降低物理体的速度，以产生摩擦效果。实现这一目标的方法之一是调用`linearDamping`方法，并指定身体速度的变化率。该值应该是一个介于`0.0`和`1.0`之间的浮点数。
- en: You can test the linear damping by setting the value of the bomb's physics body
    to `0.1f`, and observe how the velocity of the bomb is decreased.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过将炸弹物理体的值设置为`0.1f`来测试线性阻尼，并观察炸弹速度如何降低。
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Remember to document or remove this line after testing the linear damping so
    that the game does not behave in an unexpected way.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 测试线性阻尼后，记得记录或删除这行代码，以防止游戏出现预期之外的行为。
- en: Applying force
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 应用力
- en: We can apply an immediate force to a body by simply calling the `applyForce`
    method of the physics body to which we want to apply it. Analogous to the methods
    explained in the previous sections, it receives a vector as a parameter, which
    means that the force has vertical and horizontal components.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过简单地调用想要施加力的物理体的`applyForce`方法，来立即对物体施加力。与前面章节中解释的方法类似，它接收一个向量作为参数，这意味着力有垂直和水平分量。
- en: We can test this method by applying a force to the bomb that will make it move
    to the right as soon as it collides with our player sprite in our `onCollision`
    method.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过在`onCollision`方法中给炸弹施加一个力来测试这个方法，使它在与玩家精灵碰撞后立即向右移动。
- en: '[PRE10]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Applying impulse
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 应用冲量
- en: In the previous section we have added an immediate force to our physics body,
    now we can add a continuous force by applying an impulse to it by calling the
    `applyImpulse` method.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们给物理体添加了一个即时力，现在我们可以通过调用`applyImpulse`方法对其施加一个连续力。
- en: 'Add the following line of code, after applying the immediate force to the physics
    body in the `onCollision` method:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在`onCollision`方法中对物理体施加即时力之后，添加以下代码行：
- en: '[PRE11]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Run the game now, and you will see how the bomb moves to the right.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行游戏，你将看到炸弹向右移动。
- en: '![Applying impulse](img/B04193_03_02.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![应用冲量](img/B04193_03_02.jpg)'
- en: Remove the lines of code that add force and impulse to our bomb within the `onCollision`
    method.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 删除在`onCollision`方法中给炸弹添加力和冲量的代码行。
- en: Applying torque
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 应用扭矩
- en: Finally, let us make our bomb rotate after it collides with our player sprite.
    We can do that by applying a torque force to the bomb's physics body by using
    the `applyTorque` method, which receives a float number; if positive, it will
    make the physics body rotate counter-clockwise.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们在炸弹与玩家精灵碰撞后，使炸弹旋转。我们可以通过使用`applyTorque`方法给炸弹的物理体施加一个扭矩力，该方法接收一个浮点数；如果是正数，它将使物理体逆时针旋转。
- en: 'Let us add an arbitrary positive torque to the `onCollision` method just before
    the return statement:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`onCollision`方法中的返回语句之前，添加一个任意的正扭矩：
- en: '[PRE12]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now add a negative value to the `applyTorque` method, and you will see how the
    physics body rotates clockwise.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在给`applyTorque`方法添加一个负值，你将看到物理体如何顺时针旋转。
- en: Putting everything together
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 把所有东西放在一起
- en: 'After all of the modifications, our `onCollision` method looks like this:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 经过所有修改后，我们的`onCollision`方法看起来像这样：
- en: '[PRE13]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Our `init` method now looks like this:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在的`init`方法看起来像这样：
- en: '[PRE14]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The following screenshot shows how our game looks after the modifications:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图展示了我们对游戏进行修改后的样子：
- en: '![Putting everything together](img/B04193_03_03.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![把所有东西放在一起](img/B04193_03_03.jpg)'
- en: Tip
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Box2D physics engine**'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**Box2D物理引擎**'
- en: So far, we have used the built-in physics engine provided by the framework,
    which is based on the chipmunk C physics library; nevertheless, Cocos2d-x also
    provides the integration in its API with the Box2D physics engine.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们使用了框架提供的内置物理引擎，该引擎基于chipmunk C物理库；然而，Cocos2d-x也在其API中集成了Box2D物理引擎。
- en: In order to create a Box2D world, we instantiate the `b2World` class and then
    we pass to its constructor a `b2Vec` object that represents the world's gravity.
    The world instance has an instance method for creating `b2Bodies`. The sprite
    class has a method named `setB2Body`, which allows us to associate a Box2D physics
    body to any given sprite. This is smoother than how it was in the branch 2 of
    the framework; more code was required to tie a `b2Body` with a sprite.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建一个Box2D世界，我们实例化`b2World`类，然后向其构造函数传递一个表示世界重力的`b2Vec`对象。世界实例有一个用于创建`b2Bodies`的实例方法。Sprite类有一个名为`setB2Body`的方法，它允许我们将Box2D物理体关联到任何给定的精灵。这比框架的第二个分支中的处理要平滑得多；之前需要更多的代码才能将`b2Body`与精灵绑定。
- en: Although the Box2D integration is easy to use, I strongly recommend using the
    built-in physics engine as the Box2D integration is no longer under active development.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Box2D集成使用起来很方便，但我强烈建议使用内置的物理引擎，因为Box2D集成已不再积极开发中。
- en: Summary
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We have added physics to our game by creating a physics world and physics bodies
    that represent the bomb and our player sprite, and we have used the collision
    detection mechanism provided by the built-in physics engine in a very few steps.
    We have also showed how to change the gravity parameters so that the physic bodies
    move according to the force of gravity. We have easily changed the physics properties
    of the bodies, such as velocity, friction, force, impulse, and torque with a single
    line of code for each of those. So far, our player ignores our user events. In
    the next chapter, we will cover how to add user interaction to our game.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过创建物理世界和代表炸弹及玩家精灵的物理体，向游戏中添加了物理效果，并且在很少的步骤内使用了内置物理引擎提供的碰撞检测机制。我们还展示了如何更改重力参数，以便物理体根据重力力量移动。我们可以轻松地更改物体的物理属性，例如速度、摩擦力、力、冲量和扭矩，每个属性只需一行代码。到目前为止，我们的玩家忽略了用户事件。在下一章中，我们将介绍如何向游戏中添加用户交互。
