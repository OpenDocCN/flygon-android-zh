["```kt\ntestImplementation 'junit:junit:4.13.1'\n```", "```kt\nclass MyClass {\n    fun factorial(n: Int): Int {\n        return IntArray(n) {\n            it+1\n        }.reduce { acc, i ->\n            acc * i\n        }\n    }\n}\n```", "```kt\nimport org.junit.Assert.assertEquals\nimport org.junit.Test\nclass MyClassTest {\n    private val myClass = MyClass()\n    @Test\n    fun computesFactorial() {\n        val n = 3\n        val result = myClass.factorial(n)\n        assertEquals(6, result)\n    }\n}\n```", "```kt\n@RunWith(Parameterized::class)\nclass MyClassTest(\n    private val input: Int,\n    private val expected: Int\n) {\n    companion object {\n        @Parameterized.Parameters\n        @JvmStatic\n        fun getData(): Collection<Array<Int>> = listOf(\n            arrayOf(0, 1),\n            arrayOf(1, 1),\n            arrayOf(2, 2),\n            arrayOf(3, 6),\n            arrayOf(4, 24),\n            arrayOf(5, 120)\n        )\n    }\n    private val myClass = MyClass()\n    @Test\n    fun computesFactorial() {\n        val result = myClass.factorial(input)\n        assertEquals(expected, result)\n    }\n}\n```", "```kt\nfun factorial(n: Int): Int {\n        return IntArray(n) {\n            it + 1\n        }.fold(1, { acc, i -> acc * i })\n    }\n```", "```kt\nclass MyClassTest2 {\n    private val myClass = MyClass()\n    @Test(expected = MyClass.FactorialNotFoundException::class)\n    fun computeNegatives() {\n        myClass.factorial(-10)\n    }\n}\n```", "```kt\nclass MyClass {\n    @Throws(FactorialNotFoundException::class)\n    fun factorial(n: Int): Int {\n        if (n < 0) {\n            throw FactorialNotFoundException\n        }\n        return IntArray(n) {\n            it + 1\n        }.fold(1, { acc, i -> acc * i })\n    }\n    object FactorialNotFoundException : Throwable()\n}\n```", "```kt\n@RunWith(Parameterized::class)\nclass MyClassTest(\n    private val input: Int,\n    private val expected: BigInteger\n) {\n    companion object {\n        @Parameterized.Parameters\n        @JvmStatic\n        fun getData(): Collection<Array<Any>> = listOf(\n            arrayOf(0, BigInteger.ONE),\n            arrayOf(1, BigInteger.ONE),\n            arrayOf(2, BigInteger.valueOf(2)),\n            arrayOf(3, BigInteger.valueOf(6)),\n            arrayOf(4, BigInteger.valueOf(24)),\n            arrayOf(5, BigInteger.valueOf(120)),\n            arrayOf(13, BigInteger(\"6227020800\")),\n            arrayOf(25, BigInteger(\"15511210043330985984000000\"))\n        )\n    }\n    private val myClass = MyClass()\n    @Test\n    fun computesFactorial() {\n        val result = myClass.factorial(input)\n        assertEquals(expected, result)\n    }\n}\n```", "```kt\n    @Throws(FactorialNotFoundException::class)\n    fun factorial(n: Int): BigInteger {\n        if (n < 0) {\n            throw FactorialNotFoundException\n        }\n        return IntArray(n) {\n            it + 1\n        }.fold(BigInteger.ONE, { acc, i -> acc * i.toBigInteger() })\n    }\n```", "```kt\n    @Throws(FactorialNotFoundException::class)\n    fun factorial(n: Int): BigInteger {\n        if (n < 0) {\n            throw FactorialNotFoundException\n        }\n        var result = BigInteger.ONE\n        for (i in 1..n){\n            result = result.times(i.toBigInteger())\n        }\n        return result\n    }\n```", "```kt\n    companion object {\n        var result: BigInteger = BigInteger.ONE\n    }\n    @Throws(FactorialNotFoundException::class)\n    fun factorial(n: Int): BigInteger {\n        if (n < 0) {\n            throw FactorialNotFoundException\n        }\n        for (i in 1..n) {\n            result = result.times(i.toBigInteger())\n        }\n        return result\n    }\n```", "```kt\n    @Before\n    fun setUp(){\n        MyClass.result = BigInteger.ONE\n    }\n    @After\n    fun tearDown(){\n        MyClass.result = BigInteger.ONE\n    }\n    @Test\n    fun computesFactorial() {\n        val result = myClass.factorial(input)\n        assertEquals(expected, result)\n    }\n```", "```kt\nclass ResultRule : TestRule {\n    override fun apply(\n        base: Statement,\n        description: Description?\n    ): Statement? {\n        return object : Statement() {\n            @Throws(Throwable::class)\n            override fun evaluate() {\n                MyClass.result = BigInteger.ONE\n                try {\n                    base.evaluate()\n                } finally {\n                    MyClass.result = BigInteger.ONE\n                }\n            }\n        }\n    }\n}\n```", "```kt\n    @JvmField\n    @Rule\n    val resultRule = ResultRule()\n    private val myClass = MyClass()\n    @Test\n    fun computesFactorial() {\n        val result = myClass.factorial(input)\n        assertEquals(expected, result)\n    }\n```", "```kt\ntestImplementation 'org.mockito:mockito-core:3.6.0'\n```", "```kt\nclass StringConcatenator(private val context: Context) {\n    fun concatenate(@StringRes stringRes1: Int, \n      @StringRes stringRes2: Int): String {\n      return context.getString(stringRes1).plus(context\n          .getString(stringRes2))\n    }\n}\n```", "```kt\nclass StringConcatenatorTest {\n    private val context = Mockito.mock(Context::class.java)\n    private val stringConcatenator = StringConcatenator(context)\n    @Test\n    fun concatenate() {\n        val stringRes1 = 1\n        val stringRes2 = 2\n        val string1 = \"string1\"\n        val string2 = \"string2\"\n        Mockito.`when`(context.getString(stringRes1)).thenReturn(string1)\n        Mockito.`when`(context.getString(stringRes2)).thenReturn(string2)\n        val result = stringConcatenator.concatenate(stringRes1,\n            stringRes2)\n        assertEquals(string1.plus(string2), result)\n    }\n}\n```", "```kt\nclass SpecificStringConcatenator(private val stringConcatenator:   StringConcatenator) {\n    fun concatenateSpecificStrings(): String {\n        return stringConcatenator.concatenate(R.string.string_1,           R.string.string_2)\n    }\n}\n```", "```kt\nclass SpecificStringConcatenatorTest {\n    private val stringConcatenator = Mockito\n      .mock(StringConcatenator::class.java)\n    private val specificStringConcatenator = \n      SpecificStringConcatenator(stringConcatenator)\n    @Test\n    fun concatenateSpecificStrings() {\n        val expected = \"expected\"\n        Mockito.'when'(stringConcatenator.concatenate(R.string.string_1, \n          R.string.string_2))\n            .thenReturn(expected)\n        val result = specificStringConcatenator\n          .concatenateSpecificStrings()\n        assertEquals(expected, result)\n    }\n}\n```", "```kt\n    mock-maker-inline\n    ```", "```kt\nclass SpecificStringConcatenator(private val stringConcatenator:   StringConcatenator) {\n    fun concatenateSpecificStrings(): String {\n        return stringConcatenator.concatenate(R.string.string_1,           R.string.string_2)\n    }\n    fun concatenateWithCallback(callback: Callback) {\n        callback.onStringReady(concatenateSpecificStrings())\n    }\n    interface Callback {\n        fun onStringReady(input: String)\n    }\n}\n```", "```kt\n    @Test\n    fun concatenateWithCallback() {\n        val expected = \"expected\"\n        Mockito.`when`(stringConcatenator.concatenate(R.string.string_1,           R.string.string_2))\n            .thenReturn(expected)\n        val callback =           Mockito.mock(SpecificStringConcatenator.Callback::class.java)\n        specificStringConcatenator.concatenateWithCallback(callback)\n        Mockito.verify(callback).onStringReady(expected)\n    }\n```", "```kt\n    @Test\n    fun concatenateWithCallback() {\n        val expected = \"expected\"\n        val spy = Mockito.spy(specificStringConcatenator)\n        Mockito.`when`(spy.concatenateSpecificStrings())          .thenReturn(expected)\n        val callback           = Mockito.mock(SpecificStringConcatenator.Callback::class.java)\n        specificStringConcatenator.concatenateWithCallback(callback)\n        Mockito.verify(callback).onStringReady(expected)\n    }\n```", "```kt\n@RunWith(MockitoJUnitRunner::class)\nclass SpecificStringConcatenatorTest {\n    @Mock\n    lateinit var stringConcatenator: StringConcatenator\n    @InjectMocks\n    lateinit var specificStringConcatenator: SpecificStringConcatenator\n}\n```", "```kt\ntestImplementation \"com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0\"\n```", "```kt\nclass StringConcatenatorTest {\n    private val context = mock<Context>()\n    private val stringConcatenator = StringConcatenator(context)\n    @Test\n    fun concatenate() {\n        val stringRes1 = 1\n        val stringRes2 = 2\n        val string1 = \"string1\"\n        val string2 = \"string2\"\n        whenever(context.getString(stringRes1)).thenReturn(string1)\n        whenever(context.getString(stringRes2)).thenReturn(string2)\n        val result =           stringConcatenator.concatenate(stringRes1, stringRes2)\n        assertEquals(string1.plus(string2), result)\n    }\n}\n```", "```kt\n@RunWith(MockitoJUnitRunner::class)\nclass SpecificStringConcatenatorTest {\n    @Mock\n    lateinit var stringConcatenator: StringConcatenator\n    @InjectMocks\n    lateinit var specificStringConcatenator: SpecificStringConcatenator\n    @Test\n    fun concatenateSpecificStrings() {\n        val expected = \"expected\"\n        whenever(stringConcatenator.concatenate(R.string.string_1,           R.string.string_2))\n            .thenReturn(expected)\n        val result =           specificStringConcatenator.concatenateSpecificStrings()\n        assertEquals(expected, result)\n    }\n    @Test\n    fun concatenateWithCallback() {\n        val expected = \"expected\"\n        val spy = spy(specificStringConcatenator)\n        whenever(spy.concatenateSpecificStrings()).thenReturn(expected)\n        val callback = mock<SpecificStringConcatenator.Callback>()\n        specificStringConcatenator.concatenateWithCallback(callback)\n        verify(callback).onStringReady(expected)\n    }\n}\n```", "```kt\nclass NumberAdder {\n    @Throws(InvalidNumberException::class)\n    fun sum(n: Int, callback: (BigInteger) -> Unit) {\n        if (n < 0) {\n            throw InvalidNumberException\n        }\n        var result = BigInteger.ZERO\n        for (i in 1..n){\n          result = result.plus(i.toBigInteger())\n        }\n        callback(result)\n\n    }\n    object InvalidNumberException : Throwable()\n}\n```", "```kt\n     testImplementation 'junit:junit:4.13.1'\n     testImplementation 'org.mockito:mockito-core:3.6.0'\n     testImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0'\n    ```", "```kt\n    @RunWith(Parameterized::class)\n    class NumberAdderParameterTest(\n        private val input: Int,\n        private val expected: BigInteger\n    ) {\n        companion object {\n            @Parameterized.Parameters\n            @JvmStatic\n            fun getData(): List<Array<out Any>> = listOf(\n                arrayOf(0, BigInteger.ZERO),\n                arrayOf(1, BigInteger.ONE),\n                arrayOf(5, 15.toBigInteger()),\n                arrayOf(20, 210.toBigInteger()),\n                arrayOf(Int.MAX_VALUE, BigInteger(\"2305843008139952128\"))\n            )\n        }\n        private val numberAdder = NumberAdder()\n        @Test\n        fun sum() {\n            val callback = mock<(BigInteger) -> Unit>()\n            numberAdder.sum(input, callback)\n            verify(callback).invoke(expected)\n        }\n    }\n    ```", "```kt\n    @RunWith(MockitoJUnitRunner::class)\n    class NumberAdderErrorHandlingTest {\n        @InjectMocks\n        lateinit var numberAdder: NumberAdder\n        @Test(expected = NumberAdder.InvalidNumberException::class)\n        fun sum() {\n            val input = -1\n            val callback = mock<(BigInteger) -> Unit>()\n            numberAdder.sum(input, callback)\n        }\n    }\n    ```", "```kt\n    class NumberAdder {\n        @Throws(InvalidNumberException::class)\n        fun sum(n: Int, callback: (BigInteger) -> Unit) {\n            if (n < 0) {\n                throw InvalidNumberException\n            }\n             callback(n.toBigInteger().times((n.toBigInteger() +            1.toBigInteger())).divide(2.toBigInteger()))\n        }\n        object InvalidNumberException : Throwable()\n    }\n    ```", "```kt\nGiven I am not logged in\nAnd I open the application\nWhen I enter my credentials\nAnd click Login\nThen I see the Main screen\n```", "```kt\n    testImplementation 'org.robolectric:robolectric:4.3'\n    testImplementation 'androidx.test.ext:junit:1.1.1'\n```", "```kt\nclass FactorialGenerator {\n    @Throws(FactorialNotFoundException::class)\n    fun factorial(n: Int): BigInteger {\n        if (n < 0) {\n            throw FactorialNotFoundException\n        }\n        var result = BigInteger.ONE\n        for (i in 1..n) {\n            result = result.times(i.toBigInteger())\n        }\n        return result\n    }\n    object FactorialNotFoundException : Throwable()\n}\n```", "```kt\nclass TextFormatter(\n    private val factorialGenerator: FactorialGenerator,\n    private val context: Context\n) {\n    fun getFactorialResult(n: Int): String {\n        return try {\n            context.getString(R.string.result,               factorialGenerator.factorial(n).toString())\n        } catch (e: FactorialGenerator.FactorialNotFoundException) {\n            context.getString(R.string.error)\n        }\n    }\n}\n```", "```kt\nclass MainActivity : AppCompatActivity() {\n    private lateinit var textFormatter: TextFormatter\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        ttextFormatter = TextFormatter(FactorialGenerator(), \n          applicationContext)\n        findViewById<Button>(R.id.button).setOnClickListener {\n            findViewById<TextView>(R.id.text_view).text               = textFormatter.getFactorialResult(findViewById<EditText>                (R.id.edit_text).text.toString().toInt())\n        }\n    }\n}\n```", "```kt\n@RunWith(AndroidJUnit4::class)\nclass MainActivityTest {\n    private val context = getApplicationContext<Application>()\n    @Test\n    fun `show factorial result in text view`() {\n        val scenario = launch<MainActivity>(MainActivity::class.java)\n        scenario.moveToState(Lifecycle.State.RESUMED)\n        scenario.onActivity { activity ->\n            activity.edit_text.setText(5.toString())\n            activity.button.performClick()\n            assertEquals(context.getString(R.string.result,               \"120\"),activity.text_view.text)\n        }\n    }\n}\n```", "```kt\n@Config(\n    sdk = [Build.VERSION_CODES.P],\n    minSdk = Build.VERSION_CODES.KITKAT,\n    maxSdk = Build.VERSION_CODES.Q,\n    application = Application::class,\n    assetDir = \"/assetDir/\"\n)\n@RunWith(AndroidJUnit4::class)\nclass MainActivityTest \n```", "```kt\nsdk=28\nminSdk = 14\nmaxSdk = 29\n```", "```kt\n    testImplementation 'androidx.fragment:fragment-testing:1.1.0'\n    testImplementation 'androidx.test.espresso:espresso-core:3.2.0'\n```", "```kt\nval scenario = launchFragmentInContainer<MainFragment>()\nscenario.moveToState(Lifecycle.State.CREATED)\n```", "```kt\nonView(Matcher<View>).perform(ViewAction)\n```", "```kt\nonView(Matcher<View>).check(ViewAssertion)\n```", "```kt\nonView(allOf(withId(R.id.edit_text), withParent(withId(R.id.root))))\n```", "```kt\nonView(withId(R.id.text_view)).check(matches(withText(\"My text\")))) \n```", "```kt\nonView(withId(R.id.button)).perform(click())\n```", "```kt\n@RunWith(AndroidJUnit4::class)\nclass MainActivityTest {\n    @Test\n    fun `show factorial result in text view`() {\n        val scenario = launch<MainActivity>(MainActivity::class.java)\n        scenario.moveToState(Lifecycle.State.RESUMED)\n        scenario.onActivity { activity ->\n            onView(withId(R.id.edit_text)).perform(typeText(\"5\"))\n            onView(withId(R.id.button)).perform(click())\n            onView(withId(R.id.text_view))\n              .check(matches(withText(activity                 .getString(R.string.result, \"120\"))))\n        }\n    }\n}\n```", "```kt\nGiven I open the application\nAnd I insert the number n\nWhen I press the Calculate button\nThen I should see the text \"The sum of numbers from 1 to n is [result]\"\nGiven I open the application\nAnd I insert the number -n\nWhen I press the Calculate button\nThen I should see the text \"Error: Invalid number\"\n```", "```kt\n        testImplementation 'junit:junit:4.13.1'\n        testImplementation 'org.mockito:mockito-core:3.6.0'\n        testImplementation 'com.nhaarman.mockitokotlin2\n          :mockito-kotlin:2.2.0'\n        testImplementation 'org.robolectric:robolectric:4.4'\n        testImplementation 'androidx.test.ext:junit:1.1.2'\n        testImplementation 'androidx.test.espresso:espresso-core:3.3.0'\n        androidTestImplementation 'androidx.test.ext:junit:1.1.2'\n        androidTestImplementation 'androidx.test\n          .espresso:espresso-core:3.3.0'\n        androidTestImplementation 'androidx.test:rules:1.3.0'\n    ```", "```kt\n    testOptions.unitTests.includeAndroidResources = true\n    ```", "```kt\n    sdk=28\n    ```", "```kt\n    mock-maker-inline\n    ```", "```kt\n    import java.math.BigInteger\n    class NumberAdder {\n        @Throws(InvalidNumberException::class)\n        fun sum(n: Int, callback: (BigInteger) -> Unit) {\n            if (n < 0) {\n                throw InvalidNumberException\n            }\n            callback(n.toBigInteger().times((n.toLong()           + 1).toBigInteger()).divide(2.toBigInteger()))\n        }\n        object InvalidNumberException : Throwable()\n    }\n    ```", "```kt\n    @RunWith(Parameterized::class)\n    class NumberAdderParameterTest(\n        private val input: Int,\n        private val expected: BigInteger\n    ) {\n        companion object {\n            @Parameterized.Parameters\n            @JvmStatic\n            fun getData(): List<Array<out Any>> = listOf(\n                arrayOf(0, BigInteger.ZERO),\n                arrayOf(1, BigInteger.ONE),\n                arrayOf(5, 15.toBigInteger()),\n                arrayOf(20, 210.toBigInteger()),\n                arrayOf(Int.MAX_VALUE, BigInteger(\"2305843008139952128\"))\n            )\n        }\n        private val numberAdder = NumberAdder()\n        @Test\n        fun sum() {\n            val callback = mock<(BigInteger) -> Unit>()\n            numberAdder.sum(input, callback)\n            verify(callback).invoke(expected)\n        }\n    }\n    ```", "```kt\n    @RunWith(MockitoJUnitRunner::class)\n    class NumberAdderErrorHandlingTest {\n        @InjectMocks\n        lateinit var numberAdder: NumberAdder\n        @Test(expected = NumberAdder.InvalidNumberException::class)\n        fun sum() {\n            val input = -1\n            val callback = mock<(BigInteger) -> Unit>()\n            numberAdder.sum(input, callback)\n        }\n    }\n    ```", "```kt\n    class TextFormatter(\n        private val numberAdder: NumberAdder,\n        private val context: Context\n    ) {\n        fun getSumResult(n: Int, callback: (String) -> Unit) {\n            try {\n                numberAdder.sum(n) {\n                    callback(\n                        context.getString(\n                            R.string.the_sum_of_numbers_from_1_to_is,\n                            n,\n                            it.toString()\n                        )\n                    )\n                }\n            } catch (e: NumberAdder.InvalidNumberException) {\n                callback(context.getString\n                  (R.string.error_invalid_number))\n            }\n        }\n    }\n    ```", "```kt\n    @RunWith(MockitoJUnitRunner::class)\n    class TextFormatterTest {\n        @InjectMocks\n        lateinit var textFormatter: TextFormatter\n        @Mock\n        lateinit var numberAdder: NumberAdder\n        @Mock\n        lateinit var context: Context\n        @Test\n        fun getSumResult_success() {\n            val n = 10\n            val sumResult = BigInteger.TEN\n            val expected = \"expected\"\n            whenever(numberAdder.sum(eq(n), any())).thenAnswer {\n                (it.arguments[1] as (BigInteger)->Unit)\n                    .invoke(sumResult)\n            }\n            whenever(context.getString\n              (R.string.the_sum_of_numbers_from_1_to_is, n, \n                sumResult.toString())).thenReturn(expected)\n            val callback = mock<(String)->Unit>()\n            textFormatter.getSumResult(n, callback)\n            verify(callback).invoke(expected)\n        }\n    ```", "```kt\n        @Test\n        fun getSumResult_error() {\n            val n = 10\n            val expected = \"expected\"\n            whenever(numberAdder.sum(eq(n),           any())).thenThrow(NumberAdder.InvalidNumberException)\n            whenever(context.getString(R.string.error_invalid_number))          .thenReturn(expected)\n            val callback = mock<(String)->Unit>()\n            textFormatter.getSumResult(n, callback)\n            verify(callback).invoke(expected)\n        }\n    }\n    ```", "```kt\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:id=\"@+id/root\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:orientation=\"vertical\">\n        <EditText\n            android:id=\"@+id/edit_text\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:inputType=\"number\" />\n        <Button\n            android:id=\"@+id/button\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_gravity=\"center_horizontal\"\n            android:text=\"@string/calculate\" />\n        <TextView\n            android:id=\"@+id/text_view\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_gravity=\"center_horizontal\" />\n    </LinearLayout>\n    ```", "```kt\n    class MainActivity : AppCompatActivity() {\n        private lateinit var textFormatter: TextFormatter\n\n        override fun onCreate(savedInstanceState: Bundle?) {\n            super.onCreate(savedInstanceState)\n            setContentView(R.layout.activity_main)\n            textFormatter = TextFormatter(NumberAdder(), applicationContext)\n            findViewById<Button>(R.id.button).setOnClickListener {\n                textFormatter.getSumResult(findViewById<EditText>              (R.id.edit_text).text.toString().toIntOrNull() ?: 0) {\n                    findViewById<TextView>(R.id.text_view).text = it\n                }\n            }\n        }\n    }\n    ```", "```kt\n    @RunWith(AndroidJUnit4::class)\n    class MainActivityTest {\n        @Test\n        fun `show sum result in text view`() {\n            val scenario = launch<MainActivity>(MainActivity::class.java)\n            scenario.moveToState(Lifecycle.State.RESUMED)\n            scenario.onActivity { activity ->\n                onView(withId(R.id.edit_text)).perform(replaceText(\"5\"))\n                onView(withId(R.id.button)).perform(click())\n                onView(withId(R.id.text_view)).check(matches(withText\n                 (activity.getString\n                   (R.string.the_sum_of_numbers_from_1_to_is, 5, \"15\"))))\n            }\n        }\n        @Test\n        fun `show error in text view`() {\n            val scenario = launch<MainActivity>(MainActivity::class.java)\n            scenario.moveToState(Lifecycle.State.RESUMED)\n            scenario.onActivity { activity ->\n                onView(withId(R.id.edit_text))\n                    .perform(replaceText(\"-5\"))\n                onView(withId(R.id.button)).perform(click())\n                onView(withId(R.id.text_view)).check(\n                    matches(withText(activity.getString(\n                    R.string.error_invalid_number))))\n            }\n        }\n    }\n    ```", "```kt\n    @RunWith(AndroidJUnit4::class)\n    class MainActivityUiTest {\n        @JvmField\n        @Rule\n        var activityRule: ActivityTestRule<MainActivity> = \n          ActivityTestRule(MainActivity::class.java)\n        @Test\n        fun showSumResultInTextView() {\n            activityRule.activity.let { activity ->\n                onView(withId(R.id.edit_text)).perform(replaceText(\"5\"))\n                onView(withId(R.id.button)).perform(click())\n                onView(withId(R.id.text_view)).check(matches\n                 (withText(activity.getString\n                  (R.string.the_sum_of_numbers_from_1_to_is, 5, \"15\"))))\n            }\n        }\n        @Test\n        fun showErrorInTextView() {\n            activityRule.activity.let { activity ->\n                onView(withId(R.id.edit_text)).perform(replaceText(\"-5\"))\n                onView(withId(R.id.button)).perform(click())\n                onView(withId(R.id.text_view)).check(matches               (withText(activity.getString                 (R.string.error_invalid_number))))\n            }\n        }\n    }\n    ```", "```kt\nandroid {\n    ...\n    defaultConfig {\n        ...\n        testInstrumentationRunner           \"androidx.test.runner.AndroidJUnitRunner\"\n        testInstrumentationRunnerArguments clearPackageData: 'true'\n    }\n    testOptions {\n        execution 'ANDROIDX_TEST_ORCHESTRATOR'\n    }\n}\ndependencies {\n    ...\n    androidTestUtil 'androidx.test:orchestrator:1.3.0'\n}\n```", "```kt\ntestInstrumentationRunner \"com.android.CustomTestRunner\"\n```", "```kt\nclass CustomTestRunner: AndroidJUnitRunner() {\n    @Throws(Exception::class)\n    override fun newApplication(\n        cl: ClassLoader?,\n        className: String?,\n        context: Context?\n    ): Application? {\n        return super.newApplication(cl,           MyApplication::class.java.name, context)\n    }\n}\n```", "```kt\n@RunWith(AndroidJUnit4::class)\nclass MainActivityUiTest {\n}\n```", "```kt\n    @JvmField\n    @Rule\n    var activityRule: ActivityTestRule<MainActivity>       = ActivityTestRule(MainActivity::class.java)\n```", "```kt\n    @JvmField\n    @Rule\n    var activityRule: ActivityTestRule<MainActivity> =       ActivityTestRule(MainActivity::class.java, false ,false)\n    @Test\n    fun myTestMethod() {\n        val myIntent = Intent()\n        activityRule.launchActivity(myIntent)\n    }\n```", "```kt\n    @Test\n    fun myTest() {\n        onView(withId(R.id.edit_text)).perform(replaceText(\"5\"))\n        onView(withId(R.id.button)).perform(click())\n        onView(withId(R.id.text_view))          .check(matches(withText(\"my test\")))\n    }\n```", "```kt\nclass MyScreenRobot {\n    fun setText(): MyScreenRobot {\n        onView(ViewMatchers.withId(R.id.edit_text))          .perform(ViewActions.replaceText(\"5\"))\n        return this\n    }\n    fun pressButton(): MyScreenRobot {\n        onView(ViewMatchers.withId(R.id.button))          .perform(ViewActions.click())\n        return this\n    }\n    fun assertText(): MyScreenRobot {\n        onView(ViewMatchers.withId(R.id.text_view))          .check(ViewAssertions.matches(ViewMatchers           .withText(\"my test\")))\n        return this\n    }\n}\n```", "```kt\n    @Test\n    fun myTest() {\n       MyScreenRobot()\n           .setText()\n           .pressButton()\n           .assertText()\n    }\n```", "```kt\nclass MyHeavyliftingComponent(private val   countingIdlingResource:CountingIdlingResource) {\n    fun doHeavyWork() {\n        countingIdlingResource.increment()\n        // do work\n        countingIdlingResource.decrement()\n    }\n}\n```", "```kt\nclass MyApplication : Application(){\n    val countingIdlingResource = CountingIdlingResource(\"My heavy work\")\n    val myHeavyliftingComponent =       MyHeavyliftingComponent(countingIdlingResource)\n}\n```", "```kt\n@RunWith(AndroidJUnit4::class)\nclass MyTest {\n    @Before\n    fun setUp() {\n        val myApplication = getApplicationContext<MyApplication>()\n        IdlingRegistry.getInstance()          .register(myApplication.countingIdlingResource)\n    }\n}\n```", "```kt\nandroidTestImplementation 'androidx.test.espresso:espresso-intents:3.3.0'\n```", "```kt\n    @JvmField\n    @Rule\n    var intentsRule: IntentsTestRule<MainActivity>       = IntentsTestRule(MainActivity::class.java)\n```", "```kt\n        onView(withId(R.id.button)).perform(click())\n        intended(allOf(\n            hasComponent(hasShortClassName(\".MainActivity\")),\n            hasExtra(MainActivity.MY_EXTRA, \"myExtraValue\")))\n```", "```kt\nandroidTestImplementation   'com.android.support.test.espresso:espresso-contrib:3.0.2'\n```", "```kt\nonView(withId(R.id.recycler_view))  .perform(RecyclerViewActions.actionOnItemAtPosition(0, click()))\n```", "```kt\nonView(withId(R.id.recycler_view)).perform(RecyclerViewActions   .scrollToPosition<RecyclerView.ViewHolder>(10))\n```", "```kt\nonView(withText(\"myText\")).check(matches(isDisplayed()))\n```", "```kt\n        implementation 'androidx.test.espresso:espresso-core:3.3.0'\n        testImplementation 'junit:junit:4.13.1'\n        androidTestImplementation 'androidx.test.ext:junit:1.1.2'\n        androidTestImplementation 'androidx.test:rules:1.3.0'\n    ```", "```kt\n    class Randomizer(private val random: Random) {\n        fun getTimeToWait(): Int {\n            return random.nextInt(5) + 1\n        }\n    }\n    ```", "```kt\n    class Synchronizer(\n        private val randomizer: Randomizer,\n        private val timer: Timer,\n        private val countingIdlingResource: CountingIdlingResource\n    ) {\n        fun executeAfterDelay(callback: (Int) -> Unit) {\n            val timeToWait = randomizer.getTimeToWait()\n            countingIdlingResource.increment()\n            timer.schedule(CallbackTask(callback, timeToWait),           timeToWait * 1000L)\n        }\n        inner class CallbackTask(\n            private val callback: (Int) -> Unit,\n            private val time: Int\n        ) : TimerTask() {\n            override fun run() {\n                callback(time)\n                countingIdlingResource.decrement()\n            }\n        }\n    }\n    ```", "```kt\n    class MyApplication : Application() {\n        val countingIdlingResource =       CountingIdlingResource(\"Timer resource\")\n        val randomizer = Randomizer(Random())\n        val synchronizer = Synchronizer(randomizer, Timer(),       countingIdlingResource)\n    }\n    ```", "```kt\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:orientation=\"vertical\">\n\n        <Button\n            android:id=\"@+id/activity_1_button\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_gravity=\"center\"\n            android:text=\"@string/press_me\" />\n    </LinearLayout>\n    ```", "```kt\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:orientation=\"vertical\">\n        <TextView\n            android:id=\"@+id/activity_2_text_view\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_gravity=\"center\" />\n    </LinearLayout>\n    ```", "```kt\n    class Activity1 : AppCompatActivity() {\n        override fun onCreate(savedInstanceState: Bundle?) {\n            super.onCreate(savedInstanceState)\n            setContentView(R.layout.activity_1)\n            findViewById<Button>(R.id.activity_1_button)\n              .setOnClickListener {\n                (application as MyApplication).synchronizer\n                  .executeAfterDelay {\n                    startActivity(Activity2.newIntent(this, it))\n                }\n            }\n        }\n    }\n    ```", "```kt\n    class Activity2 : AppCompatActivity() {\n        companion object {\n            private const val EXTRA_SECONDS = \"extra_seconds\"\n            fun newIntent(context: Context, seconds: Int) =\n                Intent(context, Activity2::class.java).putExtra(\n                    EXTRA_SECONDS, seconds\n                )\n        }\n        override fun onCreate(savedInstanceState: Bundle?) {\n            super.onCreate(savedInstanceState)\n            setContentView(R.layout.activity_2)\n            findViewById<TextView>(R.id.activity_2_text_view).text =\n                getString(R.string.opened_after_x_seconds,               intent.getIntExtra(EXTRA_SECONDS, 0))\n        }\n    }\n    ```", "```kt\n    @RunWith(AndroidJUnit4::class)\n    @LargeTest\n    class FlowTest {\n        @JvmField\n        @Rule\n        var activityRule: ActivityTestRule<Activity1> =       ActivityTestRule(Activity1::class.java)\n        private val myApplication = getApplicationContext<MyApplication>()\n        @Before\n        fun setUp() {\n            IdlingRegistry.getInstance().register(myApplication           .countingIdlingResource)\n        }\n        @Test\n        fun verifyFlow() {\n            onView(withId(R.id.activity_1_button)).perform(click())\n            onView(withId(R.id.activity_2_text_view))          .check(matches(withText(myApplication             .getString(R.string.opened_after_x_seconds, 1))))\n        }\n    }\n    ```", "```kt\n    class TestRandomizer(random: Random) : Randomizer(random) {\n        override fun getTimeToWait(): Int {\n            return 1\n        }\n    }\n    ```", "```kt\n    open class MyApplication : Application() {\n        val countingIdlingResource =       CountingIdlingResource(\"Timer resource\")\n        lateinit var synchronizer: Synchronizer\n        override fun onCreate() {\n            super.onCreate()\n            synchronizer = Synchronizer(createRandomizer(), Timer(),           countingIdlingResource)\n        }\n        open fun createRandomizer() = Randomizer(Random())\n    }\n    ```", "```kt\n    class TestMyApplication : MyApplication() {\n        override fun createRandomizer(): Randomizer {\n            return TestRandomizer(Random())\n        }\n    }\n    ```", "```kt\n    class MyApplicationTestRunner : AndroidJUnitRunner() {\n        @Throws(Exception::class)\n        override fun newApplication(\n            cl: ClassLoader?,\n            className: String?,\n            context: Context?\n        ): Application? {\n            return super.newApplication(cl,           TestMyApplication::class.java.name, context)\n        }\n    }\n    ```", "```kt\n    android {\n        ...\n        defaultConfig {        \n            ...\n            testInstrumentationRunner            \"com.android.testable.myapplication            .MyApplicationTestRunner\"\n        }\n    }\n    ```", "```kt\n    testImplementation 'junit:junit:4.13.1'\n    ```", "```kt\n    class Adder {\n        fun sum(n: Int): Int = 0\n    }\n    ```", "```kt\n    class AdderTest {\n        private val adder = Adder()\n        @Test\n        fun sumSuccess() {\n            assertEquals(1, adder.sum(1))\n            assertEquals(3, adder.sum(2))\n            assertEquals(55, adder.sum(10))\n            assertEquals(210, adder.sum(20))\n            assertEquals(2305843008139952128L, adder.sum(Int.MAX_VALUE))\n        }\n        @Test\n        fun sumError(){\n            assertEquals(-1, adder.sum(0))\n            assertEquals(-1, adder.sum(-1))\n        }\n    }\n    ```", "```kt\n    class Adder {\n        fun sum(n: Int): Long {\n            var result = 0L\n            for (i in 1..n) {\n                result += i\n            }\n            return result\n        }\n    }\n    ```", "```kt\n    class Adder {\n        fun sum(n: Int): Long {\n            return (n * (n.toLong() + 1)) / 2\n        }\n    }\n    ```", "```kt\n    class Adder {\n        fun sum(n: Int): Long {\n            return if (n > 0) (n * (n.toLong() + 1)) / 2 else -1\n        }\n    }\n    ```"]