["```java\npublic class Bullet  {\n\n    private float x;\n    private float y;\n    private float xVelocity;\n    private int direction;\n\n    Bullet(float x, float y, int speed, int direction){\n        this.direction = direction;\n        this.x = x;\n        this.y = y;\n        this.xVelocity = speed * direction;\n    }\n\n    public int getDirection(){\n        return direction;\n    }\n\n    public void update(long fps, float gravity){\n        x += xVelocity / fps;\n    }\n\n    public void hideBullet(){\n        this.x = -100;\n        this.xVelocity = 0;\n    }\n\n    public float getX(){\n        return x;\n    }\n\n    public float getY(){\n        return y;\n    }\n\n}\n```", "```java\nimport java.util.concurrent.CopyOnWriteArrayList;\n\npublic class MachineGun extends GameObject{\n    private int maxBullets = 10;\n    private int numBullets;\n    private int nextBullet;\n    private int rateOfFire = 1;//bullets per second\n    private long lastShotTime;\n\n    private CopyOnWriteArrayList<Bullet> bullets;\n\n    int speed = 25;\n```", "```java\nMachineGun(){\n   bullets = new CopyOnWriteArrayList<Bullet>();\n   lastShotTime = -1;\n   nextBullet = -1;\n}\n```", "```java\npublic void update(long fps, float gravity){\n        //update all the bullets\n        for(Bullet bullet: bullets){\n            bullet.update(fps, gravity);\n        }\n    }\n```", "```java\npublic int getRateOfFire(){\n  return rateOfFire;\n}\n\npublic void setFireRate(int rate){\n  rateOfFire = rate;\n}\n\npublic int getNumBullets(){\n  //tell the view how many bullets there are\n  return numBullets;\n}\n\npublic float getBulletX(int bulletIndex){\n  if(bullets != null && bulletIndex < numBullets) {\n       return bullets.get(bulletIndex).getX();\n    }\n\n  return -1f;\n}\n\npublic float getBulletY(int bulletIndex){\n  if(bullets != null) {\n       return bullets.get(bulletIndex).getY();\n     }\n     return -1f;\n}\n```", "```java\npublic void hideBullet(int index){\n  bullets.get(index).hideBullet();\n}\n```", "```java\npublic int getDirection(int index){\n  return bullets.get(index).getDirection();\n}\n```", "```java\npublic boolean shoot(float ownerX, float ownerY, \n    int ownerFacing, float ownerHeight){\n\n    boolean shotFired = false;\n    if(System.currentTimeMillis() - lastShotTime  >                          \n      1000/rateOfFire){\n\n        //spawn another bullet;\n        nextBullet ++;\n\n        if(numBullets >= maxBullets){\n            numBullets = maxBullets;\n        }\n\n        if(nextBullet == maxBullets){\n            nextBullet = 0;\n        }\n\n        lastShotTime = System.currentTimeMillis();\n        bullets.add(nextBullet, \n                new Bullet(ownerX, \n                (ownerY+ ownerHeight/3), speed, ownerFacing));\n\n        shotFired = true;\n        numBullets++;\n    }\n    return shotFired;\n}\n```", "```java\npublic void upgradeRateOfFire(){\n  rateOfFire += 2;\n}\n}// End of MachineGun class\n```", "```java\npublic MachineGun bfg;\n```", "```java\nbfg = new MachineGun();\n```", "```java\nbfg.update(fps, gravity);\n\n// Let's go!\nthis.move(fps);\n```", "```java\npublic boolean pullTrigger() {\n        //Try and fire a shot\n        return bfg.shoot(this.getWorldLocation().x,  \n           this.getWorldLocation().y, \n           getFacing(), getHeight());\n}\n```", "```java\n} else if (jump.contains(x, y)) {\n  l.player.startJump(sound);\n\n} else if (shoot.contains(x, y)) {\n if (l.player.pullTrigger()) {\n sound.playSound(\"shoot\");\n }\n\n} else if (pause.contains(x, y)) {\n  l.switchPlayingStatus();\n\n}\n```", "```java\n} else if (jump.contains(x, y)) {\n  l.player.startJump(sound);\n\n} else if (shoot.contains(x, y)) {\n if (l.player.pullTrigger()) {\n sound.playSound(\"shoot\");\n}\n\n} else if (pause.contains(x, y)) {\n  l.switchPlayingStatus();\n}\n```", "```java\n//draw the bullets\npaint.setColor(Color.argb(255, 255, 255, 255));\nfor (int i = 0; i < lm.player.bfg.getNumBullets(); i++) {\n   // Pass in the x and y coords as usual\n   // then .25 and .05 for the bullet width and height\n   toScreen2d.set(vp.worldToScreen\n            (lm.player.bfg.getBulletX(i),\n            lm.player.bfg.getBulletY(i),\n            .25f,\n            .05f));\n\n        canvas.drawRect(toScreen2d, paint);\n}\n\n// Text for debugging\nif (debugging) {\n// etc\n```", "```java\nimport android.graphics.PointF;\n\npublic class PlayerState {\n\n    private int numCredits;\n    private int mgFireRate;\n    private int lives;\n    private float restartX;\n    private float restartY;\n\n    PlayerState() {\n        lives = 3;\n        mgFireRate = 1;\n        numCredits = 0;\n    }\n```", "```java\npublic void saveLocation(PointF location) {\n   // The location saves each time the player uses a teleport\n     restartX = location.x;\n     restartY = location.y;\n}\n\npublic PointF loadLocation() {\n   // Used every time the player loses a life\n   return new PointF(restartX, restartY);\n}\n```", "```java\npublic int getLives(){\n  return lives;\n}\n\npublic int getFireRate(){\n  return mgFireRate;\n}\n\npublic void increaseFireRate(){\n  mgFireRate += 2;\n}\n\npublic void gotCredit(){\n  numCredits ++;\n}\n\npublic int getCredits(){\n  return numCredits;\n}\n\npublic void loseLife(){\n  lives--;\n}\n\npublic void addLife(){\n  lives++;\n}\n\npublic void resetLives(){\n  lives = 3;\n}\npublic void resetCredits(){\n  lives = 0;\n}\n\n}// End PlayerState class\n```", "```java\n// Our new engine classes\nprivate LevelManager lm;\nprivate Viewport vp;\nInputController ic;\nSoundManager sm;\nprivate PlayerState ps;\n\n```", "```java\nvp = new Viewport(screenWidth, screenHeight);\nsm = new SoundManager();\nsm.loadSound(context);\nps = new PlayerState();\n\nloadLevel(\"LevelCave\", 10, 2);\n```", "```java\nic = new InputController(vp.getScreenWidth(), vp.getScreenHeight());\n\nPointF location = new PointF(px, py);\nps.saveLocation(location);\n\n//set the players location as the world centre of the viewport\n```", "```java\npublic class Coin extends GameObject{\n\n    Coin(float worldStartX, float worldStartY, char type) {\n\n        final float HEIGHT = .5f;\n        final float WIDTH = .5f;\n\n        setHeight(HEIGHT); \n        setWidth(WIDTH); \n\n        setType(type);\n\n        // Choose a Bitmap\n        setBitmapName(\"coin\");\n\n        // Where does the tile start\n        // X and y locations from constructor parameters\n        setWorldLocation(worldStartX, worldStartY, 0);\n        setRectHitbox();\n    }\n\n    public void update(long fps, float gravity){}\n}\n```", "```java\npublic class ExtraLife extends GameObject{\n\n    ExtraLife(float worldStartX, float worldStartY, char type) {\n\n        final float HEIGHT = .8f;\n        final float WIDTH = .65f;\n\n        setHeight(HEIGHT); \n        setWidth(WIDTH); \n\n        setType(type);\n\n        // Choose a Bitmap\n\n        setBitmapName(\"life\");\n\n        // Where does the tile start\n        // X and y locations from constructor parameters\n        setWorldLocation(worldStartX, worldStartY, 0);\n        setRectHitbox();\n    }\n\n    public void update(long fps, float gravity){}\n}\n```", "```java\npublic class MachineGunUpgrade extends GameObject{\n    MachineGunUpgrade(float worldStartX, \n        float worldStartY, \n        char type) {\n\n        final float HEIGHT = .5f;\n        final float WIDTH = .5f;\n\n        setHeight(HEIGHT); \n        setWidth(WIDTH); \n\n        setType(type);\n\n        // Choose a Bitmap\n\n        setBitmapName(\"clip\");\n\n        // Where does the tile start\n        // X and y locations from constructor parameters\n        setWorldLocation(worldStartX, worldStartY, 0);\n        setRectHitbox();\n    }\n\n    public void update(long fps, float gravity){}\n}\n```", "```java\ncase 'p':\n  index = 2;\n  break;\n\ncase 'c':\n index = 3;\n break;\n\ncase 'u':\n index = 4;\n break;\n\ncase 'e':\n index = 5;\n break;\n\ndefault:\n  index = 0;\n  break;\n```", "```java\ncase 'p':\n  index = 2;\n  break;\n\ncase 'c':\n index = 3;\n break;\n\ncase 'u':\n index = 4;\n break;\n\ncase 'e':\n index = 5;\n break;\n\ndefault:\n  index = 0;\n  break;\n```", "```java\ncase 'p':// a player\n    // Add a player to the gameObjects\n    gameObjects.add(new Player(context, px, py, pixelsPerMetre));\n    // We want the index of the player\n    playerIndex = currentIndex;\n    // We want a reference to the player object\n    player = (Player) gameObjects.get(playerIndex);\n    break;\n\ncase 'c':\n // Add a coin to the gameObjects\n gameObjects.add(new Coin(j, i, c));\n break;\n\ncase 'u':\n // Add a machine gun upgrade to the gameObjects\n gameObjects.add(new MachineGunUpgrade(j, i, c));\n break;\n\ncase 'e':\n // Add an extra life to the gameObjects\n gameObjects.add(new ExtraLife(j, i, c));\n break;\n}\n\n```", "```java\n// Tile types\n// . = no tile\n// 1 = Grass\n// 2 = Snow\n// 3 = Brick\n// 4 = Coal\n// 5 = Concrete\n// 6 = Scorched\n// 7 = Stone\n\n//Active objects\n// g = guard\n// d = drone\n// t = teleport\n// c = coin\n// u = upgrade\n// f = fire\n// e  = extra life\n\n//Inactive objects\n// w = tree\n// x = tree2 (snowy)\n// l = lampost\n// r = stalactite\n// s = stalacmite\n// m = mine cart\n// z = boulders\n\n```", "```java\npublic void restorePreviousVelocity() {\n  if (!isJumping && !isFalling) {\n       if (getFacing() == LEFT) {\n           isPressingLeft = true;\n           setxVelocity(-MAX_X_VELOCITY);\n         } else {\n           isPressingRight = true;\n                     setxVelocity(MAX_X_VELOCITY);\n       }\n    }\n}\n```", "```java\nswitch (go.getType()) {\n case 'c':\n sm.playSound(\"coin_pickup\");\n go.setActive(false);\n go.setVisible(false);\n ps.gotCredit();\n\n // Now restore state that was \n // removed by collision detection\n if (hit != 2) {// Any hit except feet\n lm.player.restorePreviousVelocity();\n }\n break;\n\ncase 'u':\n sm.playSound(\"gun_upgrade\");\n go.setActive(false);\n go.setVisible(false);\n lm.player.bfg.upgradeRateOfFire();\n ps.increaseFireRate();\n if (hit != 2) {// Any hit except feet\n lm.player.restorePreviousVelocity();\n }\n break;\n\ncase 'e':\n //extralife\n go.setActive(false);\n go.setVisible(false);\n sm.playSound(\"extra_life\");\n ps.addLife();\n\n if (hit != 2) {\n lm.player.restorePreviousVelocity();\n }\n break;\n\ndefault:// Probably a regular tile\n    if (hit == 1) {// Left or right\n        lm.player.setxVelocity(0);\n        lm.player.setPressingRight(false);\n    }\n\n    if (hit == 2) {// Feet\n        lm.player.isFalling = false;\n    }\n    break;\n}\n```", "```java\npublic class LevelCave extends LevelData{\n  LevelCave() {\n    tiles = new ArrayList<String>();\n this.tiles.add(\"p.............................................\");\n this.tiles.add(\"..............................................\");\n this.tiles.add(\"..............................................\");\n this.tiles.add(\"..............................................\");\n this.tiles.add(\"....................c.........................\");\n this.tiles.add(\"....................1........u................\");\n this.tiles.add(\".................c..........u1................\");\n this.tiles.add(\".................1.........u1.................\");\n this.tiles.add(\"..............c...........u1..................\");\n this.tiles.add(\"..............1..........u1...................\");\n this.tiles.add(\"......................e..1....e.....e.........\");\n this.tiles.add(\"....11111111111111111111111111111111111111....\");\n}\n\n```", "```java\nimport android.graphics.PointF;\n\npublic class Drone extends GameObject {\n\n    long lastWaypointSetTime;\n    PointF currentWaypoint;\n\n    final float MAX_X_VELOCITY = 3;\n    final float MAX_Y_VELOCITY = 3;\n```", "```java\nDrone(float worldStartX, float worldStartY, char type) {\n    final float HEIGHT = 1;\n    final float WIDTH = 1;\n    setHeight(HEIGHT); // 1 metre tall\n    setWidth(WIDTH); // 1 metres wide\n\n    setType(type);\n\n    setBitmapName(\"drone\");\n    setMoves(true);\n    setActive(true);\n    setVisible(true);\n\n    currentWaypoint = new PointF();\n\n    // Where does the drone start\n    // X and y locations from constructor parameters\n    setWorldLocation(worldStartX, worldStartY, 0);\n    setRectHitbox();\n    setFacing(RIGHT);\n}\n```", "```java\npublic void update(long fps, float gravity) {\n  if (currentWaypoint.x > getWorldLocation().x) {\n       setxVelocity(MAX_X_VELOCITY);\n   } else if (currentWaypoint.x < getWorldLocation().x) {\n       setxVelocity(-MAX_X_VELOCITY);\n   } else {\n       setxVelocity(0);\n   }\n\n    if (currentWaypoint.y >= getWorldLocation().y) {\n       setyVelocity(MAX_Y_VELOCITY);\n     } else if (currentWaypoint.y < getWorldLocation().y) {\n       setyVelocity(-MAX_Y_VELOCITY);\n     } else {\n       setyVelocity(0);\n  }\n\n  move(fps);\n\n  // update the drone hitbox\n   setRectHitbox();\n\n}\n```", "```java\npublic void setWaypoint(Vector2Point5D playerLocation) {\n  if (System.currentTimeMillis() > lastWaypointSetTime + 2000) {//Has 2 seconds passed\n        lastWaypointSetTime = System.currentTimeMillis();\n        currentWaypoint.x = playerLocation.x;\n        currentWaypoint.y = playerLocation.y;\n     }\n}\n}// End Drone class\n```", "```java\ncase 'e':\n  index = 5;\n  break;\n\ncase 'd':\n index = 6;\n break;\n\ndefault:\n  index = 0;\n  break;\n```", "```java\ncase 'e':\n  index = 5;\n  break;\n\ncase 'd':\n index = 6;\n break;\n\ndefault:\n  index = 0;\n  break;\n```", "```java\ncase 'e':\n   // Add an extra life to the gameObjects\n   gameObjects.add(new ExtraLife(j, i, c));\n   break;\n\ncase 'd':\n // Add a drone to the gameObjects\n gameObjects.add(new Drone(j, i, c));\n break;\n\n```", "```java\nif (lm.isPlaying()) {\n   // Run any un-clipped updates\n   go.update(fps, lm.gravity);\n\n if (go.getType() == 'd') {\n // Let any near by drones know where the player is\n Drone d = (Drone) go;\n d.setWaypoint(lm.player.getWorldLocation());\n }\n}\n```", "```java\ncase 'e':\n  //extralife\n   go.setActive(false);\n   go.setVisible(false);\n   sm.playSound(\"extra_life\");\n   ps.addLife();\n   if (hit != 2) {// Any hit except feet\n       lm.player.restorePreviousVelocity();\n   }\n   break;\n\ncase 'd':\n PointF location;\n //hit by drone\n sm.playSound(\"player_burn\");\n ps.loseLife();\n location = new PointF(ps.loadLocation().x, \n ps.loadLocation().y);\n lm.player.setWorldLocationX(location.x);\n lm.player.setWorldLocationY(location.y);\n lm.player.setxVelocity(0);\n break;\n\ndefault:// Probably a regular tile\n  if (hit == 1) {// Left or right\n       lm.player.setxVelocity(0);\n       lm.player.setPressingRight(false);\n  }\n\n   if (hit == 2) {// Feet\n       lm.player.isFalling = false;\n   }\n```", "```java\nimport android.content.Context;\n\npublic class Guard extends GameObject {\n\n    // Guards just move on x axis between 2 waypoints\n\n    private float waypointX1;// always on left\n    private float waypointX2;// always on right\n    private int currentWaypoint;\n    final float MAX_X_VELOCITY = 3;\n```", "```java\nGuard(Context context, float worldStartX, \n  float worldStartY, char type, \n  int pixelsPerMetre) {\n\n        final int ANIMATION_FPS = 8;\n        final int ANIMATION_FRAME_COUNT = 5;\n        final String BITMAP_NAME = \"guard\";\n        final float HEIGHT = 2f;\n        final float WIDTH = 1;\n\n        setHeight(HEIGHT); // 2 metre tall\n        setWidth(WIDTH); // 1 metres wide\n\n        setType(type);\n\n        setBitmapName(\"guard\");\n        // Now for the player's other attributes\n        // Our game engine will use these\n        setMoves(true);\n        setActive(true);\n        setVisible(true);\n\n        // Set this object up to be animated\n        setAnimFps(ANIMATION_FPS);\n        setAnimFrameCount(ANIMATION_FRAME_COUNT);\n        setBitmapName(BITMAP_NAME);\n        setAnimated(context, pixelsPerMetre, true);\n\n        // Where does the tile start\n        // X and y locations from constructor parameters\n        setWorldLocation(worldStartX, worldStartY, 0);\n        setxVelocity(-MAX_X_VELOCITY);\n        currentWaypoint = 1;\n}\n```", "```java\npublic void setWaypoints(float x1, float x2){\n  waypointX1 = x1;\n  waypointX2 = x2;\n}\n```", "```java\npublic void update(long fps, float gravity) {\n  if(currentWaypoint == 1) {// Heading left\n       if (getWorldLocation().x <= waypointX1) {\n          // Arrived at waypoint 1\n           currentWaypoint = 2;\n           setxVelocity(MAX_X_VELOCITY);\n           setFacing(RIGHT);\n      }\n  }\n\n  if(currentWaypoint == 2){\n    if (getWorldLocation().x >= waypointX2) {\n         // Arrived at waypoint 2\n          currentWaypoint = 1;\n          setxVelocity(-MAX_X_VELOCITY);\n          setFacing(LEFT);\n      }\n  }\n\n  move(fps);\n   // update the guards hitbox\n   setRectHitbox();\n}\n}// End Guard class\n```", "```java\ncase 'd':\n  index = 6;\n  break;\n\ncase 'g':\n index = 7;\n break;\n\ndefault:\n  index = 0;\n  break;\n```", "```java\ncase 'd':\n  index = 6;\n  break;\n\ncase 'g':\n index = 7;\n break;\n\ndefault:\n  index = 0;\n  break;\n```", "```java\ncase 'd':\n     // Add a drone to the gameObjects\n     gameObjects.add(new Drone(j, i, c));\n     break;\ncase 'g':\n // Add a guard to the gameObjects\n gameObjects.add(new Guard(context, j, i, c, pixelsPerMetre));\n break;\n\n```", "```java\nprivate boolean traversable = false;\n```", "```java\npublic void setTraversable(){\n  traversable = true;\n}\n\npublic boolean isTraversable(){\n  return traversable;\n}\n```", "```java\nsetTraversable();\n```", "```java\npublic void setWaypoints() {\n  // Loop through all game objects looking for Guards\n    for (GameObject guard : this.gameObjects) {\n       if (guard.getType() == 'g') {\n```", "```java\n// Set waypoints for this guard\n// find the tile beneath the guard\n// this relies on the designer putting \n// the guard in sensible location\n\nint startTileIndex = -1;\nint startGuardIndex = 0;\nfloat waypointX1 = -1;\nfloat waypointX2 = -1;\n\nfor (GameObject tile : this.gameObjects) {\n    startTileIndex++;\n    if (tile.getWorldLocation().y == \n            guard.getWorldLocation().y + 2) {\n\n        // Tile is two spaces below current guard\n        // Now see if has same x coordinate\n        if (tile.getWorldLocation().x == \n            guard.getWorldLocation().x) {\n\n            // Found the tile the guard is \"standing\" on\n            // Now go left as far as possible \n            // before non travers-able tile is found\n            // Either on guards row or tile row\n            // upto a maximum of 5 tiles. \n            //  5 is an arbitrary value you can\n            // change it to suit\n\n            for (int i = 0; i < 5; i++) {// left for loop\n                if (!gameObjects.get(startTileIndex -\n                    i).isTraversable()) {\n\n                    //set the left waypoint\n                    waypointX1 = gameObjects.get(startTileIndex - \n                        (i + 1)).getWorldLocation().x;\n\n                     break;// Leave left for loop\n                     } else {\n                    // Set to max 5 tiles as \n                    // no non traversible tile found\n                    waypointX1 = gameObjects.get(startTileIndex -\n                        5).getWorldLocation().x;\n               }\n                }// end get left waypoint\n\n                for (int i = 0; i < 5; i++) {// right for loop\n                    if (!gameObjects.get(startTileIndex +\n                        i).isTraversable()) {\n\n                        //set the right waypoint\n                        waypointX2 = gameObjects.get(startTileIndex +\n                            (i - 1)).getWorldLocation().x;\n\n                    break;// Leave right for loop\n                    } else {\n                    //set to max 5 tiles away\n                    waypointX2 = gameObjects.get(startTileIndex +\n                       5).getWorldLocation().x;\n                }\n\n                }// end get right waypoint\n\n        Guard g = (Guard) guard;\n        g.setWaypoints(waypointX1, waypointX2);\n    }\n}\n}\n}\n}\n}// End setWaypoints()\n```", "```java\n// Load all the GameObjects and Bitmaps\nloadMapData(context, pixelsPerMetre, px, py);\n// Set waypoints for our guards\nsetWaypoints();\n\n```", "```java\ncase 'd':\n    PointF location;\n    //hit by drone\n    sm.playSound(\"player_burn\");\n    ps.loseLife();\n    location = new PointF(ps.loadLocation().x, \n        ps.loadLocation().y);\n\n    lm.player.setWorldLocationX(location.x);\n    lm.player.setWorldLocationY(location.y);\n    lm.player.setxVelocity(0);\n    break;\n\ncase 'g':\n // Hit by guard\n sm.playSound(\"player_burn\");\n ps.loseLife();\n location = new PointF(ps.loadLocation().x,\n ps.loadLocation().y);\n\n lm.player.setWorldLocationX(location.x);\n lm.player.setWorldLocationY(location.y);\n lm.player.setxVelocity(0);\n break;\n\ndefault:// Probably a regular tile\n    if (hit == 1) {// Left or right\n        lm.player.setxVelocity(0);\n        lm.player.setPressingRight(false);\n    }\n    if (hit == 2) {// Feet\n        lm.player.isFalling = false;\n    }\n```", "```java\n................g............................\n...........................d.................\n111111111111111111111111111111111111111111111\n```"]