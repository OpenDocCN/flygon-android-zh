- en: Chapter 6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Android forensic techniques
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Information in this chapter
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: • [Procedures for handling an Android device](#S0030)
  prefs: []
  type: TYPE_NORMAL
- en: • [Imaging Android USB mass storage devices](#S0105)
  prefs: []
  type: TYPE_NORMAL
- en: • [Logical techniques](#S0120)
  prefs: []
  type: TYPE_NORMAL
- en: • [Physical techniques](#S0265)
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we dive into the actual Android forensic techniques, there are a number
    of considerations that influence which technique forensic analysts should use.
    In this section, we will discuss the different types of investigations, the differences
    between logical and physical techniques, and how to limit or avoid modifications
    to the device.
  prefs: []
  type: TYPE_NORMAL
- en: Types of Investigations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are a variety of situations that might benefit from the results of an
    Android forensic investigation. While the application of forensics is a commonality
    in all the situations, each one may require different procedures, documentation,
    and overall focus.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first situation that people think of in general is investigations that
    will likely be adjudicated in a criminal or civil court of law. In these situations,
    there are a number of important considerations:'
  prefs: []
  type: TYPE_NORMAL
- en: • Chain of custody
  prefs: []
  type: TYPE_NORMAL
- en: • Detailed contemporaneous notes and final reporting
  prefs: []
  type: TYPE_NORMAL
- en: • Possible validation of results using different tools or investigators
  prefs: []
  type: TYPE_NORMAL
- en: • Fact or opinion based testimony
  prefs: []
  type: TYPE_NORMAL
- en: 'Another common scenario is internal investigations in corporations. These investigations
    may end up litigated in court, but often they are used to determine the root cause
    of an issue (whether that is a system, external attack, or internal employee)
    and may result in disciplinary action against an employee. Internal corporate
    investigations can cover many areas but the most common include:'
  prefs: []
  type: TYPE_NORMAL
- en: • Intellectual property or data theft
  prefs: []
  type: TYPE_NORMAL
- en: • Inappropriate use of company resources
  prefs: []
  type: TYPE_NORMAL
- en: • Attempted or successful attack against computer systems
  prefs: []
  type: TYPE_NORMAL
- en: • Employment-related investigations including discrimination, sexual harassment,
    etc.
  prefs: []
  type: TYPE_NORMAL
- en: • Security audit (random or targeted)
  prefs: []
  type: TYPE_NORMAL
- en: 'There is also a need for forensics in cases involving family matters. The most
    common cases involve:'
  prefs: []
  type: TYPE_NORMAL
- en: • Divorce
  prefs: []
  type: TYPE_NORMAL
- en: • Child custody
  prefs: []
  type: TYPE_NORMAL
- en: • Estate disputes
  prefs: []
  type: TYPE_NORMAL
- en: One final area where forensic investigation can yield significant value is for
    the security and operation of a government. Governments are usually the largest
    employer in a country and the United States is a good example. According to the
    US Census Bureau, data from the 2009 Annual Survey of Public Employment and Payroll
    revealed that the Federal government across all functions had over 3 million employees,
    while state and local governments has 16.6 million full-time equivalent employees
    ([Government Employment & Payroll, n.d.](#BIB7)).
  prefs: []
  type: TYPE_NORMAL
- en: Beyond employment-related matters, countries are also the potential target of
    attacks and foreign government intelligence gathering. Forensics can play a key
    role in thwarting attacks against a country, investigating successful attacks,
    counter intelligence scenarios, and in providing valuable intelligence needed
    for the governing of the country.
  prefs: []
  type: TYPE_NORMAL
- en: Difference Between Logical and Physical Techniques
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Android forensic techniques are either logical or physical in nature. A logical
    technique extracts allocated data and is typically achieved by accessing the file
    system. Allocated data simply means that the data are not deleted and are accessible
    on the file system. One exception to this definition is that some files, such
    as an SQLite database, can be allocated and still contain deleted records in the
    database. While recovery of the deleted data requires special tools and techniques,
    it is possible to recover deleted data from a logical acquisition.
  prefs: []
  type: TYPE_NORMAL
- en: Physical techniques, on the other hand, target the physical storage medium directly
    and do not rely on the file system itself to access the data. There are advantages
    to this approach; the most significant is that physical techniques likely provide
    access to significant amounts of deleted data. As discussed in [Chapter 4](CHP004.html),
    file systems often only mark data as deleted or obsolete, and do not actually
    erase the storage medium unless needed. As physical forensic techniques provide
    direct access to the storage medium, it is possible to recover both the allocated
    and the unallocated (deleted or obsolete) data.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, the analysis of an Android physical acquisition is generally far
    more difficult and time consuming. Also, the physical techniques are more difficult
    to execute and missteps could leave the device inaccessible.
  prefs: []
  type: TYPE_NORMAL
- en: In Android forensics, the most common logical technique does not provide direct
    access to the file system and operates at a more abstract and less-effective level
    than the traditional logical techniques, which can acquire all nondeleted data
    directly from the file system. This technique, which relies on the Content Providers
    built into the Android platform and software development kit (SDK), is effective
    in producing some important forensic data, but only a fraction of the data that
    are available on the system.
  prefs: []
  type: TYPE_NORMAL
- en: Modification of the Target Device
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One of the guiding principles of any forensic investigation is to avoid modification
    of the target device in any manner. In many cases, this is achievable. For example,
    let’s assume you are handed a desktop computer that is not powered on. You are
    informed it was seized from a suspect and that you need to launch a forensic investigation.
    The device is fairly easy to investigate without material changes to the data
    after you take custody. A typical investigation would fully document the computer,
    remove the hard drive, and connect it to a physical write blocker and acquire
    a bit-by-bit forensically sound image of the hard drive. The investigation would
    then take place on copies of the forensic image and the original device would
    remain unchanged.
  prefs: []
  type: TYPE_NORMAL
- en: As the power and functionality of computers has increased, this ideal situation
    has become more and more difficult to achieve. First, let’s assume you are called
    to the scene of an investigation and there is a desktop computer, but this time
    the computer is in operation. Any interaction with the computer, whether you simply
    move it or even physically unplug the device, will modify the device in some way.
    While many examiners advocate simply unplugging the computer, unplugging the computer
    still changes the computer as the contents of RAM, open network connections, and
    more (all of which can be quite valuable in an investigation) are permanently
    lost.
  prefs: []
  type: TYPE_NORMAL
- en: If you instead decide to examine the device while it is running, all interactions
    change the device. To further complicate an investigation, it is possible that
    the computer is leveraging encryption and, while the device is running, that data
    may be accessible. However, if the device is powered off and you don’t have the
    encryption keys, then you may permanently lose the ability to recover that data.
  prefs: []
  type: TYPE_NORMAL
- en: Another complicating factor can be the existence of servers that have special
    hardware, complex setups, or that simply cannot be powered down without significant
    impact to other systems or people. Some examples of complex service setups include
    complicated RAID setup, setups that rely on network-based storage area networks
    (SAN), and unsupported hardware. In such cases, the examiner must interact directly
    with the device while it is running even though those actions change the device.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, mobile devices, and Android devices in particular, are nearly impossible
    to forensically analyze without any impact to the device. Unlike desktops, notebooks,
    and servers, there are portions of storage on an Android device that cannot be
    easily removed. And if the device is powered on, a shutdown of the device or pulling
    the battery again changes the device.
  prefs: []
  type: TYPE_NORMAL
- en: When mobile phones were first showing up in investigations, there was very little
    data stored in them that could be extracted from the device. Many investigations
    used traditional approaches, such as a search warrant on the wireless carrier
    to obtain call detail records. It was also possible to remove the subscriber identity
    module (SIM) card on GSM devices and extract some data. As phones began to store
    more data, there developed a deep divide between examiners who advocated the older
    methods (which had little impact on the device and subsequently retrieved only
    nominal data) and those who advocated exploiting the device more fully. The techniques
    used to exploit the devices did modify the device, leading to the ensuing debate.
  prefs: []
  type: TYPE_NORMAL
- en: 'As of 2011, much of the debate has subsided because the amount of data mobile
    devices now hold necessitates the more intrusive techniques. The Association of
    Chief Police Officers in the United Kingdom produces guidelines that address this
    issue quite clearly. The guide, *Good Practice Guide for Computer-Based Electronic
    Evidence* ([ACPO Good Practice Guide, n.d.](#BIB1)), establishes four principles
    of computer-based electronic evidence:'
  prefs: []
  type: TYPE_NORMAL
- en: 1. No action taken by law enforcement agencies or their agents should change
    data held on a computer or storage media, which may subsequently be relied upon
    in court.
  prefs: []
  type: TYPE_NORMAL
- en: 2. In circumstances where a person finds it necessary to access original data
    held on a computer or on storage media, that person must be competent to do so
    and be able to give evidence explaining the relevance and the implications of
    their actions.
  prefs: []
  type: TYPE_NORMAL
- en: 3. An audit trail or other record of all processes applied to computer-based
    electronic evidence should be created and preserved. An independent third party
    should be able to examine those processes and achieve the same result.
  prefs: []
  type: TYPE_NORMAL
- en: 4. The person in charge of the investigation (the case officer) has overall
    responsibility for ensuring that the law and these principles are adhered to.
  prefs: []
  type: TYPE_NORMAL
- en: As mobile devices clearly present a circumstance where it is necessary to access
    the original device directly, then it is permissible provided the examiner is
    sufficiently trained, provides valid reasons for their approach and keeps a clear
    audit trail so that their actions are repeatable by a third party. This is certainly
    good advice and helps provide a solid framework for the forensic investigation
    of mobile devices.
  prefs: []
  type: TYPE_NORMAL
- en: Procedures for handling an Android device
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One major challenge for forensic analysts is to devise a protocol for handling
    the device prior to the analyst taking direct custody. And this is certainly not
    a new issue for analysts as others involved in the investigation may also handle
    other digital devices such as computers or laptops. However, mobile devices are
    still relatively new and are often not handled properly by first responders. There
    is a tendency to immediately examine the device, which almost inevitably results
    in data modification and potential loss of access to the device.
  prefs: []
  type: TYPE_NORMAL
- en: Securing the Device
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Many agencies and first responders have established a protocol for securing
    evidence. The following sections are meant to complement the existing procedures,
    not replace them. Of course, these represent special procedures, and educating
    first responders who have many other responsibilities can be quite challenging.
  prefs: []
  type: TYPE_NORMAL
- en: Pass Code Procedures
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Pass code locked devices are becoming more common as a result of heightened
    security awareness in consumers and corporations. In the next section, we cover
    some specific techniques to circumvent pass codes. However, it is not always possible.
    The first consideration when obtaining information from a device is whether an
    opportunity exists to immediately disable or otherwise circumvent the pass code.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you encounter an Android device and the screen is active, strong consideration
    should be given to checking and potentially changing its settings. For devices
    that have pass codes, there is a short period of time (from less than a minute
    up to about 15 min) where full access to the device is possible without re-entering
    the pass code. If a device is in this state, there are several steps to consider:'
  prefs: []
  type: TYPE_NORMAL
- en: 1. Increase the screen timeout to prevent or postpone the screen locking. The
    location for this setting is not consistent between Android versions and devices.
    For example, on a G1 running Android 1.5, the timeout can be set by pressing Menu
    (from the home screen), then Settings, Sound & display, Screen timeout, and then
    select “Never timeout.” On an HTC Incredible running Android 2.2, press Menu (from
    the home screen), then Settings, Security, Lock phone after, and then finally
    “15 minutes.” As long as the device has some nominal activity in the allotted
    timeout setting, it will remain accessible.
  prefs: []
  type: TYPE_NORMAL
- en: 2. Enable USB debugging and “Stay awake” settings. The location for this setting
    has remained consistent in devices and can be accessed by pressing Menu (from
    the home screen), then Settings, Applications and Development. From there, you
    can check USB debugging and Stay awake. If you select the “Stay awake” setting
    and then connect it to a charge, the device will never go to sleep, which is effective
    in preventing the screen lock. By enabling USB debugging, the device can be accessed
    over USB enabling data extraction.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, these steps are making changes to the device and should be thoroughly
    logged in the case notes describing the state of the device, the rationale for
    the attempted changes, and the outcome of each change. This will not only assist
    in future report writing but will likely be an important factor if your decision
    to change the device is challenged in court.
  prefs: []
  type: TYPE_NORMAL
- en: To make matters more difficult, it is also important to minimize touching the
    screen in case the screen lock becomes active. As we will discuss shortly, it
    is sometimes possible to determine the pattern lock of a device by enhancing photographs
    of the device’s screen. The lesser the interaction a first responder has with
    the screen, the higher the success rate of this technique.
  prefs: []
  type: TYPE_NORMAL
- en: Network Isolation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As many examiners likely know, it is important to isolate the device from the
    network as soon as possible. In the worst-case scenario, a remote wipe could be
    initiated on the device which, if successful, would prevent the recovery of any
    data. While most remote wipes are done over the data network, some can be triggered
    over SMS, and hence ensure the device is fully isolated to prevent remote wipes.
    In other circumstances, additional messages on the device could be received or
    even removed by triggers outside your control. As the goal of a forensic image
    is to preserve the state of the device for additional analysis, any changes should
    be avoided.
  prefs: []
  type: TYPE_NORMAL
- en: There are a number of ways to isolate a device from the network and each of
    these methods have advantages and disadvantages. [Table 6.1](#T0010) summarizes
    the advantages and disadvantages of each technique.
  prefs: []
  type: TYPE_NORMAL
- en: Table 6.1 Techniques for Device Isolation
  prefs: []
  type: TYPE_NORMAL
- en: '| Technique | Advantages | Disadvantages |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Put the device in Airplane mode. This requires that you have full access
    to the Settings menu. | The device continues running and temporal data remains
    intact. Disables cellular data network as well as [Wi-Fi.com](http://Wi-Fi.com).
    | You are modifying the device setting further. Only works if you have full access
    to the device. |'
  prefs: []
  type: TYPE_TB
- en: '| If the phone is a GSM phone, remove the SIM card. | Easy to remove, effective
    in disabling all cellular voice, SMS, and data transmissions. | Does not disable
    [Wi-Fi.com](http://Wi-Fi.com) or other networks. Does not work on non-GSM phones
    including CDMA and iDEN phones. |'
  prefs: []
  type: TYPE_TB
- en: '| Suspend account with wireless carrier. | Effective in disabling all cellular
    voice, SMS, and data transmissions for any phone. | Process may take some time
    and require a court order. Does not disable [Wi-Fi.com](http://Wi-Fi.com) or other
    networks. |'
  prefs: []
  type: TYPE_TB
- en: '| Place device in a shielded bag, box, tent, or room. | Faraday shields prevent
    various types of network transmissions and can be an effective approach if you
    cannot utilize any of the previous options. | There is some debate about the effectiveness
    of portable Faraday shields, notably Faraday bags. Also, while the transmissions
    are blocked, the device attempts to contact the cellular network repeatedly thus
    draining the battery quickly. Cords cannot be inserted into the enclosure as they
    will transmit signals. A shielded room dedicated for mobile examinations is ideal.
    However, they are quite expensive to build and maintain. |'
  prefs: []
  type: TYPE_TB
- en: '| Turn the device off. | Completely effective in preventing all network transmissions.
    | The device state is modified and temporal data is lost. Pass code on reboot
    could be enabled, thus restricting access to the device. |'
  prefs: []
  type: TYPE_TB
- en: 'As you can tell, isolating an Android device from the network is not an easy
    task and each option has advantages and disadvantages. While each examiner or
    their organization should determine the appropriate steps to undertake, the best
    option is probably placing the device in Airplane mode. This varies slightly between
    Android devices and versions but the general approach is the same:'
  prefs: []
  type: TYPE_NORMAL
- en: 1. Press and hold the Power off button and select Airplane mode.
  prefs: []
  type: TYPE_NORMAL
- en: 2. Press Menu (from the home screen), then Settings, then the Wireless option
    which is generally near the top. Some examples are “Wireless controls” or “Wireless
    and networks.” The next menu should present the Airplane mode option.
  prefs: []
  type: TYPE_NORMAL
- en: '[Fig. 6.1](#F0010) is a screenshot from the Power off button approach. [Fig.
    6.2](#F0015) shows the option via the Wireless settings.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068f06-01-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 6.1 Airplane mode via the Power off button.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068f06-02-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 6.2 Airplane mode via the Wireless and networks settings.
  prefs: []
  type: TYPE_NORMAL
- en: Regardless of which technique you ultimately choose, the main goal should be
    to isolate the device from the network as soon as possible.
  prefs: []
  type: TYPE_NORMAL
- en: Power and Data Cables
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: While most forensic labs will have the cables necessary to charge and connect
    the device, it is always prudent to seize the cables directly from the scene.
    It’s possible that a newer device is in use and the forensic toolkits do not yet
    have an appropriate cable. For example, a new specification for connecting media
    devices was developed called portable digital media interface (PDMI) and is integrated
    into two Android tablet devices, the Dell Streak and the Samsung Galaxy Tab. The
    PDMI interface provides not only power and high-resolution video output, but also
    offers USB 3.0 support. Whereas the actual examination of one of these devices
    could be delayed while an appropriate cable is acquired, if it needed charging
    and you do not have the appropriate cable, the loss of power will result in the
    loss of temporal data.
  prefs: []
  type: TYPE_NORMAL
- en: Powered-off Devices
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If a device is already powered off when you encounter it, the best option is
    to boot it into recovery mode to test for connectivity and root access. The owner
    may have already enabled USB debugging or have rooted the device, so you may have
    access to the data without booting into normal operational mode.
  prefs: []
  type: TYPE_NORMAL
- en: This approach is similar to performing forensics on a standard computer hard
    drive. The last thing any trained forensic analyst would do is boot the computer
    to determine what operating system is installed. Instead, the hard drive is removed
    and connected to a write blocker for imaging to prevent any changes to the evidence.
    Similarly, if a mobile device does not have to boot into normal mode, there is
    no need to do so as this may make changes to the device. Specific information
    on how to test a device in recovery mode for sufficient privileges is discussed
    later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to Circumvent the Pass Code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The ability to circumvent the pass code on an Android device is becoming more
    important as they are utilized frequently and, in most cases, do not allow data
    extraction. While there is no guaranteed method, there are a number of techniques
    which have worked in certain situations.
  prefs: []
  type: TYPE_NORMAL
- en: As previously discussed, there are three types of pass codes Android devices
    currently support. The first is a pattern lock. This was the default on the initial
    Android devices. To access the device, the user draws a pattern on the locked
    phone and, if drawn properly, the device is unlocked. An example of a pattern
    lock on an HTC Incredible is shown in [Fig. 6.3](#F0020).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068f06-03-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 6.3 Android pattern lock.
  prefs: []
  type: TYPE_NORMAL
- en: The second type of pass code is the simple personal identification number (PIN)
    which is commonly found on other mobile devices. [Fig. 6.4](#F0025) is an example
    of a PIN-enabled HTC Incredible.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068f06-04-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 6.4 Android PIN lock.
  prefs: []
  type: TYPE_NORMAL
- en: The final type of pass code currently found on Android devices is a full, alphanumeric
    code, as shown in [Fig. 6.5](#F0030).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068f06-05-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 6.5 Android alphanumeric lock.
  prefs: []
  type: TYPE_NORMAL
- en: As discussed in [Chapter 4](CHP004.html), not all pass codes were created equal.
    The most effective pass code is one that allows or requires an alphanumeric password,
    as these are far more difficult to circumvent.
  prefs: []
  type: TYPE_NORMAL
- en: Utilize ADB if USB Debugging is Enabled
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The first technique you should attempt, provided the phone is powered on, is
    to connect with the Android Debug Bridge (ADB) over USB, which was covered extensively
    in [Chapter 3](CHP003.html). Whereas only a fraction of Android devices will allow
    an ADB connection through the USB debugging setting, it is certainly worth trying
    as it easily provides sufficient access for data extraction. The most common reasons
    for which users enable USB debugging include:'
  prefs: []
  type: TYPE_NORMAL
- en: • App development and testing
  prefs: []
  type: TYPE_NORMAL
- en: • Certain apps require this setting, such as PDAnet, which allows the device
    to provide Internet access to a tethered device over USB
  prefs: []
  type: TYPE_NORMAL
- en: • Custom ROMs
  prefs: []
  type: TYPE_NORMAL
- en: • Developer phones such as Google’s Android developer phone (ADP1)
  prefs: []
  type: TYPE_NORMAL
- en: • Device hacking
  prefs: []
  type: TYPE_NORMAL
- en: It is quite simple to determine if USB debugging is enabled, provided you are
    using the Ubuntu virtual machine (VM) or have a forensic workstation with a properly
    installed and configured Software Development Kit. With the phone running in normal
    mode, plug it into the Ubuntu VM. From the command prompt type “adb devices.”
    If USB debugging is enabled, the ADB daemon will return the device serial number
    along with the mode that the phone is presently in.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068u06-01-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If it is disabled, it will not return anything when the “adb devices” command
    is entered.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068u06-02-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Remember to pass the device through to your VM if you are running the command
    inside a virtual workstation. If the VM can’t see the device, you will get the
    same result as if the USB debugging were not enabled. Once you verify that the
    USB connection is passed through to the Ubuntu VM, you can execute the lsusb command
    to verify that the operating system is aware of the connection:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068u06-03-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In this example, emphasis was placed on several areas that clearly show the
    Android device is connected and, in such cases, we can see an ADB interface is
    exposed. If the device is connected but you cannot connect via ADB, you should
    also kill your local ADB daemon and then start it again. This is easily accomplished
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068u06-04-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If the USB debugging is enabled, a forensic analyst can use the interface to
    gain access and perform a logical recovery of the device, which is covered in
    detail later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Smudge Attack
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Initially, Android devices used the pattern lock for pass code protection instead
    of a numeric or alphanumeric code. A recent paper entitled “Smudge Attacks on
    Smartphone Touch Screens” by the University of Pennsylvania Department of Computer
    and Information Science demonstrated a technique for accessing pattern locked
    Android devices by enhancing photographs of the screen ([Aviv, Gibson, Mossop,
    Blaze, Smith, n.d](#BIB4).). The paper’s summary states:'
  prefs: []
  type: TYPE_NORMAL
- en: Our photographic experiments suggest that a clean touch screen surface is primarily,
    but not entirely, reflective, while a smudge is primarily, but not entirely, diffuse.
    We found that virtually any directional lighting source that is not positioned
    exactly at a complementary angle to the camera will render a recoverable image
    of the smudge. Very little photo adjustment is required to view the pattern, but
    images generally rendered best when the photo capture was overexposed by two to
    three f-stops (4 to 8 times “correct” exposure).
  prefs: []
  type: TYPE_NORMAL
- en: If care was taken by the first responders to minimize contact with the device’s
    screen, this recovery technique may be viable. As an example of what is possible,
    [Fig. 6.6](#F0035) shows photos of the same Android device displayed side by side.
    The same original photo was used for both images but the image on the right was
    enhanced as part of the smudge attack process to highlight the contact points.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068f06-06-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 6.6 Enhanced photo showing smudge attack.
  prefs: []
  type: TYPE_NORMAL
- en: Recovery Mode
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Some users install a custom ROM which usually enables root access to the device
    through a modified recovery mode. Most custom ROMs install a modified recovery
    partition which simplifies the process used to install the custom ROM. There are
    several popular recovery partitions that are primarily used with custom ROMs and
    both offer shell access with root privileges from within the recovery console
    itself. As the phone is not booted into normal mode, the pass code is circumvented
    and the user data partitions can be mounted read-only, thus preventing changes
    to that area.
  prefs: []
  type: TYPE_NORMAL
- en: Forensic analysts should attempt to boot into recovery mode if the device is
    powered off, when they take custody. If, instead, the device is running and a
    pass code is present, you should first attempt to connect via ADB and consider
    smudge attack. If neither of these is successful, you should then try to reboot
    into recovery mode. Like many other techniques, recovery mode is accessed in different
    ways depending on the device manufacturer and model. [Table 6.2](#T0015) covers
    the key combinations to access recovery mode on the phones referenced throughout
    this book. Each assumes the device is powered off already.
  prefs: []
  type: TYPE_NORMAL
- en: Table 6.2 Key Combinations to Boot into Recovery Mode
  prefs: []
  type: TYPE_NORMAL
- en: '| Device | Key Combination |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| HTC G1 | Hold home button and press power button. Use volume down to select
    RECOVERY and press power key. |'
  prefs: []
  type: TYPE_TB
- en: '| Nexus One | Hold volume down and press power button. |'
  prefs: []
  type: TYPE_TB
- en: '| Motorola Droid | Hold X key and press power button. |'
  prefs: []
  type: TYPE_TB
- en: '| HTC Incredible | Hold volume down and press power button. Use volume down
    to select RECOVERY and press power key. |'
  prefs: []
  type: TYPE_TB
- en: Once in recovery mode, you can connect the device to your Ubuntu workstation
    and attempt to connect using ADB. If the device is running a nonmodified recovery
    mode, the connection will fail. The screen generally shows a triangle with an
    exclamation point inside it and often a small Android device next to it. On other
    devices, you will be presented with the somewhat famous three Androids on a skateboard.
    Finally, other recovery modules clearly show they are in modified recovery code
    and provide a wide range of device options.
  prefs: []
  type: TYPE_NORMAL
- en: Flash a New Recovery Partition
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There are a number of protocols, utilities, and devices that allow a skilled
    examiner to flash the recovery partition of a device with a modified image.
  prefs: []
  type: TYPE_NORMAL
- en: The first available protocol supporting this approach was fastboot. Fastboot
    is a NAND flash update protocol executed over USB while in bootloader mode. Most
    devices ship with bootloader protection enabled, which prohibits the use of this
    protocol. However, it is possible that the protection has been disabled. To determine
    if bootloader protection is enabled, you must access the bootloader and look at
    the signature information, which will indicate S-ON or S-OFF. The S represents
    security, and so S-ON, the default production build, has security enabled; S-OFF
    indicates security is not enabled. Some devices ship with S-OFF, such as the Google
    Nexus One, as it is preloaded with Google’s Engineering SPL/Bootloader. Other
    rooting techniques also disable this protection, so checking this on a pass code
    protected device may yield results. You can access the main bootloader using the
    first part of the key combinations in [Table 6.2](#T0015) in the previous section.
  prefs: []
  type: TYPE_NORMAL
- en: Fastboot does not require USB debugging to access the device. Hence, like recovery
    mode, it can be used to gain access to the device’s data. Once the new recovery
    partition is available, the device should be rebooted into recovery mode and forensic
    imaging can take place.
  prefs: []
  type: TYPE_NORMAL
- en: 'Other techniques exist which allow the recovery partition to be flashed with
    a new image. Some examples include:'
  prefs: []
  type: TYPE_NORMAL
- en: • Motorola’s RSD Lite
  prefs: []
  type: TYPE_NORMAL
- en: • sbf_flash
  prefs: []
  type: TYPE_NORMAL
- en: • Samsung’s Odin Multiloader
  prefs: []
  type: TYPE_NORMAL
- en: While these utilities and protocols may ultimately provide the privileges that
    a forensic analyst requires, there is considerable effort required to not only
    locate and test the techniques but to understand them sufficiently to use them
    in a forensic investigation.
  prefs: []
  type: TYPE_NORMAL
- en: Screen Lock Bypass App
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Security researcher Thomas Cannon recently developed a technique that allows
    a screen lock bypass by installing an app through the new web-based Android Market
    ([Cannon, T., n.d.](#BIB5)). Cannon’s technique utilizes a new feature in the
    web-based Android Market that allows apps to be installed directly from the web
    site. As such, you must have access to the Android Market using the primary Gmail
    user name and password for the device, which may be accessible from the primary
    computer of the user. Alternatively, you could access the Android Market if you
    knew the user name and password and had sufficient authority. Changing the user’s
    Gmail password would not work in this instance.
  prefs: []
  type: TYPE_NORMAL
- en: Cannon explains the technique on this web site as in the following section ([Cannon,
    T., n.d.](#BIB5)).
  prefs: []
  type: TYPE_NORMAL
- en: How it Works
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The procedure is quite simple really. Android sends out a number of broadcast
    messages which an application can receive, such as SMS received or [Wi-Fi.com](http://Wi-Fi.com)
    disconnected. An application has to register its receiver to receive broadcast
    messages and this can be done at run time, or for some messages, at install time.
    When a relevant message comes in, it is sent to the application and if the application
    is not running it will be started automatically.
  prefs: []
  type: TYPE_NORMAL
- en: After testing out various broadcast messages the best one I found for the purpose
    of this utility was android.intent.action.PACKAGE_ADDED. This exists in all APIs
    as version 1 and is triggered when an application is installed. Hence, to get
    the application to execute remotely, we first deploy it from the Android Market,
    then deploy any other application that will cause the first one to launch.
  prefs: []
  type: TYPE_NORMAL
- en: Once launched it is just a matter of calling the disableKeyguard() method in
    KeyguardManager. This is a legitimate API to enable applications to disable the
    screen lock when, say, an incoming phone call is detected. After finishing the
    call the app ought to enable the screen lock again, but we just keep it disabled.
  prefs: []
  type: TYPE_NORMAL
- en: This technique is certainly worth consideration if you have proper access to
    the Android Market.
  prefs: []
  type: TYPE_NORMAL
- en: Use Gmail User/Pass
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: On most Android phones, you can circumvent the pass code if you know the primary
    Gmail user name and password registered with the device. After a number of failed
    attempts (ten attempts on the G1), you will be presented with a screen that asks
    if you forgot your pass code. From there, you can enter the Gmail user name and
    password and you will then be prompted to reset the pass code. This technique
    does not require the phone to be online as it uses credential information cached
    on the phone.
  prefs: []
  type: TYPE_NORMAL
- en: If you do not have the current Gmail user name and password, but have sufficient
    authority (i.e., court order) to reset the password, you could attempt to compel
    Google to reset the account password. You would then have to connect the Android
    device to the network and gain access. This issue presents many challenges, including
    the need to place the device online, putting it at risk for remote wipe in addition
    to making changes to the device. Reports on various law enforcement mailing lists
    indicate this technique does not always work.
  prefs: []
  type: TYPE_NORMAL
- en: If this approach is attempted, additional research is warranted. In particular,
    it would be prudent to control the Internet connection the device uses, most likely
    a [Wi-Fi.com](http://Wi-Fi.com) access point. You could then limit the network
    access to only those which the Google server needed for authentication. In addition,
    a detailed network capture of test devices should be analyzed as well as the actual
    changes made to the device.
  prefs: []
  type: TYPE_NORMAL
- en: JTAG and Chip-off
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'At this time, most Android devices do not encrypt the contents of the NAND
    flash, which makes directly accessing and decoding the memory chips a potential
    workaround if a pass code is enabled. There are two primary techniques, which
    provide direct access to the chips. Both are technically challenging. The two
    techniques are:'
  prefs: []
  type: TYPE_NORMAL
- en: • Joint test action group (JTAG)
  prefs: []
  type: TYPE_NORMAL
- en: • Physical extraction (chip-off)
  prefs: []
  type: TYPE_NORMAL
- en: Both techniques are not only technically challenging and require partial to
    full disassembly of the device, but they require substantial post-extraction analysis
    to reassemble the file system. For these reasons, JTAG and chip-off would likely
    be the very last choices to circumvent a locked device.
  prefs: []
  type: TYPE_NORMAL
- en: With JTAG, you connect directly to the device’s CPU by soldering leads to certain
    JTAG pads on the printed circuit board (PCB). Then JTAG software can be used to
    perform a complete binary memory dump of the NAND flash, modify certain partitions
    to allow root access, or eliminate the pass code altogether.
  prefs: []
  type: TYPE_NORMAL
- en: In the chip-off procedure, the NAND flash chips are physically extracted from
    the PCB using heat and air. The chip, usually a small ball grid array (BGA) package,
    then needs to have the BGA connections regenerated and inserted into special hardware
    that connects to the chip and reads the NAND flash.
  prefs: []
  type: TYPE_NORMAL
- en: The advantages to these techniques are that they will work in any situation
    where the NAND flash is not encrypted. However, extensive research, development,
    testing, and practice are required to execute these techniques.
  prefs: []
  type: TYPE_NORMAL
- en: Imaging Android USB mass storage devices
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Every Android device to date has either an external Secure Digital (SD) card
    or an Embedded MultiMediaCard (eMMC) that provides the large storage space required
    by many users. These storage devices exist because the user’s app data, typically
    stored in /data/data, is isolated for security and privacy reasons. However, users
    want to copy songs, pictures, videos, or other files between their Android device
    and a computer, and these large capacity FAT file system partitions solve that
    issue. The sensitive user data remains protected, yet the larger and more portable
    files are accessible to the user.
  prefs: []
  type: TYPE_NORMAL
- en: 'Initially, the approach to imaging the external storage was to simply remove
    it from the Android device and image using a USB write blocker. However, a number
    of challenges arose over time, including:'
  prefs: []
  type: TYPE_NORMAL
- en: • Moving to eMMC storage meant that the mass storage was no longer removable.
  prefs: []
  type: TYPE_NORMAL
- en: • Apps can now run from the SD card and in this scenario, the .apk files are
    encrypted. If capturing an unencrypted copy of the app is critical to an investigation
    (for example, a case involving malware analysis or a Trojan horse defense), the
    SD card must remain in the Android device.
  prefs: []
  type: TYPE_NORMAL
- en: • Newer devices are using RAM disks (tmpfs) more frequently to store user data
    that might be helpful in an investigation. Often, removing the SD card requires
    the device to be shut down and the battery removed, thus losing the ability to
    recover the temporal data.
  prefs: []
  type: TYPE_NORMAL
- en: For these reasons, the recommended approach for imaging the USB Mass Storage
    (UMS) devices on Android no longer involves removing the SD card but instead imaging
    it via the UMS interface.
  prefs: []
  type: TYPE_NORMAL
- en: SD Card Versus eMMC
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An SD card and eMMC are not all that different. The primary difference, of course,
    is that the SD cards are portable, easily moving from one device to the next.
    They use NAND flash, are based on the MultiMediaCard (MMC) specification, and
    have embedded storage controllers, so that systems MTD is not needed for guest
    operating systems to read them.
  prefs: []
  type: TYPE_NORMAL
- en: To date, Android devices accept microSD cards generally ranging from 2 GB up
    to 16 GB. However, larger cards are possible. Depending on the Android device,
    the SD card may be easily accessed and removed from a running device. However,
    many require that the device is shut down so that the battery can be removed.
  prefs: []
  type: TYPE_NORMAL
- en: For storage embedded on the device, several manufacturers have begun using eMMC,
    which consists of embedded storage with an MMC interface integrating directly
    onto the device’s PCB. This standard simplifies accessing NAND flash with the
    standardized eMMC protocol and is capable of supporting file systems that are
    not NAND flash aware. This does not necessarily mean the file systems preserve
    the life of the NAND flash at the same level and sophistication that a NAND flash-aware
    file system like YAFFS2 does. However, the general lifespan of Android devices
    is certainly decreasing and is likely not an issue for most users.
  prefs: []
  type: TYPE_NORMAL
- en: How to Forensically Image the SD Card/eMMC
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are two primary methods to forensically acquire the SD card and eMMC without
    removing it from the device. The first method, covered here, exposes the UMS device
    interface to your forensic workstation and allows you to acquire the image with
    your forensic tool of choice. The second method does not expose the UMS to your
    forensic workstation and instead uses dd on the Android device. This requires
    adb port forwarding, which will be covered in the section on physical techniques
    later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Even though our Ubuntu VM has dd built in, we are going to download, compile,
    and install an updated version of dd maintained by the Department of Defense’s
    Cyber Crime Center. The program, dc3dd, is a patched version of GNU dd and includes
    a number of features useful for computer forensics ([dc3dd, n.d.](#BIB6)), such
    as:'
  prefs: []
  type: TYPE_NORMAL
- en: • Piecewise and overall hashing with multiple algorithms—Supports MD5, SHA-1,
    SHA-256, and SHA-512.
  prefs: []
  type: TYPE_NORMAL
- en: • Progress meter with automatic input/output file-size probing.
  prefs: []
  type: TYPE_NORMAL
- en: • Combined log for hashes and errors.
  prefs: []
  type: TYPE_NORMAL
- en: • Error grouping—Produces one error message for identical sequential errors.
  prefs: []
  type: TYPE_NORMAL
- en: • Verify mode—Able to hash output files and compare hashes to the acquisition
    hash.
  prefs: []
  type: TYPE_NORMAL
- en: • Ability to split the output into chunks with numerical or alphabetic extensions.
  prefs: []
  type: TYPE_NORMAL
- en: • Ability to write multiple output files simultaneously.
  prefs: []
  type: TYPE_NORMAL
- en: The program is open source software licensed under the GNU Public license version
    3 (GPLv3) and is distributed online through SourceForge and was updated to version
    7.0 in August 2010 ([dc3dd, n.d.](#BIB6)). At this point in the book, you should
    be fairly comfortable compiling programs and have all the tools needed, so here
    are the abbreviated steps.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068u06-05-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: At this point, you could proceed with imaging. However, typing out the entire
    dc3dd command each time is not only tedious but can result in typos that could
    cause irreparable damage. So create a shell script, which not only acquires the
    device but also records various system characteristics, date/time stamps, and
    creates log files, which can be helpful as you write your report at a later time.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will place the acquire script in /usr/local/bin so you can easily run the
    script from any directory as /usr/local/bin is in your execution path by default:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068u06-06-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, copy the following into the script, save by pressing Ctrl-O, and exit
    with Ctrl-X:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068u06-07a-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![image](img/F100068u06-07b-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, you have to change permissions, so that you can run the script and then
    run it without parameters to see the usage help:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068u06-08-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The great thing about this script, and open source in general, is that you can
    simply change it as you see fit. If you do not want to track client name, then
    simply remove it from the script.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we have to mount the UMS device on your Ubuntu workstation. As covered
    in [Chapter 1](CHP001.html) in the Ubuntu VM setup, it is critical that you have
    disabled automount on your workstation. If you did not do this, please review
    the steps necessary and complete before presenting the UMS devices to the VM.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, the ideal situation would first connect the Android device to
    a hardware-based USB write blocker. However, some write blockers seem to have
    trouble when the connected device exposes more than one device ID. You should
    experiment with your USB write blocker and, ideally, have this working first.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Tableau UltraBlock USB
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Tableau UltraBlock USB model T8, running the latest firmware from August
    9, 2009, was only able to pass through the first USB device found on the reference
    HTC Incredible, and so we were unable to use it when analyzing a device. Tableau
    has a new UltraBlock USB device which may work; however, we have not verified
    this. Examiners should test the various USB write blockers they have for compatibility.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to determine to what devices the UMS is mapped. This information
    is displayed in the kernel logs and can be easily accessed with the “dmesg” command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068u06-09-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As discussed previously, the HTC Incredible exposes three USB interfaces in
    addition to ADB:'
  prefs: []
  type: TYPE_NORMAL
- en: • CD-ROM for device driver install (sr1)
  prefs: []
  type: TYPE_NORMAL
- en: • eMMC UMS device (sdb)
  prefs: []
  type: TYPE_NORMAL
- en: • SD card UMS device (sdc)
  prefs: []
  type: TYPE_NORMAL
- en: However, the differences between /dev/sdb and /dev/sdc are not easily discernible
    until the UMS or Disk drive feature is enabled on the Android device. Once enabled,
    you should then examine the output of dmesg again.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Use hardware write blocker
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Although the automount feature on the Ubuntu workstation has been disabled,
    it is critical that the forensic analyst connects only the Android device to the
    workstation through a hardware write blocker to ensure no changes are made to
    the device. All hardware should be thoroughly tested prior to active use in a
    case.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068u06-10-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'It is now clearer that /dev/sdb is the 7 GB storage device (which is the eMMC)
    while the 2 GB SD card is mapped to /dev/sdc. We can now acquire the devices using
    our acquire script or any forensic imaging tool available on your forensic workstation.
    The script takes the following six parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: 1. Client —This parameter creates the folder structure, examples might be “sheriffs-office”
    or a client name such as “viaforensics.”
  prefs: []
  type: TYPE_NORMAL
- en: 2. Case—This parameter provides a case name, such as af-book.
  prefs: []
  type: TYPE_NORMAL
- en: 3. Tag—This parameter is tag number for the evidence you are forensically imaging,
    item001 in our example.
  prefs: []
  type: TYPE_NORMAL
- en: 4. Serialno—This is the serial number of the device, disk, SD card, etc. If
    you do not have access to a serial number, you can type any text you choose such
    as unknown-serialno.
  prefs: []
  type: TYPE_NORMAL
- en: 5. Sourcedev—This is the device you want to acquire such as /dev/sdb, /dev/sdc,
    etc. You can determine this using dmesg which is explained next.
  prefs: []
  type: TYPE_NORMAL
- en: 6. Destpath—The top-level directory where the folders should be created. It
    could be your home directory (~) or perhaps a folder called clients (~/clients).
  prefs: []
  type: TYPE_NORMAL
- en: For this example, create a folder in your home directory called sd-emmc and
    then run the acquire script with sudo permissions.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068u06-11-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can then use the same general command, but change the parameters to image
    the eMMC which, for the device, is located at /dev/sdb. After these commands complete,
    the forensic images and log files are in ~/sd-emmc and are structured as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068u06-12-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For each UMS device forensically imaged, we not only have the verified image
    but also a hashlog for the dd image, log file with date, time, system info and
    commands run, an error log, and finally a listing of each log file and its sha256
    hash. This ensures sufficient details are known about the imaging process.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Encrypted apps on the SD card
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If apps are installed on the SD card, they are encrypted and thus, if the files
    are examined from the SD card image, they will be unreadable. However, when the
    SD card is not mounted on your forensic workstation, the unencrypted .apk files
    are mounted in /mnt/asec. If an investigation relies on .apk app analysis, ensure
    you acquire a copy of the unencrypted files too.
  prefs: []
  type: TYPE_NORMAL
- en: Logical techniques
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As discussed at the start of this chapter, logical forensic techniques extract
    data that is allocated. This is typically achieved by accessing the file system.
    Logical techniques are often the first type of examination a forensic analyst
    will run because they are not only easier to execute but often provide sufficient
    data for the case. Android forensics physical techniques can provide far more
    data. However, they are more difficult to successfully execute and take considerably
    more effort to analyze.
  prefs: []
  type: TYPE_NORMAL
- en: Logical techniques also have the advantage of working in far more scenarios
    as the only requirement is that USB debugging is enabled. In other words, Android
    forensics logical techniques do not require root access.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we first cover techniques that are freely available (although
    AFLogical is only free for active law enforcement and government agencies) followed
    by a review of available commercial software.
  prefs: []
  type: TYPE_NORMAL
- en: ADB Pull
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In [Chapter 4](CHP004.html), the recursive adb pull command was demonstrated
    several times as various parts of the file system were copied to the Ubuntu workstation
    for further analysis. Unless an Android device has root access or is running a
    custom ROM, the adb daemon running on the device that proxies the recursive copy
    only runs with shell permissions. As such, some of the more forensically relevant
    files are not accessible. However, there are still files which can be accessed.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you attempt to access files that the shell user does not have permissions
    to, it simply does not copy the files:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068u06-13-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'However, if you have sufficient privileges (root in the next example), then
    this method is very simple and effective:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068u06-14-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see from the output above, the entire “/data” partition was copied
    to a local directory in just over three and a half minutes. The directory structure
    is maintained during the copy so you can then simply browse or otherwise analyze
    the files of interest from the workstation.
  prefs: []
  type: TYPE_NORMAL
- en: 'As most phones will not have root access (at least by default), this technique
    may appear to be of little value. However, it is a powerful utility to understand
    and there are several scenarios ideal for this approach. These scenarios include:'
  prefs: []
  type: TYPE_NORMAL
- en: • On nonrooted devices, an adb pull can still access useful files such as unencrypted
    apps, most of the tmpfs file systems that can include user data such as browser
    history, and system information found in “/proc,” “/sys,” and other readable directories.
  prefs: []
  type: TYPE_NORMAL
- en: • On rooted devices, a pull of nearly all directories is quite simple and certain
    files and directories from “/data” would be of interest.
  prefs: []
  type: TYPE_NORMAL
- en: • When utilizing the physical technique, it is not always possible to mount
    some acquired file systems such as YAFFS2\. If adbd is running with root permissions,
    you can quickly extract a logical copy of the file system with adb pull.
  prefs: []
  type: TYPE_NORMAL
- en: As adb is not only a free utility in the Android SDK but also very versatile,
    it should be one of the primary logical tools used on a device.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: adb Pull issues
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some recursive pulls using adb can fail in the middle of the data transfer due
    to permission or other issues. You should closely monitor the results of the command
    to determine if any issues were encountered. Breaking the recursive pull of large
    directories into smaller data pulls may yield better results.
  prefs: []
  type: TYPE_NORMAL
- en: Backup Analysis
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When Android was first released, it did not provide a mechanism for users to
    backup their personal data. As a result, a number of backup applications were
    developed and distributed on the Android Market. For users running custom ROMs,
    there was an even more powerful backup utility developed called nandroid.
  prefs: []
  type: TYPE_NORMAL
- en: Many of the backup utilities have a “Save to SD Card” option (which users found
    extremely convenient) as well as several options to save to “the cloud.” Either
    way, users could take a backup of their devices, and if needed they could restore
    required data. This is not only a great way for users to protect themselves from
    data loss, but it can be a great source of information for forensic analysts.
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the more popular backup apps is RerWare’s My Backup Pro which can take
    a backup of device data using Content Provider and even the entire “/data/data”
    files if the device has root access. The user can choose between saving to the
    SD card and saving to RerWare’s server. The app supports ([RerWare, LLC, n.d.](#BIB11))
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: • Application install files (if phone has root access, this includes APK + Data
    and Market Links)
  prefs: []
  type: TYPE_NORMAL
- en: • Contacts
  prefs: []
  type: TYPE_NORMAL
- en: • Call log
  prefs: []
  type: TYPE_NORMAL
- en: • Browser bookmarks
  prefs: []
  type: TYPE_NORMAL
- en: • SMS (text messages)
  prefs: []
  type: TYPE_NORMAL
- en: • MMS (attachments in messages)
  prefs: []
  type: TYPE_NORMAL
- en: • System settings
  prefs: []
  type: TYPE_NORMAL
- en: • Home screens (including HTC Sense UI)
  prefs: []
  type: TYPE_NORMAL
- en: • Alarms
  prefs: []
  type: TYPE_NORMAL
- en: • Dictionary
  prefs: []
  type: TYPE_NORMAL
- en: • Calendars
  prefs: []
  type: TYPE_NORMAL
- en: • Music playlists
  prefs: []
  type: TYPE_NORMAL
- en: • Integrated third-party applications
  prefs: []
  type: TYPE_NORMAL
- en: The last bullet, “integrated third-party applications,” refers to companies
    who provide RerWare hooks for data backup. At least initially, RerWare would pay
    developers to include RerWare backup support in their apps.
  prefs: []
  type: TYPE_NORMAL
- en: Interestingly, the app runs not only on Android but also on Windows Mobile,
    Blackberry, and soon Symbian OS. The user can take a backup on one platform and
    restore on a completely different supported OS. RerWare saves a single SQLite
    file to the SD card when the device backup is stored locally.
  prefs: []
  type: TYPE_NORMAL
- en: In the more recent releases of Android, a new backup API is now available. Developers
    can simply integrate these APIs into their apps and the rest of the backup is
    handled by Android and Google. This provides the users with secure, cloud-based
    backups with consistency across apps, and will likely become the de facto standard.
    Unfortunately, current research has not yet discovered useful artifacts from the
    new backup APIs left on an Android device.
  prefs: []
  type: TYPE_NORMAL
- en: Regardless of the backup app, forensic analysts should determine if one was
    installed and, if so, where the backup data is stored. The SD card should be examined
    as well as other devices such as a computer or laptop. The data saved in a backup
    is obviously of significant value in an examination.
  prefs: []
  type: TYPE_NORMAL
- en: AFLogical
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: AFLogical is an Android forensics logical technique which is distributed free
    to law enforcement and government agencies. The app, developed by viaForensics,
    extracts data using Content Providers, which are a key feature of the Android
    platform. This is the same technique that commercial forensics tools use for logical
    forensics.
  prefs: []
  type: TYPE_NORMAL
- en: 'Recall that Android’s security model is effective in limiting access to app
    data except in a few circumstances. Here is a quick recap of the key components
    of Android’s security model:'
  prefs: []
  type: TYPE_NORMAL
- en: • Each application is assigned a unique Linux user and group id.
  prefs: []
  type: TYPE_NORMAL
- en: • Apps execute using their specific user ID in a dedicated process and Dalvik
    VM.
  prefs: []
  type: TYPE_NORMAL
- en: • Each app has dedicated storage, generally in “/data/data,” that only the app
    can access.
  prefs: []
  type: TYPE_NORMAL
- en: However, the Android framework does provide a mechanism by which apps can share
    data. An app developer can include support for Content Providers within their
    application, which allows them to share data with other apps. The developer controls
    what data is exposed to other apps. During the install of an app, the user controls
    whether or not an app should gain access to the requested Content Providers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some examples of Content Providers are:'
  prefs: []
  type: TYPE_NORMAL
- en: • SMS/MMS
  prefs: []
  type: TYPE_NORMAL
- en: • Contacts
  prefs: []
  type: TYPE_NORMAL
- en: • Calendar
  prefs: []
  type: TYPE_NORMAL
- en: • Facebook
  prefs: []
  type: TYPE_NORMAL
- en: • Gmail
  prefs: []
  type: TYPE_NORMAL
- en: And there are many more.
  prefs: []
  type: TYPE_NORMAL
- en: 'The AFLogical app takes advantage of the Content Provider architecture to gain
    access to data stored on the device. Similar to commercial Android logical tools,
    USB debugging must be enabled on the device for AFLogical to extract the data.
    The current version, 1.5.1, extracts data from 41 Content Providers and provides
    the output information to the SD card in CSV format and as an info.xml file, which
    provides details about the device and installed apps. AFLogical supports devices
    running Android 1.5 and later, and has been specifically updated to support extraction
    of large data sets such as an SMS database with over 35,000 messages. The currently
    supported Content Providers are:'
  prefs: []
  type: TYPE_NORMAL
- en: 1. Browser Bookmarks
  prefs: []
  type: TYPE_NORMAL
- en: 2. Browser Searches
  prefs: []
  type: TYPE_NORMAL
- en: 3. Calendars
  prefs: []
  type: TYPE_NORMAL
- en: 4. Calendar Attendees
  prefs: []
  type: TYPE_NORMAL
- en: 5. Calendar Events
  prefs: []
  type: TYPE_NORMAL
- en: 6. Calendar Extended Properties
  prefs: []
  type: TYPE_NORMAL
- en: 7. Calendar Reminders
  prefs: []
  type: TYPE_NORMAL
- en: 8. Call Log Calls
  prefs: []
  type: TYPE_NORMAL
- en: 9. Contacts Contact Methods
  prefs: []
  type: TYPE_NORMAL
- en: 10. Contacts Extensions
  prefs: []
  type: TYPE_NORMAL
- en: 11. Contacts Groups
  prefs: []
  type: TYPE_NORMAL
- en: 12. Contacts Organizations
  prefs: []
  type: TYPE_NORMAL
- en: 13. Contacts Phones
  prefs: []
  type: TYPE_NORMAL
- en: 14. Contacts Settings
  prefs: []
  type: TYPE_NORMAL
- en: 15. External Media
  prefs: []
  type: TYPE_NORMAL
- en: 16. External Image Media
  prefs: []
  type: TYPE_NORMAL
- en: 17. External Image Thumb Media
  prefs: []
  type: TYPE_NORMAL
- en: 18. External Videos
  prefs: []
  type: TYPE_NORMAL
- en: 19. IM Account
  prefs: []
  type: TYPE_NORMAL
- en: 20. IM Accounts
  prefs: []
  type: TYPE_NORMAL
- en: 21. IM Chats
  prefs: []
  type: TYPE_NORMAL
- en: 22. IM Contacts Provider (IM Contacts)
  prefs: []
  type: TYPE_NORMAL
- en: 23. IM Invitations
  prefs: []
  type: TYPE_NORMAL
- en: 24. IM Messages
  prefs: []
  type: TYPE_NORMAL
- en: 25. IM Providers
  prefs: []
  type: TYPE_NORMAL
- en: 26. IM Provider Settings
  prefs: []
  type: TYPE_NORMAL
- en: 27. Internal Image Media
  prefs: []
  type: TYPE_NORMAL
- en: 28. Internal Image Thumb Media
  prefs: []
  type: TYPE_NORMAL
- en: 29. Internal Videos
  prefs: []
  type: TYPE_NORMAL
- en: 30. Maps-Friends
  prefs: []
  type: TYPE_NORMAL
- en: 31. Maps-Friends extra
  prefs: []
  type: TYPE_NORMAL
- en: 32. Maps-Friends contacts
  prefs: []
  type: TYPE_NORMAL
- en: 33. MMS
  prefs: []
  type: TYPE_NORMAL
- en: 34. Mms Parts Provider (MMSParts)
  prefs: []
  type: TYPE_NORMAL
- en: 35. Notes
  prefs: []
  type: TYPE_NORMAL
- en: 36. People
  prefs: []
  type: TYPE_NORMAL
- en: 37. People Deleted
  prefs: []
  type: TYPE_NORMAL
- en: 38. Phone Storage (HTC Incredible)
  prefs: []
  type: TYPE_NORMAL
- en: 39. Search History
  prefs: []
  type: TYPE_NORMAL
- en: 40. SMS
  prefs: []
  type: TYPE_NORMAL
- en: 41. Social Contracts Activities
  prefs: []
  type: TYPE_NORMAL
- en: Let’s walk through the steps for running AFLogical on a device. First, ensure
    you have downloaded AFLogical, which requires registration and approval from viaForensics.
    (You can access the AFLogical page at [http://viaforensics.com/products/tools/aflogical/](http://viaforensics.com/products/tools/aflogical/).)
    Next, you need to replace the user’s SD card with an SD card you control and ensure
    that USB debugging is enabled on the device. Then connect the Android device to
    your Ubuntu workstation and make sure you pass the USB connection through to the
    VM.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Replace user’s SD card
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This version of AFLogical writes content directly to the SD card and it is important
    that the user’s SD card is removed and replaced with the examiner’s SD card. Failure
    to do this will either write data to the user’s SD card or AFLogical will fail
    as it cannot write to the SD card. The commercial version of this app will eventually
    replace the writing to the SD card in favor of port forwarding over adb.
  prefs: []
  type: TYPE_NORMAL
- en: 'From a terminal session, verify you can see the device:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068u06-15-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Assuming you saved the AFLogical app in your home directory, you can install
    it with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068u06-16-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Note: If AFLogical is already installed on the device, an error will display
    and you must uninstall the existing app before you can install the new version.
    To uninstall, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068u06-17-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After the application is successfully installed, you can run the program from
    either the Android device directly or via command line. If you run the app from
    command line, you can simply start the app and then complete using the device
    or have it run automated. To run the app and extraction automatically, execute
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068u06-18-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The program immediately starts and begins to extract data from all supported
    Content Providers. If you are viewing the screen, you would see an image similar
    to [Fig. 6.7](#F0040).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068f06-07-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 6.7 AFLogical, extract all from command line.
  prefs: []
  type: TYPE_NORMAL
- en: 'Or you can simply start the app with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068u06-19-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: And then complete the acquisition using the screen presented on the device as
    shown in [Fig. 6.8](#F0045).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068f06-08-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 6.8 AFLogical, run from command line.
  prefs: []
  type: TYPE_NORMAL
- en: Otherwise, you can simply run the app directly from the All Apps screen on the
    device as shown in [Fig. 6.9](#F0050). First, access the Android app menu, look
    for a program called viaForensics and click on the icon to launch the app.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068f06-09-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 6.9 AFLogical in All Apps list.
  prefs: []
  type: TYPE_NORMAL
- en: You will then be presented with the AFLogical data extraction screen. You can
    select or deselect individual Content Providers or leave all of them selected.
    Next, you hit Capture which will start the data collection process as illustrated
    in [Fig. 6.10](#F0055).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068f06-10-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 6.10 AFLogical capturing data.
  prefs: []
  type: TYPE_NORMAL
- en: Once the data collection is complete, you will receive the corresponding message
    shown in [Fig. 6.11](#F0060).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068f06-11-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 6.11 AFLogical, data extraction complete.
  prefs: []
  type: TYPE_NORMAL
- en: 'The extracted data are saved to the SD card of the device in a directory called
    forensics and a subdirectory named after the date in YYYYMMDD.HHMM format. For
    this example, we moved the files from the SD card to an AFLogical directory on
    the local file system using adb pull. If you examine that folder, you see:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068u06-20-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This then contains the extracted data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068u06-21a-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The CSV files can be viewed using any editor or spreadsheet. There is also a
    file in the directory called info.xml, which contains information about the device
    including the IMSI, IMEI, Android version, network provider, and more, as well
    as the list of all installed apps.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068u06-22a-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![image](img/F100068u06-22b-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The data can now be analyzed by the forensic examiner and easily shared with
    others.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Uninstall AFLogical
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Do not forget to uninstall AFLogical. Failure to uninstall the app would mean
    that the Android device could potentially be returned to the owner with the forensic
    agent still accessible. To uninstall AFLogical, key in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: adb uninstall com.viaforensics.android
  prefs: []
  type: TYPE_NORMAL
- en: This should return Success. Alternately, you can go to the home screen, press
    Menu, select Applications, Manage Applications, viaForensics, and finally Uninstall.
  prefs: []
  type: TYPE_NORMAL
- en: Commercial Providers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Many of the commercial mobile forensic software vendors now support Android.
    To date, the forensic software only supports a logical examination of an Android
    device using the same Content Provider technique used by AFLogical. It can be
    helpful for a forensic examiner to understand how each of the forensic software
    vendors implement Android support.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each software company provided an evaluation copy of their software as well
    as an overview of their platform, which is included at the beginning of each section.
    A Motorola Droid running Android 2.2 was used for the examination. This section
    is not intended to evaluate each platform, but rather provide a helpful overview.
    The following forensic software packages were provided (reviewed in alphabetical
    order):'
  prefs: []
  type: TYPE_NORMAL
- en: • Cellebrite UFED
  prefs: []
  type: TYPE_NORMAL
- en: • Compelson MOBILedit!
  prefs: []
  type: TYPE_NORMAL
- en: • EnCase Neutrino
  prefs: []
  type: TYPE_NORMAL
- en: • Micro Systemation XRY
  prefs: []
  type: TYPE_NORMAL
- en: • Paraben Device Seizure
  prefs: []
  type: TYPE_NORMAL
- en: • viaForensics’ viaExtract
  prefs: []
  type: TYPE_NORMAL
- en: Two additional forensic software packages were tested. However, issues were
    encountered which prevented their inclusion at this time. These vendors do provide
    a forensic solution for Android and, if interested, you should review their offerings
    independently. The software packages omitted were Oxygen Forensic Suite 2010 and
    Logicube’s CellDEK.
  prefs: []
  type: TYPE_NORMAL
- en: The challenge with any such overview is that the forensic software is updated
    frequently enough that a newer version likely already exists. Forensic examiners
    and security engineers interested in a particular software package should check
    the vendor’s web site or contact them directly.
  prefs: []
  type: TYPE_NORMAL
- en: Cellebrite UFED
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The following overview of Cellebrite was provided by the vendor:'
  prefs: []
  type: TYPE_NORMAL
- en: The Cellebrite UFED Forensic system is a stand-alone device capable of acquiring
    data from approximately 1600 mobile devices and storing the information on a USB
    drive, SD card or PC. UFED also has a built-in SIM card reader and cloner. The
    ability to clone a SIM card is a powerful feature as you can create and insert
    a clone of the original SIM and the phone will function normally. However, it
    will not register on the mobile carrier’s network, eliminating the need for Faraday
    bags and the possibility that the data on the phone will be updated (or erased).
    The UFED package ships with about 70 cables for connecting to most mobile devices
    available today. Connection protocols supported include serial, USB, infrared,
    and Bluetooth.
  prefs: []
  type: TYPE_NORMAL
- en: Cellebrite also distributes the UFED Report Manager, which provides an intuitive
    reporting interface and allows the user to export data/reports into Excel, MS
    Outlook, Outlook Express, and CSV or to simply print the report.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UFED device fully supports Unicode and thus, can process phones with any
    language enabled. Also, the following data types are extracted:'
  prefs: []
  type: TYPE_NORMAL
- en: • Phone Book
  prefs: []
  type: TYPE_NORMAL
- en: • Text Messages
  prefs: []
  type: TYPE_NORMAL
- en: • Call History (Received, Dialed, Missed)
  prefs: []
  type: TYPE_NORMAL
- en: • SIM ID Cloning
  prefs: []
  type: TYPE_NORMAL
- en: • Deleted Text Messages off SIM/USIM
  prefs: []
  type: TYPE_NORMAL
- en: • Audio Recordings
  prefs: []
  type: TYPE_NORMAL
- en: • Videos
  prefs: []
  type: TYPE_NORMAL
- en: • Pictures
  prefs: []
  type: TYPE_NORMAL
- en: • Phone Details (IMEI/ESN phone number)
  prefs: []
  type: TYPE_NORMAL
- en: Installation
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The UFED system is a stand-alone unit and is packaged in a soft case containing
    the UFED device, user manual, software CD-ROM, USB Bluetooth radio (Cambridge
    Silicon Radio Ltd), 250 MB USB drive, and roughly 72 cables for connecting to
    supported devices.
  prefs: []
  type: TYPE_NORMAL
- en: The UFED system provides several mechanisms by which the firmware and software
    can be updated. After setting the date and time, an examiner can simply connect
    the UFED system to the network via an Ethernet cable, provided DHCP and Internet
    access are available. Next, select Services, Upgrade, Upgrade Application Now,
    and select HTTP Server as the source. For this test, the latest Application software,
    version 1.1.0.5, was located and installed. As the UFED system is a stand-alone
    solution, no additional installs are necessary.
  prefs: []
  type: TYPE_NORMAL
- en: Acquisition
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'The acquisition of the Motorola Droid was quite fast and simple on the UFED
    system. After powering the device on, select Extract Phone Data, Motorola CDMA,
    Moto. A855 Droid (Android), USB disk drive (destination), and the desired Content
    types. The following instructions were then displayed by the UFED system (see
    [Fig. 6.12](#F0065)):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068u06-23-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![image](img/F100068f06-12-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 6.12 UFED instructions for Android device.
  prefs: []
  type: TYPE_NORMAL
- en: 'It should be noted that the contacts list will be saved to the SD card if the
    suggested steps are followed. After performing these steps, you hit Continue and
    the acquisition proceeds. The UFED system next prompts:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068u06-24-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'And after this step is completed, the acquisition proceeds. You may be prompted
    to set UMS again before the acquisition is complete. The acquisition process took
    just over three minutes and provided the following prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068u06-25-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The results from the acquisition were stored on the flash drive that was plugged
    into the UFED. A 25 MB folder was created on this drive with folders for videos,
    audio, and images. There were also three files of interest created: [PhoneBook
    2010_11_23 (001).htm](http://PhoneBook2010_11_23(001).htm), [SMSMessages 2010_11_23
    (001).htm](http://SMSMessages2010_11_23(001).htm), and [Report.htm](http://Report.htm).
    All these can be viewed in a web browser. The file Report.htm contains the entire
    report of the extraction. This contains sections for Phone Examination Report
    Properties, Phone Examination Report Index, Phone Contacts, Phone SMS—Text Messages,
    Phone Incoming Calls List, Phone Outgoing Calls List, Phone Missed Calls List,
    Images, Ringtones, Audio, and Video.'
  prefs: []
  type: TYPE_NORMAL
- en: The entire acquisition process took approximately ten minutes. After the acquisition
    was completed, a quick examination of the SD card revealed a file named 00001.vcf
    that contained the contact information from the export process.
  prefs: []
  type: TYPE_NORMAL
- en: Phone information was well laid out and was quite accurate.
  prefs: []
  type: TYPE_NORMAL
- en: Data presentation and analysis
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'The acquisition data was stored on a flash drive connected to the UFED system
    and contained a folder that stored videos, audio files, and images as well as
    three HTML files, which contained the report data:'
  prefs: []
  type: TYPE_NORMAL
- en: 1. PhoneBook 2010_11_23 (001).htm
  prefs: []
  type: TYPE_NORMAL
- en: 2. SMSMessages 2010_11_23 (001).htm
  prefs: []
  type: TYPE_NORMAL
- en: 3. Report.htm
  prefs: []
  type: TYPE_NORMAL
- en: These files can be viewed in a web browser and samples from the report are displayed
    in [Fig. 6.13](#F0070), in which thorough phone information was captured.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068f06-13-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 6.13 UFED phone information reporting.
  prefs: []
  type: TYPE_NORMAL
- en: '[Fig. 6.14](#F0075) shows how the Phone Contacts are laid out.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068f06-14-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 6.14 UFED phone contacts reporting.
  prefs: []
  type: TYPE_NORMAL
- en: '[Fig. 6.15](#F0080) shows text messages displayed chronologically with detailed
    information on whether the message was sent or received.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068f06-15-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 6.15 UFED SMS reporting.
  prefs: []
  type: TYPE_NORMAL
- en: However, deleted text messages are not displayed, nor are MMS messages.
  prefs: []
  type: TYPE_NORMAL
- en: Call logs are displayed chronologically as shown in [Fig. 6.16](#F0085), and
    include the length of the call. They are categorized into Incoming, Outgoing,
    and Missed sections.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068f06-16-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 6.16 UFED phone calls reporting.
  prefs: []
  type: TYPE_NORMAL
- en: Several calls were deleted from the call logs; however, UFED was able to extract
    and display the details.
  prefs: []
  type: TYPE_NORMAL
- en: All of the images found on the phone are reported, along with a thumbnail of
    the image and details, including file name, size, date and time created, and resolution,
    as shown in [Fig. 6.17](#F0090).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068f06-17-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 6.17 UFED images reporting.
  prefs: []
  type: TYPE_NORMAL
- en: Deleted images did not appear, and it seemed as though a duplicate of each image
    was created. Both audio and video files are reported. The report includes file
    name, file size, date and time created, and a link to view or listen to the media,
    as shown in [Fig. 6.18](#F0095).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068f06-18-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 6.18 UFED audio and video reporting.
  prefs: []
  type: TYPE_NORMAL
- en: No deleted videos were returned and songs uploaded to the device did not appear
    in the report. The audio files that were reported were returned from Google Maps
    Navigation.
  prefs: []
  type: TYPE_NORMAL
- en: Compelson MOBILedit!
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The following overview of MOBILedit! was provided by the vendor:'
  prefs: []
  type: TYPE_NORMAL
- en: With just a single click, MOBILedit! Forensic collects all possible data from
    mobile phones and generates extensive reports onto a PC that can be stored or
    printed. It is the most universal mobile phone solution with software supporting
    most GSM phones and open architecture allowing the support of any phone. The system
    allows you to customize the output making it completely adaptable to the needs
    of your judicial system.
  prefs: []
  type: TYPE_NORMAL
- en: MOBILedit! Forensic does a complete analysis of the phone including its phone
    book, last dialed numbers, missed calls, received calls, MMS messages, SMS messages,
    photos, videos, files, phone details, calendar, notes, tasks, and much more.
  prefs: []
  type: TYPE_NORMAL
- en: MOBILedit! Forensic caters to the entire world with reports that can be generated
    in any language. You are able to prepare creative templates according to your
    specific needs. You construct all the text that you would like to see appear in
    every final report. It also allows for XML export, so that you can connect the
    application with other systems. The XSL module exports and nicely formats all
    data in the package to an Internet browser. You can burn, send, and share the
    report as needed.
  prefs: []
  type: TYPE_NORMAL
- en: MOBILedit! Forensic reports can be created without the touch of a human hand.
    While there is no need to import or export stubs of data from SIMs or phones,
    it is possible in manual investigation mode in MOBILedit! Forensic. It is read-only
    and hence, it prevents changes in the device, which could mean the disappearance
    of evidence. All items are also protected against later modifications by MD5 hash
    codes used in digital signatures. It helps you to quickly locate the possible
    place of modification.
  prefs: []
  type: TYPE_NORMAL
- en: MOBILedit! Forensic also has frequent updates and upgrades so that you can be
    sure you are using the absolute latest in technology. Its detailed reports and
    user-friendly design make it a pleasure to work with.
  prefs: []
  type: TYPE_NORMAL
- en: Installation
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The MOBILedit!4 Forensic application was downloaded from [www.mobiledit.com](http://www.mobiledit.com)
    and the install only took a few minutes. After the installation is completed and
    the application is run for the first time, you are presented with a prompt to
    check for updates.
  prefs: []
  type: TYPE_NORMAL
- en: To activate the software, Compelson sends an e-mail with an “activation card”
    attachment. This PDF file includes installation instructions as well as an activation
    key that worked without any issues.
  prefs: []
  type: TYPE_NORMAL
- en: Acquisition
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: To begin the acquisition, the examiner must first connect the Android device
    to the forensic workstation using USB and ensure USB debugging is enabled. MOBILedit!
    attempts to detect the device as shown in [Fig. 6.19](#F0100).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068f06-19-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 6.19 detect Android device.
  prefs: []
  type: TYPE_NORMAL
- en: After clicking “Finish,” there was a notification prompting the installation
    of the “Connector” app on the device, shown in [Fig. 6.20](#F0105).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068f06-20-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 6.20 Install the connector.
  prefs: []
  type: TYPE_NORMAL
- en: Following the quick installation, you create a name for the investigation and
    select the type of data you want to extract. In the example shown in [Fig. 6.21](#F0110),
    the option to take a backup of the “Whole file system” was selected, which then
    executed without error and presented a success status as illustrated in [Fig.
    6.22](#F0115).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068f06-21-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 6.21 Take backup of the whole file system.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068f06-22-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 6.22 Operation completed successfully.
  prefs: []
  type: TYPE_NORMAL
- en: You can then decide if you want to add this to an already existing case or create
    a new one. For this example, shown in [Fig. 6.23](#F0120), a new case was created
    and a data export format option of XLS was selected.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068f06-23-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 6.23 Data export format.
  prefs: []
  type: TYPE_NORMAL
- en: Data presentation and analysis
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Immediately following the acquisition of the device, MOBILedit displays statistics
    on the devices that were acquired, as well as a view of the application data available
    for analysis. [Fig. 6.24](#F0125) shows the main screen where the examiner can
    see specific device information including the IMEI number, serial number, and
    details on the amount of Phone memory, Battery signal, Network signal, and Memory
    card space available on the device.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068f06-24-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 6.24 Main screen.
  prefs: []
  type: TYPE_NORMAL
- en: The next option in the Tree View is the Phonebook where the examiner can view
    all contacts stored within the Phonebook including e-mail address, phone numbers,
    nicknames, and any notes entered regarding the contact, as shown in [Fig. 6.25](#F0130).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068f06-25-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 6.25 Phonebook.
  prefs: []
  type: TYPE_NORMAL
- en: Call logs are next and are separated into Missed calls, Last dialed numbers,
    and Received calls as shown in [Fig. 6.26](#F0135).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068f06-26-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 6.26 Call logs—Missed calls.
  prefs: []
  type: TYPE_NORMAL
- en: SMS messages are similarly separated into categories including Inbox, Sent items,
    and Drafts. Each section contains the date and time the message was received (or
    sent), the message content, and who the message was from. Contact names are linked
    to the Phonebook, so both name and phone numbers are displayed. [Fig. 6.27](#F0140)
    shows the SMS message inbox.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068f06-27-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 6.27 SMS messages—Inbox.
  prefs: []
  type: TYPE_NORMAL
- en: Any MMS messages are displayed within the “MMS Storage” folder, shown in [Fig.
    6.28](#F0145). On the left-hand side, information about the message is displayed,
    including the subject, number it was sent from, number it was sent to, and date
    and time. On the right-hand side is a preview of the actual image.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068f06-28-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 6.28 MMS storage.
  prefs: []
  type: TYPE_NORMAL
- en: Selecting the Calendar option will literally pull up a calendar within the reporting
    tool as shown in [Fig. 6.29](#F0150).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068f06-29-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 6.29 Calendar.
  prefs: []
  type: TYPE_NORMAL
- en: Additional data extracted from the device or SD card is shown within the “files”
    directory. This directory contains a listing of the file system on the device.
    While some of these folders are empty (such as cache, config, and data), there
    are also some folders which contain raw files acquired from the device. For example,
    within the SD card folder, the subfolder “secret stuff” contained two files shown
    in [Fig. 6.30](#F0155).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068f06-30-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 6.30 SD card files.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the tool also provides a hex dump capability for specified files. After
    selecting “Hex Dump,” and then a file (in this example, a .jpg file was selected),
    the hex dump is viewed on the right-hand side using a hex editor as shown in [Fig.
    6.31](#F0160).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068f06-31-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 6.31 Hex dump.
  prefs: []
  type: TYPE_NORMAL
- en: Most of the raw user data files on the Android can be found within the “data”
    folder and, when MOBILedit created an entry in the Tree View for this folder (under
    the “Files” directory), it did not contain any files.
  prefs: []
  type: TYPE_NORMAL
- en: One thing to note is that when the acquisition and analysis was complete, the
    “MOBILedit! Connector” application was still installed on the device. Examiners
    should strongly consider manually uninstalling the software from the device after
    the investigation is complete.
  prefs: []
  type: TYPE_NORMAL
- en: EnCase Neutrino
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The following overview of Neutrino was provided by the vendor:'
  prefs: []
  type: TYPE_NORMAL
- en: EnCase® Neutrino® is designed for law enforcement, security analysts, and eDiscovery
    specialists who need to forensically collect and review data from mobile devices.
    Investigators can process and analyze mobile device data alongside other types
    of digital evidence within any EnCase® product.
  prefs: []
  type: TYPE_NORMAL
- en: 'The solution features hardware support and parsing capabilities for the most
    common mobile devices and Smartphone operating systems including iPhone, Palm,
    BlackBerry®, Android, Windows Mobile, Motorola, Nokia, Samsung, and many more.
    Investigators can collect, analyze, and preserve all potentially relevant data
    including:'
  prefs: []
  type: TYPE_NORMAL
- en: • Device Settings
  prefs: []
  type: TYPE_NORMAL
- en: • Contacts
  prefs: []
  type: TYPE_NORMAL
- en: • Call logs
  prefs: []
  type: TYPE_NORMAL
- en: • E-mail
  prefs: []
  type: TYPE_NORMAL
- en: • Images
  prefs: []
  type: TYPE_NORMAL
- en: • SMS/MMS
  prefs: []
  type: TYPE_NORMAL
- en: • Calendars
  prefs: []
  type: TYPE_NORMAL
- en: • Other files stored on the device
  prefs: []
  type: TYPE_NORMAL
- en: 'With EnCase Neutrino an investigator can:'
  prefs: []
  type: TYPE_NORMAL
- en: • Collect data from a wide variety of devices, following an easy to use wizard
  prefs: []
  type: TYPE_NORMAL
- en: • Correlate data from multiple devices and computer media
  prefs: []
  type: TYPE_NORMAL
- en: • Seamlessly integrate collected data into EnCase Forensic or EnCase Enterprise
    for analysis
  prefs: []
  type: TYPE_NORMAL
- en: • Parse data quickly to improve speed of investigation process
  prefs: []
  type: TYPE_NORMAL
- en: • Access more data on selected devices in comparison to similar products
  prefs: []
  type: TYPE_NORMAL
- en: Installation
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The installation of EnCase Neutrino first required installing EnCase, then Neutrino.
    The software installation proceeded without issue when following the on-screen
    instructions. To use the software, you must have a hardware USB dongle provided
    by EnCase.
  prefs: []
  type: TYPE_NORMAL
- en: Acquisition
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The acquisition of an Android device by Neutrino is handled in a single screen.
    First, you select the device, manufacturer, and model. Next, you enter basic information
    about the case and the device. Finally, you connect the device to your forensic
    workstation and click “Acquire Current Item.” [Fig. 6.32](#F0165) shows the acquisition
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068f06-32-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 6.32 Neutrino acquisition screen.
  prefs: []
  type: TYPE_NORMAL
- en: The acquisition took less than one minute. Once completed, click Generate Report
    to see the results of the acquisition.
  prefs: []
  type: TYPE_NORMAL
- en: Data presentation and analysis
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Neutrino reports have a short and a detailed report. The short report, shown
    in [Fig. 6.33](#F0170), shows all of the entries of the detailed report but with
    fewer details.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068f06-33-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 6.33 Neutrino contacts in short report.
  prefs: []
  type: TYPE_NORMAL
- en: And the detailed view provides much greater detail about the contacts as shown
    in [Fig. 6.34](#F0175).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068f06-34-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 6.34 Neutrino contacts in detailed report.
  prefs: []
  type: TYPE_NORMAL
- en: The SMS section also has a short and detailed view. The short view only shows
    the other phone number in the conversation, the date and time of the message,
    the message direction (sent or received), and the message contents. The detailed
    view, shown in [Fig. 6.35](#F0180), includes information such as the name associated
    with the phone number involved with the message and the status of the message.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068f06-35-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 6.35 Neutrino SMS in detailed report.
  prefs: []
  type: TYPE_NORMAL
- en: MMS messages only appear in the detailed view, shown in [Fig. 6.36](#F0185).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068f06-36-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 6.36 Neutrino MMS in detailed report.
  prefs: []
  type: TYPE_NORMAL
- en: No deleted SMS messages were recovered. The detailed view of the user’s web
    history, shown in [Fig. 6.37](#F0190), provides considerable details.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068f06-37-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 6.37 Neutrino web history in detailed report.
  prefs: []
  type: TYPE_NORMAL
- en: The only photos recovered from the device were the images sent as MMS, not the
    photos or videos saved on the device’s SD card.
  prefs: []
  type: TYPE_NORMAL
- en: The report can be exported in other formats, such as to HTML, so that the entire
    report can be viewed in one page, as illustrated in [Fig. 6.38](#F0195)
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068f06-38-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 6.38 Neutrino report exported as HTML.
  prefs: []
  type: TYPE_NORMAL
- en: Micro Systemation XRY
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The following overview of XRY was provided by the vendor:'
  prefs: []
  type: TYPE_NORMAL
- en: XRY is a dedicated mobile device forensic tool developed by Micro Systemation
    (MSAB) based in Stockholm.
  prefs: []
  type: TYPE_NORMAL
- en: 'XRY has been available since 2002 and “XRY Complete” is a package containing
    the software and hardware to allow logical and physical analysis of mobile devices.
    The product comes shipped in a handy portable case with bespoke interior and all
    the necessary hardware included, which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: • XRY Forensic Pack Software License Key
  prefs: []
  type: TYPE_NORMAL
- en: • Communication hub for USB, Bluetooth, and Infrared connectivity
  prefs: []
  type: TYPE_NORMAL
- en: • SIM ID cloner device
  prefs: []
  type: TYPE_NORMAL
- en: • Pack of SIM clone cards
  prefs: []
  type: TYPE_NORMAL
- en: • Write-protected universal memory card reader
  prefs: []
  type: TYPE_NORMAL
- en: • Complete set of cables for logical and physical acquisition
  prefs: []
  type: TYPE_NORMAL
- en: • XACT Hex Viewer software application
  prefs: []
  type: TYPE_NORMAL
- en: • XRY Reader Tool for distribution to third parties
  prefs: []
  type: TYPE_NORMAL
- en: XRY was designed and refined with the input of forensic investigators and a
    wizard guides you through the entire process to assist the examination. The new
    unified Logical/Physical extraction Wizard and the resulting reports help to show
    the examiner the full contents of the device in a neat, clean, and professional
    manner.
  prefs: []
  type: TYPE_NORMAL
- en: One of the unique features of XRY is the Device Manual with a complete and detailed
    list of available support for each device; identifying what data can be retrieved,
    and also what cannot be recovered which is sometimes just as relevant to investigators.
  prefs: []
  type: TYPE_NORMAL
- en: All extractions, logical or physical, are saved in an XRY file which remains—for
    forensic security purposes. From the XRY file, you can create reports as required
    in Word, Excel, Open Office, or PDF. You can include case data, and references,
    choose what data is included in the report or not and then distribute it to other
    parties involved in the investigation; lawyers, prosecutors or other investigators.
    MSAB offer a free XRY reader and you can provide this to third parties to allow
    them to make notes on the report—while still maintaining the original forensic
    integrity of the data.
  prefs: []
  type: TYPE_NORMAL
- en: Within the package is the XACT Hex Viewer application to undertake more detailed
    examination of the raw data recovered and assist with searching and manual decoding
    to supplement the automatic decoding available in XRY Physical.
  prefs: []
  type: TYPE_NORMAL
- en: Version 5.1 of the XRY Forensic Pack was released on June 28, 2010 with additional
    support for the Apple iPad.
  prefs: []
  type: TYPE_NORMAL
- en: Installation
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: XRY is a Windows application that you install from a single setup program provided
    by the vendor. The setup includes an installation wizard, checks for software
    updates online, and takes approximately 15 minutes. The software requires the
    use of a hardware dongle to operate.
  prefs: []
  type: TYPE_NORMAL
- en: Acquisition
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: After the installation is complete, run the software, select Extract Data, and
    then choose to extract data from a phone. After that, you must identify the device
    type, which can be done in several ways. For this example, a search was executed
    by selecting Name Search, search for Droid, and select Motorola Droid A855, and
    then select Next. This is illustrated in [Fig. 6.39](#F0200).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068f06-39-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 6.39 XRY—Search device type.
  prefs: []
  type: TYPE_NORMAL
- en: Although the MSAB forensic suite supports physical extractions of some devices,
    only logical extraction is available for Android. After selecting logical acquisition,
    the software displays the data available for extraction as shown in [Fig. 6.40](#F0205).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068f06-40-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 6.40 XRY data types available for Droid extraction.
  prefs: []
  type: TYPE_NORMAL
- en: Select Next and then the option to extract data by cable and a full read and
    finally click Next to start data extraction. When the extraction is complete,
    you see the extraction complete screen shown in [Fig. 6.41](#F0210).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068f06-41-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 6.41 XRY extraction complete.
  prefs: []
  type: TYPE_NORMAL
- en: Data presentation and analysis
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: After extraction, the application displays the data within the application and
    is easy to navigate. The contact list includes not only the details of a contact
    but where the contact was stored, as shown in [Fig. 6.42](#F0215).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068f06-42-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 6.42 XRY contacts list.
  prefs: []
  type: TYPE_NORMAL
- en: The call logs provide the type of call (dialed or received), name, number, time,
    duration, and storage location, as shown in [Fig. 6.43](#F0220).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068f06-43-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 6.43 XRY call log.
  prefs: []
  type: TYPE_NORMAL
- en: '[Fig. 6.44](#F0225) shows the SMS messages including the number, name, message,
    time, status, storage, index, and the folder it is located in.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068f06-44-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 6.44 XRY SMS.
  prefs: []
  type: TYPE_NORMAL
- en: '[Fig. 6.45](#F0230) shows that the only image extracted from the device was
    from an MMS.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068f06-45-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 6.45 XRY images.
  prefs: []
  type: TYPE_NORMAL
- en: Other data was extracted. However, it is not displayed in a dedicated report
    section. For example, you can review the web browser history, web site bookmarks,
    and Google search history in the Log section of the report.
  prefs: []
  type: TYPE_NORMAL
- en: MSAB also has a tool called XACT, which provides a hex view of specific entries.
    For example, [Fig. 6.46](#F0235) shows the contents of an SMS message.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068f06-46-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 6.46 XACT—SMS message.
  prefs: []
  type: TYPE_NORMAL
- en: Paraben Device Seizure
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The following overview of Device Seizure was provided by the vendor:'
  prefs: []
  type: TYPE_NORMAL
- en: Paraben’s Device Seizure (DS) is a handheld forensics tool that enables the
    investigator to perform logical and physical data acquisitions, deleted data recovery,
    and full data dumps, on approximately 2400 models of cell phones, PDAs/smartphones,
    and portable GPS units. Physical data acquisition—often where deleted data is
    found—is possible from approximately two-thirds of the supported models. Furthermore,
    DS has been documented and verified as being 100% forensically sound, meaning
    the digital evidence is never altered in any way. These functions are all possible
    through a standard USB data cable connection with any PC.
  prefs: []
  type: TYPE_NORMAL
- en: 'Over the past two years Google’s Android operating system for mobile devices
    has had a significant impact on the industry. Paraben focuses on staying in step
    with the latest innovations and has added support for the Android OS to DS. With
    the release of DS version 4.0, an investigator has the capabilities of acquiring
    the most commonly sought-after data such as call logs, address book, and SMS messages.
    Beyond these data types, DS will also acquire multimedia files—MMS messages, images,
    video, and audio files. The full list of data types that can be acquired from
    Android models are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: • Address Book including contacts groups, organizations, and address book settings,
    along with the standard name, phone number, and address
  prefs: []
  type: TYPE_NORMAL
- en: • SMS messages
  prefs: []
  type: TYPE_NORMAL
- en: • MMS messages
  prefs: []
  type: TYPE_NORMAL
- en: • Call history
  prefs: []
  type: TYPE_NORMAL
- en: • Contact methods
  prefs: []
  type: TYPE_NORMAL
- en: • Browser history
  prefs: []
  type: TYPE_NORMAL
- en: • External image media (metadata)
  prefs: []
  type: TYPE_NORMAL
- en: • External image thumbnail media (metadata)
  prefs: []
  type: TYPE_NORMAL
- en: • External media, audio, and miscellaneous data (metadata)
  prefs: []
  type: TYPE_NORMAL
- en: • External videos (metadata)
  prefs: []
  type: TYPE_NORMAL
- en: • List of all applications installed and their version
  prefs: []
  type: TYPE_NORMAL
- en: Installation
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Paraben DS version 4.1.3971.37683 was installed on the Windows forensic workstation.
    The setup process required the installation of many required drivers that took
    a considerable amount of time. The software must be registered prior to use, which
    is achieved either using a hardware dongle or through a registration key file
    provided by Paraben. To install the registration key file, you simply copy the
    file into the DS install directory, which is likely C:\Program Files\Paraben Corporation\Device
    Seizure.
  prefs: []
  type: TYPE_NORMAL
- en: Acquisition
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'To start the acquisition of a new Android device, you first open a new case
    and complete the required case information section. You then choose “Data Acquisition”
    and select Android at which point the following directions are provided:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068u06-26-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: According to these instructions, Motorola phones are not supported. However,
    the acquisition of the Motorola Droid was successful.
  prefs: []
  type: TYPE_NORMAL
- en: Follow the instructions, then click “Next” at which point DS attempts to identify
    the phone. Ensure the identified device information is accurate and click “Next”
    as shown in [Fig. 6.47](#F0240).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068f06-47-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 6.47 Device Seizure device identification.
  prefs: []
  type: TYPE_NORMAL
- en: The next screen provides a list of supported data types that DS can extract
    from the device. All were selected, which includes acquiring the part of the file
    system it can read and the SD card, so the acquisition process is slow. [Fig.
    6.48](#F0245) shows the DS acquisition timing.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068f06-48-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 6.48 Device Seizure acquisition timing.
  prefs: []
  type: TYPE_NORMAL
- en: The acquisition completed approximately two hours later and the prompt to sort
    files was accepted. The process of sorting the files took considerable time, but
    was less than two hours. At that point, the acquisition process was complete.
    [Fig. 6.49](#F0250) shows the DS acquisition complete output.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068f06-49-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 6.49 Device Seizure acquisition complete.
  prefs: []
  type: TYPE_NORMAL
- en: Data presentation and analysis
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Device Seizure displays the acquired data with the application in an easy to
    browse and navigate structure. The acquired directory structures are shown in
    [Fig. 6.50](#F0255).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068f06-50-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 6.50 Device Seizure Droid directory structure.
  prefs: []
  type: TYPE_NORMAL
- en: Contacts provide not only the name, notes, phone numbers, and e-mail, but also
    helpful fields, such as number of times contacted, last time contacted, and a
    photo, if available, as shown in [Fig. 6.51](#F0260).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068f06-51-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 6.51 Device Seizure contacts.
  prefs: []
  type: TYPE_NORMAL
- en: The SMS reporting provides the expected fields, but deleted messages were not
    included. The report does not cross-reference the contact data with the phone
    number, so the examiner must either know the phone number or handle the cross-referencing
    themselves. [Fig. 6.52](#F0265) shows the DS SMS.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068f06-52-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 6.52 Device Seizure SMS.
  prefs: []
  type: TYPE_NORMAL
- en: However, the call logs do perform the cross-reference and display the date,
    message type, duration, number, number type, name, or whether the call was a new
    call (presumably the first time that number appeared in the call logs). [Fig.
    6.53](#F0270) shows the call logs.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068f06-53-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 6.53 Device Seizure call logs.
  prefs: []
  type: TYPE_NORMAL
- en: A complete web history is available and parsed, including visit count and bookmarks.
    However, the data view is quite long and only the beginning information is displayed
    in [Fig. 6.54](#F0275).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068f06-54-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 6.54 Device Seizure web history.
  prefs: []
  type: TYPE_NORMAL
- en: Device Seizure allows the examiner to select any file and extract it to the
    forensic workstation for additional analysis. This is helpful for viewing or analyzing
    file types not supported natively in the DS environment. As the file sorting option
    was chosen during the acquisition stage, each extracted file was identified and
    grouped by type allowing quick access to files of interest. This is shown in [Fig.
    6.55](#F0280).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068f06-55-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 6.55 Device Seizure’s file sorter.
  prefs: []
  type: TYPE_NORMAL
- en: viaForensics’ ViaExtract
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The following overview of viaExtract was provided by the vendor:'
  prefs: []
  type: TYPE_NORMAL
- en: viaExtract is the latest Android forensic solution from viaForensics, a leader
    and innovator in the field. In addition to their mobile forensics white papers
    and book, viaForensics’ provides a free Android forensics solution for law enforcement
    and government agencies called AFLogical.
  prefs: []
  type: TYPE_NORMAL
- en: Building on this experience, viaForensics developed viaExtract, which extracts,
    analyzes, and reports on data in Android devices. viaExtract is a modular solution
    and will next offer an Android forensic physical technique based on viaForensics’
    research and development. Up to date information on viaExtract is available online
    at [http://viaforensics.com/products/viaextract/](http://viaforensics.com/products/viaextract/)
    including support for Android forensics physical techniques, additional supported
    mobile platforms, and advanced forensic recovery techniques.
  prefs: []
  type: TYPE_NORMAL
- en: viaForensics is a forensics and security firm that actively investigates mobile
    devices and traditional computers. Their direct experience as examiners has led
    to the development of a tool specifically tailored to forensic examiners. The
    tool was designed for frequent updates as the mobile forensic discipline is changing
    rapidly. A unique debug and reporting system integrated into viaExtract simplifies
    the process of sending debug and sanitized data to viaForensics to assist with
    the design and improvement of viaExtract operating on the diverse Android ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: Installation
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'The viaExtract software is distributed as a virtual machine, so it runs on
    Microsoft Windows, Apple OS X, Linux, or other operating systems that run supported
    virtualization software. The software is fully configured, as are necessary drivers
    and supporting libraries, which greatly simplifies the installation. There are
    several supported virtualization packages, which are free, including:'
  prefs: []
  type: TYPE_NORMAL
- en: • Oracle’s VirtualBox
  prefs: []
  type: TYPE_NORMAL
- en: • VMWare Player
  prefs: []
  type: TYPE_NORMAL
- en: A number of commercial packages are also available. The virtual machine is downloaded
    from viaForensics’ web site and then imported into the supported software. Examiners
    can use features built into virtualization software, such as taking snapshots
    to restore the software to a pristine state after each case, or integrate it directly
    into their host operating system by sharing data storage and other valuable features.
  prefs: []
  type: TYPE_NORMAL
- en: Acquisition
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: After viaExtract is imported into the host system’s virtualization software
    and is running, the forensic examiner logs into the Ubuntu virtual machine and
    runs viaExtract as shown in [Fig. 6.56](#F0285).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068f06-56-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 6.56 viaExtract software.
  prefs: []
  type: TYPE_NORMAL
- en: The examiner can then start a new case or open a previous one, as illustrated
    in [Fig. 6.57](#F0290).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068f06-57-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 6.57 viaExtract—New case.
  prefs: []
  type: TYPE_NORMAL
- en: After entering the case details, the examiner can then choose to extract data
    directly from an Android device or to load from a previous data extraction located
    on the file system. The latter feature is useful for cases where the examiner
    used viaForensics’ free AFLogical software to extract data from Android devices.
    It also allows the examiner to generate a new forensic report from a previous
    device’s extracted data, which is quite useful as new reporting features are added.
  prefs: []
  type: TYPE_NORMAL
- en: For this example, we will extract data from an Android device by clicking Forward.
    We are then presented with the Load data screen, which provides directions for
    enabling USB debugging. After you click OK the data extraction begins, as shown
    in [Fig. 6.58](#F0295).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068f06-58-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 6.58 viaExtract—Data extraction.
  prefs: []
  type: TYPE_NORMAL
- en: After the data extraction is complete, the examiner is presented with a list
    of data extracts and has the ability to select what they want to include in the
    forensic analysis and report, as shown in [Fig. 6.59](#F0300).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068f06-59-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 6.59 viaExtract—Forensic analysis and report.
  prefs: []
  type: TYPE_NORMAL
- en: After the selections are completed and the examiner clicks Apply, the report
    logic is executed and the data extraction is complete.
  prefs: []
  type: TYPE_NORMAL
- en: Data presentation and analysis
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: After the data extraction is complete, viaExtract presents the analyzed data
    to the user. By navigating the selections on the left side of the application,
    the examiner can view different sections of the report. For example, the first
    section presented is the Device Information section as shown in [Fig. 6.60](#F0305).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068f06-60-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 6.60 viaExtract—Device info.
  prefs: []
  type: TYPE_NORMAL
- en: Next, [Fig. 6.61](#F0310) shows browser history and bookmarks that are available
    in the report.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068f06-61-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 6.61 viaExtract—Browser history and bookmarks.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, you can see several features of the report view, including:'
  prefs: []
  type: TYPE_NORMAL
- en: • Ability to filter, on the fly, any section of the report
  prefs: []
  type: TYPE_NORMAL
- en: • Ability to sort ascending or descending on any column
  prefs: []
  type: TYPE_NORMAL
- en: In the next example, a filter of [viaforensics.com](http://viaforensics.com)
    was applied against 29 people records and 2 remained. However, many of the fields
    were displayed to the right of the screenshot as shown in [Fig. 6.62](#F0315).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068f06-62-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 6.62 viaExtract—People records filtered.
  prefs: []
  type: TYPE_NORMAL
- en: In total, viaExtract currently supports just over 41 Content Providers. However,
    in the next release, roughly 100 Content Providers will be actively queried. If
    the device responds to the Content Provider, the extraction and subsequent reporting
    will succeed. [Fig. 6.63](#F0320) is an example of the Call Logs.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068f06-63-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 6.63 viaExtract—Call logs.
  prefs: []
  type: TYPE_NORMAL
- en: '[Fig. 6.64](#F0325) shows the video media metadata.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068f06-64-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 6.64 viaExtract—Video media metadata.
  prefs: []
  type: TYPE_NORMAL
- en: Reports can also be exported to PDF format as shown in [Fig. 6.65](#F0330).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068f06-65-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 6.65 viaExtract—Export to PDF.
  prefs: []
  type: TYPE_NORMAL
- en: Physical techniques
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Forensic techniques that acquire physical images of the targeted data storage
    typically result in exponentially more data being recovered and often circumvent
    pass code protection. These techniques provide access to not only deleted data
    but also data that was simply discarded as the system no longer required it. For
    example, some systems track the last time a web site was visited and the date
    field is updated each time the site is accessed again. The previous date and time
    data was not specifically deleted but was not tracked by the system. On Android
    devices using YAFFS2, the previous values are recoverable provided garbage collection
    did not occur. As such, the physical techniques provide access to not only deleted
    data but also access to obsolete data on the system.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Android forensics physical techniques fall into two broad categories:'
  prefs: []
  type: TYPE_NORMAL
- en: '• Hardware: Methods which connect hardware to the device or physically extract
    device components'
  prefs: []
  type: TYPE_NORMAL
- en: '• Software: Techniques which run as software on devices with root access and
    provide a full physical image of the data partitions'
  prefs: []
  type: TYPE_NORMAL
- en: The hardware-based methods required specialized and often expensive equipment
    and training but can be very effective on devices where root access is unattainable.
    The software-based physical techniques are a more direct path to acquisition and
    are often the best place to start. Of course, before software-based techniques
    are possible, you must have root access on the device.
  prefs: []
  type: TYPE_NORMAL
- en: Hardware-Based Physical Techniques
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The two hardware-based physical techniques are JTAG and chip-off and a brief
    overview is provided in this section.
  prefs: []
  type: TYPE_NORMAL
- en: JTAG
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The JTAG was created in the 1980s to develop a standard for testing the wiring
    and interconnects on printed circuit boards (PCB). By 1990, the standard was complete
    and became an Institute of Electrical and Electronics Engineers standard, specifically
    IEEE 1149.1-1990 ([IEEE SA, n.d.](#BIB10)), and then a later update in 2001 named
    IEEE 1149.1-2001\. The standard was widely accepted and today most PCBs have JTAG
    test access ports (TAPs) that facilitate access to the central processing unit
    (CPU).
  prefs: []
  type: TYPE_NORMAL
- en: 'A JTAG TAP exposes various signals and most mobile devices include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 1. TDI—Test Data In
  prefs: []
  type: TYPE_NORMAL
- en: 2. TDO—Test Data Out
  prefs: []
  type: TYPE_NORMAL
- en: 3. TCK—Test Clock
  prefs: []
  type: TYPE_NORMAL
- en: 4. TMS—Test Mode Select
  prefs: []
  type: TYPE_NORMAL
- en: 5. TRST—Test Reset
  prefs: []
  type: TYPE_NORMAL
- en: 6. RTCK—Return Test Clock
  prefs: []
  type: TYPE_NORMAL
- en: A major obstacle to JTAG is locating the TAPs on the PCB and tracing them to
    the CPU to determine which pad is responsible for each test function. This is
    very difficult to achieve even if the chip manufacturer has published a CPU map.
    In addition, it can be extremely difficult to trace the JTAG functions from the
    chip and it may require first removing the CPU from the PCB. Device manufacturers
    have JTAG schematics, but they are generally considered company confidential and
    are only released to authorized service centers. Another approach is to determine
    the functions of each pad by reading the voltage at each pad and, based on the
    reference voltage, identifying the function. In some instances the JTAG pin-outs
    are published by flasher box manufacturers or various online groups. [Fig. 6.66](#F0335)
    is an example of the JTAG pin-outs for a T-Mobile HTC G1\. The six pin-outs are
    indicated by the small white circles and the legend on the right provides the
    detailed information.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068f06-66-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 6.66 T-Mobile HTC G-1 PCB.
  prefs: []
  type: TYPE_NORMAL
- en: In most cases, your soldered wire leads to the pads on the PCB, and the other
    side is connected to a special device (flasher box) which, through software, will
    manage the CPU. Some companies make custom connectors which support a specific
    device and simplify the connection to the pads by placing the PCB between two
    jig boards with pogo pins. The pogo pins make contact with the JTAG pads on the
    PCB and can then easily connect to the flasher box. However, experienced engineers
    may find that soldering the leads directly to the PCB provides a more stable connection.
  prefs: []
  type: TYPE_NORMAL
- en: Once the leads are connected to the appropriate pads, power must be applied
    to the board to boot the CPU. Each CPU manufacturer publishes the reference voltage
    for their hardware and this voltage must not be exceeded. Some flasher boxes provide
    an option for managing the voltage but in general the power should be managed
    through an external power supply with a built-in digital voltmeter to ensure accuracy.
    Once the board is powered on, the flasher box software has the ability to perform
    a full binary memory dump of the NAND flash. However, the connection is serial
    and takes a considerable amount of time. Despite all of the complexities, if the
    JTAG technique is executed properly, the phone can be reassembled and will function
    normally with no data loss.
  prefs: []
  type: TYPE_NORMAL
- en: Though JTAG is an option for extracting data from an Android device’s NAND flash,
    it is very difficult and should only be attempted by qualified personnel with
    sufficient training and specific experience in soldering small PCB connections.
    Errors in soldering to the JTAG pads or applying the wrong voltage to the board
    could not only disable JTAG but can also seriously damage the device. For these
    reasons, JTAG is not typically the first choice for a physical forensic image
    of an Android device.
  prefs: []
  type: TYPE_NORMAL
- en: Chip-off
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Chip-off is a technique where the NAND flash chips are physically removed from
    the device and examined externally. The chip-off technique allows for the recovery
    of damaged devices and also circumvents pass code-protected devices. This removal
    process is generally destructive—it is quite difficult to reattach the NAND flash
    to the PCB and have the device operate.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three primary steps in the chip-off technique:'
  prefs: []
  type: TYPE_NORMAL
- en: 1. The NAND flash chip is physically removed from the device by either de-soldering
    it, or using special equipment that uses a blast of hot air and a vacuum to remove
    the chip. There are also techniques that heat the chip to a specified temperature.
    It is quite easy to damage the NAND flash in this process and specialized hardware,
    and even controlling software, exists for the extraction.
  prefs: []
  type: TYPE_NORMAL
- en: 2. The removal process often damages the connectors on the bottom of the chip,
    so it must first be cleaned and then repaired. The process of repairing the conductive
    balls on the bottom of the chip is referred to as reballing.
  prefs: []
  type: TYPE_NORMAL
- en: 3. The chip is then inserted into a specialized hardware device, so that it
    can be read. The devices generally must be programmed for a specific NAND flash
    chip and support a number of the more popular chips already.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you now have a physical image of the data stored on the NAND
    flash chip.
  prefs: []
  type: TYPE_NORMAL
- en: Although the chip-off process is quite effective, it also has a large barrier
    to entry. The cost of the equipment and tools is prohibitive and an examiner must
    again have very specialized training and skills. There is always the risk that
    the NAND flash chip will be damaged with chip-off, generally in its removal from
    the PCB. Finally, a clean room with protections from static electricity is also
    desirable. While local or even State law enforcement agencies and forensic firms
    may find the cost of chip-off too prohibitive, it is certainly a valid techniques
    that larger agencies would find useful in their suite of forensic techniques.
  prefs: []
  type: TYPE_NORMAL
- en: Software-Based Physical Techniques and Privileges
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Software-based physical techniques have a number of advantages over the hardware-based
    techniques. Software-based techniques:'
  prefs: []
  type: TYPE_NORMAL
- en: • Are easier to execute;
  prefs: []
  type: TYPE_NORMAL
- en: • Often provide direct access to file systems to allow a complete copy of all
    logical files (simplifies some analysis);
  prefs: []
  type: TYPE_NORMAL
- en: • Provide very little risk of damaging the device or data loss.
  prefs: []
  type: TYPE_NORMAL
- en: To execute the software-based physical techniques, you first must gain root
    privileges and then run the acquisition programs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Unfortunately, root privileges on Android devices are not enabled by default.
    However, it is possible to gain root privileges in certain scenarios, several
    of which we will cover next. There are some major challenges to obtaining root
    privileges to keep in mind though:'
  prefs: []
  type: TYPE_NORMAL
- en: 1. Gaining root privileges changes the device in many situations.
  prefs: []
  type: TYPE_NORMAL
- en: 2. The techniques for root privileges differ not only for each manufacturer
    and device but for each version of Android and even the Linux kernel in use. Just
    based on the Android devices and versions developed to date, there are literally
    thousands of possible permutations.
  prefs: []
  type: TYPE_NORMAL
- en: 3. Many of the exploits used to gain root privileges are discussed online and
    often contain inaccurate information.
  prefs: []
  type: TYPE_NORMAL
- en: Given this, gaining root privileges can be quite difficult and is always very
    frustrating.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three primary types of root privileges:'
  prefs: []
  type: TYPE_NORMAL
- en: 1. Temporary root privileges attained by a root exploit, which does not survive
    a reboot. Typically the adb daemon is not running as root in this instance.
  prefs: []
  type: TYPE_NORMAL
- en: 2. Full root access attained through a custom ROM or persistent root exploit.
    Custom ROMs often run the adb daemon as root while most of the persistent root
    exploits do not.
  prefs: []
  type: TYPE_NORMAL
- en: 3. Recovery mode root attained by flashing a custom recovery partition or part
    of a custom ROM. Custom ROMs often run the adb daemon as root as do most of the
    modified recovery partitions.
  prefs: []
  type: TYPE_NORMAL
- en: Android enthusiasts who want root access are typically only interested in full,
    sustained root privileges. However, from a forensics standpoint, temporary root
    privileges or root access via a custom recovery mode are preferred.
  prefs: []
  type: TYPE_NORMAL
- en: If you need to gain access on a new device or Android version, you must have
    a separate device used for testing to ensure that the process works and no data
    are lost. Testing, although time consuming, is an important step in this situation.
  prefs: []
  type: TYPE_NORMAL
- en: The following sections cover each step in detail.
  prefs: []
  type: TYPE_NORMAL
- en: su
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The first thing a forensic examiner should check is whether the device already
    has root privileges. This is the easiest of any technique discussed and is certainly
    worth the short time it takes to test. The device must have USB debugging enabled
    but even if the device is locked, you should still check. If the device is not
    pass code locked, make sure USB debugging is enabled, which was covered in [Chapter
    3](CHP003.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, connect the device to your workstation and attempt to gain root privileges
    by requesting super user access with the “su” command as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068u06-27-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In this instance, root privileges were not granted. This is the typical result
    of the command. However, the following was on a device that had root access:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068u06-28-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Instead of receiving a permission denied error, root privileges were granted.
    This is indicated by the new # prompt. Sometimes a device will allow root access
    but require the user to grant the privileges by clicking OK on a prompt displayed
    on the device. If the device is not pass code protected, you should check to see
    if the prompt is displayed.'
  prefs: []
  type: TYPE_NORMAL
- en: Researching Root Privilege Exploits
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If the device does not already have root privileges, you can research possible
    techniques online. This process can be very frustrating as there are many inexperienced
    people who request help on the various discussion boards. However, while there
    are substantial amounts of inaccurate information, there are also very knowledgeable
    resources and techniques which do work.
  prefs: []
  type: TYPE_NORMAL
- en: Although there are many sites available that discuss Android root exploits,
    one truly stands above all others. The site, xda-developers, is an extremely popular
    and active site and is self-described as “the largest Internet community of smartphone
    enthusiasts and developers for the Android and Windows Mobile platforms” ([Android
    & Windows Phone, n.d.](#BIB2)). Many of the other web sites post various root
    exploits but generally link back to a discussion thread on xda-developers.
  prefs: []
  type: TYPE_NORMAL
- en: Often the best approach to researching root exploits is to simply search the
    Internet with your preferred search engine, have a test device, and a lot of patience.
  prefs: []
  type: TYPE_NORMAL
- en: Recovery Mode
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Recovery mode is an operating mode for Android that was designed to apply updates,
    format the device, and perform other maintenance on the devices. The stock recovery
    mode on most devices is very basic, only provides a number of limited functions,
    and certainly does not provide root privileges in a shell.
  prefs: []
  type: TYPE_NORMAL
- en: Custom recovery partitions, on the other hand, nearly always allow root privileges
    through the shell. These new recovery partitions are typically installed by the
    user when the device is rooted and provide various functions that simplify the
    backup and update processes needed from the custom ROMS.
  prefs: []
  type: TYPE_NORMAL
- en: As with researching root exploits, examiners should use extreme caution when
    installing a custom recovery partition as the process often contains kernel and
    radio updates that could render the device unusable (often referred to as “bricked”)
    if there are incompatibilities between the device, kernel, and radio firmware.
    Extensive testing must be performed on a lab device first to ensure no issues
    occur. And forensic examiners should understand what is being modified on the
    device during the installation of a custom recovery firmware.
  prefs: []
  type: TYPE_NORMAL
- en: 'The software that powers recovery mode is stored on a dedicated partition and
    is quite small. On many devices, you can see details of the recovery partition
    by examining /proc/mtd:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068u06-29-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This list is from a T-Mobile HTC G1 and you can see that the recovery partition
    has a size of 0x500000 bytes, which is 5 MB (0x500000 = 5,242,880 then divide
    by 1024 twice to convert to KB and finally MB). Here are the sizes from other
    phones used throughout this book:'
  prefs: []
  type: TYPE_NORMAL
- en: '• T-Mobile HTC G1: 5 MB'
  prefs: []
  type: TYPE_NORMAL
- en: '• HTC Incredible: 4 MB'
  prefs: []
  type: TYPE_NORMAL
- en: '• Motorola Droid: 4 MB'
  prefs: []
  type: TYPE_NORMAL
- en: '• Google Nexus One: 4 MB'
  prefs: []
  type: TYPE_NORMAL
- en: This is helpful to understand as we explore techniques to replace the small
    but important recovery partition in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the previous section covering techniques for circumventing pass code-protected
    devices, accessing the recovery mode was one possible solution. In the same fashion,
    it is advisable to check the recovery partition for root privileges as it will
    enable the software-based physical techniques. First, boot the device into recovery
    mode as covered in [Table 6.2](#T0015), or simply search the Internet for the
    specific key combination for your device. Once the device is in recovery mode,
    connect it to your Ubuntu VM and run adb as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068u06-30-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In this case, adb discovered a device in recovery mode. However, many devices
    will simply not have adb access enabled in recovery mode, especially on stock
    devices. In such a case, you can then determine if the shell has root privileges
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068u06-31-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As we discussed previously, if you are presented with a # prompt, this indicates
    root privileges. If instead you have a $ prompt, you do not have root privileges.
    However, you should at least try to gain them by running the su command.'
  prefs: []
  type: TYPE_NORMAL
- en: Boot Loaders
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: As discussed in [Chapter 2](CHP002.html), the boot loader is a small program
    that is executed early in the Android boot process and is responsible for, among
    other details, selecting and loading the main kernel. On certain devices, special
    software exists, typically developed by the manufacturer, which can interact with
    the boot loader. This software is capable of writing new images to the NAND flash
    of a device. Manufacturers use this software to fix nonfunctional devices and
    likely in other situations such as development and testing. Forensic examiners
    can also use the software to flash a utility or exploit to a device’s NAND flash,
    which will provide root privileges. However, the boot loaders of most devices
    are shipped from the factory in a locked state, which prevents such updates.
  prefs: []
  type: TYPE_NORMAL
- en: One example of software that interacts with Motorola Android devices is a program
    called RSD Lite developed by Motorola. RSD Lite is proprietary software and appears
    to only be distributed to Motorola Service Centers for device repair. It is assumed
    that anyone using this software has full authorization to do so, and this overview
    is only provided as a example of how some Android devices are flashed.
  prefs: []
  type: TYPE_NORMAL
- en: There are many web sites which discuss RSD Lite and provide guides for using
    the software. One such site, [modmymobile.com](http://modmymobile.com), provides
    an article entitled “[Guide] Flashing Linux Motorola’s with RSD Lite Versions,”
    which offers step-by-step instructions for the software ([[Guide] Flashing Linux,
    n.d.](#BIB8)).
  prefs: []
  type: TYPE_NORMAL
- en: Provided the device is supported and the boot loader is unlocked, you connect
    the device to your workstation and then run the software, which detects the phone.
    You must then provide the appropriate .sbf file and then click Start to flash
    the device as shown in [Fig. 6.67](#F0340).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068f06-67-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 6.67 RSD Lite.
  prefs: []
  type: TYPE_NORMAL
- en: After the process is completed and the device is restarted, the new recovery
    partition (and any other areas modified by the .sbf file used) is ready. RSD Lite
    may provide a good option for forensic analysts who have proper authorization
    to use RSD Lite.
  prefs: []
  type: TYPE_NORMAL
- en: sbf_flash
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Similar to Motorola’s RSD Lite is a utility called sbf_flash that does not
    carry the license and usage restrictions of RSD Lite. The application was developed
    and posted online by an Android enthusiast and, while distributed in many places
    online, it is best to retrieve it from the author’s blog OPTICALDELUSION, which
    is updated when new versions are available. This utility was developed on Linux,
    and now also runs on OS X, and thus, greatly simplifies the flashing of data to
    the NAND flash via an unlocked boot loader. The latest version of sbf_flash is
    1.15 and it supports the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068u06-32-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To use sbf_flash, you must first verify that the device is supported. For this
    example, we will cover the Motorola Droid; however, other devices are supported.
    The device must be placed in bootloader mode, which is accomplished by holding
    the up direction on the D pad while pressing the power button. The boot loader
    is easily recognized on the Motorola Droid by a solid black screen with the kernel
    version, USB status, and battery status in white text. Ensure the battery is fully
    charged before attempting this process as you could easily brick the device if
    the flashing process is interrupted with a power failure. Also, you must have
    the SBF file saved to your forensic workstation so you can flash it to the device.
    This is where extensive testing must occur prior to working on the target device
    to ensure compatibility and a detailed understanding of the process.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the Droid in bootloader mode, we can query the device with sbf_flash as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068u06-33a-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![image](img/F100068u06-33b-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The sbf_flash utility looks for a device in bootloader mode and immediately
    flashes the image file to the NAND flash. The status of the update process is
    displayed on screen and afterwards the Droid is rebooted.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068u06-34-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You should be prepared to immediately boot the device into recovery mode as
    later versions of the Motorola Droid’s firmware implemented a routine that checks
    the hash signatures of the existing recovery partition against the stock recovery
    partition for that Android version. If there is a disparity, the system will rebuild
    the stock recovery partition during the boot process and thus overwrite the modified
    recovery image.
  prefs: []
  type: TYPE_NORMAL
- en: Once the new SBF file has been flashed, and the device is running in the modified
    recovery mode, you will have root access and can proceed with the software-based
    physical technique.
  prefs: []
  type: TYPE_NORMAL
- en: fastboot
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Fastboot is another utility that flashes images to the NAND flash over USB.
    The source code for fastboot is contained in the AOSP and thus, the utility is
    built when you compile the AOSP code. Like sbf_flash, the boot loader must support
    fastboot, which not only requires a compatible boot loader but also one that has
    security turned off (S-OFF).
  prefs: []
  type: TYPE_NORMAL
- en: 'Fastboot was first used on the Google Android developer phone (ADP), which
    was manufactured by HTC. As such, much of the documentation and references for
    fastboot refer to the ADP, and HTC has a helpful reference page for the utility
    ([HTC—Developer Center, n.d.](#BIB9)). This page contains not only various stock
    NAND flash image files for the ADP device but also directions on using fastboot
    and accessing the appropriate mode on the device ([HTC—Developer Center, n.d.](#BIB9)):'
  prefs: []
  type: TYPE_NORMAL
- en: To enter fastboot mode, power up the device (or reboot it) while holding down
    the BACK key. Hold the BACK key down until the boot loader screen is visible and
    displays “FASTBOOT.” The device is now in fastboot mode and is ready to receive
    fastboot commands. If you want to exit fastboot mode at this point, you can hold
    down the keys MENU+SEND+END (on the ADP, SEND is the “Call” key and END is the
    “End call” key).
  prefs: []
  type: TYPE_NORMAL
- en: Note that the boot loader screen may vary across devices. For ADP devices, the
    boot loader screen shows an image of skateboarding robots. Other devices may show
    a different image or color pattern. In all cases, the boot loader screen shows
    the text “FASTBOOT” when in fastboot mode. The boot loader also shows the radio
    version.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once in fastboot mode, verify fastboot detects the device with the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068u06-35-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Fastboot provides many options that are detailed when you execute fastboot
    with the help parameter as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068u06-36-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, once in flashboot mode, it is quite simple to flash the modified
    recovery partition:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068u06-37-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After this process completes, you can reboot the phone into recovery mode and
    proceed with the software-based physical imaging technique.
  prefs: []
  type: TYPE_NORMAL
- en: AFPhysical Technique
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The AFPhysical technique was developed by viaForensics to provide a physical
    disk image of Android NAND flash partitions. The technique requires root privileges
    on the device and should support any Android device. The technique, however, is
    not a simple process and the forensic analyst will have to adapt the technique
    for the specific device investigated. This is a direct result of the large variations
    in Android devices not only between manufacturers but between devices running
    different versions of Android.
  prefs: []
  type: TYPE_NORMAL
- en: 'The overall process for AFPhysical is quite simple:'
  prefs: []
  type: TYPE_NORMAL
- en: 1. Acquire root privileges on the target Android device.
  prefs: []
  type: TYPE_NORMAL
- en: 2. Identify NAND flash partitions which need to be imaged.
  prefs: []
  type: TYPE_NORMAL
- en: 3. Upload forensic binaries to the target Android device.
  prefs: []
  type: TYPE_NORMAL
- en: 4. Acquire physical image of NAND flash partitions.
  prefs: []
  type: TYPE_NORMAL
- en: 5. Remove forensic binaries if any were stored on nonvolatile storage.
  prefs: []
  type: TYPE_NORMAL
- en: Regardless of the technique, it is assumed you have root privileges on the device.
    For this example, we will use a Motorola Droid. As we are able to flash a modified
    recovery partition to a Motorola Droid, this technique will work on a device even
    if it is pass code locked.
  prefs: []
  type: TYPE_NORMAL
- en: After we have flashed the modified recovery partition and rebooted into recovery
    mode, connect the device to our Ubuntu VM and verify adb can locate the device
    by running adb devices.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068u06-38-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'From there, access the shell to ensure you have root privileges:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068u06-39-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'At this point, we need to understand more about the phone so we can decide
    what needs to be physically imaged. The first place to start is to examine the
    mounted file systems, if any:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068u06-40-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we know that the device uses MTD for NAND flash access as well as YAFFS2\.
    To determine partitions exposed by MTD, we execute the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068u06-41-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: An examiner should choose to image all of the MTD partitions. However, for this
    example we will focus on mtd8, the user data partition.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we are now prepared to acquire the device, it may be helpful to refer back
    to the NAND flash and file system topics in [Chapter 4](CHP004.html) if some of
    the terminology or data structures are confusing. There are four Android physical
    acquisition strategies you can use once you have a device with root access:'
  prefs: []
  type: TYPE_NORMAL
- en: 1. Full nanddump of all partitions, including data and OOB (preferred)
  prefs: []
  type: TYPE_NORMAL
- en: 2. A dd image of partitions, which only acquires the data, not the OOB
  prefs: []
  type: TYPE_NORMAL
- en: 3. A logical acquisition of files using tar
  prefs: []
  type: TYPE_NORMAL
- en: 4. A logical acquisition of files using adb
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition, there are two primary ways to save the acquired data from the
    device:'
  prefs: []
  type: TYPE_NORMAL
- en: 1. Use adb port forward to create a network between the Ubuntu workstation and
    Android device over USB
  prefs: []
  type: TYPE_NORMAL
- en: 2. Place an SD card into the device, mount, and save locally
  prefs: []
  type: TYPE_NORMAL
- en: There are advantages to both approaches. With adb port forwarding, you do not
    need to insert your own device and can immediately create the files on your workstation.
    When you save to the SD card, the acquisition is much faster. Both approaches
    are valid and will be demonstrated here.
  prefs: []
  type: TYPE_NORMAL
- en: We will start with the full nanddump of the user data partition as this provides
    the most complete forensic copy of the data. To achieve the nanddump, you must
    have a version of nanddump compiled for the ARM platform. Cross-compiling nanddump
    is beyond the scope of this book. However, you can either search for the program
    on the Internet or follow directions that are also posted online.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Cross-compiling for ARM
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Cross-compiling source code to run on the ARM platform can be quite difficult
    and there is sparse support for it online. One possible solution is to use Android’s
    Native Development Kit (NDK) to build compatible binaries. Another option is to
    use Linux and install a cross-compiler such as Code Sourcery’s G++ Lite 2009q3-67
    for ARM GNU/Linux from [http://www.codesourcery.com/sgpp/lite/arm/portal/release1039](http://www.codesourcery.com/sgpp/lite/arm/portal/release1039).
    Once a cross-compiler is installed, you must modify the source code’s Makefile
    to indicate the cross-compiling option. Also check this book’s web site at [http://viaforensics.com/education/android-forensics-mobile-security-book/](http://viaforensics.com/education/android-forensics-mobile-security-book/)
    for future updates.
  prefs: []
  type: TYPE_NORMAL
- en: 'To avoid writing any data to the NAND flash, we can again examine the output
    of the mount command and take note that the “/dev” directory is tmpfs and thus,
    is stored in RAM. We can therefore push the forensic utilities to “/dev”:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068u06-42-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next we need to make the programs executable on the device. To achieve this,
    we use the chmod command, which changes the permissions of a file including the
    execute flag. We will set all files to allow any user to read or execute the program:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068u06-43-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can tell, after we execute the “chmod 755” command on the programs, they
    each have the execute bit now set, which is represented by the “x” in the file
    permissions.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you decided to save the nanddump to the SD card, ensure you place a properly
    formatted SD card in the device and that it is mounted on the system. Then we
    can execute nanddump as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068u06-44-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: And ultimately either transfer to your Ubuntu VM using adb pull or remove the
    SD card and copy via a direct USB connection, which is much faster.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: MD5 hash
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Although the user data partition was not mounted on the device during acquisition,
    the md5sum hash signature of “/dev/mtd/mtd8ro” will change even without any writes.
    This is due to the nature of NAND flash where the operating system and memory
    are in a nearly constant state of change from wear leveling, bad block management,
    and other mechanisms which occur despite the lack of changes to the user data.
    The best approach is to perform an md5sum of the resulting NAND flash file to
    ensure integrity from that point forward.
  prefs: []
  type: TYPE_NORMAL
- en: The second method for saving the NAND flash file or any other imaged data is
    to use netcat, which is a utility that allows you to redirect the output of a
    command to the network. For this approach, you will need two active terminal or
    ssh sessions. We will refer to them as Session0 and Session1\. All of the Session0
    commands will run on the Ubuntu VM and thus we will not go into the Android device
    shell from Session0\. The commands which need to execute within the Android device’s
    shell will all take place on Session1.
  prefs: []
  type: TYPE_NORMAL
- en: 'To begin, we first enable the network connection between the two endpoints
    using the adb port-forwarding capability:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068u06-45-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This command essentially connects port 31337 on the Android device and the
    Ubuntu VM. Next, we execute nanddump on the Android device and pipe the output
    to netcat:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068u06-46-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that the Android device is sending the nanddump data over netcat, we need
    to receive it on the Ubuntu VM side:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068u06-47-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'When nanddump completes, it simply exits without any additional output as does
    the netcat on the Ubuntu VM. We can verify that the nanddump was received on the
    workstation with ls:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068u06-48-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: At this point, you could continue to physically image the MTD partitions needed
    for the investigation, which should include at least the user data and the cache
    partitions.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 7](CHP007.html), we provide a program that will allow you to extract
    the OOB data from a nanddump to assist with forensic processing such as file carving.
    As you can generate the dd image in this manner, there is no need to acquire a
    dd image using the Android device. However, dd is built into Android and so we
    provide this example which is similar to the use of the nanddump example, except
    it uses the dd utility, and so does not capture OOB data. This example uses the
    reference HTC Incredible.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068u06-49-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Due to variations in Android devices, MTD, YAFFS2, and other nuisances, it
    is not always possible to mount the acquired nanddump image and extract the logical
    files. As you already have sufficient privileges, it is best to extract the desired
    logical data. This can be accomplished using a recursive adb pull because the
    adb daemon running on the device has root privileges. You can also use a utility
    such as tar to copy the data into a single archive file. In either instance, you
    must ensure the desired file system is mounted. Some of the modified recovery
    partitions provide a user interface for mounting the file systems. However, you
    can also do this on the command line and mount the file system read only. On the
    Motorola Droid referenced above, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068u06-50-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The first command mounts the “/data” partition read only. The second command
    takes the already mounted “/cache” directory and remounts it read only. You can
    now perform the adb pull:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068u06-51-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final option is to use the tar utility that places files and directories
    in a single archive often called a tarball.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100068u06-52-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In this example, we passed two directories to tar which we wanted archived:
    the directory containing SMS/MMS messages in “/data/data” and the “/cache” directory.
    We sent the archive over the network and received it on the Ubuntu VM. However,
    you could have also simply saved the archive to the SD card.'
  prefs: []
  type: TYPE_NORMAL
- en: Once you have root privileges on an Android device and sufficient understanding
    of the device’s architecture, you can use nanddump, dd, tar, netcat, and adb to
    create forensic images or simply copies of the data for analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are several techniques that can be used to perform a forensic acquisition
    of an Android device. If the device is pass code protected, you must circumvent
    or bypass the protection to extract data. While a number of techniques to circumvent
    the pass code exist, it is not possible to achieve this in every circumstance.
    Once the device is accessible, the forensic analyst can choose from a logical
    acquisition which focuses primarily on undeleted data accessible through Content
    Providers or the more thorough but technically challenging physical acquisition.
    While the physical acquisition will produce more data, it generally requires more
    sophisticated analysis techniques which will be covered in [Chapter 7](CHP007.html).
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 1\. *ACPO Good Practice Guide for Computer-Based Electronic Evidence*—*7Safe
    Information Security.* (n.d.). Retrieved February 19, 2011, from [http://7safe.com/electronic_evidence/index.html#](http://7safe.com/electronic_evidence/index.html%23).
  prefs: []
  type: TYPE_NORMAL
- en: '2\. *Android & Windows Phone: Tablets, Apps, & ROMs @ xda-developers.* (n.d.).
    Retrieved February 23, 2011, from [http://www.xda-developers.com/](http://www.xda-developers.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Aviv, Gibson, Mossop, Blaze, & Smith. (n.d.). Smudge attacks on smartphone
    touch screens. Retrieved February 21, 2011, from [http://www.usenix.org/events/woot10/tech/full_papers/Aviv.pdf](http://www.usenix.org/events/woot10/tech/full_papers/Aviv.pdf).
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Cannon, T. (n.d.). Android lock screen bypass. Retrieved February 21, 2011,
    from [http://thomascannon.net/blog/2011/02/android-lock-screen-bypass/](http://thomascannon.net/blog/2011/02/android-lock-screen-bypass/).
  prefs: []
  type: TYPE_NORMAL
- en: 5\. dc3dd. (n.d.). Retrieved February 22, 2011, from [http://dc3dd.sourceforge.net/](http://dc3dd.sourceforge.net/).
  prefs: []
  type: TYPE_NORMAL
- en: 6\. *Government Employment & Payroll.* (n.d.). Retrieved February 19, 2011,
    from [http://www.census.gov/govs/apes/](http://www.census.gov/govs/apes/).
  prefs: []
  type: TYPE_NORMAL
- en: 7\. [Guide] Flashing Linux Motorola’s with RSD Lite Versions. (n.d.). Retrieved
    February 24, 2011, from [modmymobile.com/forums/8-guides-downloads-forum-suggestions/218651-guide-flashing-linux-motorolas-rsd-lite-versions.html](http://modmymobile.com/forums/8-guides-downloads-forum-suggestions/218651-guide-flashing-linux-motorolas-rsd-lite-versions.html).
  prefs: []
  type: TYPE_NORMAL
- en: 8\. *HTC—Developer Center.* (n.d.). Retrieved February 28, 2011, from [http://developer.htc.com/adp.html](http://developer.htc.com/adp.html).
  prefs: []
  type: TYPE_NORMAL
- en: 9\. *IEEE SA—1149.1–1990—IEEE Standard Test Access Port and Boundary-Scan Architecture.*
    (n.d.). Retrieved February 23, 2011, from [http://standards.ieee.org/findstds/standard/1149.1-1990.html](http://standards.ieee.org/findstds/standard/1149.1-1990.html).
  prefs: []
  type: TYPE_NORMAL
- en: '10\. *RerWare, LLC: Android Backup and BlackBerry Backup—MyBackup Pro*. (n.d.).
    Retrieved February 22, 2011, from [http://www.rerware.com/](http://www.rerware.com/).'
  prefs: []
  type: TYPE_NORMAL
