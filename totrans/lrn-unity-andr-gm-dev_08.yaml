- en: Chapter 8. Special Effects – Sound and Particles
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章. 特效 - 声音与粒子
- en: In the previous chapter, we took a short break from our Monkey Ball game to
    learn about physics and 2D games in Unity. We created a clone of *Angry Birds*.
    The birds utilized physics to fly through the air and destroy the pigs and their
    structures. We utilized parallax scrolling to make a pleasing background effect.
    We also created a level selection screen, from which you can load the game's various
    scenes.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们从Monkey Ball游戏中短暂休息，以了解Unity中的物理和2D游戏。我们创建了一个*愤怒的小鸟*的克隆版。这些鸟利用物理原理在空中飞行并摧毁猪和它们的结构。我们利用视差滚动制作了一个令人愉悦的背景效果。我们还创建了一个关卡选择屏幕，通过它可以加载游戏的各种场景。
- en: In this chapter, we return to the Monkey Ball game. We are going to add many
    special effects that will round out the game experience. We will start by learning
    about the controls that Unity provides when working with audio. We will then move
    on to add some background music to the game and movement sounds for our monkey.
    Next, we will learn about particle systems, creating a dust trail for the monkey.
    Finally, we combine the effects explained in the chapter to create explosions
    for when the user collects bananas.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将回到Monkey Ball游戏。我们将添加许多特殊效果，以丰富游戏体验。首先，我们会了解Unity在处理音频时提供的控制方法。然后，我们将在游戏中添加背景音乐和猴子移动的声音。接下来，我们将学习粒子系统，为猴子创建尘埃轨迹。最后，我们将结合本章介绍的效果，为用户收集香蕉时创建爆炸效果。
- en: 'In this chapter, we will cover the following important topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下重要主题：
- en: Importing audio clips
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入音频剪辑
- en: Playing SFX
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 播放音效
- en: Understanding 2D and 3D SFX
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解2D和3D音效
- en: Creating particle systems
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建粒子系统
- en: Open up your Monkey Ball project and let's get started.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 打开你的Monkey Ball项目，让我们开始吧。
- en: Understanding audio
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解音频
- en: As with other assets, the Unity team has worked hard to make working with audio
    easy and hassle-free. Unity is capable of importing and utilizing a broad range
    of audio formats, allowing you to keep your files in a format that you can edit
    in another program.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他资源一样，Unity团队努力工作，使得处理音频变得简单且无忧。Unity能够导入和利用广泛的音频格式，让您可以在其他程序中以可编辑的格式保存文件。
- en: Import settings
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导入设置
- en: 'Audio clips have a small assortment of important settings. They let you easily
    control the type and compression of files. The following screenshot shows the
    settings that we have to work with while importing audio clips:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 音频剪辑有一系列重要的设置。它们让你可以轻松控制文件类型和压缩。下面的截图展示了我们在导入音频剪辑时要处理的一些设置：
- en: '![Import settings](img/4691OT_08_01.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![导入设置](img/4691OT_08_01.jpg)'
- en: 'The options in the preceding screenshot are as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 前面截图中的选项如下：
- en: '**Force To Mono**: This checkbox will cause Unity to change a multichannel
    file to have a single channel of audio data.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**强制单声道**：这个复选框将导致Unity将多声道文件更改为单个声道的音频数据。'
- en: '**Load In Background**: This will cause the initial loading of an audio file
    to not pause the whole game while it is loading the game into memory. It is best
    to use this for large files that do not need to be used right away.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**后台加载**：这将导致在将音频文件加载到内存时，不会暂停整个游戏。对于不需要立即使用的大型文件，最好使用这个选项。'
- en: '**Preload Audio Data**: This will cause the audio information to be loaded
    as soon as possible. This is best for small files that need to be used almost
    immediately.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**预加载音频数据**：这将导致音频信息尽可能快地加载。这对于需要几乎立即使用的小文件来说是最好的。'
- en: '**Load Type**: This controls how the file is loaded when the game is being
    played; you can choose from the following three available options:'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**加载类型**：这控制了在游戏播放时文件如何被加载；你可以从以下三个可用选项中选择：'
- en: '**Decompress On Load**: This removes compression from the file when it is first
    needed. The overhead for this option makes it a very poor choice for large files.
    This option is best for short sounds that you often hear, such as gunfire in a
    shooting game.'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**加载时解压缩**：在第一次需要时从文件中移除压缩。这个选项的开销使得它非常不适合大型文件。这对于你经常听到的短声音来说是最好的选择，比如射击游戏中的枪声。'
- en: '**Compressed In Memory**: This only decompresses the file as it is being played.
    When it is just being held in memory, the file remains compressed. This is a good
    option for short- and medium-length sounds that are not heard often.'
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内存中压缩**：只有在播放时才会解压缩文件。当文件在内存中暂存时，它保持压缩状态。这对于不常听到的短到中等长度的声音来说是一个好选项。'
- en: '**Streaming**: This loads in the audio as it is playing, such as streaming
    music or video from the Web. This option is best for things such as background
    music.'
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**流式传输**：这将在播放时加载音频，例如从网络流式传输音乐或视频。这个选项最适合背景音乐等事物。'
- en: '**Compression Format**: This allows you to select the kind of compression format
    to be used for reducing the size of your audio files. The **PCM** format will
    give you the largest file size and the best audio quality. The **Vorbis** format
    can give you the smallest file size, but the quality is reduced the smaller you
    go. The **ADPCM** format adapts to how the audio file is laid out, in order to
    give you a file size somewhere in the middle.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**压缩格式**：这允许你选择用于减少音频文件大小的压缩格式类型。**PCM**格式将为你提供最大的文件大小和最佳的音频质量。**Vorbis**格式可以为你提供最小的文件大小，但随着大小的减小，质量也会降低。**ADPCM**格式会根据音频文件的布局进行调整，以使文件大小处于中等水平。'
- en: '**Quality**: This is only used when **Vorbis** is selected as the compression
    format. A lower value will reduce the final size of the file in your project,
    but it will also introduce increasing amounts of artifacts to your audio.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**质量**：仅当选择**Vorbis**作为压缩格式时使用。降低此值可以减少项目中文件的大小，但同时也会使音频引入越来越多的失真。'
- en: '**Sample Rate Setting**: This lets you determine how much detail from your
    audio files is maintained in Unity. The **Preserve Sample Rate** option will maintain
    the setting that was used in your original file. The **Optimize Sample Rate**
    option will allow Unity to choose a setting that works well for your file. The
    **Override Sample Rate** option will let you access the value of **Sample Rate**
    and select a specific setting for your audio. A smaller value will reduce the
    overall file size, at the cost of lowering the quality.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**采样率设置**：这让你可以确定Unity中维护的音频文件的细节程度。**保留采样率**选项将保持原始文件中使用的设置。**优化采样率**选项将允许Unity为你的文件选择一个合适的设置。**覆盖采样率**选项将让你访问**采样率**的值并为你音频选择一个特定的设置。较小的值可以减少整个文件的大小，但会降低质量。'
- en: Audio Listener
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 音频监听器
- en: In order to actually hear anything in the game, every scene needs an **Audio
    Listener** component in it. By default, the `Main Camera` object (included first
    in any new scene) and any new camera you might create has an **Audio Listener**
    component attached. There can only be one **Audio Listener** component in your
    scene at a time. If there is more than one component or you try to play a sound
    when there isn't one, Unity will fill your console log with complaints and warnings.
    The **Audio Listener** component also gives the precise position for any 3D sound
    effects to key off.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在游戏中实际听到声音，每个场景都需要一个**音频监听器**组件。默认情况下，任何新场景中首先包含的`主相机`对象以及你可能创建的任何新相机都附有**音频监听器**组件。你的场景中一次只能有一个**音频监听器**组件。如果有一个以上的组件，或者在没有组件的情况下尝试播放声音，Unity将在你的控制台日志中填满抱怨和警告。**音频监听器**组件还为任何3D声音效果提供精确的位置定位。
- en: Audio Source
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 音频源
- en: 'The **Audio Source** component is like a speaker, and it controls the settings
    used to play any sound effect. If the clip is 3D, the position of this object
    to the **Audio Listener** component and the mode chosen determine the volume of
    the clip. The following screenshot shows the various settings for an **Audio Source**
    component, followed by their explanation:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**音频源**组件就像一个扬声器，它控制用于播放任何声音效果的设置。如果剪辑是3D的，此对象的位置与**音频监听器**组件以及所选模式的相对位置决定了剪辑的音量。以下屏幕截图显示了**音频源**组件的各种设置，随后是它们的解释：'
- en: '![Audio Source](img/4691OT_08_02.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![音频源](img/4691OT_08_02.jpg)'
- en: '**AudioClip**: This is the sound file that this **Audio Source** component
    will play, by default.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**音频剪辑**：这是此**音频源**组件默认播放的音频文件。'
- en: '**Output**: For complex audio effects, one of Unity''s new **Audio Mixer**
    objects can be put here. These allow you to take specific control over the audio
    and over any effects or blending that might be applied to it, before it is finally
    played.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**输出**：对于复杂的音频效果，可以将Unity的新**音频混合器**对象之一放在这里。这些允许你在音频最终播放之前，对音频及其可能应用的效果或混合进行具体控制。'
- en: '**Mute**: This is a quick way to toggle the volume of the sound that is playing
    on and off.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**静音**：这是一种快速切换播放声音的音量开关的方法。'
- en: '**Bypass Effects**: This allows you to toggle any special filters applied to
    the **Audio Source** component.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**绕过效果**：这允许你切换应用于**音频源**组件的任何特殊滤镜。'
- en: '**Bypass Listener Effect**: This allows the audio to ignore any special effects
    that might be applied to **Audio Listener**. This is a good setting for background
    music that should not be warped by the world.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**绕过听众效果**：这允许音频忽略可能应用于**音频监听器**的任何特殊效果。这对于不应该被世界扭曲的背景音乐来说是一个好的设置。'
- en: '**Bypass Reverb Zones**: This allows you to control whether **Reverb Zones**,
    which control the transition areas in ambient audio, affect the sound.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**绕过混响区域**：这允许你控制是否让**混响区域**（控制环境音频的过渡区域）影响声音。'
- en: '**Play On Awake**: This will cause the audio clip to immediately start playing
    when the scene loads or the object is spawned.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**唤醒时播放**：这将导致音频剪辑在场景加载或对象生成时立即开始播放。'
- en: '**Loop**: This will cause the playing clip to repeat as it is played.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**循环**：这将导致播放的剪辑在播放时重复。'
- en: '**Priority**: This dictates the relative importance of the files being played.
    The value `0` denotes the most important and best for music, while `256` denotes
    the least important file. Depending on the system, only so many sounds can be
    played at once. The list of files to be played starts with the most important
    and ends when this limit is reached, excluding those with the lowest values if
    there are more sounds than the limit will allow.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**优先级**：这决定了播放文件的相对重要性。值`0`表示最重要的，最适合音乐，而`256`表示最不重要的文件。根据系统不同，一次只能播放如此多的声音。播放文件的列表从最重要的开始，当达到这个限制时结束，如果有更多的声音超过限制，则排除那些值最低的。'
- en: '**Volume**: This decides how loud the clip will be played.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**音量**：这决定了剪辑播放时的音量大小。'
- en: '**Pitch**: This scales the playback speed of the clip.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**音调**：这缩放了剪辑的播放速度。'
- en: '**Stereo Pan**: This adjusts how evenly the sound comes out of each speaker,
    weighting it towards the left or right speaker.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**立体声平衡**：这调整了声音在左右扬声器中均匀输出的程度，向左或右扬声器倾斜。'
- en: '**Spatial Blend**: This is the percentage of the 3D effects to be applied to
    the Audio Source component. This affects things such as the falloff and Doppler
    effects.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**空间混合**：这是应用于音频源组件的3D效果的百分比。这影响诸如衰减和多普勒效应等因素。'
- en: '**Reverb Zone Mix**: (Reverb zones are used to create transitions in ambient
    audio effects.) This setting lets you adjust how much effect these zones will
    have on the audio from this audio source.![Audio Source](img/4691OT_08_03.jpg)'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**混响区域混合**：（混响区域用于创建环境音频效果之间的过渡。）这个设置让你调整这些区域将对来自这个音频源的声音产生多大影响。![Audio Source](img/4691OT_08_03.jpg)'
- en: 'The settings in the preceding screenshot are as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '前述截图中的设置如下： '
- en: '**3D Sound Settings**: This contains the group of settings that are specific
    to the playing of 3D audio clips. The **Volume**, **Spatial**, **Spread**, and
    **Reverb** options can be adjusted by using the graph at the end of the group.
    This allows you to create more dynamic transitions as the player approaches an
    **Audio Source** component:'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**3D声音设置**：这包含了一组特定于播放3D音频剪辑的设置。**音量**、**空间**、**扩散**和**混响**选项可以通过使用组末的图表进行调整。这允许你创建更动态的过渡，当玩家接近**音频源**组件时：'
- en: '**Doppler Level**: This decides how much Doppler effect needs to be applied
    to moving sounds. Doppler effect is the change in pitch experienced as a source
    of sound moves closer or further away from you. A classic example is a car blaring
    its horn as it rushes by.'
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多普勒级别**：这决定了移动声音需要应用多少多普勒效应。多普勒效应是当声源向你靠近或远离你时，你所经历音调的变化。一个典型的例子是一辆汽车在疾驰而过时鸣喇叭。'
- en: '**Volume Rolloff**: This controls how the volume fades with distance. There
    are three types of rolloffs:'
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**音量衰减**：这控制了声音随距离减小的音量。有三种类型的衰减：'
- en: '**Logarithmic Rolloff**: This is a sudden and rapid falloff of the sound at
    a short distance from the source''s center.'
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对数衰减**：这是在声源中心较近的距离处声音突然快速衰减。'
- en: '**Linear Rolloff**: This is an even falloff with distance, the loudest being
    at the **Min Distance** value and the quietest at the **Max Distance** value.'
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**线性衰减**：这是一种与距离成正比的衰减方式，声音最大值为**最小距离**，最小值为**最大距离**。'
- en: '**Custom Rolloff**: This allows you to create a custom falloff by adjusting
    the graph at the end of the group. It is also automatically chosen when the graph
    is altered.'
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自定义衰减**：这允许你通过调整组末的图表来创建自定义衰减。当图表被更改时，它也会自动被选择。'
- en: If the **Audio Listener** component is closer than the **Min Distance** value,
    the audio will be played at the current volume level. Outside this distance, the
    sound will fall off, according to the **Rolloff** mode.
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果**音频监听器**组件比**最小距离**值更近，音频将以当前音量水平播放。在此距离之外，声音将根据**衰减**模式逐渐减小。
- en: '**Spread**: This adjusts the amount of area in speaker space that the sound
    covers. It becomes more important when working with more than one or two speakers.'
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**扩散**：这调整了声音在扬声器空间中覆盖的区域量。当使用一个以上的扬声器时，它变得更加重要。'
- en: Beyond the **Max Distance** value, the sound will stop transitioning, based
    on the graph at the bottom of the group.
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 超过**最大距离**值后，声音将停止过渡，基于组底部图表的情况。
- en: Adding background music
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加背景音乐
- en: 'Now that we know about the available audio settings, it is time to put that
    knowledge into action. We will start by adding some background music. This will
    have to be a 2D sound effect so that we can hear it comfortably, no matter where
    the **Audio Source** component is. We will also create a short script to fade-in
    the music, in order to reduce the suddenness with which sound effects bombard
    the player. We will use the following steps to do this:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经了解了可用的音频设置，现在是把知识付诸实践的时候了。我们将从添加一些背景音乐开始。这将必须是一个2D音效，这样无论**音频源**组件在哪里，我们都能舒适地听到它。我们还将创建一个简短的脚本来淡入音乐，以减少音效对玩家突然而至的冲击。我们将使用以下步骤来完成这个任务：
- en: We will start by creating a new script and name it `FadeIn`.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将从创建一个新脚本开始，并将其命名为`FadeIn`。
- en: 'This script begins with four variables. The first variable is the goal volume
    that the script has to reach. The second is the number of seconds that the transition
    will take. The third variable is the time when the transition began. The last
    variable keeps track of the **Audio Source** component attached to the same object
    as our script, allowing us to update it regularly, as follows:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个脚本从四个变量开始。第一个变量是脚本需要达到的目标音量。第二个是过渡所需秒数。第三个变量是过渡开始的时间。最后一个变量跟踪与脚本同一对象上附加的**音频源**组件，允许我们定期更新它，如下所示：
- en: '[PRE0]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, we make use of the `Awake` function. It begins by checking for an attached
    **Audio Source** component and filling our `source` variable with it. If one cannot
    be found, the **GameObject** is destroyed and the function is exited:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们利用`Awake`函数。它首先检查是否有附加的**音频源**组件，并用它来填充我们的`source`变量。如果找不到，则销毁**游戏对象**并退出函数：
- en: '[PRE1]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `Awake` function ends by setting the audio''s volume to `0` and starts
    playing it if it isn''t already playing:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Awake`函数通过将音量设置为`0`来结束，并在尚未播放时开始播放音频：'
- en: '[PRE2]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To cause the transition over time, we use the `Update` function. It will check
    whether the value of the `fadeStartTime` variable is below zero and set it to
    the current time if it is. This allows you to avoid the hiccup that can be caused
    by the initialization of a scene starting:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了随时间引起过渡，我们使用`Update`函数。它会检查`fadeStartTime`变量的值是否小于零，如果是，则将其设置为当前时间。这样可以避免场景初始化可能引起的卡顿：
- en: '[PRE3]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Next, the function checks whether the transition time has ended. If it has,
    the **Audio Source** component''s volume is set to `maxVolume` and the script
    is destroyed in order to free resources:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，函数检查过渡时间是否已经结束。如果结束了，将**音频源**组件的音量设置为`maxVolume`，并销毁脚本以释放资源：
- en: '[PRE4]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Finally, the current progress is calculated by finding the amount of time that
    has passed since the fade started and dividing it by the length of the transition.
    The resulting percentage of progress is multiplied by the value of `maxVolume`
    and applied to the **Audio Source** component''s volume:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，通过计算自淡入开始以来经过的时间和过渡的长度之间的比例，来计算当前的进度。进度的百分比乘以`maxVolume`的值，并应用于**音频源**组件的音量：
- en: '[PRE5]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Back in Unity, we need to create a new empty **GameObject** and name it `Background`.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回到Unity，我们需要创建一个新的空**游戏对象**并将其命名为`Background`。
- en: Add our `FadeIn` script and an **Audio Source** component to our object; these
    can be found by navigating to **Component** | **Audio** | **Audio Source**.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将我们的`FadeIn`脚本和一个**音频源**组件添加到我们的对象中；可以通过导航到**组件** | **音频** | **音频源**来找到这些。
- en: If you have not done so already, create an `Audio` folder in your **Project**
    panel and import the sound files included in the `Starting Assets` folder for
    the chapter. Because of the small size of these files and our current game, the
    default import settings for them will work just fine.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你还没有这样做，请在你的 **项目** 面板中创建一个 `Audio` 文件夹，并导入本章 `起始资源` 文件夹中包含的音频文件。由于这些文件体积小，且当前游戏的需求，它们的默认导入设置将完全适用。
- en: Select your `Background` object in the **Hierarchy** window and drag the `Background`
    sound to the **AudioClip** slot.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **层次结构** 窗口中选中你的 `Background` 对象，并将 `Background` 音频拖到 **AudioClip** 插槽。
- en: Make sure that the **Play On Awake** and **Loop** checkboxes are checked in
    the **Audio Source** component. Both the **Volume** and **Spatial Blend** options
    also need to be set to `0` to make the file play throughout the game, but make
    no noise when starting.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保在 **音频源** 组件中勾选了 **唤醒时播放** 和 **循环** 复选框。**音量** 和 **空间混合** 选项也需要设置为 `0`，以使文件在游戏中全程播放，但在开始时不会发出声音。
- en: We added background music to our game. For the sound to be constant and not
    directional, we utilized the music as a 2D sound. We also created a script to
    fade in the music when the game starts. This eases the transition into the game
    for the player, preventing a sudden onslaught of sound. If your background music
    ends up being too loud to hear anything else in the game, reduce the **Max Volume**
    value in the **Inspector** panel of your `Background` object something more pleasing.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为游戏添加了背景音乐。为了让声音保持恒定且不具有方向性，我们将音乐作为2D声音使用。我们还创建了一个脚本，以便在游戏开始时渐入音乐。这为玩家提供了平滑过渡到游戏的方式，防止声音的突然冲击。如果你的背景音乐太大以至于无法听到游戏中的其他声音，请在你的
    `Background` 对象的 **检查器** 面板中降低 **最大音量** 值，以获得更愉悦的体验。
- en: Background music adds a lot to a game's experience. A horror scene is not nearly
    as scary without some scary music. Bosses are much less intimidating without their
    daunting music. Look for some good background music for your other games. Something
    light and cheery will work well for *Angry Birds*, while a piece that is more
    industrial and fast-paced will keep hearts racing through the Tank Battle game.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 背景音乐对游戏体验有很大的贡献。没有一些恐怖的音乐，恐怖场景几乎就不那么可怕了。没有那令人敬畏的音乐，老板们也就显得不那么威严了。为你的其他游戏寻找一些好的背景音乐。对于
    *愤怒的小鸟* 来说，一些轻松愉快的音乐非常适合；而对于坦克大战游戏，则应该选择一些更具工业感且快节奏的音乐，以保持心跳加速。
- en: Poking bananas
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 戳香蕉
- en: 'To understand 3D audio effects, we are going to add a sound to the bananas,
    which will be triggered every time the player touches them. This will give the
    players extra feedback when they have successfully touched one of the bananas,
    while also giving some indication of the distance and direction of the banana
    that was touched. Let''s use these steps to create this effect:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解3D音频效果，我们将为香蕉添加一个声音，每当玩家触碰它们时就会触发。这将使玩家在成功触摸到香蕉时获得额外的反馈，同时还能指示被触摸香蕉的距离和方向。让我们按照以下步骤来创建这个效果：
- en: First, we need a new script named `BananaPoke`.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要一个名为 `BananaPoke` 的新脚本。
- en: 'This script has one variable, `source`, to keep track of the **Audio Source**
    component attached to the object:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个脚本有一个变量 `source`，用于跟踪附加到对象上的 **音频源** 组件：
- en: '[PRE6]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Just like in our previous script, we use the `Awake` function to find a reference
    to our **Audio Source** component, saving us a little bit of work in the editor:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与我们之前的脚本一样，我们使用 `Awake` 函数找到对 **音频源** 组件的引用，为我们节省了一些在编辑器中的工作：
- en: '[PRE7]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'When the player touches a banana on the screen, a message is sent to the banana
    that calls the `Touched` function. We used this function in our `BananaBounce`
    script to adjust its health, which we created in [Chapter 6](ch06.html "Chapter 6. Specialities
    of the Mobile Device – Touch and Tilt"), *Specialities of the Mobile Device*.
    We can again use it here to play our sound effect, if we have an **Audio Source**
    component. The `PlayOneShot` function uses an **Audio Source** component''s position
    and settings to play a quick sound effect. Without this, we will be unable to
    play many sound effects from the same **Audio Source** component in rapid succession.
    All we need to pass it is for the audio clip to be played. In this case, the audio
    clip is attached to the **Audio Source** component itself:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当玩家在屏幕上触摸香蕉时，会向香蕉发送一条消息，调用`Touched`函数。我们在第6章《移动设备的特性——触摸和倾斜》中创建的`BananaBounce`脚本中使用了这个函数来调整其生命值。如果我们有**音频源**组件，可以再次使用它来播放音效。`PlayOneShot`函数使用**音频源**组件的位置和设置来播放快速音效。如果没有这个，我们将无法从同一个**音频源**组件中快速连续播放许多音效。我们需要传递给它的只是要播放的音频剪辑。在这种情况下，音频剪辑已经附加到**音频源**组件本身：
- en: '[PRE8]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Next, we need to add our new script and an **Audio Source** component to the
    `Banana` prefab in our **Project** panel.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们需要在**项目**面板中将新的脚本和**音频源**组件添加到`Banana`预设中。
- en: The `BananaPoke` sound file needs to be dragged from the `Audio` folder to the
    new **Audio Source** component's **AudioClip** slot.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 需要将`BananaPoke`声音文件从`Audio`文件夹拖拽到新的**音频源**组件的**音频剪辑**槽中。
- en: So that you don't hear an annoying pop at the very beginning of the game, uncheck
    the **Play On Awake** box.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了让游戏一开始不会听到烦人的爆音，取消勾选**唤醒时播放**选项。
- en: Next, we want to hear the difference in the distance of the bananas we touch.
    Set the **Spatial Blend** setting to `1`, in order to turn it from a 2D sound
    effect to a 3D sound effect.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们想要听到触摸香蕉时距离上的差异。将**空间混合**设置改为`1`，以便将2D音效转变为3D音效。
- en: Finally, we need to change the value of **Volume Rolloff** to **Linear Rolloff**
    and set **Max Distance** to `50`. This gives us a comfortable and easily heard
    change in the volume of our sound effect based on distance.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们需要将**音量衰减**的值更改为**线性衰减**，并将**最大距离**设置为`50`。这让我们根据距离舒适且容易地听到音效的音量变化。
- en: Living in a 3D world, we expect most sounds to come from a specific direction
    and to fall off with distance. By creating a similar effect in our 3D games, the
    player is able to easily judge where things are in the game world and how far
    away they might be. This is especially important for games where the player needs
    to be able to hear potential enemies, obstacles, or rewards so that they will
    be able to find or avoid them.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在3D世界中，我们期望大多数声音来自一个特定的方向，并且随着距离的增加而衰减。在3D游戏中创建类似效果，玩家能够轻松判断游戏世界中事物的位置以及它们可能有多远。这对于需要玩家能够听到潜在的敌人、障碍物或奖励的游戏尤为重要，以便他们能够找到或避开它们。
- en: Our Tank Battle game has many enemies that can easily sneak up on us, because
    they make no noise as they approach. Tanks are not generally recognized as quiet
    machines. Go find an engine's rumble sound or make it and add it to the enemy
    tanks. This will give the player some indication of where the enemies might be
    and how far away they are. Also, different types of tanks have different types
    of engines. Every engine sounds a little bit different. So, while you're at it,
    find different engine noises for each type of tank you have, giving the player
    even more indication of what dangers may lie just around the corner.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的坦克大战游戏有许多可以轻易潜行接近我们的敌人，因为它们在接近时没有声音。坦克通常不被认为是安静的机器。找一个引擎轰鸣声或者制作一个，并将其添加到敌方坦克中。这将给玩家一些关于敌人可能在哪里以及他们有多远的指示。此外，不同类型的坦克有不同的引擎类型。每个引擎的声音都有点不同。因此，在处理这件事时，为每种类型的坦克找到不同的引擎噪音，给玩家提供更多关于角落处可能存在的危险指示。
- en: Understanding particle systems
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解粒子系统
- en: Particle systems add a lot to the final look of a game. They can take the form
    of fire, magic waves, rain, or a great many other effects that you can dream up.
    They are often hard to create well, but are well worth the effort if you do. Keep
    in mind, especially when working with the mobile platform, that less is more.
    Larger particles are more effective than a great amount of particles. If your
    particle system ever contains thousands of particles in a small space or is duplicated
    on itself to increase the effect, you need to rethink the design and find a more
    efficient solution.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 粒子系统为游戏的最终外观增添了很多效果。它们可以表现为火、魔法波、雨或许多其他你能想到的效果。它们通常很难制作得很好，但如果做得好，它们是值得努力的。特别是在使用移动平台时，请记住，少即是多。较大的粒子比大量粒子更有效。如果你的粒子系统在一个小空间内包含成千上万的粒子，或者为了增强效果而复制自身，你需要重新考虑设计并找到更有效的解决方案。
- en: Particle system settings
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 粒子系统设置
- en: Every particle system contains a large variety of components, each with its
    own settings. Most of the available settings have the option to be **Constant**,
    **Curve**, **Random Between Two Constants**, and **Random Between Two Curves**.
    The **Constant** option will be a specific value. The **Curve** option will be
    a set value that changes along the curve over time. The two random settings select
    a random value between the respective value types. This may seem confusing at
    first, but as you work through them, they will become more understandable.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 每个粒子系统都包含大量组件，每个组件都有自己的设置。大多数可用的设置有**常量**、**曲线**、**两个常量之间的随机**和**两个曲线之间的随机**等选项。**常量**选项将是一个特定的值。**曲线**选项将是一个随时间沿曲线变化的设定值。两个随机设置在相应的值类型之间选择一个随机值。这在一开始可能看起来有些令人困惑，但随着你使用它们，它们会变得更加易懂。
- en: 'As you will see in the following screenshots and descriptions that follow,
    we will work through and gain an understanding of each piece of a particle system:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你将在下面的屏幕截图和描述中看到的，我们将逐一了解粒子系统的每个部分：
- en: '![Particle system settings](img/4691OT_08_04.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![粒子系统设置](img/4691OT_08_04.jpg)'
- en: 'The first portion, the **Initial** module, of the particle system holds all
    the settings used by every emitter in Unity:'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 粒子系统中的第一部分，即**初始**模块，包含了Unity中每个发射器使用的所有设置：
- en: '**Duration**: This denotes the time for which an emitter lasts. A looping system
    will repeat itself after this amount of time. A nonlooping system will stop emitting
    new particles after this length of time.'
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续时间**：这表示发射器持续的时间。循环系统在此时间后会重复自己。非循环系统在此时间后停止发射新粒子。'
- en: '**Looping**: This checkbox dictates whether or not the system loops.'
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**循环**：这个复选框决定了系统是否循环。'
- en: '**Prewarm**: This checkbox, if checked, will start a looping system if it has
    already had a chance to loop for a while. This is useful in the case of torches
    that should already be lit, not start when the player enters the room.'
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**预加热**：如果勾选此复选框，如果循环系统已经有机会循环一段时间，它将开始循环。这对于应该已经点燃的火把来说很有用，而不是在玩家进入房间时开始。'
- en: '**Start Delay**: This will stop the particle system from emitting for the given
    number of seconds, when it is initially triggered.'
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启动延迟**：当粒子系统首次触发时，这将阻止粒子系统在给定的秒数内发射粒子。'
- en: '**Start Lifetime**: This is the number of seconds for which an individual particle
    will last.'
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**起始生命周期**：这是一个单独的粒子将持续的秒数。'
- en: '**Start Speed**: This is how fast a particle will initially move when spawned.'
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**起始速度**：这是粒子生成时最初移动的速度。'
- en: '**Start Size**: This dictates how large a particle is when it is spawned. It
    is always better to use large particles rather than small and, hence, a greater
    number of particles.'
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**起始大小**：这决定了粒子生成时的大小。使用较大的粒子总是比使用较小的粒子更好，因此需要更多的粒子。'
- en: '**Start Rotation**: This will rotate the emitted particles.'
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**起始旋转**：这将旋转发射的粒子。'
- en: '**Start Color**: This is the color tint of the particles when they are spawned.'
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**起始颜色**：这是粒子生成时的颜色色调。'
- en: '**Gravity Modifier**: This gives the particles a greater or lesser amount of
    gravity effect.'
  id: totrans-108
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重力修改器**：这会给粒子一个更大或更小的重力效果。'
- en: '**Inherit Velocity**: This will cause particles to gain a portion of their
    transform''s momentum if it is moving.'
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**继承速度**：如果粒子系统在移动，这将导致粒子获得其变换动量的一部分。'
- en: '**Simulation Space**: This determines whether the particles will stay with
    the game object as it is moved (that is, local) or remain where they are in the
    world.'
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模拟空间**：这决定了粒子是随游戏对象移动而移动（即局部）还是保持在它们在世界中的位置。'
- en: '**Play On Awake**: This checkbox, if checked, will cause the emitter to start
    emitting as soon as it is spawned or the scene starts.'
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**唤醒时播放**：如果勾选此复选框，发射器将在生成或场景开始时立即开始发射粒子。'
- en: '**Max Particles**: This limits the total number of particles that this system
    supports at a single time. This value only comes into play if the rate at which
    particles are emitted (or their lifespan) is great enough to overbalance their
    rate of destruction.'
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最大粒子数**：这限制了该系统在单一时间内支持的粒子总数。只有当粒子的发射速率（或其生命周期）足够大以至于超过其销毁速率时，这个值才会起作用。'
- en: '![Particle system settings](img/4691OT_08_05.jpg)'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![粒子系统设置](img/4691OT_08_05.jpg)'
- en: 'The **Emission** module controls how fast the particles are emitted:'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**发射**模块控制粒子的发射速度：'
- en: '**Rate**: If this is set to **Time**, it denotes the number of particles that
    are created per second. If this is set to **Distance**, it denotes the number
    of particles per unit of the distance that the system travels as it moves.'
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**速率**：如果设置为**时间**，它表示每秒创建的粒子数。如果设置为**距离**，它表示系统移动时每单位距离的粒子数。'
- en: '**Bursts**: This is only used when the **Rate** option is set to **Time**.
    It allows you to set points in the system''s timeline when a specific number of
    particles will be emitted.'
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**爆发**：这仅在将**速率**选项设置为**时间**时使用。它允许你在系统的时序中设置特定数量的粒子发射的点。'
- en: '![Particle system settings](img/4691OT_08_06.jpg)'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![粒子系统设置](img/4691OT_08_06.jpg)'
- en: 'The **Shape** module, as shown in the preceding screenshot, controls how the
    system emits particles. It has the following options:'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如前一个截图所示，**形状**模块控制系统如何发射粒子。它具有以下选项：
- en: '**Shape**: This dictates what form the emission point will take. Each option
    comes with a few more value fields that determine its size.'
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**形状**：这决定了发射点将采取的形式。每个选项都附带一些决定其大小的附加值字段。'
- en: '**Sphere**: This is the point from which particles are emitted in all the directions.
    The **Radius** parameter determines the size of the sphere. The **Emit from Shell**
    option dictates whether the particles are emitted from the surface of the sphere
    or from within the volume.'
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**球体**：这是粒子向所有方向发射的点。**半径**参数决定了球体的大小。**从壳体发射**选项指定粒子是从球体表面发射还是从球体内部体积发射。'
- en: '**HemiSphere**: This is, as the name suggests, the half of a sphere. The **Radius**
    parameter and the **Emit from Shell** option work the same here as they do for
    **Sphere**.'
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**半球体**：顾名思义，这是球体的一半。**半径**参数和**从壳体发射**选项在这里与**球体**的工作方式相同。'
- en: '**Cone**: This emits particles in one direction. The **Angle** parameter determines
    whether the shape is closer to a cone or cylinder. The **Radius** parameter dictates
    the size of the emission point of the shape. The **Length** parameter is used
    when the **Emit from** option is set to **Volume** or **Volume Shell**, to dictate
    how much space is available for spawning particles. The **Emit from** option will
    determine where the particles are emitted from. **Base** emits from the base disc
    of the shape. The **Base Shell** option emits from the base of the cone but around
    the surface of the shape. **Volume** will emit from anywhere inside the shape,
    and **Volume Shell** emits from the surface of the shape.'
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**圆锥体**：这在一个方向发射粒子。**角度**参数决定形状更接近圆锥体还是圆柱体。**半径**参数决定了形状发射点的大小。当**从**选项设置为**体积**或**体积壳体**时，使用**长度**参数来指定可用于生成粒子的空间量。**从**选项将决定粒子从哪里发射。**基础**从形状的底圆盘发射。**基础壳体**选项从圆锥体的底部但在形状的表面周围发射。**体积**将从形状内部的任何位置发射，而**体积壳体**从形状的表面发射。'
- en: '**Box**: This emits particles from a cube-type shape. The **Box X**, **Box
    Y**, and **Box Z** options determine the size of the box.'
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**盒子**：这从类似立方体的形状发射粒子。**盒子X**、**盒子Y**和**盒子Z**选项决定了盒子的大小。'
- en: '**Mesh**: This allows you to select a model to use as an emission point. You
    then have the option of emitting particles from each **Vertex**, **Edge**, or
    **Triangle** that makes up the **Mesh**.'
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网格**：这允许你选择一个模型作为发射点。然后你可以选择从组成**网格**的每个**顶点**、**边**或**三角形**发射粒子。'
- en: '**Circle**: This emits particles from a single point along a 2D plane. **Radius**
    determines the size of the emission, and **Arc** dictates how much of the circle
    is used. **Emit from Edge** decides whether the particles are emitted from the
    inner or outer edge of the circle.'
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**圆形**：这从单个点沿2D平面发射粒子。**半径**决定了发射的大小，**弧度**决定了使用圆的多少。**从边缘发射**决定粒子是从圆的内边缘还是外边缘发射。'
- en: '**Edge**: This emits particles in a single direction, out from a line. The
    **Radius** parameter determines how long the emission area is.'
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**边缘**：这会沿着一条线从单一方向发射粒子。**半径**参数决定了发射区域的长度。'
- en: '**Random Direction**: This determines whether a particle''s direction is determined
    by the surface normal of the shape chosen or whether it is chosen at random.'
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**随机方向**：这决定了粒子的方向是由所选形状的表面法线确定，还是随机选择。'
- en: '![Particle system settings](img/4691OT_08_07.jpg)'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![粒子系统设置](img/4691OT_08_07.jpg)'
- en: 'The **Velocity over Lifetime** module allows you to control the momentum of
    the particles after they have been spawned:'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**生命周期内速度变化**模块允许你在粒子生成后控制它们的动量：'
- en: '**X**, **Y**, and **Z**: These define the number of units per second along
    each axis of the particle''s momentum.'
  id: totrans-130
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**X**、**Y**和**Z**：这些定义了粒子动量沿每个轴的每秒单位数。'
- en: '**Space**: This dictates whether the velocity is applied locally to the system''s
    transformation or relative to the world.'
  id: totrans-131
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**空间**：这决定了速度是局部应用于系统的变换还是相对于世界。'
- en: '![Particle system settings](img/4691OT_08_08.jpg)'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![粒子系统设置](img/4691OT_08_08.jpg)'
- en: 'The **Limit Velocity over Lifetime** module dampens a particle''s movement
    if it exceeds the specified value:'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**生命周期内限制速度**模块如果粒子的移动超过指定值，则会减弱其移动：'
- en: '**Separate Axis**: This allows you to define a value unique to each axis and
    whether that value is local or relative to the world.'
  id: totrans-134
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**独立轴**：这允许你为每个轴定义一个独特的值，以及该值是局部的还是相对于世界的。'
- en: '**Speed**: This is how fast the particle has to be moving before the damp is
    applied.'
  id: totrans-135
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**速度**：这是粒子在施加阻尼之前需要移动的速度。'
- en: '**Dampen**: This is a percentage of the speed by which the particle is cut.
    It can be any value between zero and one.'
  id: totrans-136
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**阻尼**：这是粒子速度减少的百分比。它的值可以是零到一之间的任何值。'
- en: '![Particle system settings](img/4691OT_08_09.jpg)'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![粒子系统设置](img/4691OT_08_09.jpg)'
- en: 'The **Force over Lifetime** module adds a constant amount of movement to each
    particle over the course of its life:'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**生命周期内力变化**模块为每个粒子在其生命周期内添加一个恒定的移动量：'
- en: '**X**, **Y**, and **Z**: These define how much force needs to be applied along
    each axis.'
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**X**、**Y**和**Z**：这些定义了需要沿每个轴施加的力。'
- en: '**Space**: This dictates whether the force is applied local to the system''s
    transformation or in the world space.'
  id: totrans-140
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**空间**：这决定了力是局部应用于系统的变换，还是在世界空间中应用。'
- en: '**Randomize**: If **X**, **Y**, and **Z** are random values, this will cause
    the amount of force to apply to be randomly picked in each frame, resulting in
    a statistical averaging of the random values.'
  id: totrans-141
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**随机化**：如果**X**、**Y**和**Z**是随机值，这将导致每一帧随机选择施加的力的大小，从而产生随机值的统计平均。'
- en: '![Particle system settings](img/4691OT_08_10.jpg)'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![粒子系统设置](img/4691OT_08_10.jpg)'
- en: The **Color over Lifetime** module allows you to define a series of colors for
    the particle to transition through after it has been spawned.
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**生命周期内颜色变化**模块允许你为粒子在生成后过渡的一系列颜色进行定义。'
- en: 'The **Color by Speed** module causes the particle to transition through the
    defined range of colors as its speed changes:'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**按速度着色**模块导致粒子在其速度变化时通过定义的颜色范围过渡：'
- en: '**Color**: This is the set of colors to transition through.'
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**颜色**：这是过渡的一系列颜色。'
- en: '**Speed Range**: This defines how fast the particle must go, in order to be
    at the minimum and maximum ends of the **Color** range.'
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**速度范围**：这定义了粒子必须达到的速度，以便在**颜色**范围的最小和最大端。'
- en: '![Particle system settings](img/4691OT_08_11.jpg)'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![粒子系统设置](img/4691OT_08_11.jpg)'
- en: The **Size over Lifetime** module changes the size of the particle over the
    course of its life.
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**生命周期内尺寸变化**模块会改变粒子在其生命周期内的尺寸。'
- en: 'The **Size by Speed** module adjusts the size of each particle, based on how
    fast it is going, as follows:'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**按速度调整尺寸**模块根据粒子的速度调整每个粒子的大小，如下所示：'
- en: '**Size**: This is the adjustment that the particles transition through.'
  id: totrans-150
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**尺寸**：这是粒子过渡时调整的大小。'
- en: '**Speed Range**: This defines the minimum and maximum values for each of the
    **Size** values.'
  id: totrans-151
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**速度范围**：这定义了**尺寸**值的每个最小和最大值。'
- en: '![Particle system settings](img/4691OT_08_12.jpg)'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![粒子系统设置](img/4691OT_08_12.jpg)'
- en: The **Rotation over Lifetime** module rotates particles over time after they
    have been spawned.
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**生命周期内旋转**模块在粒子被生成后随着时间的推移对粒子进行旋转。'
- en: 'The **Rotation by Speed** module rotates particles more as they go faster:'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**按速度旋转**模块使得粒子在速度更快时旋转得更多：'
- en: '**Angular Velocity**: This is the degrees per second speed of the particle''s
    rotation.'
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**角速度**：这是粒子旋转的每秒度数速度。'
- en: '**Speed Range**: This is the minimum and maximum range for the **Angular Velocity**
    value if it is not set to **Constant**.'
  id: totrans-156
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**速度范围**：这是如果**角速度**值未设置为**恒定**时的最小和最大范围。'
- en: '![Particle system settings](img/4691OT_08_13.jpg)'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![粒子系统设置](img/4691OT_08_13.jpg)'
- en: The **External Forces** module multiplies the effect of wind zone objects. Wind
    zones simulate the effects of wind on particle systems and on Unity's trees.
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**外部力**模块增强了风区对象的影响效果。风区模拟了风对粒子系统和Unity中树木的影响。'
- en: 'The **Collision** module allows particles to collide and interact with the
    physical game world:'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**碰撞**模块允许粒子与物理游戏世界发生碰撞和交互：'
- en: 'If this is set to **Planes**, you can define a number of flat surfaces for
    the particles to collide with. This is faster to process than **World** collisions:'
  id: totrans-160
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果设置为**平面**，你可以定义多个平面供粒子碰撞。这比**世界**碰撞的处理速度更快：
- en: '**Planes**: This is a list of transformations that define the surfaces to collide
    with. Particles will only collide with the local, positive y side of the transform.
    Any particles on the other side of the point will be destroyed.'
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**平面**：这是一个定义碰撞表面的变换列表。粒子只会与变换的本地、正y侧发生碰撞。任何在点另一侧的粒子将被销毁。'
- en: '**Visualization**: This gives you the option to view the planes as a **Solid**
    surface or as a **Grid** surface.'
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可视化**：这为你提供了将平面显示为**实体**表面或**网格**表面的选项。'
- en: '**Scale Plane**: This adjusts the size of the **Visualization** option. It
    does not affect the actual size of the surface to collide with.'
  id: totrans-163
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缩放平面**：这调整了**可视化**选项的大小。它不会影响实际碰撞表面的尺寸。'
- en: '**Particle Radius**: This is used to define the size of the sphere that is
    used to calculate the particle''s collision with the planes.'
  id: totrans-164
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**粒子半径**：这用于定义用于计算粒子与平面碰撞的球体的大小。'
- en: If set to **World**, the particles will collide with every collider in your
    scene. This can be a lot for the processor to handle.
  id: totrans-165
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果设置为**世界**，则粒子将与场景中的每个碰撞器发生碰撞。这对处理器来说可能是一个很大的负担。
- en: '**Collides With**: This defines a list of layers that the particles can collide
    with. Only the colliders on the layers that are checked in this list will be used
    for the collision calculation.'
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**碰撞层**：这定义了一个粒子可以与之碰撞的层列表。只有在此列表中勾选的层的碰撞器将用于碰撞计算。'
- en: '**Collision Quality**: This defines how precise the collision calculations
    are for this particle system. The **High** option will calculate precisely for
    every single particle. The **Medium** option will use an approximation and a limited
    number of new calculations in each frame. The **Low** option just calculates less
    often than **Medium** does. If **Collision Quality** is set to **Medium** or **Low**,
    the **Voxel Size** parameter dictates how precisely the system estimates the points
    of collision.'
  id: totrans-167
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**碰撞质量**：这定义了此粒子系统的碰撞计算的精确度。**高**选项将精确计算每一个粒子的碰撞。**中**选项将使用近似值，并在每个帧中限制新的计算次数。**低**选项的计算频率低于**中**选项。如果**碰撞质量**设置为**中**或**低**，则**体素大小**参数决定了系统估算碰撞点的精确度。'
- en: '**Dampen**: This removes the defined fraction amount of speed from the particle
    when it collides with a surface.'
  id: totrans-168
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**阻尼**：当粒子与表面碰撞时，这会从粒子中移除定义的比例速度。'
- en: '**Bounce**: This allows the particle to maintain the defined fraction of its
    speed, specifically along the normal of the surface that was hit.'
  id: totrans-169
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**弹跳**：这允许粒子保持其定义的速度比例，特别是沿着被撞击表面的法线方向。'
- en: '**Lifetime Loss**: This is the percentage of life. When the particle collides,
    this percentage of life is removed from the particle. When the particle''s life
    drops to zero over time, or through collision, it is removed.'
  id: totrans-170
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**生命周期损失**：这是生命周期的百分比。当粒子发生碰撞时，会从这个百分比中移除粒子的生命周期。随着时间的推移，或者通过碰撞，粒子的生命周期降至零时，它将被移除。'
- en: '**Min Kill Speed**: If, after collision, the particle''s speed is below this
    value, the particle is destroyed.'
  id: totrans-171
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最小销毁速度**：如果粒子在碰撞后的速度低于这个值，粒子将被销毁。'
- en: '**Send Collision Messages**: If this checkbox is checked, scripts attached
    to the particle system and the object that was collided with will be alerted every
    frame that the collision took place. Only one message is sent per frame, not per
    particle.'
  id: totrans-172
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**发送碰撞消息**：如果勾选此复选框，则附加到粒子系统以及与之发生碰撞的对象上的脚本将在每一帧被告知发生碰撞。每帧只发送一条消息，而不是每个粒子。'
- en: '![Particle system settings](img/4691OT_08_14.jpg)'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![粒子系统设置](img/4691OT_08_14.jpg)'
- en: 'The **Sub Emitters** module allows additional particle systems to be spawned
    at points in the life of each particle of this system:'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**子发射器**模块允许在粒子系统的每个粒子的生命周期中的点产生额外的粒子系统：'
- en: Any particle systems in the **Birth** list will be spawned and will follow the
    particle when it is first created. This can be used to create a fireball or smoke
    trail.
  id: totrans-175
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**出生**列表中的任何粒子系统将在粒子首次创建时产生，并跟随粒子。这可以用来创建火球或烟雾轨迹。'
- en: The **Collision** list spawns particle systems when the particle hits something.
    This can be used for rain drop splashes.
  id: totrans-176
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**碰撞**列表在粒子撞击某物时产生粒子系统。这可以用于雨滴飞溅效果。'
- en: The **Death** list spawns particles when the particles are destroyed. It can
    be used to spawn a firework explosion.
  id: totrans-177
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**死亡**列表在粒子被销毁时产生粒子。它可以用来产生烟花爆炸效果。'
- en: '![Particle system settings](img/4691OT_08_15.jpg)'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![粒子系统设置](img/4691OT_08_15.jpg)'
- en: 'The **Texture Sheet Animation** module causes the particle to flip through
    a number of particles over the course of its life. The texture used is defined
    in the **Renderer** module:'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**纹理图动画**模块使得粒子在其生命周期内翻动一系列的粒子。所使用的纹理在**渲染器**模块中定义：'
- en: '**Tiles**: This defines the number of rows and columns in the sheet. This will
    determine the total number of frames available.'
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**瓷砖**：这定义了图中的行数和列数。这将决定可用的总帧数。'
- en: '**Animation**: This gives you the options of **Whole Sheet** and **Single Row**.
    If this option is set to **Single Row**, the row used can either be chosen at
    random or specified by using the **Random Row** checkbox and the value of **Row**.'
  id: totrans-181
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动画**：这为您提供了**整张图**和**单行**的选项。如果此选项设置为**单行**，则所使用的行可以随机选择或通过使用**随机行**复选框和**行**的值来指定。'
- en: '**Frame over Time**: This defines how the particle transitions between frames.
    If set to **Constant**, the system will only use a single frame.'
  id: totrans-182
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**随时间帧**：这定义了粒子在帧之间的过渡方式。如果设置为**常数**，系统将只使用一个帧。'
- en: '**Cycles**: This is the number of times the particle will loop through the
    animation over the course of its life.'
  id: totrans-183
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**循环**：这是粒子在其生命周期内循环动画的次数。'
- en: '![Particle system settings](img/4691OT_08_16.jpg)'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![粒子系统设置](img/4691OT_08_16.jpg)'
- en: 'The **Renderer** module dictates how each particle is drawn on the screen,
    as follows:'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**渲染器**模块决定了每个粒子在屏幕上的绘制方式，如下所示：'
- en: '**Render Mode**: This defines which method a particle should use in order to
    orient itself in the game world:'
  id: totrans-186
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**渲染模式**：这定义了粒子在游戏世界中定位自己的方法：'
- en: '**Billboard**: This will always face the camera directly.'
  id: totrans-187
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**广告牌**：这将始终直接面向相机。'
- en: '**Stretched Billboard**: This will face particles at the camera, but it will
    stretch them based on the speed of the camera, the particle''s speed, or by a
    specific value.'
  id: totrans-188
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**拉伸广告牌**：这将使粒子面向相机，但会根据相机的速度、粒子的速度或特定值来拉伸它们。'
- en: '**Horizontal Billboard**: This is flat on the XZ plane of the game world.'
  id: totrans-189
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**水平广告牌**：这在游戏世界的XZ平面上是平的。'
- en: '**Vertical Billboard**: This will always face the player but will always stay
    straight along the Y axis.'
  id: totrans-190
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**垂直广告牌**：这将始终面向玩家，但沿Y轴始终保持直立。'
- en: If set to **Mesh**, you can define a model to be used as a particle, rather
    than a flat plane.
  id: totrans-191
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果设置为**网格**，您可以定义一个模型作为粒子使用，而不是平面。
- en: '**Normal Direction**: This is used for the lighting and shading of the particles
    by adjusting the normal of each plane. A value of **1** aims the normals directly
    at the camera, while a value of **0** aims them toward the center of the screen.'
  id: totrans-192
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**法线方向**：这用于通过调整每个平面的法线来对粒子进行光照和阴影处理。值为**1**时，法线直接指向相机，而值为**0**时，法线指向屏幕中心。'
- en: '**Material**: This defines the material that was used to render the particles.'
  id: totrans-193
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**材质**：这定义了用于渲染粒子的材质。'
- en: '**Sort Mode**: This dictates the order in which the particles should be drawn,
    by distance or age.'
  id: totrans-194
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**排序模式**：这决定了绘制粒子的顺序，按距离或年龄排序。'
- en: '**Sorting Fudge**: This causes particle systems to be drawn earlier than normal.
    The higher the value, the earlier it will be drawn on the screen. This affects
    whether the system appears in front of or behind other particle systems or partially
    transparent objects.'
  id: totrans-195
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**排序微调**：这导致粒子系统比正常情况下更早地被绘制。值越高，它将在屏幕上越早被绘制。这影响了系统是出现在其他粒子系统或部分透明物体的前面还是后面。'
- en: '**Cast Shadows**: This determines whether or not the particles will block light.'
  id: totrans-196
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**投射阴影**：这决定了粒子是否能够阻挡光线。'
- en: '**Receive Shadows**: This determines whether or not the particles are affected
    by the shadows cast by other objects.'
  id: totrans-197
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**接收阴影**：这决定了粒子是否会被其他物体投射的阴影影响。'
- en: '**Max Particle Size**: This is the total amount of screen space that a single
    particle is allowed to fill. No matter what the real size of the particle is,
    it will never fill more than this space of the screen.'
  id: totrans-198
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最大粒子尺寸**：这是单个粒子允许占满的屏幕空间总量。无论粒子的实际大小如何，它都不会占据超过这个屏幕空间。'
- en: '**Sorting Layer** and **Order in Layer**: These are used when working with
    a 2D game. These dictate what level it is on and where in that level it should
    be drawn, respectively.'
  id: totrans-199
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**排序层**和**层内顺序**：这些在使用2D游戏时很有用。它们分别决定了粒子处于哪个层级以及在该层级中的绘制位置。'
- en: '**Reflection Probes**: These can also be used to reflect the world rather than
    just a particle. When the world is reflecting rather than a particle, **Anchor
    Override** can be used to define a custom position to sample reflections from.'
  id: totrans-200
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**反射探针**：这些也可以用来反射世界，而不仅仅是粒子。当反射的是世界而不是粒子时，可以使用**锚点覆盖**来定义一个自定义的位置来采样反射。'
- en: That was a whole lot of information. You will use the **Initial**, **Emission**,
    and **Shape** modules most often. They control the main features of any particle
    system. To a slightly lesser degree, you will use the **Renderer** module to change
    the texture used for the particle system and the **Color over Lifetime** module
    to adjust the fade. All of these pieces, when used together effectively, will
    give you some really great effects that round out the look of any game. The absolute
    best way to learn what all they can do is to just play around with the settings
    and see what happens. Experimentation and a few tutorials, such as the next few
    sections, are the best ways to become an expert particle system creator.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有大量的信息。你将最常使用**初始**、**发射**和**形状**模块。它们控制任何粒子系统的主要特性。其次，你可能会使用**渲染器**模块来改变粒子系统所使用的纹理，以及**生命周期颜色**模块来调整褪色效果。当这些部分有效地结合在一起时，将为你的游戏带来非常棒的效果，完善游戏的外观。学习它们能做什么的最好方法就是玩转这些设置，看看会发生什么。实验和一些教程，比如接下来的几节，是成为粒子系统创建专家的最佳途径。
- en: Creating dust trails
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建灰尘轨迹。
- en: 'To give our players a better sense that characters are actually in the world
    and touching it, they are often given the ability to kick up little dust clouds
    as they move around the environment. It is a small effect but adds a good bit
    of polish to any game. We are going to give our monkey ball the ability to kick
    up little dust clouds. Let''s use these steps to do this:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让玩家更好地感受到角色实际上是处于世界中并与世界接触的，他们常常被赋予在环境中移动时能够踢起小灰尘云的能力。这是一个小效果，但为任何游戏增添了不少润色。我们将给我们的猴子球增加踢起小灰尘云的能力。让我们按照以下步骤进行：
- en: First, we need to create a new particle system, by navigating to **GameObject**
    | **Particle System**. Name it `DustTrail`.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要创建一个新的粒子系统，通过导航到**GameObject** | **Particle System**。将其命名为`DustTrail`。
- en: By default, particle systems shoot out little white balls in a cone shape. For
    the dust, we need something a little more interesting. Import the textures from
    the `Starting Assets` folder for the chapter to a `Particles` folder in your project.
    These are particle textures, provided by Unity, which were in the older versions
    of the engine.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认情况下，粒子系统会以圆锥形状发射小白球。对于灰尘效果，我们需要更有趣的东西。将本章`Starting Assets`文件夹中的纹理导入到你的项目中的`Particles`文件夹里。这些是由Unity提供的粒子纹理，它们在引擎的旧版本中出现过。
- en: Next, we need to create a new material in our `Particles` folder. Name it `DustPoof`.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要在`Particles`文件夹中创建一个新的材质。将其命名为`DustPoof`。
- en: Change the new material's **Shader** property by going to **Particles** | **Alpha
    Blended** and put the `DustPoof` texture into the **Particle Texture** image slot.
    This changes the material to be partially transparent and to blend well with both
    the world and the other particles that are being emitted.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要更改新材质的**Shader**属性，请转到**Particles** | **Alpha Blended**，并将`DustPoof`纹理放入**Particle
    Texture**图像槽中。这样可以将材质设置为部分透明，并且能够与世界以及其他正在发射的粒子良好融合。
- en: To change the look of our `DustPoof` particle system, put the material in the
    **Material** slot of the **Renderer** module.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要更改我们的`DustPoof`粒子系统的外观，请将材质放入**Renderer**模块的**Material**槽中。
- en: The particles in the system last too long and go too far, so set **Start Lifetime**
    to `0.5` and **Start Speed** to `0.2`. This will make the particles just rise
    up a little from the ground before disappearing.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 系统中的粒子存在时间过长且移动距离太远，因此将**Start Lifetime**设置为`0.5`和**Start Speed**设置为`0.2`。这样粒子会在消失前仅从地面稍微升起一点。
- en: We also need to make the particles more appropriate for the size of our monkey.
    Set **Start Size** to `0.3` in order to make them appropriately small.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要使粒子更适合我们猴子的大小。将**Start Size**设置为`0.3`，以使它们大小适中。
- en: It is a little weird to see all the particles in the exact same orientation.
    To make the orientations different, change **Start Rotation** to be **Random Between
    Two Constants** by clicking on the small down arrow to the right-hand side of
    the input field. Then, set the two new input fields to `-180` and `180`, so that
    all the particles have a random rotation.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 看到所有粒子都是完全相同的方向有点奇怪。为了使方向不同，将**Start Rotation**更改为**Random Between Two Constants**，方法是点击输入字段右侧的小下拉箭头。然后，将两个新的输入字段设置为`-180`和`180`，使所有粒子具有随机的旋转。
- en: The brownish color of the particle is alright, but it doesn't always make sense
    with the color and nature of what our level terrain is made of. Click on the color
    field next to **Start Color** and use the **Color Picker** window that pops up
    to pick a new color based on the environment. This will allow the particles to
    make more sense when being kicked up from the surface of our game field.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 粒子的棕色是可行的，但并不总是与我们的关卡地形的颜色和性质相匹配。点击**Start Color**旁边的颜色字段，并使用弹出的**Color Picker**窗口选择基于环境的新颜色。这将使粒子在从游戏场地表面被踢起时更有意义。
- en: Lastly, for the **Initial** module, we need to set **Simulation Space** to **World**
    so that the particles are left behind as our monkey moves, rather than following
    him.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，对于**Initial**模块，我们需要将**Simulation Space**设置为**World**，这样粒子就会随着猴子移动而留在原地，而不是跟随他。
- en: In **Emission**, we need to make sure that there are enough particles to give
    us a good amount of dust being kicked up. Set **Rate** to `20` for a light dusting.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Emission**中，我们需要确保有足够的粒子以产生适量的扬尘。将**Rate**设置为`20`以产生轻微的扬尘效果。
- en: Next, we are going to adjust the **Shape** module so that the particles are
    emitted under the whole area of the ball. Ensure that the **Shape** is set to
    **Cone**, the **Angle** to `25`, and the **Radius** to `0.5`.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将调整**Shape**模块，使粒子能够在球的整个区域下发射。确保将**Shape**设置为**Cone**，**Angle**设置为`25`，**Radius**设置为`0.5`。
- en: With the **Color over Lifetime** module, we can ease the sudden appearance and
    disappearance of the particles. Hit the checkbox at the left-hand side of the
    module's name to activate it. Click on the white bar at the right-hand side of
    **Color** to open the **Gradient Editor** window. In **Gradient Editor**, clicking
    just above the colored bar will add a new flag that will control the transparency
    of the particles over their lifetime. The left-hand side of this bar corresponds
    to the very beginning of a particle's life, and the right-hand side corresponds
    to the end of its life. We need a total of four flags. One at the very beginning,
    with the value of **Alpha** set to `0`, a second flag with a **Location** value
    of `20` and **Alpha** value of `255`, the third flag at a **Location** of `50`
    and **Alpha** of `255`, and the last flag at the very end with an **Alpha** value
    of `0`. This will cause the dust particles to fade in quickly at the beginning
    and fade out slowly after that, easing their transition into and out of existence.![Creating
    dust trails](img/4691OT_08_17.jpg)
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**颜色随生命周期变化**模块，我们可以平滑粒子的突然出现和消失。点击模块名称左侧的复选框以激活它。点击**颜色**右侧的白条，打开**渐变编辑器**窗口。在**渐变编辑器**中，点击颜色条上方将添加一个新的标志，该标志将控制粒子在其生命周期内的透明度。此条形的左侧对应于粒子生命的开始，右侧对应于粒子生命的结束。我们需要总共四个标志。最开始的标志，将**Alpha**值设置为`0`，第二个标志，位置值为`20`，**Alpha**值为`255`，第三个标志在位置`50`处，**Alpha**为`255`，最后一个标志在最后，**Alpha**值为`0`。这将使尘埃粒子在开始时快速淡入，之后慢慢淡出，平滑它们的出现和消失过渡。![创建尘埃轨迹](img/4691OT_08_17.jpg)
- en: We can further ease the transition by using the **Size over Lifetime** module
    to make the particles grow and shrink as they come into and out of existence.
    Be sure to activate it with the checkbox by its name. By clicking on the curve
    bar at the right-hand side of **Size**, the **Particle System Curves** editor
    opens in the preview area at the bottom of the **Inspector** panel. Here, we can
    adjust any of the little diamond-shaped keys to control the size of the particles
    over the course of its life. Just as in the case of **Gradient Editor**, the left-hand
    side is the beginning of the particle's life and the right is the end. By right-clicking
    on it, we can add new keys to control the curve. To create a pop-in effect, put
    the first key at the bottom in the far left side. The second key should go at
    the top and correspond with the `0.2` value at the bottom. The third will work
    well at the top and `0.4` with the bottom values. The fourth should be at the
    far right and set at about `0.6` with the numbers on the left, which indicate
    the percentage of its **Start Size** that we set in the **Initial** module, as
    shown in the following screenshot:![Creating dust trails](img/4691OT_08_18.jpg)
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以通过使用**大小随生命周期变化**模块，使粒子在出现和消失时增大和缩小，从而进一步平滑过渡。确保通过其名称旁边的复选框激活它。点击**大小**右侧的曲线条，**粒子系统曲线**编辑器将在**检查器**面板底部的预览区域中打开。在这里，我们可以调整任何小钻石形状的键，以控制粒子在其生命周期中的大小。与**渐变编辑器**的情况一样，左侧是粒子生命的开始，右侧是结束。右键点击它，我们可以添加新的键来控制曲线。要创建弹出效果，请将第一个键放在最左侧底部。第二个键应该放在顶部，与底部的`0.2`值相对应。第三个在顶部和底部的`0.4`值处效果很好。第四个应该在最右侧，大约设置为左侧的`0.6`，这些数字表示我们在**初始**模块中设置的**开始大小**的百分比，如下截图所示：![创建尘埃轨迹](img/4691OT_08_18.jpg)
- en: Finally, to complete the look of our particle system, we are going to use the
    **Rotation over Lifetime** module to add a little bit of spin to the particles.
    Change the value to **Random Between Two Constants** and set the two value fields
    to `-45` and `45` to make the particles spin a little over the course of their
    lives.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，为了完成我们的粒子系统的外观，我们将使用**旋转随生命周期变化**模块，为粒子增加一点旋转。将值更改为**两个常数之间的随机值**，并将两个值字段设置为`-45`和`45`，使粒子在其生命周期中稍微旋转。
- en: So that our monkey can use the particle system, make it a child of the `MonkeyPivot`
    object, and set its position to `0` for **X**, `-0.5` for **Y**, and `0` for **Z**.
    Also, make sure that the rotation is set to `270` for **X**, `0` for **Y**, and
    `0` for **Z**. This will keep it at the base of our monkey ball and throw particles
    into the air. Because it is a child of `MonkeyPivot`, it will not spin around
    with the ball, because we already made the object compensate for the spinning
    of the ball.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了让我们的猴子使用粒子系统，将其设置为`MonkeyPivot`对象的子对象，并将其位置设置为**X**为`0`，**Y**为`-0.5`，**Z**为`0`。同时，确保旋转设置为**X**为`270`，**Y**为`0`，**Z**为`0`。这将使其位于猴子球的底部并向空中抛出粒子。由于它是`MonkeyPivot`的子对象，它不会随着球的旋转而旋转，因为我们已经使对象补偿了球的旋转。
- en: Try it out. As our monkey moves around, he leaves a nice little trail of dust
    in his wake. This effect can be a great bit of polish, especially if we tailor
    it to the material that the level is made out of, whether it be grass, sand, wood,
    metal, or anything else.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试一下。当我们的猴子四处移动时，他在身后留下了一条很好的灰尘轨迹。如果根据关卡的材质进行定制，这种效果可以非常出色，无论是草地、沙地、木材、金属还是其他任何材质。
- en: You might notice that the effect continues to play, even as our monkey flies
    off the edge of our map. We are going to create a new script to toggle the particles
    based on whether or not our monkey ball is actually touching the ground. Create
    a new script named `DustTrail` now.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可能会注意到，即使我们的猴子从地图边缘飞出去，效果仍然在持续播放。我们将创建一个新脚本来根据猴子球是否真正接触地面来切换粒子效果。现在创建一个名为`DustTrail`的新脚本。
- en: 'The first variable for this script will hold a reference to the particle system
    we are trying to control. The second will be a flag that indicates whether or
    not the ball is actually touching the ground:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个脚本的第一个变量将保存对我们试图控制的粒子系统的引用。第二个变量将是一个标志，表示球是否真正接触地面：
- en: '[PRE9]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We use the `OnCollisionStay` function to determine whether the ball is touching
    anything. This function is similar to the `OnCollisionEnter` function we used
    in the last chapter. While that function was called by Unity the moment one of
    our birds hit something, this one is called every frame our ball continues to
    touch another collider. When it is called, we just set our flag to mark that we
    are touching something:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用`OnCollisionStay`函数来判断球是否触碰到了任何物体。这个函数与上一章中使用的`OnCollisionEnter`函数类似。不过，那个函数是在我们的鸟撞击到某物的那一刻被Unity调用的，而这个函数则是在每一帧球持续接触另一个碰撞体时被调用。当它被调用时，我们只需设置一个标志来标记我们正在触碰某物：
- en: '[PRE10]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Because the physics system only changes during the `FixedUpdate` loop, this
    is the function that we use to update our particle system. Here, we first check
    whether we are touching something and the particle system is not currently emitting
    anything, as indicated by its `isPlaying` variable. If the conditions are met,
    we use the `Play` function to turn the particle system on. However, if the ball
    is not touching anything and the particle system is currently playing, we use
    the `Stop` function to turn it off:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为物理系统只在`FixedUpdate`循环中改变，所以我们使用这个函数来更新我们的粒子系统。在这里，我们首先检查是否正在触碰某物，并且粒子系统当前没有发射任何东西，这由其`isPlaying`变量指示。如果条件满足，我们使用`Play`函数开启粒子系统。然而，如果球没有触碰任何物体，并且粒子系统当前正在播放，我们使用`Stop`函数来关闭它：
- en: '[PRE11]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'At the very end of the `FixedUpdate` function, we set our flag to `false` so
    that it can be re-updated in the next frame as to whether or not we need to turn
    the particle system on or off:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`FixedUpdate`函数的最后，我们将标志设置为`false`，这样它就可以在下一帧更新我们是否需要开启或关闭粒子系统：
- en: '[PRE12]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Next, add the new script to the `MonkeyBall` object. As we learned in the previous
    chapter, if we don't attach it to the same object as the ball's **Rigidbody**
    component, we will not receive the collision messages we need to make the script
    work.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将新脚本添加到`MonkeyBall`对象上。正如上一章所学的，如果我们没有将它附加到与球的**Rigidbody**组件相同的对象上，我们将无法接收到使脚本正常工作的碰撞信息。
- en: Finally, drop your `DustTrail` particle system into the **Dust** slot so that
    your script can actually take control over it.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将你的`DustTrail`粒子系统拖放到**Dust**槽中，这样你的脚本才能真正控制它。
- en: Try it again. Now our monkey can easily move around and create a little dust
    trail until it falls off the edge of the level, goes off a jump, or otherwise
    ends up in the air.![Creating dust trails](img/4691OT_08_19.jpg)
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再试一次。现在我们的猴子可以轻松地四处移动并产生一些灰尘轨迹，直到它从关卡的边缘掉落，跳下平台，或者以其他方式悬在空中。![创建灰尘轨迹](img/4691OT_08_19.jpg)
- en: We gave our monkey ball the ability to kick up dust. We also made the dust turn
    on and off, based on whether the ball is actually touching the ground or not.
    This little effect makes the character feel nice and grounded in the world. It
    can also give you a sense of the speed of the character, based on the time for
    which the trail is behind it.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 我们让我们的猴子球具有扬起灰尘的能力。我们还根据球是否真正接触地面来控制灰尘的开启和关闭。这个小效果使角色在游戏中显得更加脚踏实地。它还可以根据拖尾持续的时间，让你感受到角色的速度。
- en: Another good effect for grounding characters that we have previously discussed
    is shadows. If you haven't done so already, be sure to give your environment some
    shadow detail. You might notice, though, that due to the partially transparent
    nature of the ball, real-time shadows do not work on it. That's where the blob
    shadow we used on the tank will come in.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前讨论过的使角色更加接地气的另一个好效果是阴影。如果你还没有这样做，请确保为你的环境添加一些阴影细节。不过，你可能注意到，由于球体部分透明，实时阴影无法在其上生效。这时，我们之前在坦克上使用的blob阴影就派上用场了。
- en: Our effect also runs constantly, even if the ball is not moving. Try to adjust
    whether or not the particle system plays based on the velocity of its **Rigidbody**
    component. We messed around with the velocity of **Rigidbody** components a little
    bit in the last chapter, if you need a refresher. For an added challenge, take
    a look at the particle system's `emissionRate` variable. Try to make the effect
    have more particles as the ball starts going faster.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 即使球体没有移动，我们的效果也会持续运行。尝试调整粒子系统是否播放，基于其**刚体**组件的速度。在上一章中，我们稍微调整了**刚体**组件的速度，如果你需要复习可以看看。作为一个额外的挑战，查看粒子系统的`emissionRate`变量。尝试让球体速度加快时，效果产生更多的粒子。
- en: Putting it together
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组合在一起
- en: So far, we learned about audio effects and particle systems on their own. They
    each can add a lot to the scene, setting the mood and giving that touch of polish
    that sets a game apart. However, there are many effects that cannot stand on their
    own. Explosions, for example, are simply not that impressive, unless you have
    both the visual and auditory effects.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们学习了各自独立的声音效果和粒子系统。它们各自可以为场景增添很多，设定氛围，并赋予游戏独特的润色。然而，有许多效果是无法独立存在的。例如，爆炸效果，如果没有视觉和听觉效果的结合，就不会那么令人印象深刻。
- en: Exploding bananas
  id: totrans-238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 爆炸的香蕉
- en: 'It is so much more satisfying to destroy things when they explode. It takes
    both a particle effect and a sound effect to make a proper explosion. We will
    start by creating an explosion prefab. Then, we will update the bananas to spawn
    the explosion once they are destroyed. Let''s use these steps to create the banana
    explosions:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 当事物爆炸时摧毁它们会让人感到更加满足。要制造一次恰当的爆炸，需要同时具备粒子效果和声音效果。我们将从创建一个爆炸预设开始。然后，更新香蕉，使它们在摧毁时产生爆炸。以下步骤将帮助我们创建香蕉爆炸效果：
- en: First, we need to create a new particle system and name it `Explosion`.
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要创建一个新的粒子系统，并将其命名为`Explosion`。
- en: We want our explosion to actually look something like an explosion. This is
    where our second particle texture comes in. Create a new material for it, named
    `Smoke`.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们希望我们的爆炸效果看起来更像是一次真正的爆炸。这时，我们的第二个粒子纹理就发挥作用了。为其创建一个新材质，命名为`Smoke`。
- en: This time, set the **Shader** property by going to **Particles** | **Additive**.
    This will use an additive-blending method that makes the overall particle look
    brighter, while still blending the alpha of the particle with the things behind.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这次，通过选择**粒子** | **附加**来设置**着色器**属性。这将使用一种附加混合方法，使粒子整体看起来更亮，同时仍然将粒子的alpha与背后的物体混合。
- en: Be sure to set the new material's **Particle Texture** property to `Smoke`.
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保将新材质的**粒子纹理**属性设置为`Smoke`。
- en: Also, drop your `Smoke` material into the **Material** slot in the particle
    system's **Renderer** module.
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同时，将你的`Smoke`材质拖放到粒子系统的**渲染器**模块中的**材质**槽内。
- en: We do not want this explosion to last too long. So, in the **Initial** module,
    set **Duration** to `0.5` and **Start Lifetime** to `1`, making it all much shorter
    than what it was.
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们不希望这次爆炸持续得太久。因此，在**初始**模块中，将**持续时间**设置为`0.5`，并将**开始生命周期**设置为`1`，使其比原来的时间短得多。
- en: Note
  id: totrans-246
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: When working with things such as explosions that occur in short bursts, it can
    become hard to see how our changes are affecting the look of the particle system.
    When we are done with this particle system, we will have to uncheck the **Looping**
    checkbox, but leaving it on for now makes it much easier to view and work with.
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当处理像爆炸这样短暂爆发的效果时，可能很难看出我们的更改如何影响粒子系统的外观。完成这个粒子系统后，我们将不得不取消勾选**循环**复选框，但现在保持勾选状态会使得查看和工作变得更加容易。
- en: Next, so that the particles do not fly excessively far, set **Start Speed**
    to `0.5`, making the explosion contained and centralized.
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，为了防止粒子飞得太远，将**起始速度**设置为`0.5`，使爆炸效果集中且局限于一个较小的区域。
- en: In order to have enough particles for a proper explosion, set **Rate** to `120`
    in the **Emission** module.
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了让爆炸有足够的粒子，需在**发射**模块中将**速率**设置为`120`。
- en: To actually make the explosion seem legitimate, change **Shape** to **Sphere**
    in the **Shape** module. Also, set **Radius** to `0.5`. If you are interested
    in changing the size of the explosion, adjust **Radius** and the **Emission Rate**.
    Increasing both will give you a larger explosion, while decreasing both will give
    you a smaller one.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了让爆炸看起来更真实，需要在**形状**模块中将**形状**改为**球体**。同时，将**半径**设置为`0.5`。如果你对改变爆炸的大小感兴趣，可以调整**半径**和**发射速率**。两者都增加会得到更大的爆炸效果，而两者都减少则得到较小的爆炸效果。
- en: Note
  id: totrans-251
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This basic explosion effect is just a visual explosion, as most are. Making
    an explosion that changes the environment or alters its appearance based on the
    environment will require extra scripting and model consideration that is beyond
    the scope of this book.
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这种基本的爆炸效果仅仅是一种视觉上的爆炸，大多数情况都是如此。要制作根据环境改变或受环境影响而改变外观的爆炸效果，将需要额外的脚本编写和模型考虑，这超出了本书的范围。
- en: The explosion in our game still isn't colored like an explosion and all of the
    particles pop out of the existence around the edges. That's where the **Color
    over Lifetime** module comes in. First, we need to get rid of the particle pop
    by adding some new flags for the alpha channel. Add two new flags at about `20`
    percent of the way in from the edges and adjust all the four flags, so that the
    particles fade in at the beginning and out at the end.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们游戏中的爆炸效果仍然不像真正的爆炸，所有的粒子都从边缘突然出现。这时就需要用到**生命周期颜色**模块。首先，我们需要通过在alpha通道添加新标志来消除粒子的突现。在大约边缘向内`20`%的位置添加两个新标志，并调整所有四个标志，使粒子在开始时淡入，结束时淡出。
- en: The flags along the bottom of the gradient bar of **Gradient Editor** control
    the colors that the particle will transition through over the course of its life.
    For a decent explosion, we are going to need two more flags, one that is placed
    one-third of the way in and one flag at two-thirds, spacing all four of them evenly.
    Explosions tend to start with a moderately bright color, followed by a bright
    color at the peak of the explosion's energy, then another medium bright color
    as the energy starts to dissipate, and finally black when all of the energy is
    gone. Each color you pick will affect the color of the explosion. For a normal
    explosion, select yellows and oranges. For a sci-fi space explosion, you can select
    blues or greens. Or, maybe it is an alien spore cloud with the use of purples.
    Use your imagination and pick something appropriate for what you want to explode.![Exploding
    bananas](img/4691OT_08_20.jpg)
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**渐变编辑器**的渐变条底部的标志控制粒子在其生命周期中过渡的颜色。为了得到一个像样的爆炸效果，我们需要再添加两个标志，一个放在三分之一的位置，另一个放在三分之二的位置，将所有四个标志均匀地间隔开。爆炸通常开始时颜色较亮，接着在爆炸能量达到顶峰时颜色更亮，然后随着能量开始消散时颜色再次变亮，最后能量完全消失时为黑色。你选择的每种颜色都会影响爆炸的颜色。对于普通爆炸，可以选择黄色和橙色。对于科幻空间爆炸，可以选择蓝色或绿色。或者，如果是异形孢子云，可以使用紫色。发挥你的想象力，选择适合你想要爆炸效果的色彩。[![爆炸的香蕉](img/4691OT_08_20.jpg)]
- en: Now that we have all our settings in place, ensure that **Play On Awake** is
    checked, so the explosion will start the moment it is created, and uncheck **Looping**,
    so that it does not play forever. If you want to test your particle system at
    this point, take a look at the **Stop**, **Simulate**, and **Pause** buttons that
    appear in the bottom-right of your **Scene** window when any particle system is
    selected. These buttons work just like the buttons of your music player, controlling
    the playback of your particle system.
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经设置好所有参数，确保勾选了**Play On Awake**，这样爆炸在创建的那一刻就会开始，并取消勾选**Looping**，这样它就不会永远播放。如果你想在这个时候测试你的粒子系统，可以查看当选择任何粒子系统时，在**Scene**窗口右下角出现的**Stop**、**Simulate**和**Pause**按钮。这些按钮就像你的音乐播放器按钮一样，控制粒子系统的播放。
- en: If we were to start creating explosions now, they will just sit there in the
    scene after spawning their initial group of particles, though the player will
    never see them. That's why we need a new script to get rid of them once they are
    done. Create a new script and name it `Explosion`.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们现在开始创建爆炸效果，它们在生成初始粒子群后会仅仅停留在场景中，尽管玩家永远看不到它们。这就是为什么我们需要一个新的脚本来在它们完成作用后摆脱它们。创建一个新的脚本，并将其命名为`Explosion`。
- en: 'This script has a single variable, that is, to keep track of the particle system
    that indicates its existence:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个脚本有一个单一的变量，即跟踪表示其存在的粒子系统：
- en: '[PRE13]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'It also has a single function. The `Update` function checks every frame to
    see whether the particle system even exists or if it has stopped playing. In either
    case, the overall object is destroyed so that we can save resources:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它也只有一个函数。`Update`函数每一帧都会检查粒子系统是否存在或者是否已经停止播放。在任一情况下，整体对象都会被销毁，这样我们可以节省资源：
- en: '[PRE14]'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Next, we need to add our new script to the `Explosion` object. Also, drag the
    **Particle System** component to the **Particles** slot in the **Script** component.
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们需要将我们的新脚本添加到`Explosion`对象中。同时，将**Particle System**组件拖到**Script**组件中的**Particles**槽位。
- en: To make the explosion heard, we need to add an **Audio Source** component to
    the `Explosion` object as well.
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了让爆炸声能被听到，我们还需要在`Explosion`对象上添加一个**Audio Source**组件。
- en: Ensure that its **Play On Awake** box is checked. So that the sound makes sense
    in 3D space, set the **Spatial Blend** property to `1`. Also, set it for **Linear
    Rolloff** and `50` for the **Max Distance**, so that we can hear it.
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保勾选了其**Play On Awake**选项。为了让声音在3D空间中有意义，将**Spatial Blend**属性设置为`1`。同时，设置为**Linear
    Rolloff**，并将**Max Distance**设置为`50`，这样我们可以听到它。
- en: It doesn't make much sense for our bananas to have the same explosion sound
    that a car has. Instead, we have a nice little popping sound that will differentiate
    the final touch from those that just reduce the health of the banana. To that
    end, set the `BananaPop` audio file in the **AudioClip** slot on the **Audio Source**
    component.
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的香蕉拥有和汽车一样的爆炸声音是没有意义的。相反，我们有一个很好的小爆裂声，这将使最终效果与那些仅仅减少香蕉健康值的效果区分开来。为此，在**Audio
    Source**组件的**AudioClip**槽位上设置`BananaPop`音频文件。
- en: With all of our explosive settings in place, create a new prefab out of the
    `Explosion` object and delete it from the scene.
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们设置好所有爆炸参数后，使用`Explosion`对象创建一个新的预制体，并将其从场景中删除。
- en: Next, we need to update the `BananaBounce` script to actually spawn the explosion
    when it has run out of health. Open it up now.
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要更新`BananaBounce`脚本，当它失去健康时实际生成爆炸效果。现在打开它。
- en: 'First, we add a new variable at the beginning of the script. This will simply
    keep track of the prefab that we want to spawn after the banana runs out of health:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在脚本开始部分添加一个新的变量。这将简单地跟踪我们希望在香蕉失去健康后生成的预制体：
- en: '[PRE15]'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Next, we need to add a line to the `Touched` function right after we use the
    `Destroy` function. This line just creates a new instance of the explosion at
    the position of the banana:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要在`Touched`函数中使用`Destroy`函数后立即添加一行。这行代码仅仅在香蕉的位置创建一个新的爆炸实例：
- en: '[PRE16]'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Finally, find your `Banana` prefab in the **Project** panel and drop the `Explosion`
    prefab into the new **Explosion** slot. If you don't, the explosion will never
    be created and Unity will give you an error every time a banana runs out of health.![Exploding
    bananas](img/4691OT_08_21.jpg)
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在**Project**面板中找到你的`Banana`预制体，并将`Explosion`预制体拖到新的**Explosion**槽位中。如果你不这样做，将永远不会创建爆炸效果，而且每当香蕉失去健康时Unity都会报错。![爆炸的香蕉](img/4691OT_08_21.jpg)
- en: As you can see in the preceding screenshot, we have created an explosion. With
    the help of a few textures from Unity's old particle systems, we made it actually
    look like an explosion, rather than just the puff of colored balls that it would
    otherwise be. We also gave the explosion a sound effect. Combining both particle
    systems and audio sources, we can create many effects, such as our explosion,
    which would be weak if you just use one or the other. We also updated our bananas
    so that they spawn the explosions when they are destroyed by the player. Try playing
    around with the balance of the banana's audio, the volume differences between
    each touch on the banana, and the explosion itself. The more information we can
    give the player visually with particle systems and in an auditory manner with
    audio sources, the better will be the effect.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述截图所示，我们已经创建了一个爆炸效果。在 Unity 旧的粒子系统的一些纹理的帮助下，我们让它看起来像真正的爆炸，而不是仅仅是一团彩色的球。我们还为爆炸效果添加了声音。结合粒子系统和音频源，我们可以创建许多效果，比如我们的爆炸效果，如果只使用其中一种，效果就会显得较弱。我们还更新了香蕉，使其在被玩家摧毁时产生爆炸。尝试调整香蕉音频的平衡，每次触摸香蕉之间的音量差异以及爆炸本身。我们通过粒子系统在视觉上和通过音频源在听觉上为玩家提供的信息越多，效果就会越好。
- en: Bananas aren't the only thing in this world that can explode. In our second
    game, we were destroying tanks that just disappear. Try adding some new explosions
    to the Tank Battle game. Every time a tank is destroyed, it should explode in
    a glorious fashion. Also, shots from a tank tend to explode no matter what they
    hit. Try spawning an explosion at the point it was shot rather than moving the
    red sphere around. It will give the player a much better sense and feel of what
    they are shooting at.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 香蕉并不是这个世界上唯一可以爆炸的东西。在我们的第二款游戏中，我们摧毁的坦克只是消失了。尝试为《坦克大战》游戏添加一些新的爆炸效果。每次坦克被摧毁时，都应该以壮观的方式爆炸。此外，无论坦克的炮弹击中什么，炮弹往往会爆炸。尝试在炮弹射击点产生爆炸效果，而不是移动红色球体。这将给玩家更好的射击目标和感觉。
- en: The Angry Birds game can also use some explosions, especially the black bird.
    Every time something is destroyed, it should throw out some sort of particles
    and make a little bit of noise. Otherwise, it will continue to look a little weird
    when things just disappear suddenly.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 《愤怒的小鸟》游戏也可以加入一些爆炸效果，尤其是黑色的小鸟。每当有东西被摧毁时，都应该释放出一些粒子效果，并产生一些声响。否则，当物体突然消失时，游戏会看起来有些奇怪。
- en: Summary
  id: totrans-275
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned about the special effects in Unity, specifically
    audio and particle systems. We started by understanding how Unity handles audio
    files. By adding background music and some squeak to the ball, we put into practice
    what we learned. We moved on to understand particle systems and created a dust
    trail for the ball. Finally, we put the two skill sets together and created explosions
    for the bananas when collected. Particle systems and audio effects add a lot to
    the final polish and look of a game.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了 Unity 中的特效，特别是音频和粒子系统。我们从了解 Unity 如何处理音频文件开始。通过为球添加背景音乐和一些吱吱声，我们将所学内容付诸实践。然后我们继续了解粒子系统，并为球创建了尘埃轨迹。最后，我们将这两种技能结合在一起，为收集香蕉时创建爆炸效果。粒子系统和音频效果为游戏的最终润色和外观增添了很多。
- en: In the next chapter, we will complete our gaming experience together by taking
    a look at optimization in Unity. We will take a look at the tools provided for
    tracking performance. We will also create our own tool to track specific parts
    of a script's performance. We will explore asset compression and the other points
    that we can change to minimize the application footprint. Finally, key points
    for minimizing the lag while working with games and Unity will be discussed.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将通过查看 Unity 中的优化来共同完善我们的游戏体验。我们将了解一些用于追踪性能的工具。我们还将创建自己的工具来追踪脚本特定部分的性能。我们将探讨资源压缩以及我们可以更改的其他点以最小化应用程序的占用空间。最后，将讨论在使用游戏和
    Unity 时最小化延迟的关键点。
