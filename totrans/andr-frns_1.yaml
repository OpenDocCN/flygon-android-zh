- en: Chapter 2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Android hardware platforms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Information in this chapter
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: • [Overview of core components](#S0015)
  prefs: []
  type: TYPE_NORMAL
- en: • [Overview of different device types](#S0085)
  prefs: []
  type: TYPE_NORMAL
- en: • [Read-only memory and boot loaders](#S0125)
  prefs: []
  type: TYPE_NORMAL
- en: • [Manufacturers](#S0160)
  prefs: []
  type: TYPE_NORMAL
- en: • [Specific devices](#S0180)
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Android was designed to be compatible with a wide array of hardware. This is
    achieved, in large part, through the Linux kernel, which over the years has evolved
    to support a large variety of hardware. This is an important characteristic of
    the platform as it allows manufacturers freedom to design, procure, or otherwise
    integrate the ideal components of the Android device. This strategy has led to
    the development of powerful dual core Android devices capable of significant processing
    as well as entry-level devices targeted to entry-level wireless plans. Although
    the hardware compatibility is great for manufacturers, wireless providers, and
    ultimately consumers, the diversity poses challenges for forensic analysts and
    security engineers. Understanding the hardware components, device types, and boot
    process for Android will aid in your overall understanding of Android.
  prefs: []
  type: TYPE_NORMAL
- en: Overview of core components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Android was developed to support a wide range of devices and manufacturers.
    As such, any list of major components will likely be outdated as soon as it is
    printed. However, there are some consistent components found in Android devices,
    which are beneficial to discuss. The following components comprise the core of
    an Android device.
  prefs: []
  type: TYPE_NORMAL
- en: Central Processing Unit
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The central processing unit (CPU) is a term quite familiar to most forensic
    analysts, and there are no surprises in its role on Android devices. The CPU is
    responsible for executing operating system (OS) and application code and coordinating
    or controlling other core components including the network, storage, displays,
    and input devices.
  prefs: []
  type: TYPE_NORMAL
- en: From the beginning, most (if not all) Android devices utilize ARM processors
    as their CPU, which are powerful enough for the mobile platform but designed for
    low power consumption—a key aspect in maximizing battery life.
  prefs: []
  type: TYPE_NORMAL
- en: However, corporations and enthusiasts alike have ported Android to other platforms.
    On the corporate front, Intel has ported Android to their Atom processors. Similarly,
    Google has ported Android in their Google TV product, which is built on top of
    Android. There are also projects, such as Android-x86 ([Android-x86, n.d](#BIB1).),
    that have released ported versions of Android running on Intel’s x86 architecture.
    Some of the platforms supported include many of the Eee PC models and the Lenovo
    ThinkPad x61 Tablet.
  prefs: []
  type: TYPE_NORMAL
- en: Baseband Modem/Radio
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The baseband modem and radio are hardware and software systems that provide
    Android devices a connection to the cellular network. This allows both voice and
    data communication from the device.
  prefs: []
  type: TYPE_NORMAL
- en: Instead of occupying the main CPU with these activities, device designers typically
    leverage a dedicated component to manage the complexities of cellular communication.
    Thus, although the CPU may direct the overall activities of the device, the baseband
    modem manages cellular communication.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout this book, we will use the terms *baseband*, *baseband modem*, and
    *radio* interchangeably. Although these systems are complex and certain nuances
    may be overlooked in this definition, the distinctions are not significant for
    forensic analysts.
  prefs: []
  type: TYPE_NORMAL
- en: Memory (Random-Access Memory and NAND Flash)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Android devices, because they are at some level simply computers, need various
    types of memory to operate. The two primary types of memory required are volatile
    (random-access memory [RAM]) and nonvolatile (NAND flash) memory.
  prefs: []
  type: TYPE_NORMAL
- en: The RAM is used by the system to load, execute, and manipulate key parts of
    the OS, applications, or data. RAM is volatile, meaning that it does not preserve
    its state without power.
  prefs: []
  type: TYPE_NORMAL
- en: However, NAND flash memory (we will refer to this memory simply as NAND flash)
    is nonvolatile, and thus, the data are preserved after the device has been powered
    off. The NAND flash is used to store the boot loader, OS, and user data. It is
    therefore a critical component of any forensic investigation and is similar to
    a hard drive in a forensic investigation of a laptop, desktop, or server. NAND
    flash also has unique properties that make it ideal for mobile devices while at
    the same time presenting a number of challenges for programmers (which often yield
    unique opportunities for forensic analysts). These characteristics will be explored
    in detail in [Chapter 4](CHP004.html).
  prefs: []
  type: TYPE_NORMAL
- en: From a hardware perspective, mobile devices obviously have significant space
    limitations. Often, the RAM and NAND flash memory are manufactured into a simple
    component referred to as the multichip package (MCP). When examining Android device
    components, generally the NAND flash and RAM will be packaged as an MCP.
  prefs: []
  type: TYPE_NORMAL
- en: Although [Fig. 2.1](#F0010) is specific to the memory manufacturer Hynix (used
    in the Dell Streak and other Android devices), this overall architecture is a
    good depiction of MCP components that include not only the NAND flash and RAM
    but also the packaging options to suit various devices.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100020f02-01-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 2.1 MCP architecture ([Mobile Memory, n.d.](#BIB8)).
  prefs: []
  type: TYPE_NORMAL
- en: Global Positioning System
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Undoubtedly one of the most important innovations in mobile devices since the
    inclusion of cellular communication has been integration of the Global Positioning
    System (GPS) into the core offering. This functionality not only identifies the
    location of the device using the GPS satellite network but also allows for applications
    such as point-to-point directions, position-aware applications, and, undoubtedly,
    many more interesting uses in the future.
  prefs: []
  type: TYPE_NORMAL
- en: Wireless ([Wi-Fi.com](http://Wi-Fi.com) and Bluetooth)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Beyond the cellular networks, most devices allow for additional wireless technologies,
    such as [Wi-Fi.com](http://Wi-Fi.com) for high-speed data connection and Bluetooth
    for connections to external devices such as headsets, keyboards, printers, and
    more. In fact, some devices may omit the cellular network connection, which not
    only reduces the cost and complexity of the device but also eliminates a monthly
    recurring charge for the consumer. These devices may be designed for home use
    only (e.g., a home phone or multimedia device) or for offline mode for those times
    when a [Wi-Fi.com](http://Wi-Fi.com) connection is not available (i.e., tablet
    or e-reader).
  prefs: []
  type: TYPE_NORMAL
- en: Secure Digital Card
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Most Android devices ship with a removable memory card referred to as their
    Secure Digital (SD) card. Like the on-device NAND flash, SD cards are nonvolatile
    and also use NAND flash technology. However, because the SD cards were designed
    to be portable, they must adhere to various physical and communication specifications
    that allow them to interoperate with most devices.
  prefs: []
  type: TYPE_NORMAL
- en: The SD card is one obvious design difference between most Android devices and
    the popular Apple iPhone. The iPhone is designed with 4GB to 32GB of NAND flash
    on-board and does not provide for SD cards. Although more expensive, this provides
    the device manufacturer (Apple, in this case) with far more control over the device.
    In the case of Android, larger user files are intended to be stored on the SD
    card. This not only provides a less expensive and easily upgradeable memory option
    for consumers but is also portable, so if a consumer purchases a new phone, they
    can easily transfer data using their existing SD card.
  prefs: []
  type: TYPE_NORMAL
- en: Recent HTC phones (notably the HTC Incredible) have provided the standard SD
    card interface but did not ship with an SD card installed. Instead, they created
    an emulated SD card by carving a portion of the on-board NAND memory and presenting
    it as an SD card. This adds additional complexity for the forensic analysts. Analysts
    must first determine whether there is an SD card, an emulated SD card, or some
    other means of user data storage (in addition to the on-board NAND flash).
  prefs: []
  type: TYPE_NORMAL
- en: Screen
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The screen on an Android device is obviously a critical component. It is the
    primary interface for user interaction, not only through the visual display but
    also by responding to the user’s touch. The technologies behind the display are
    the focus of intense development. Early iterations included a liquid crystal display
    and a second layer that detects user input on the screen. Recent improvements
    include higher display resolution, brighter screens, more sensitive and complicated
    user touch interactions, and reduced power consumption. In fact, some recent Android
    smartphones, such as those using Samsung’s Super AMOLED technology, have been
    well received by consumers due largely to the screen capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Camera
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Initially cameras on smartphones were used to take pictures. Although an exciting
    development at the time, there has been significant innovation in this area too.
    Most devices now also support video recording (some in high definition). Of course,
    cameras have increased in their quality and now often include an integrated flash.
  prefs: []
  type: TYPE_NORMAL
- en: Recently, some devices include two cameras. The first, on the back of the device,
    is used for external pictures and videos. A second front-facing camera allows
    for new applications such as videoconferencing.
  prefs: []
  type: TYPE_NORMAL
- en: Most Android devices also combine the camera functionality with the GPS; hence,
    you can record not only the date and time of a picture but also the GPS coordinates.
    You can then easily upload or share the picture using the network or perhaps send
    them through the Multimedia Messaging Service (MMS) of the cellular provider.
  prefs: []
  type: TYPE_NORMAL
- en: One interesting development in this area is the use of cameras to read bar codes.
    Specialized applications leverage the camera to take a picture of a bar code and
    then analyze the data. It might look up product reviews, determine the best price,
    or automatically check you into a restaurant’s application so that you can rate
    experiences. Perhaps in the future, these apps may even allow you to pay for items
    you wish to purchase.
  prefs: []
  type: TYPE_NORMAL
- en: An early implementation of this is a Google app called Goggles. The user can
    take a picture of anything, and the app attempts to identify the object. An interesting
    example, provided by Google, was tourists using the app to identify landmarks
    they were visiting.
  prefs: []
  type: TYPE_NORMAL
- en: Keyboard
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You might think that there is little innovation possible with a keyboard; however,
    this is certainly not the case. Most Android devices come with an on-screen keyboard
    thanks to touch screen technology. A number of devices also have a hardware-based
    keyboard.
  prefs: []
  type: TYPE_NORMAL
- en: The powerful software keyboards can adapt to the screen orientation (i.e., if
    you rotate the screen 90 degrees, the keyboard will also rotate) and can support
    multiple languages.
  prefs: []
  type: TYPE_NORMAL
- en: There are also companies developing more efficient ways to input text to a device.
    One such company, Swype Inc., developed a keyboard where the user does not select
    individual keys for each letter. Instead, for each word they simply start with
    the first letter and then swipe their finger around the keyboard (without picking
    it up) to each subsequent letter until they are done. The Swype keyboard then
    determines the likely word and completes it (or offers suggestions). This approach
    has proven to be quite successful, and we expect to see more Swype technology
    (or similar innovations) integrated into the Android keyboard.
  prefs: []
  type: TYPE_NORMAL
- en: Battery
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Battery life has always been a major concern for smartphone adopters. You may
    love your phone but hate its battery life. The more people use the device—and
    the components that make it so powerful—the more battery consumed. Great care
    is taken in minimizing power consumption. However, most people find they must
    charge their phones every day.
  prefs: []
  type: TYPE_NORMAL
- en: Over time, improvements in the hardware, software, and battery technology may
    lead to less frequent charging. There are some interesting research initiatives
    in this area such as recharging your phone without wires, leveraging the movement
    of the human body for continuous recharging, or simply creating more powerful
    batteries. Whatever the improvements, they will be welcomed by consumers.
  prefs: []
  type: TYPE_NORMAL
- en: For forensic analysts, one thing to bear in mind is that the SD card is often
    located behind the battery. So, to access the SD card (and determine the exact
    device type and identification), you generally have to remove the battery (thus
    powering off the device). There are various considerations here, which we will
    cover in [Chapter 6](CHP006.html).
  prefs: []
  type: TYPE_NORMAL
- en: Universal Serial Bus
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Most Android devices support several Universal Serial Bus (USB) interfaces
    that can be accessed from computers. The cables may vary between devices, but
    in general, the USB interface allows most modern OSs connectivity to the device.
    The following are some common interfaces exposed by Android devices:'
  prefs: []
  type: TYPE_NORMAL
- en: '1. Charge only: the device can be recharged over the USB cable'
  prefs: []
  type: TYPE_NORMAL
- en: '2. Disk interface: portions of the device, including the SD card, emulated
    SD card, and other disk interfaces, are presented and accessible to the OS as
    a Mass Storage Device'
  prefs: []
  type: TYPE_NORMAL
- en: '3. Vendor-specific interfaces: these include custom synchronization protocols,
    emulated CD-read-only memory (ROM) drives for software installs, and specialized
    connections for sharing the phone’s Internet connection'
  prefs: []
  type: TYPE_NORMAL
- en: '4. Android Debug Bridge (ADB): an interface that provides the user access to
    a shell prompt on the device as well as other advanced features'
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 3](CHP003.html), we will explore the disk interface and the ADB
    interface, both of which are critical components in the forensic investigation
    of an Android device.
  prefs: []
  type: TYPE_NORMAL
- en: Accelerometer/Gyroscope
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Android can detect and change the user interface based on how the device is
    held or rotated. This is typically achieved through an accelerometer that detects
    the size and direction a device has been accelerated (or positioned). Typically,
    this is used to change the display between landscape and portrait.
  prefs: []
  type: TYPE_NORMAL
- en: The latest version of Android (2.3 as of this writing) now supports a gyroscope,
    which is more sensitive and sophisticated than an accelerometer. The gyroscope
    is a more responsive and accurate measure of device movement—key for advanced
    game development.
  prefs: []
  type: TYPE_NORMAL
- en: Speaker/Microphone
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Finally, a smartphone or tablet is not that interesting without the ability
    to hear or produce sound. Like the other components, the speaker and microphone
    continue to mature with each iteration. For instance, some Android devices contain
    two or three microphones that, combined with the Android software, have the ability
    to detect and cancel out background noise to provide better sound quality. In
    perhaps some of the most stunning technological development of this decade, the
    speaker phones have evolved to the point where they can actually be used in real
    conversation!
  prefs: []
  type: TYPE_NORMAL
- en: Overview of different device types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: From these core components, designers have created a wide variety of device
    types. Back in October of 2008, the T-Mobile G1 (HTC Dream 100) was just released,
    and it was quite easy to track the Android devices and types. It was simply the
    G1\. And the only device type was a smartphone. Of course, there were already
    blog posts flying around about new device types but that was all speculation.
  prefs: []
  type: TYPE_NORMAL
- en: However, by the end of 2010, not only had the number of Android devices grown
    tremendously but also the types of devices. There are many web sites that attempt
    to track Android devices; however, most are incomplete. One decent reference that
    is useful while preparing to examine a new Android device is [PDAdb.net](http://PDAdb.net),
    which tracks significant information about current and future devices. Currently,
    they are tracking over 300 devices running Android, which you can search from
    their PDAmaster page ([Main Page, n.d.](#BIB7)).
  prefs: []
  type: TYPE_NORMAL
- en: The primary device types remain smartphones and tablets, but there are a growing
    number of ultraportable computers (we will call them netbooks) as well as e-readers.
    On the innovation front, Google TV devices (running Android) are beginning to
    hit the market, a few media players exist, and a number of automotive companies
    have announced that they will run Android as part of their media and navigation
    systems. And finally, there is an entire group that falls under the “other” category,
    which may remain as one-off devices or could certainly go mainstream. Examples
    include appliances, gaming devices, GPS receivers, home phones and audio devices,
    photo frames, and printers. The following sections detail some of these device
    types.
  prefs: []
  type: TYPE_NORMAL
- en: Smartphone
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Smartphones are the most popular type of Android devices. They contain nearly
    all of the components described above and are generally the most well known. As
    of October 2010, Android devices represent 22% of the smartphone market in the
    United States ([Nielsen Wire, n.d.](#BIB9)) and are growing quickly. It is widely
    accepted that Android will surpass the iPhone and perhaps will ultimately be the
    most popular smartphone platform.
  prefs: []
  type: TYPE_NORMAL
- en: Tablet
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Even though tablet computers have been around for decades, it appears that the
    confluence of hardware, software, mobile networks, and applications may finally
    yield a viable market. There are a number of Android tablets on the market. However,
    the most recent and widely publicized device is the Samsung Galaxy Tab™. The 7-inch
    device has essentially all the components of an Android smartphone but in a larger
    form factor. Although tablets may support cellular data connections (as the Galaxy
    Tab does), they are typically limited to data and Short Message Service/MMS and
    do not support cellular voice calls. However, with the convergence of voice and
    data, we expect tablet devices to support Voice over Internet Protocol phone and
    video calls soon.
  prefs: []
  type: TYPE_NORMAL
- en: Netbook
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Netbooks are highly portable laptops with low power consumption and are a good
    candidate for Android. It is important to note that Android is different from
    another Google project called Chromium OS, which “is an open-source project that
    aims to build an OS that provides a fast, simple, and more secure computing experience
    for people who spend most of their time on the web” ([Chromium OS, n.d.](#BIB3)).
    Android was developed first and is far more mature than Chromium OS.
  prefs: []
  type: TYPE_NORMAL
- en: A number of Android netbooks that are now available share common characteristics
    with tablets, except netbooks have a full hardware keyboard and generally a larger
    hinged screen. Often, the primary data storage medium for netbooks is NAND flash.
    However, there is no technical reason why a more traditional hard drive could
    not be used.
  prefs: []
  type: TYPE_NORMAL
- en: Google TV
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Google, like many companies in the past, is trying to bridge the gap between
    viewing broadcast television and Internet content. The devices span from full
    television sets with Android built in, to set-top boxes that connect to existing
    televisions. But the key is leveraging Android as the base OS, integrating the
    Internet and television shows, and providing a framework for developers to create
    new applications specific for the new medium.
  prefs: []
  type: TYPE_NORMAL
- en: Vehicles (In-board)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An area that holds exciting possibilities is the integration of Android devices
    into automobiles, typically as part of the navigation/heads-up display or entertainment
    system. To date, such systems are specific to each vehicle manufacturer, which
    has resulted in systems that vary greatly in features, stability, and effectiveness.
    If manufacturers integrated the full functionality of the ever-evolving Android
    OS, it would allow them to focus on the user experience instead of the fundamental
    building blocks. Users would find consistency between different vehicles and with
    the Android devices. And developers could target applications specific to the
    needs of vehicles and have a wider distribution market. Finally, there may be
    a host of additional interested players, such as insurance agencies, attorneys,
    research organizations, forensic analysts, and more, who could analyze information
    from these systems in many ways.
  prefs: []
  type: TYPE_NORMAL
- en: The first car in production running Android is the Roewe 350 developed and distributed
    in China by Shanghai Automotive Industry Corporation. In addition, many US-based
    car makers have announced support for Android ranging from connectivity with smartphones
    through full integration of the Android OS into their vehicles.
  prefs: []
  type: TYPE_NORMAL
- en: Global Positioning System
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As mentioned previously, most Android devices have GPS built into their hardware.
    When GPS first became available to consumers, the manufacturers created custom
    OSs to manage their devices. Although most still leverage their custom system,
    several have moved to the Android OS. As such, forensic analysts might encounter
    dedicated GPS devices that run Android.
  prefs: []
  type: TYPE_NORMAL
- en: Other Devices
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are a growing number of new Android devices that will be hopelessly out-of-date
    as soon as they are mentioned. Android is just too good of a deal for manufacturers
    to pass up. The OS is free, mature, and allows for proprietary development. It
    also provides a mechanism for application development, whether internal or through
    third parties. So many manufacturers are foregoing the expensive OS development,
    maintenance, and support and instead building on top of Android. Here are some
    examples of additional Android device types:'
  prefs: []
  type: TYPE_NORMAL
- en: • Home appliances such as washing machines and microwaves
  prefs: []
  type: TYPE_NORMAL
- en: • E-readers such as Barnes and Noble’s Nook
  prefs: []
  type: TYPE_NORMAL
- en: • Media players
  prefs: []
  type: TYPE_NORMAL
- en: • Office equipment such as copying machines
  prefs: []
  type: TYPE_NORMAL
- en: • Home phones, audio and video (e.g., photo frames) devices
  prefs: []
  type: TYPE_NORMAL
- en: • Dedicated gaming devices
  prefs: []
  type: TYPE_NORMAL
- en: • Printers
  prefs: []
  type: TYPE_NORMAL
- en: As you can tell, there are many ways in which manufacturers will leverage Android
    that will certainly keep the forensic analyst’s job interesting (as if it was
    not already).
  prefs: []
  type: TYPE_NORMAL
- en: ROM and boot loaders
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Android devices, like any other computer, have a fairly standard boot process
    which allows the device to load the needed firmware, OS, and user data into memory
    to support full operation. Although the boot process itself is well defined, the
    firmware and ROM varies by manufacturer and by device. The goal of this section
    is to provide a high-level overview of the Android boot process, as techniques
    addressed later in this book will interact with the device at various levels.
    This overview is intended to be a high level because an in-depth description of
    the Android or Linux boot process could easily require an entire book on its own.
  prefs: []
  type: TYPE_NORMAL
- en: 'Much of the information in this section is based on a post titled “The Android
    boot process from power on” by Mattias Björnheden of the Android Competence Center
    at Enea ([Björnheden, n.d.](#BIB2)). In the post, Mattias identifies seven key
    steps to the Android boot process:'
  prefs: []
  type: TYPE_NORMAL
- en: 1. Power on and on-chip boot ROM code execution
  prefs: []
  type: TYPE_NORMAL
- en: 2. The boot loader
  prefs: []
  type: TYPE_NORMAL
- en: 3. The Linux kernel
  prefs: []
  type: TYPE_NORMAL
- en: 4. The init process
  prefs: []
  type: TYPE_NORMAL
- en: 5. Zygote and Dalvik
  prefs: []
  type: TYPE_NORMAL
- en: 6. The system server
  prefs: []
  type: TYPE_NORMAL
- en: 7. Boot complete
  prefs: []
  type: TYPE_NORMAL
- en: We will examine each of these steps in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Power On and On-chip Boot ROM Code Execution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When an Android device is first powered on, a special boot ROM code paired with
    the CPU is executed to (1) initialize the device hardware and (2) locate the boot
    media. The ROM code is specific to the CPU the device is using. This step in the
    boot process is similar to the basic input-output system used to boot computers.
  prefs: []
  type: TYPE_NORMAL
- en: For example, a CPU popular with the hardware hacking community is the Texas
    Instrument OMAP3530 ARM-compatible CPU that has a 3444-page *Technical Reference
    Manual* available publicly ([Public Version of OMAP35xx, 2010](#BIB10)). Although
    reading the technical manual is not for everyone, it provides enormous detail
    and insight into how the CPU initializes and loads an OS. On page 3373, the manual
    provides a flowchart detailing the overall booting sequence. The ROM code, which
    starts the entire process, is hard coded at address 0x00014000, so that when power
    is applied to the device, the CPU knows exactly where to locate the boot ROM to
    start the boot sequence.
  prefs: []
  type: TYPE_NORMAL
- en: Once the device hardware is initialized, the ROM code scans until it finds the
    boot media (which Android devices store on the NAND flash) and copies the initial
    boot loader to internal RAM. Then execution jumps from the boot ROM to the freshly
    loaded code in RAM as shown in [Fig. 2.2](#F0015).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100020f02-02-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 2.2 Power on and on-chip boot ROM code.
  prefs: []
  type: TYPE_NORMAL
- en: Boot Loader (Initial Program Load/Second Program Loader)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The boot loader, now copied from the boot media, is executed in internal RAM.
    This step is similar to the boot loader found when booting computers such as Windows,
    Mac, and Linux. A typical computer boot loader, such as GRUB for Linux, allows
    the user to select which OS they want to boot and loads it accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: 'For an Android device, the boot loader has two distinct stages: the initial
    program load (IPL) and the second program loader (SPL). The IPL is responsible
    for detecting and setting up external RAM, an essential component needed to boot
    and operate the device. Once external RAM is prepared, the IPL copies the SPL
    into RAM and then transfers execution to the SPL.'
  prefs: []
  type: TYPE_NORMAL
- en: The SPL is responsible for not only loading the Android OS but also providing
    access to alternative boot modes such as fastboot, recovery, or other modes designed
    to update and debug or service the device. The SPL is generally provided by the
    manufacturer. However, the Android community actively creates their own SPLs (and
    other custom images) that enable additional features and functionality. In a typical
    boot scenario, the SPL will initialize hardware components such as the clock,
    console, display, keyboard, and baseband modem as well as file systems, virtual
    memory, and other features required to operate the device.
  prefs: []
  type: TYPE_NORMAL
- en: The SPL then locates the Linux kernel on the boot media, copies it to RAM, loads
    boot parameters, and finally transfers execution to the kernel. [Figure 2.3](#F0020)
    illustrates this process.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100020f02-03-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 2.3 Boot loader.
  prefs: []
  type: TYPE_NORMAL
- en: Linux Kernel
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There have been volumes written on the Linux kernel and much of it is available
    online. For this book, we simply acknowledge that the Linux kernel is now controlling
    the device. After setting up additional features on the device, the root file
    system is read from the NAND flash, which will provide access to system and user
    data shown in [Fig. 2.4](#F0025).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100020f02-04-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 2.4 Linux kernel.
  prefs: []
  type: TYPE_NORMAL
- en: The Init Process
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once the kernel has access to the system partition, it can process the init
    scripts that start key system and user processes. This is similar to the /etc/init.d
    scripts found on traditional Linux devices. For Android, the init.rc is typically
    located on the root file system and provides the kernel with the details on how
    to start core services.
  prefs: []
  type: TYPE_NORMAL
- en: 'On an HTC Incredible running Android 2.2, the init.rc and init.inc.rc files
    contain over 650 lines and provide substantial insight into the device setup.
    The selected portions of the /init.rc file are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100020u02-01a-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![image](img/F100020u02-01b-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'From a forensic standpoint, the HTC Incredible changes how the browser stores
    cache after the boot process is complete. The contents of /bootcomplete.inc.rc
    are quite telling:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100020u02-02-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, once the device has completed the boot process, the browser
    cache is moved from the user data partition stored on the NAND flash into a temporary
    RAM disk (tmpfs) located at /app-cache. This means that when the device is powered
    down, any data written to /app-cache will be lost as shown in [Fig. 2.5](#F0030).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100020f02-05-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 2.5 Init process.
  prefs: []
  type: TYPE_NORMAL
- en: In summary, the init.rc is a fundamental step in the setup of the Android device
    and can be carefully studied to understand how a particular Android device is
    configured and operates.
  prefs: []
  type: TYPE_NORMAL
- en: Zygote and Dalvik
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In [Chapter 3](CHP003.html), we will cover the specifics of the individual virtual
    machine each user application is provided as a runtime sandbox. The Dalvik virtual
    machine is the technology Google selected to create this application sandbox.
    At startup, the Zygote sequence essentially sets up the Java runtime environment
    and registers a socket with the system; hence, new applications that need to initialize
    can request a new Dalvik virtual machine. Without the Zygote service, the Android
    kernel could run. However, no applications would operate including built-in applications
    such as the phone, browser, and other core features as illustrated in [Fig. 2.6](#F0035).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100020f02-06-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 2.6 Zygote and Dalvik.
  prefs: []
  type: TYPE_NORMAL
- en: System Server
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The core features of the device mentioned in the previous section are started
    by the system server. Once the Java runtime is set up and the Zygote process is
    listening, the system server is started. This runs core features such as telephony,
    network, and other fundamental components that the device and other applications
    rely upon. [Figure 2.7](#F0040) illustrates how the system server runs.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100020f02-07-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 2.7 System server.
  prefs: []
  type: TYPE_NORMAL
- en: The system finally sends a standard broadcast action called ACTION_BOOT_COMPLETED,
    which alerts dependent processes that the boot process is complete. The Android
    system is now fully operational and is ready to interact with the user.
  prefs: []
  type: TYPE_NORMAL
- en: Manufacturers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Google’s Android strategy has spawned a diverse group of Android device manufacturers.
    On the Android Developer web site, a list of USB Vendor IDs is maintained and
    currently tracks 15 manufacturers ([Using Hardware Devices, n.d.](#BIB11)). The
    list includes the following:'
  prefs: []
  type: TYPE_NORMAL
- en: • Acer
  prefs: []
  type: TYPE_NORMAL
- en: • Dell
  prefs: []
  type: TYPE_NORMAL
- en: • Foxconn
  prefs: []
  type: TYPE_NORMAL
- en: • Garmin-Asus
  prefs: []
  type: TYPE_NORMAL
- en: • HTC
  prefs: []
  type: TYPE_NORMAL
- en: • Huawei
  prefs: []
  type: TYPE_NORMAL
- en: • Kyocera
  prefs: []
  type: TYPE_NORMAL
- en: • LG
  prefs: []
  type: TYPE_NORMAL
- en: • Motorola
  prefs: []
  type: TYPE_NORMAL
- en: • Nvidia
  prefs: []
  type: TYPE_NORMAL
- en: • Pantech
  prefs: []
  type: TYPE_NORMAL
- en: • Samsung
  prefs: []
  type: TYPE_NORMAL
- en: • Sharp
  prefs: []
  type: TYPE_NORMAL
- en: • Sharp
  prefs: []
  type: TYPE_NORMAL
- en: • ZTE
  prefs: []
  type: TYPE_NORMAL
- en: However, once you factor in manufacturers not listed above and devices in the
    planning phase, there are over 50 different manufacturers of Android devices.
  prefs: []
  type: TYPE_NORMAL
- en: This, of course, presents a unique challenge for forensic investigators and
    corporate security managers alike. The sheer volume of device manufacturers, device
    types, and devices results in a complicated array of policies, procedures, techniques,
    and even USB cables.
  prefs: []
  type: TYPE_NORMAL
- en: Android updates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Android’s update models are decentralized, device specific, and are the responsibility
    of the carrier or device manufacturer, not Google. Although the Open Handset Alliance,
    largely influenced by Google, is responsible for maintaining the core Android
    OS, they do not exercise control over specific devices. This decentralized approach
    impacts the forensic and security procedures for devices in several ways.
  prefs: []
  type: TYPE_NORMAL
- en: First, an analyst is never certain what version of Android a device will have
    installed. This is in part driven by corporations’ quest for the highest possible
    profit margins. Notably in the United States, if a consumer purchases an Android
    device with a two-year contract, the carrier has essentially locked the consumer
    in, because the early termination fees are ever-escalating. As the user is unlikely
    to upgrade their service or purchase a new phone, they represent a fixed amount
    of revenue for the carrier. The engineering, development, deployment, and support
    costs of upgrading an existing Android device are quite steep. Therefore, the
    carriers can either invest in new Android devices, which generate enormous interest
    and presumably sales, or maintain an existing device, which brings in very little,
    if any, additional revenue. More often than not, consumers using older Android
    phones will remain on older and less functional and less secure versions of Android.
    This is an issue Google has acknowledged and has stated that they are working
    to address.
  prefs: []
  type: TYPE_NORMAL
- en: Second, both securing and acquiring a forensic image of an Android device vary
    greatly between Android versions and device types. For example, the technique
    an analyst would leverage for an HTC Dream 100 (T-Mobile G1) running Android 1.5
    with kernel 2.6.30.4 or earlier is vastly different than the same device running
    Android 1.6 or a kernel greater than 2.6.30.4\. As you can imagine, with more
    than 50 manufacturers, over 300 Android devices, four major releases and hundreds
    of minor releases, the possible combinations are vast.
  prefs: []
  type: TYPE_NORMAL
- en: Third, the hardware, drivers, and software used to connect to different Android
    devices can vary. The Android software development kit (SDK), discussed in [Chapter
    3](CHP003.html), does provide some consistency. However, each manufacturer may
    have their own set of specific drivers and software. For example, if connecting
    a Samsung Galaxy S to a computer running Windows, you need to first install specific
    software provided by Samsung. However, many other devices have standard USB drivers
    provided by Google via their SDK.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, each manufacturer has their own boot process including the hardware,
    boot loaders, and ROM firmware. In [Chapter 6](CHP006.html), we will explore some
    techniques for exploiting the boot process on devices by various manufacturers.
  prefs: []
  type: TYPE_NORMAL
- en: Custom User Interfaces
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Portions of Android are licensed under the Apache 2.0 open source instead of
    the full GPLv2 open source license. The Apache 2.0 license allows manufacturers
    and developers the ability to customize certain parts of the Android system, yet
    relieves them of the obligation to return the source code back to the community.
    The Apache 2.0 license primarily covers specific drivers for the device where
    the manufacturer’s intellectual property could be compromised and in the area
    of user interface customization.
  prefs: []
  type: TYPE_NORMAL
- en: By allowing proprietary user interfaces, Google has allowed the manufacturers
    to tailor a key area to the intended audience and differentiate their Android
    devices from their competitors. For instance, one Android device may target the
    teen market and focus on text messaging and social applications, whereas a different
    device may be primarily targeted to business users. Fundamentally, the devices
    operate quite similarly. However, the user interface customizations (as well as
    hardware design implementation) create a unique experience. [Table 2.1](#T0010)
    describes the custom user interfaces by manufacturers.
  prefs: []
  type: TYPE_NORMAL
- en: Table 2.1 Custom Android User Interfaces
  prefs: []
  type: TYPE_NORMAL
- en: '| Manufacturer | Custom User Interface(s) |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Motorola | Motoblur |'
  prefs: []
  type: TYPE_TB
- en: '| HTC | Sense |'
  prefs: []
  type: TYPE_TB
- en: '| Samsung | TouchWiz |'
  prefs: []
  type: TYPE_TB
- en: '| Sony Ericsson | Rachael, UX, Nexus |'
  prefs: []
  type: TYPE_TB
- en: '| Acer | Touch 3D |'
  prefs: []
  type: TYPE_TB
- en: '| Dell | Stage |'
  prefs: []
  type: TYPE_TB
- en: '| Viewsonic | TapnTap |'
  prefs: []
  type: TYPE_TB
- en: Aftermarket Android Devices
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As the Android OS is an open source, custom builds have been created, which
    will run on devices originally released to the market with other OSs. In one infamous
    example, versions of Android exist which can be installed and run on the iPhone
    ([Linux on the iPhone, n.d.](#BIB6)). It is certainly a lot of fun to watch the
    Apple fanboys react when such a feat has been accomplished. More practically,
    Android has been ported to many HTC phones that originally shipped with Windows
    Mobile. And there are many more examples involving devices from companies such
    as Nokia and even devices in categories other than smartphones.
  prefs: []
  type: TYPE_NORMAL
- en: Although it may not happen too often, it is important to consider the possibility
    that the Windows phone (or iPhone) you need to forensically analyze may indeed
    be running Android.
  prefs: []
  type: TYPE_NORMAL
- en: Specific devices
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following devices are used throughout this book, and a brief overview of
    each device is presented here for reference. Several of these devices were some
    of the first commercially available Android smartphones and are well understood.
    They can be purchased at a fairly reasonable price point and may be a great device
    to populate and experiment on following the examples throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: T-Mobile G1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The T-Mobile G1 shown in [Fig. 2.8](#F0045) was manufactured by HTC and released
    to the US market by T-Mobile in October 2008\. Like many first-generation devices,
    there were usability issues with the phone. However, it sold over one million
    units ([Krazit, n.d.](#BIB5)) in the first six months and serves as a great reference
    phone.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100020f02-08-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 2.8 T-Mobile G1 (DREA100).
  prefs: []
  type: TYPE_NORMAL
- en: 'Device info:'
  prefs: []
  type: TYPE_NORMAL
- en: '• Manufacturer: HTC'
  prefs: []
  type: TYPE_NORMAL
- en: '• Model: G1 (aka: HTC Dream 100)'
  prefs: []
  type: TYPE_NORMAL
- en: '• Carrier(s): T-Mobile'
  prefs: []
  type: TYPE_NORMAL
- en: '• Release date: October 2008'
  prefs: []
  type: TYPE_NORMAL
- en: Motorola Droid
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Motorola Droid, shown in [Fig. 2.9](#F0050), was manufactured by Motorola
    and released to the US market by Verizon in November 2009\. In the first 74 days,
    1.05 million Droid smartphones were sold, making it more popular than the original
    iPhone release in June 2007 ([Day 74 Sales, n.d.](#BIB4)). The Droid is an excellent
    reference phone, and if you are contemplating the purchase of a device for testing,
    you should strongly consider this device.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100020f02-09-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 2.9 Motorola Droid (A855).
  prefs: []
  type: TYPE_NORMAL
- en: 'Device info:'
  prefs: []
  type: TYPE_NORMAL
- en: '• Manufacturer: Motorola Mobile Devices'
  prefs: []
  type: TYPE_NORMAL
- en: '• Model: A855'
  prefs: []
  type: TYPE_NORMAL
- en: '• Carrier(s): Verizon Wireless'
  prefs: []
  type: TYPE_NORMAL
- en: '• Release date: November 2009'
  prefs: []
  type: TYPE_NORMAL
- en: HTC Incredible
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The HTC Incredible, pictured in [Fig. 2.10](#F0055), was released on the Verizon
    network and is also extremely popular in the United States. The device is used
    extensively throughout this book as a reference phone.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100020f02-10-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 2.10 HTC Incredible.
  prefs: []
  type: TYPE_NORMAL
- en: 'Device info:'
  prefs: []
  type: TYPE_NORMAL
- en: '• Manufacturer: HTC'
  prefs: []
  type: TYPE_NORMAL
- en: '• Model: ADR6300'
  prefs: []
  type: TYPE_NORMAL
- en: '• Carrier(s): Verizon Wireless'
  prefs: []
  type: TYPE_NORMAL
- en: '• Release date: April 2010'
  prefs: []
  type: TYPE_NORMAL
- en: Google Nexus One
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As described in [Chapter 1](CHP001.html), Google released their own smartphone,
    the Nexus One (N1), in January 2010, shown in [Fig. 2.11](#F0060). The N1 was
    developed by HTC and, by all accounts, was an ideal model of how manufacturers
    should develop their phone. The processor was extremely fast (1 GHz), it was running
    the latest version of Android, and it had innovations such as three microphones
    that survey background noise and blend your voice to create the most clear conversation
    possible.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100020f02-11-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 2.11 Google Nexus One (N1).
  prefs: []
  type: TYPE_NORMAL
- en: 'Device info:'
  prefs: []
  type: TYPE_NORMAL
- en: '• Manufacturer: HTC'
  prefs: []
  type: TYPE_NORMAL
- en: '• Model: HTC Passion'
  prefs: []
  type: TYPE_NORMAL
- en: '• Carrier(s): T-Mobile, Verizon, Vodafone'
  prefs: []
  type: TYPE_NORMAL
- en: '• Release date: January 2010'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although device components vary, there are several core components common to
    most devices. A basic understanding of these components, as well as an understanding
    of the various device types, is sufficient for forensic analysts in many cases.
    However, it is apparent that there are many other diverse factors that should
    be considered in an investigation. The high-level overview of the boot process
    provides a foundation for more in-depth discussions of the processes, which will
    be further explored. Finally, the overview of manufacturers and devices provides
    insight into all the various factors that analysts need to consider. The Android
    Market is fractured and diverse, and forensic analysts need to keep in mind that
    a “one-size-fits-all” strategy does not work when investigating Android devices.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 1\. *Android-x86—Porting Android to x86*. (n.d.). Retrieved March 9, 2011, from
    [http://www.android-x86.org/](http://www.android-x86.org/).
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Bjo¨rnheden, M. (n.d.). *Enea Android Blog: The Android boot process from
    power on*. Retrieved December 17, 2010, from [http://www.androidenea.com/2009/06/android-bootprocess-from-power-on.html](http://www.androidenea.com/2009/06/android-bootprocess-from-power-on.html).'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. *Chromium OS—The Chromium projects*. (n.d.). Retrieved December 13, 2010,
    from [http://www.chromium.org/chromium-os](http://www.chromium.org/chromium-os).
  prefs: []
  type: TYPE_NORMAL
- en: '4\. *Day 74 Sales: Apple iPhone vs. Google Nexus One vs. Motorola Droid*. (n.d.).
    The Flurry Blog—Mobile application analyticsjiPhone analyticsjAndroid analytics.
    Retrieved December 18, 2010, from [http://blog.flurry.com/bid/31410/Day-74-Sales-Apple-iPhone-vs-Google-Nexus-One-vs-Motorola-Droid](http://blog.flurry.com/bid/31410/Day-74-Sales-Apple-iPhone-vs-Google-Nexus-One-vs-Motorola-Droid).'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Krazit, T. (n.d.). *T-Mobile has sold 1 million G1 Android phones*. WirelessdCNET
    News. Technology newsdCNET News. Retrieved December 18, 2010, from [http://news.cnet.com/8301-1035_3-10226034-94.html](http://news.cnet.com/8301-1035_3-10226034-94.html).
  prefs: []
  type: TYPE_NORMAL
- en: 6\. *Linux on the iPhone*. (n.d.). Retrieved December 15, 2010, from [http://linuxoniphone.blogspot.com/](http://linuxoniphone.blogspot.com/).
  prefs: []
  type: TYPE_NORMAL
- en: 7\. *Main PagejPDAdb.net—Comprehensive database of smartphone, PDA, PDA phone,
    PNA, netbook & mobile device specifications*. (n.d.). Retrieved November 28, 2010,
    from [http://pdadb.net/index.php](http://pdadb.net/index.php).
  prefs: []
  type: TYPE_NORMAL
- en: 8\. *Mobile Memory*. (n.d.). Hynix. Retrieved March 9, 2011, from [http://www.hynix.com/products/mobile/mcp.jsp?menuNo](http://www.hynix.com/products/mobile/mcp.jsp%3FmenuNo) = 1&m = 4&s = 4.
  prefs: []
  type: TYPE_NORMAL
- en: '9\. Nielsen Wire. (n.d.). *U.S. smartphone battle heats up: Which is the “most
    desired” operating system?* Retrieved December 12, 2010, from blog.nielsen.com/nielsenwire/online_mobile/us-smartphone-battle-heats-up/.'
  prefs: []
  type: TYPE_NORMAL
- en: '10\. Public Version of OMAP35xx. (2010). *Technical reference manual—Version
    M (SPRUF98M)* Houston, TX: Texas Instruments Incorporated. Retrieved December
    17, 2010, from [http://focus.ti.com/docs/prod/folders/print/omap3530.html](http://focus.ti.com/docs/prod/folders/print/omap3530.html).'
  prefs: []
  type: TYPE_NORMAL
- en: 11\. Using hardware devices. (n.d.). *Android developers*. Retrieved March 9,
    2011, from [http://developer.android.com/guide/developing/device.html](http://developer.android.com/guide/developing/device.html).
  prefs: []
  type: TYPE_NORMAL
