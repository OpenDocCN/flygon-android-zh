- en: Chapter 7. Tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter we've learned about useful services that Google provides
    which can be used by developers to improve their applications. Now, we will learn
    about tools available in Android Studio that make our life easier as developers.
    Have you wondered how to manage the Android platforms? Do you want to have your
    project clearly documented? Are you working as a group of developers and need
    a version control manager integrated with Android Studio?
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter shows the most important additional tools provided in Android
    Studio: Android SDK tools, Javadoc, and version control integration. First, we
    will learn about the Software Development Kit Manager available in Android Studio
    from which we''ll be able to examine, update, and install different components
    for our project. Next, we will review the Android Virtual Device Manager, where
    we can edit the virtual devices in which we will be testing our project. We will
    also learn about how to have a complete documentation using the Javadoc tool,
    and how to have version control using the systems available in Android Studio.'
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the topics we''ll be covering in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: SDK Manager
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AVD Manager
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Javadoc
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Version control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Software Development Kit Manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Software Development Kit (SDK) Manager** is an Android tool integrated
    in Android Studio to control our Android SDK installation. From this tool we can
    examine the Android platforms installed in our system, update them, install new
    platforms, or install some other components such as Google Play Services or the
    Android Support Library.
  prefs: []
  type: TYPE_NORMAL
- en: To open the SDK Manager from Android Studio, navigate to the menu **Tools**
    | **Android** | **SDK Manager**. You can also click on the shortcut from the toolbar.
    On the top of the manager the SDK path that was configured in Android Studio is
    displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The SDK Manager displays the list of the available packages with the following
    properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Name**: Name of the package or the container that aggregates some related
    packages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**API**: API number in which the package was added.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rev**: Number of the package revision or version.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Status**: Status of the package regarding your system. The status can be
    **Not installed**, **Installed**, **Update available**, **Not compatible**, or
    **Obsolete**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The packages can be filtered by their state using the checkboxes under the list
    and they can be sorted by the API level or by the repository they are downloaded
    to. These options are also accessible from the top menu **Packages**.
  prefs: []
  type: TYPE_NORMAL
- en: From the menu **Tools** | **Manage Add-on Sites** we can examine the list of
    the official sites that provide the add-ons and extra packages. In the **User
    Defined Sites** menu we can add our custom external sites.
  prefs: []
  type: TYPE_NORMAL
- en: Next to the name of the packages there is a checkbox to select the packages
    we want to install, update, or delete. As shown in the following screenshot, the
    packages that are installed in our system but have updates available are checked
    by default. If there is a new Android platform version that is not installed,
    its packages will also be checked.
  prefs: []
  type: TYPE_NORMAL
- en: '![Software Development Kit Manager](img/5273OS_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The total number of selected packages to be installed or updated is indicated
    in the text of the button on the bottom of the dialog. The button under it indicates
    the total number of selected packages to be deleted.
  prefs: []
  type: TYPE_NORMAL
- en: Check the packages that need to be updated, check the last Android platform
    if you do not have it installed, and check the minimum platform supported by our
    application, Android 2.3.3 (API 10), to be able to test our application in a virtual
    device using this version. Click on the **Install** button.
  prefs: []
  type: TYPE_NORMAL
- en: In the next dialog, we have to accept the package licenses. Check the **Accept
    License** radio button and click on the **Install** button. The installation or
    updating of the packages will start showing its progress. Firstly, the manager
    downloads the packages, then unzips them, and finally installs them.
  prefs: []
  type: TYPE_NORMAL
- en: Remember to check the SDK Manager from time to time to check for updates.
  prefs: []
  type: TYPE_NORMAL
- en: Android Virtual Device Manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Android Virtual Device Manager** (**AVD Manager**) is an Android tool
    integrated in Android Studio to manage the Android virtual devices that will be
    executed in the Android emulator.
  prefs: []
  type: TYPE_NORMAL
- en: 'To open the AVD Manager from Android Studio, navigate to the menu **Tools**
    | **Android** | **AVD Manager**. You can also click on the shortcut from the toolbar.
    The AVD Manager displays the list of the existing virtual devices in the default
    tab **Android Virtual Devices**. Since we have not created any virtual device,
    initially the list should be empty. To create our first virtual device, click
    on the **New** button to open the configuration dialog:'
  prefs: []
  type: TYPE_NORMAL
- en: '**AVD Name**: Name of the virtual device.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Device**: Select one of the available device configurations. These configurations
    are the ones we tested in the layout editor preview. Select the Nexus 4 device
    to load its parameters in the dialog.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Target**: Select the device Android platform. We have to create one virtual
    device with the minimum platform supported by our application and another virtual
    device with the target platform of our application. Both of these platforms were
    configured when we created the project. For this first virtual device, select
    the target platform, Android 4.2.2 (API 17).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CPU/ABI**: Select the device architecture. The value of this field is set
    when we select the target platform. Each platform has its architecture, so if
    we do not have it installed, the following message will be shown: **No system
    images installed for this target**. To solve this, open the SDK Manager and search
    for one of the architectures of the target platform, ARM EABI v7a System Image
    or Intel x86 Atom System Image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Keyboard**: Select if a hardware keyboard is displayed in the emulator. Check
    it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Skin**: Select if additional hardware controls are displayed in the emulator.
    Check it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Front Camera**: Select if the emulator has a front camera. The camera can
    be emulated or can be real by the use of a webcam from the computer. Select **None**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Back Camera**: Select if the emulator has a back camera. Select **None**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Memory Options**: Select the memory parameters of the virtual device. Keep
    the default values, unless a warning message is shown; in this case, follow the
    instructions of the message. For example, select 256 for the **RAM** memory and
    64 for the **VM Heap**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Internal Storage**: Select the virtual device storage size, for example:
    200 MiB.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SD Card**: Select the size of the SD card or select a file to behave as the
    SD card. This parameter is optional.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Emulation Options**: The **Snapshot** option saves the state of the emulator
    in order to load faster the next time. Check it. The **Use Host GPU** option tries
    to accelerate the GPU hardware to run the emulator faster.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Give the virtual device a meaningful name to easily recognize it, like `AVD_nexus4_api17`.
    Click on the **OK** button.
  prefs: []
  type: TYPE_NORMAL
- en: 'The new virtual device is now listed in the AVD Manager with a green tick icon
    indicating that it is valid. These icons indicate the state of the virtual device:
    if it is valid, if it failed to load, or if its state is repairable. The icon
    legend is explained on the bottom of the manager window. Select the recently created
    virtual device to enable the remaining actions:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Edit**: Edit the virtual device configuration.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Delete**: Delete the virtual device.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Repair**: Option available if the virtual device failed to load but it can
    be repaired. This action tries to repair the error state of the virtual device.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Details**: Open a dialog detailing the virtual device characteristics.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Start**: Run the virtual device.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on the **Start** button to open the launch dialog. Check the options relative
    to the snapshot and click on the **Launch** button. The emulator will be opened
    as shown in the following screenshot. Wait until it is completely loaded and then
    you will be able to try it.
  prefs: []
  type: TYPE_NORMAL
- en: '![Android Virtual Device Manager](img/5273OS_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: From the AVD Manager we can also configure the device definitions. The device
    definitions are used in the layout preview and are the base of the virtual devices.
    Open the **Device Definitions** tab where the existing definitions are listed.
    We can create a new device definition using the **New Device** button, we can
    clone an existing device to create a new one easily using the **Clone** button,
    we can delete them using the **Delete** button, or we can create a virtual device
    based on the device definition using the **Create AVD** button.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **New Device** button to examine the existing configuration parameters.
    The most important parameters that define a device are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Name**: Name of the device.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Screen Size (in)**: Screen size in inches. This value determines the size
    category of the device. Type a value of `4.0` and notice how the **Size** value
    (on the right side) is **normal**. Now type a value of `7.0` and the **Size**
    field changes its value to **large**. This parameter along with the screen resolution
    also determines the density category.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Resolution (px)**: Screen resolution in pixels. This value determines the
    density category of the device. With a screen size of 4.0 inches, type a value
    of `768 x 1280` and notice how the density value is **xhdpi**. Change the screen
    size to `6.0` inches and the density value changes to **hdpi**. Now change the
    resolution to `480 x 800` and the density value is **mdpi**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sensors**: Sensors available in the device: accelerometer, GPS, gyroscope,
    or proximity sensor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**RAM**: RAM memory size of the device.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Buttons**: Indicate if the home, back, or menu buttons of the device are
    available via software or hardware.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Device States**: Check the allowed states.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a new device with a screen size of 4.7 inches, a resolution of 800 x
    1280, a RAM value of 200 MiB, software buttons enabled, and both portrait and
    landscape states enabled. Name it as `My Device`. Click on the **Create Device**
    button.
  prefs: []
  type: TYPE_NORMAL
- en: 'The AVD Manager now displays in the device list our device definition. Also,
    in Android Studio, open the main layout with the graphical editor and click on
    the list of the devices. As the next screenshot shows, our custom device definition
    appears and we can select it to preview the layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Android Virtual Device Manager](img/5273OS_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Generating Javadoc
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Javadoc is a utility to document Java code in HTML format. The Javadoc documentation
    is generated from comments and tags added to the Java classes or methods. The
    comments start with the `/**` string and end with `*/`. Inside these comments,
    some tags can be added such as `@param` to describe a method parameter, `@throws`
    to describe an exception that can be thrown by the method, or `@version` to indicate
    the version of the class or method.
  prefs: []
  type: TYPE_NORMAL
- en: The use of Javadoc is integrated in Android Studio. We can use code completion
    when typing the Javadoc comments and the documentation will appear in the pop-up
    tool tips of the code elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'To generate a complete Javadoc, we have to write the Javadoc comments about
    our classes and methods. Open the main activity of our project to add the Javadoc
    comments to the method `onAcceptClick` we created in [Chapter 5](ch05.html "Chapter 5. Creating
    User Interfaces"), *Creating User Interfaces*. Place the caret on the line before
    the method declaration, type `/**,` and press *Enter*. The Javadoc comments are
    automatically inserted containing the available information from the method declaration:
    parameters and return type. In this case, there is no return type.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first line of the documentation comments is the method description. Then,
    explain each parameter and the return type. The method should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This information about the method will now be displayed as its documentation
    in the emerging dialogs. The following screenshot shows the dialog that should
    appear over the method:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Generating Javadoc](img/5273OS_07_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To generate the Javadoc documentation, navigate on the top menu to **Tools**
    | **Generate Javadoc**. A dialog showing the Javadoc options will be opened. We
    can choose the scope, the output directory, the visibility of the included elements,
    or if we want to create a hierarchy tree, a navigation bar, and an index.
  prefs: []
  type: TYPE_NORMAL
- en: Check **Current File** as scope to generate just the documentation of our main
    activity. Select an output directory from your system. Reduce the visibility to
    public and click on the **OK** button. The Javadoc documentation in HTML format
    has been created in the output directory, the `index.html` file being the start
    point. Navigate through the documentation to open the `MainActivity` class. Notice
    that the `onCreate` method whose visibility is protected does not appear due to
    the fact that we reduced the visibility of the generated Javadoc to public elements.
  prefs: []
  type: TYPE_NORMAL
- en: Version control system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Android Studio integrates some version control systems: Git, Mercurial, or
    Subversion. To enable the version control integration navigate on the top menu
    to **VCS** | **Enable Version Control Integration** and select the type of system.
    Now some more options have been added to the **VCS** menu.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is to do the checkout from the version control system. Navigate
    to **VCS** | **Checkout from Version Control**, click on the add icon, and type
    the repository URL:'
  prefs: []
  type: TYPE_NORMAL
- en: To update the entire project navigate to the option **VCS** | **Update Project**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To commit all the changes of the project navigate to the option **VCS** | **Commit
    Changes**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To clean up the project navigate to the option **VCS** | **Cleanup Project**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The version control actions can also be applied to individual files. Click on
    any file of the project using the right mouse button and select the **Subversion**
    section. From the emerging menu we can add the file to the repository, add it
    to the ignore list, browse the changes, revert the changes, or lock it.
  prefs: []
  type: TYPE_NORMAL
- en: A simpler way to control the file versions is using the local history. Open
    the main activity file in the editor and navigate to **VCS** | **Local History**
    | **Show History**. The file history dialog will be opened. On the left side of
    the dialog, the available versions of the file are listed. Select an older version
    to compare it to the current version of the file. The differences between the
    older version and the current version are highlighted. A gray color is used to
    indicate a block of deleted code, a blue color to highlight the text that has
    changed, and a green color to indicate the new inserted text. From the top icons
    we can revert the changes and configure the whitespaces visualization. The next
    screenshot shows the comparison between two versions of our main activity. We
    can observe how the method we recently added, the `onAcceptClick` method, is highlighted
    in green.
  prefs: []
  type: TYPE_NORMAL
- en: '![Version control system](img/5273OS_07_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can also examine the local history of just a specific block of code. Close
    the dialog, select some lines of code from the editor, and navigate to **VCS**
    | **Local History** | **Show History for Selection**. The same history dialog
    will be opened, but this time it displays the versions of the selected code.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By the end of this chapter we should have the knowledge to use the Android SDK
    Manager tool to install, update, or examine available platforms for our project.
    We should be able to create a new Android Virtual Device and to edit it whenever
    it is deemed necessary. Creating a complete documentation of our project should
    no longer be a problem using Javadoc, and we should also be able to work with
    a version control system integrated in Android Studio.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter we will keep on working with Android Studio integrated features.
    In this case we will be learning about the emulation of our project and how to
    debug it. We will learn about the debugger, the console, or the LogCat tool. We
    will also learn about more advanced debugging tools such as the Dalvik Debug Monitor
    Server (DDMS). We will study in depth about this monitor server, going through
    each of its available utilities.
  prefs: []
  type: TYPE_NORMAL
