- en: Chapter 7. Tools
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章. 工具
- en: In the previous chapter we've learned about useful services that Google provides
    which can be used by developers to improve their applications. Now, we will learn
    about tools available in Android Studio that make our life easier as developers.
    Have you wondered how to manage the Android platforms? Do you want to have your
    project clearly documented? Are you working as a group of developers and need
    a version control manager integrated with Android Studio?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们了解了Google提供的实用服务，开发者可以利用这些服务来改进他们的应用程序。现在，我们将学习Android Studio中提供的工具，这些工具使我们的开发工作更加轻松。你是否想知道如何管理Android平台？你想要一个项目有清晰的文档吗？如果你作为一个开发者团队工作，并且需要与Android
    Studio集成的版本控制管理器吗？
- en: 'This chapter shows the most important additional tools provided in Android
    Studio: Android SDK tools, Javadoc, and version control integration. First, we
    will learn about the Software Development Kit Manager available in Android Studio
    from which we''ll be able to examine, update, and install different components
    for our project. Next, we will review the Android Virtual Device Manager, where
    we can edit the virtual devices in which we will be testing our project. We will
    also learn about how to have a complete documentation using the Javadoc tool,
    and how to have version control using the systems available in Android Studio.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章展示了Android Studio中提供的最重要的附加工具：Android SDK工具，Javadoc，以及版本控制集成。首先，我们将了解Android
    Studio中的软件开发工具包管理器，通过它我们可以检查、更新和安装项目所需的不同组件。接下来，我们将回顾Android虚拟设备管理器，我们可以在其中编辑将在其中测试我们项目的虚拟设备。我们还将学习如何使用Javadoc工具进行完整文档编写，以及如何使用Android
    Studio中可用的系统进行版本控制。
- en: 'These are the topics we''ll be covering in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们将在本章中讨论的主题：
- en: SDK Manager
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SDK管理器
- en: AVD Manager
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AVD管理器
- en: Javadoc
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Javadoc
- en: Version control
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 版本控制
- en: Software Development Kit Manager
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 软件开发工具包管理器
- en: The **Software Development Kit (SDK) Manager** is an Android tool integrated
    in Android Studio to control our Android SDK installation. From this tool we can
    examine the Android platforms installed in our system, update them, install new
    platforms, or install some other components such as Google Play Services or the
    Android Support Library.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**软件开发工具包（SDK）管理器**是集成在Android Studio中的一个Android工具，用于控制我们的Android SDK安装。通过这个工具，我们可以检查系统中安装的Android平台，更新它们，安装新平台，或者安装其他组件，比如Google
    Play服务或Android支持库。'
- en: To open the SDK Manager from Android Studio, navigate to the menu **Tools**
    | **Android** | **SDK Manager**. You can also click on the shortcut from the toolbar.
    On the top of the manager the SDK path that was configured in Android Studio is
    displayed.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要从Android Studio打开SDK管理器，请导航到菜单**工具** | **Android** | **SDK管理器**。你也可以从工具栏点击快捷方式。在管理器的顶部会显示在Android
    Studio中配置的SDK路径。
- en: 'The SDK Manager displays the list of the available packages with the following
    properties:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: SDK管理器会显示可用软件包的列表，包含以下属性：
- en: '**Name**: Name of the package or the container that aggregates some related
    packages.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**名称**：软件包或聚合了一些相关软件包的容器名称。'
- en: '**API**: API number in which the package was added.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**API**：软件包添加时的API编号。'
- en: '**Rev**: Number of the package revision or version.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**版本号**：软件包修订或版本号。'
- en: '**Status**: Status of the package regarding your system. The status can be
    **Not installed**, **Installed**, **Update available**, **Not compatible**, or
    **Obsolete**.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**状态**：关于你的系统，软件包的状态。状态可能是**未安装**，**已安装**，**有可用更新**，**不兼容**，或**已过时**。'
- en: The packages can be filtered by their state using the checkboxes under the list
    and they can be sorted by the API level or by the repository they are downloaded
    to. These options are also accessible from the top menu **Packages**.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过列表下方的复选框按状态过滤软件包，并且可以通过API级别或它们下载到的存储库进行排序。这些选项也可以从顶部菜单**软件包**中访问。
- en: From the menu **Tools** | **Manage Add-on Sites** we can examine the list of
    the official sites that provide the add-ons and extra packages. In the **User
    Defined Sites** menu we can add our custom external sites.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 从菜单**工具** | **管理附加站点**，我们可以查看提供附加组件和额外软件包的官方站点列表。在**用户定义站点**菜单中，我们可以添加自定义的外部站点。
- en: Next to the name of the packages there is a checkbox to select the packages
    we want to install, update, or delete. As shown in the following screenshot, the
    packages that are installed in our system but have updates available are checked
    by default. If there is a new Android platform version that is not installed,
    its packages will also be checked.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件包名称旁边有一个复选框，用于选择我们想要安装、更新或删除的软件包。如下截图所示，默认情况下会选中已安装在我们系统中但有待更新版本的软件包。如果有尚未安装的新安卓平台版本，其软件包也会被选中。
- en: '![Software Development Kit Manager](img/5273OS_07_01.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![软件开发工具包管理器](img/5273OS_07_01.jpg)'
- en: The total number of selected packages to be installed or updated is indicated
    in the text of the button on the bottom of the dialog. The button under it indicates
    the total number of selected packages to be deleted.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 对话框底部按钮的文本中指示了待安装或更新的选定软件包总数。其下方的按钮指示了待删除的选定软件包总数。
- en: Check the packages that need to be updated, check the last Android platform
    if you do not have it installed, and check the minimum platform supported by our
    application, Android 2.3.3 (API 10), to be able to test our application in a virtual
    device using this version. Click on the **Install** button.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 检查需要更新的软件包，如果您还没有安装最新的安卓平台，也请检查，并检查我们应用程序支持的最小平台，安卓2.3.3（API 10），以便能够使用这个版本在虚拟设备中测试我们的应用程序。点击**安装**按钮。
- en: In the next dialog, we have to accept the package licenses. Check the **Accept
    License** radio button and click on the **Install** button. The installation or
    updating of the packages will start showing its progress. Firstly, the manager
    downloads the packages, then unzips them, and finally installs them.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个对话框中，我们需要接受软件包许可。勾选**接受许可**单选按钮，然后点击**安装**按钮。软件包的安装或更新将开始显示其进度。首先，管理器下载软件包，然后解压，最后安装。
- en: Remember to check the SDK Manager from time to time to check for updates.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 记得时不时检查SDK管理器，以查看是否有更新。
- en: Android Virtual Device Manager
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安卓虚拟设备管理器
- en: The **Android Virtual Device Manager** (**AVD Manager**) is an Android tool
    integrated in Android Studio to manage the Android virtual devices that will be
    executed in the Android emulator.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**安卓虚拟设备管理器**（**AVD管理器**）是集成在Android Studio中的一个安卓工具，用于管理将在安卓模拟器中执行的安卓虚拟设备。'
- en: 'To open the AVD Manager from Android Studio, navigate to the menu **Tools**
    | **Android** | **AVD Manager**. You can also click on the shortcut from the toolbar.
    The AVD Manager displays the list of the existing virtual devices in the default
    tab **Android Virtual Devices**. Since we have not created any virtual device,
    initially the list should be empty. To create our first virtual device, click
    on the **New** button to open the configuration dialog:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要从Android Studio打开AVD管理器，请导航至菜单**工具** | **安卓** | **AVD管理器**。您也可以从工具栏点击快捷方式。AVD管理器在默认标签**安卓虚拟设备**中显示现有虚拟设备的列表。由于我们还没有创建任何虚拟设备，最初列表应为空。要创建我们的第一个虚拟设备，请点击**新建**按钮以打开配置对话框：
- en: '**AVD Name**: Name of the virtual device.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AVD名称**：虚拟设备的名称。'
- en: '**Device**: Select one of the available device configurations. These configurations
    are the ones we tested in the layout editor preview. Select the Nexus 4 device
    to load its parameters in the dialog.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设备**：选择一个可用的设备配置。这些配置是我们曾在布局编辑器预览中测试过的。选择Nexus 4设备，以在对话框中加载其参数。'
- en: '**Target**: Select the device Android platform. We have to create one virtual
    device with the minimum platform supported by our application and another virtual
    device with the target platform of our application. Both of these platforms were
    configured when we created the project. For this first virtual device, select
    the target platform, Android 4.2.2 (API 17).'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**目标**：选择设备的安卓平台。我们需要创建一个最小支持我们应用程序的平台虚拟设备，以及一个目标为我们应用程序平台的虚拟设备。这两个平台都是在创建项目时配置的。对于这个第一个虚拟设备，选择目标平台，安卓4.2.2（API
    17）。'
- en: '**CPU/ABI**: Select the device architecture. The value of this field is set
    when we select the target platform. Each platform has its architecture, so if
    we do not have it installed, the following message will be shown: **No system
    images installed for this target**. To solve this, open the SDK Manager and search
    for one of the architectures of the target platform, ARM EABI v7a System Image
    or Intel x86 Atom System Image.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CPU/ABI**：选择设备架构。此字段的值在我们选择目标平台时设置。每个平台都有其对应的架构，如果我们没有安装该架构，将会显示以下信息：**此目标没有安装系统镜像**。为解决这个问题，打开SDK管理器，查找目标平台的其中一个架构，如ARM
    EABI v7a系统镜像或Intel x86 Atom系统镜像。'
- en: '**Keyboard**: Select if a hardware keyboard is displayed in the emulator. Check
    it.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**键盘**：选择是否在模拟器中显示硬件键盘。勾选此项。'
- en: '**Skin**: Select if additional hardware controls are displayed in the emulator.
    Check it.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**皮肤**：选择是否在模拟器中显示额外的硬件控制。勾选此项。'
- en: '**Front Camera**: Select if the emulator has a front camera. The camera can
    be emulated or can be real by the use of a webcam from the computer. Select **None**.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**前置摄像头**：选择模拟器是否具有前置摄像头。摄像头可以模拟，也可以通过使用计算机的摄像头实现真实效果。选择**无**。'
- en: '**Back Camera**: Select if the emulator has a back camera. Select **None**.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**后置摄像头**：选择模拟器是否具有后置摄像头。选择**无**。'
- en: '**Memory Options**: Select the memory parameters of the virtual device. Keep
    the default values, unless a warning message is shown; in this case, follow the
    instructions of the message. For example, select 256 for the **RAM** memory and
    64 for the **VM Heap**.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内存选项**：选择虚拟设备的内存参数。保持默认值，除非出现警告信息；在这种情况下，按照信息的指示操作。例如，为**RAM**内存选择256，为**VM
    Heap**选择64。'
- en: '**Internal Storage**: Select the virtual device storage size, for example:
    200 MiB.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内部存储**：选择虚拟设备存储的大小，例如：200 MiB。'
- en: '**SD Card**: Select the size of the SD card or select a file to behave as the
    SD card. This parameter is optional.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SD卡**：选择SD卡的大小，或者选择一个文件作为SD卡。此参数是可选的。'
- en: '**Emulation Options**: The **Snapshot** option saves the state of the emulator
    in order to load faster the next time. Check it. The **Use Host GPU** option tries
    to accelerate the GPU hardware to run the emulator faster.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模拟选项**：**快照**选项可以保存模拟器的状态，以便下次更快地加载。勾选此项。**使用主机GPU**选项尝试加速GPU硬件，使模拟器运行得更快。'
- en: Give the virtual device a meaningful name to easily recognize it, like `AVD_nexus4_api17`.
    Click on the **OK** button.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 给虚拟设备一个有意义的名称以便容易识别，如`AVD_nexus4_api17`。点击**确定**按钮。
- en: 'The new virtual device is now listed in the AVD Manager with a green tick icon
    indicating that it is valid. These icons indicate the state of the virtual device:
    if it is valid, if it failed to load, or if its state is repairable. The icon
    legend is explained on the bottom of the manager window. Select the recently created
    virtual device to enable the remaining actions:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 新的虚拟设备现在列在AVD管理器中，带有绿色勾选图标，表示它是有效的。这些图标表示虚拟设备的状态：是否有效，是否加载失败，或者其状态是否可修复。图标图例在管理器窗口底部解释。选择最近创建的虚拟设备以启用剩余操作：
- en: '**Edit**: Edit the virtual device configuration.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编辑**：编辑虚拟设备配置。'
- en: '**Delete**: Delete the virtual device.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**删除**：删除虚拟设备。'
- en: '**Repair**: Option available if the virtual device failed to load but it can
    be repaired. This action tries to repair the error state of the virtual device.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**修复**：如果虚拟设备加载失败但可以修复，将提供此选项。此操作将尝试修复虚拟设备的错误状态。'
- en: '**Details**: Open a dialog detailing the virtual device characteristics.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**详情**：打开一个对话框，详细显示虚拟设备特性。'
- en: '**Start**: Run the virtual device.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启动**：运行虚拟设备。'
- en: Click on the **Start** button to open the launch dialog. Check the options relative
    to the snapshot and click on the **Launch** button. The emulator will be opened
    as shown in the following screenshot. Wait until it is completely loaded and then
    you will be able to try it.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**启动**按钮打开启动对话框。检查与快照相关的选项，然后点击**启动**按钮。模拟器将如下截图所示打开。等待其完全加载，然后你就可以尝试了。
- en: '![Android Virtual Device Manager](img/5273OS_07_02.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![Android Virtual Device Manager](img/5273OS_07_02.jpg)'
- en: From the AVD Manager we can also configure the device definitions. The device
    definitions are used in the layout preview and are the base of the virtual devices.
    Open the **Device Definitions** tab where the existing definitions are listed.
    We can create a new device definition using the **New Device** button, we can
    clone an existing device to create a new one easily using the **Clone** button,
    we can delete them using the **Delete** button, or we can create a virtual device
    based on the device definition using the **Create AVD** button.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 从AVD管理器中，我们还可以配置设备定义。设备定义用于布局预览，并且是虚拟设备的基础。打开**设备定义**标签页，那里列出了现有的定义。我们可以使用**新建设备**按钮创建一个新的设备定义，可以使用**克隆**按钮轻松地克隆一个现有设备来创建一个新设备，可以使用**删除**按钮删除它们，或者可以使用**创建AVD**按钮基于设备定义创建一个虚拟设备。
- en: 'Click on the **New Device** button to examine the existing configuration parameters.
    The most important parameters that define a device are:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**新建设备**按钮检查现有的配置参数。定义一个设备最重要的参数是：
- en: '**Name**: Name of the device.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**名称**: 设备的名称。'
- en: '**Screen Size (in)**: Screen size in inches. This value determines the size
    category of the device. Type a value of `4.0` and notice how the **Size** value
    (on the right side) is **normal**. Now type a value of `7.0` and the **Size**
    field changes its value to **large**. This parameter along with the screen resolution
    also determines the density category.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**屏幕尺寸（英寸）**: 屏幕尺寸以英寸为单位。这个值决定了设备的尺寸类别。输入一个值`4.0`，注意**尺寸**值（在右侧）是**正常**。现在输入一个值`7.0`，**尺寸**字段将其值更改为**大**。这个参数加上屏幕分辨率也决定了密度类别。'
- en: '**Resolution (px)**: Screen resolution in pixels. This value determines the
    density category of the device. With a screen size of 4.0 inches, type a value
    of `768 x 1280` and notice how the density value is **xhdpi**. Change the screen
    size to `6.0` inches and the density value changes to **hdpi**. Now change the
    resolution to `480 x 800` and the density value is **mdpi**.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分辨率（像素）**: 屏幕分辨率以像素为单位。这个值决定了设备的密度类别。在4.0英寸的屏幕尺寸下，输入一个值`768 x 1280`，注意密度值是**xhdpi**。将屏幕尺寸更改为`6.0`英寸，密度值更改为**hdpi**。现在将分辨率更改为`480
    x 800`，密度值是**mdpi**。'
- en: '**Sensors**: Sensors available in the device: accelerometer, GPS, gyroscope,
    or proximity sensor.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**传感器**: 设备中可用的传感器：加速度计、GPS、陀螺仪或接近传感器。'
- en: '**RAM**: RAM memory size of the device.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**RAM**: 设备的RAM内存大小。'
- en: '**Buttons**: Indicate if the home, back, or menu buttons of the device are
    available via software or hardware.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**按钮**: 指示设备的home、back或menu按钮是通过软件还是硬件提供。'
- en: '**Device States**: Check the allowed states.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设备状态**: 检查允许的状态。'
- en: Create a new device with a screen size of 4.7 inches, a resolution of 800 x
    1280, a RAM value of 200 MiB, software buttons enabled, and both portrait and
    landscape states enabled. Name it as `My Device`. Click on the **Create Device**
    button.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个屏幕尺寸为4.7英寸，分辨率为800 x 1280，RAM值为200 MiB，启用软件按钮，同时启用竖屏和横屏状态的新设备。将其命名为`My Device`。点击**创建设备**按钮。
- en: 'The AVD Manager now displays in the device list our device definition. Also,
    in Android Studio, open the main layout with the graphical editor and click on
    the list of the devices. As the next screenshot shows, our custom device definition
    appears and we can select it to preview the layout:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: AVD管理器现在在设备列表中显示我们的设备定义。在Android Studio中，使用图形编辑器打开主布局，并点击设备列表。如下截图所示，我们的自定义设备定义出现，我们可以选择它来预览布局：
- en: '![Android Virtual Device Manager](img/5273OS_07_03.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![Android虚拟设备管理器](img/5273OS_07_03.jpg)'
- en: Generating Javadoc
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成Javadoc
- en: Javadoc is a utility to document Java code in HTML format. The Javadoc documentation
    is generated from comments and tags added to the Java classes or methods. The
    comments start with the `/**` string and end with `*/`. Inside these comments,
    some tags can be added such as `@param` to describe a method parameter, `@throws`
    to describe an exception that can be thrown by the method, or `@version` to indicate
    the version of the class or method.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Javadoc是一个以HTML格式文档化Java代码的工具。Javadoc文档是从添加到Java类或方法的注释和标签生成的。注释以`/**`字符串开始，以`*/`结束。在这些注释中，可以添加一些标签，如`@param`描述方法参数，`@throws`描述方法可能抛出的异常，或`@version`指示类或方法的版本。
- en: The use of Javadoc is integrated in Android Studio. We can use code completion
    when typing the Javadoc comments and the documentation will appear in the pop-up
    tool tips of the code elements.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio集成了Javadoc的使用。在输入Javadoc注释时，我们可以使用代码补全功能，并且文档将显示在代码元素的弹出工具提示中。
- en: 'To generate a complete Javadoc, we have to write the Javadoc comments about
    our classes and methods. Open the main activity of our project to add the Javadoc
    comments to the method `onAcceptClick` we created in [Chapter 5](ch05.html "Chapter 5. Creating
    User Interfaces"), *Creating User Interfaces*. Place the caret on the line before
    the method declaration, type `/**,` and press *Enter*. The Javadoc comments are
    automatically inserted containing the available information from the method declaration:
    parameters and return type. In this case, there is no return type.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 为了生成完整的 Javadoc，我们必须编写关于我们的类和方法的 Javadoc 注释。打开项目的主活动，为我们在[第5章](ch05.html "第5章.
    创建用户界面")，*创建用户界面*中创建的方法 `onAcceptClick` 添加 Javadoc 注释。将光标放在方法声明前的一行，输入 `/**` 并按下
    *Enter*。Javadoc 注释会自动插入，其中包含方法声明中可用的信息：参数和返回类型。在这种情况下，没有返回类型。
- en: 'The first line of the documentation comments is the method description. Then,
    explain each parameter and the return type. The method should now look like this:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 文档注释的第一行是方法描述。然后，解释每个参数和返回类型。现在方法应如下所示：
- en: '[PRE0]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This information about the method will now be displayed as its documentation
    in the emerging dialogs. The following screenshot shows the dialog that should
    appear over the method:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这些关于方法的信息现在将作为其文档在弹出的对话框中显示。以下屏幕截图显示了应出现在方法上方的对话框：
- en: '![Generating Javadoc](img/5273OS_07_04.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![生成 Javadoc](img/5273OS_07_04.jpg)'
- en: To generate the Javadoc documentation, navigate on the top menu to **Tools**
    | **Generate Javadoc**. A dialog showing the Javadoc options will be opened. We
    can choose the scope, the output directory, the visibility of the included elements,
    or if we want to create a hierarchy tree, a navigation bar, and an index.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 要生成 Javadoc 文档，请在顶部菜单中选择 **工具** | **生成 Javadoc**。将打开一个显示 Javadoc 选项的对话框。我们可以选择范围、输出目录、包含元素的可见性，或者是否要创建层次树、导航栏和索引。
- en: Check **Current File** as scope to generate just the documentation of our main
    activity. Select an output directory from your system. Reduce the visibility to
    public and click on the **OK** button. The Javadoc documentation in HTML format
    has been created in the output directory, the `index.html` file being the start
    point. Navigate through the documentation to open the `MainActivity` class. Notice
    that the `onCreate` method whose visibility is protected does not appear due to
    the fact that we reduced the visibility of the generated Javadoc to public elements.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 选择 **当前文件** 作为范围以仅生成我们主活动的文档。从您的系统中选择输出目录。将可见性降低到 public 并点击 **确定** 按钮。Javadoc
    文档已以 HTML 格式在输出目录中创建，`index.html` 文件是起点。浏览文档以打开 `MainActivity` 类。注意，由于我们将生成的 Javadoc
    的可见性降低到 public 元素，所以不显示可见性为 protected 的 `onCreate` 方法。
- en: Version control system
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 版本控制系统
- en: 'Android Studio integrates some version control systems: Git, Mercurial, or
    Subversion. To enable the version control integration navigate on the top menu
    to **VCS** | **Enable Version Control Integration** and select the type of system.
    Now some more options have been added to the **VCS** menu.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio 集成了几种版本控制系统：Git、Mercurial 或 Subversion。要启用版本控制集成，请在顶部菜单中选择 **VCS**
    | **启用版本控制集成** 并选择系统类型。现在，**VCS** 菜单中添加了一些更多选项。
- en: 'The first step is to do the checkout from the version control system. Navigate
    to **VCS** | **Checkout from Version Control**, click on the add icon, and type
    the repository URL:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是从版本控制系统中检出。导航到 **VCS** | **从版本控制检出**，点击添加图标，并输入仓库 URL：
- en: To update the entire project navigate to the option **VCS** | **Update Project**
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要更新整个项目，请导航到 **VCS** | **更新项目**
- en: To commit all the changes of the project navigate to the option **VCS** | **Commit
    Changes**
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要提交项目的所有更改，请导航到 **VCS** | **提交更改**
- en: To clean up the project navigate to the option **VCS** | **Cleanup Project**
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要清理项目，请导航到 **VCS** | **清理项目**
- en: The version control actions can also be applied to individual files. Click on
    any file of the project using the right mouse button and select the **Subversion**
    section. From the emerging menu we can add the file to the repository, add it
    to the ignore list, browse the changes, revert the changes, or lock it.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 版本控制操作也可以应用于单个文件。使用鼠标右键点击项目中的任何文件，并选择 **Subversion** 部分。从出现的菜单中，我们可以将文件添加到仓库，添加到忽略列表，浏览更改，恢复更改或锁定它。
- en: A simpler way to control the file versions is using the local history. Open
    the main activity file in the editor and navigate to **VCS** | **Local History**
    | **Show History**. The file history dialog will be opened. On the left side of
    the dialog, the available versions of the file are listed. Select an older version
    to compare it to the current version of the file. The differences between the
    older version and the current version are highlighted. A gray color is used to
    indicate a block of deleted code, a blue color to highlight the text that has
    changed, and a green color to indicate the new inserted text. From the top icons
    we can revert the changes and configure the whitespaces visualization. The next
    screenshot shows the comparison between two versions of our main activity. We
    can observe how the method we recently added, the `onAcceptClick` method, is highlighted
    in green.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 控制文件版本的一个更简单的方法是使用本地历史记录。在编辑器中打开主活动文件，导航到 **VCS** | **Local History** | **Show
    History**。文件历史记录对话框将被打开。在对话框的左侧列出了文件的可用版本。选择一个旧版本与当前文件版本进行比较。旧版本与当前版本之间的差异会被高亮显示。灰色用于表示删除的代码块，蓝色用于突出显示已更改的文本，绿色用于指示新插入的文本。从顶部图标我们可以恢复更改并配置空白显示。下一张截图显示了主活动的两个版本之间的比较。我们可以看到我们最近添加的方法，`onAcceptClick`方法，以绿色突出显示。
- en: '![Version control system](img/5273OS_07_05.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![版本控制系统](img/5273OS_07_05.jpg)'
- en: We can also examine the local history of just a specific block of code. Close
    the dialog, select some lines of code from the editor, and navigate to **VCS**
    | **Local History** | **Show History for Selection**. The same history dialog
    will be opened, but this time it displays the versions of the selected code.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以检查特定代码块的本地历史记录。关闭对话框，从编辑器中选择一些代码行，然后导航到 **VCS** | **Local History** | **Show
    History for Selection**。将打开相同的历史记录对话框，但这次它显示所选代码的版本。
- en: Summary
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: By the end of this chapter we should have the knowledge to use the Android SDK
    Manager tool to install, update, or examine available platforms for our project.
    We should be able to create a new Android Virtual Device and to edit it whenever
    it is deemed necessary. Creating a complete documentation of our project should
    no longer be a problem using Javadoc, and we should also be able to work with
    a version control system integrated in Android Studio.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，我们应该具备使用Android SDK Manager工具安装、更新或检查项目可用平台的知识。我们应该能够创建一个新的Android虚拟设备，并在必要时对其进行编辑。使用Javadoc，编写项目的完整文档不再是一个问题，我们还应该能够使用Android
    Studio中集成的版本控制系统。
- en: In the next chapter we will keep on working with Android Studio integrated features.
    In this case we will be learning about the emulation of our project and how to
    debug it. We will learn about the debugger, the console, or the LogCat tool. We
    will also learn about more advanced debugging tools such as the Dalvik Debug Monitor
    Server (DDMS). We will study in depth about this monitor server, going through
    each of its available utilities.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将继续使用Android Studio的集成功能。在本章中，我们将学习项目模拟和如何进行调试。我们将了解调试器、控制台或LogCat工具。我们还将学习更高级的调试工具，如Dalvik
    Debug Monitor Server（DDMS）。我们将深入研究这个监控服务器，了解其提供的每种工具。
