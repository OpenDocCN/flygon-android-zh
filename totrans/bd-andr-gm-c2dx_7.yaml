- en: Chapter 7. Creating Particle Systems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can easily simulate fire, smoke, explosions, snow, and rain by using the
    built-in particle system bundled with the Cocos2d-x framework. This chapter will
    teach you how to create the effects mentioned here and will also teach you to
    customize them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating collections of the Cocos2d-x objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding particle systems to our game
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring the particle systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating customized particle systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating collections of the Cocos2d-x objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to add a particle system to our game to simulate the explosions
    each time the player touches a bomb. In the interest of doing this, we are going
    to use the `Vector` class located in the Cocos2d-x framework to create a collection
    of all the bomb objects created in our game, so that when the player touches the
    screen, we are going to traverse this collection to verify if the player has touched
    any of the bombs.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the player touches any bomb, we are going to:'
  prefs: []
  type: TYPE_NORMAL
- en: Show an explosion at the location where the bomb sprite was
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make the bomb invisible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove the bomb from the screen by using the inherited `removeChild` method,
    and finally
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove the bomb object from the collection, so that the next time we traverse
    the vector, it is disregarded
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For this matter, we are going to add the bomb collection to our `HelloWorldScene.h`
    definition file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Be aware that we are specifying that we want to use the `Vector` class bundled
    with the `cocos2d` namespace, so that the compiler can clearly know that we are
    referring to the framework's built-in collection class and not the `Vector` class
    contained in the `std` namespace. Although it is possible to use the `Vector`
    class in the `std` namespace, the one located in the framework is optimized so
    as to be used in the Cocos2d-x object collection.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `Vector` class introduced in the Cocos2d-x 3.0 represents the object collections
    by using the C++ standards, as opposed to the deprecated `CCArray` class that
    modeled the Cocos2d-x object collections, by using the objective C container classes.
    This new class takes care of the reference counting mechanism used in Cocos2d-x
    for memory management, it also adds the functionalities that are non-existent
    in `std::vector`, such as the `random`, `contains`, and `equals` methods.
  prefs: []
  type: TYPE_NORMAL
- en: You should only use the `std::vector` instances if you need to pass them as
    a parameter to a function of a Cocos2d-x API class that is expecting the data
    type such as the `setSearchPaths` method in the `FileUtils` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let us go to the `init` method located in our `HelloWorldScene.cpp` implementation
    file, and just next to the declaration of the `_sprBomb` variable that holds a
    reference to the first bomb sprite, we are going to add this reference to our
    new `_bombs` collection as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let us go to the `addBombs` method that we have created in our previous
    chapters for adding more bombs to our game. In this method, we are going to add
    each bomb spawned in our game scene to the `_bombs` collection as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Exploding bombs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We want our bombs to explode when we touch them. To achieve this, we are going
    to create our `explodeBombs` method. In the `HelloWorldScene.h` header file, we
    are going to write the declaration as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we are going to write the method body in the `HelloWorldScene.cpp` implementation
    file; as mentioned earlier, each time the player touches the screen we can verify
    the touched location and compare it to the location of each bomb. If any intersection
    is found, then the touched bombs are going to disappear. As yet, we are not going
    to add any particle systems, we are going do that in later sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Please note that we have created another vector for the purpose of adding all
    the bombs that were touched by the user, and then they were removed from the `_bombs`
    collection in the other loop. The reason we did this instead of removing the objects
    directly from the first loop is that it would have given a runtime error. This
    is because we cannot perform concurrent modifications in a single collection,
    that is, we cannot remove an item from a collection while we are iterating over
    it. If we did that, then we would get a runtime error.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `Vector` class was introduced in the Cocos2d-x 3.0\. It has replaced the
    `CCArray` class previously used in Cocos2d-x 2.x. We can iterate over the `Vector`
    instances by using C++11 for each feature; therefore, the `CCARRAY_FOREACH` macro
    that we have used in Cocos2d-x 2.x for iterating over the Cocos2d-x objects is
    no longer needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we are going to add a callback to our touch listener on the `onTouchBegan`
    property by making the following changes in our `initTouch` method located in
    our `HelloWorldScene.cpp` implementation file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: And that is it, now the bombs will disappear whenever you touch them. In the
    next section, we will add an explosion effect to enhance the appearance of our
    game.
  prefs: []
  type: TYPE_NORMAL
- en: Adding particle systems to our game
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cocos2d-x has built-in classes that allow you to render the most common visual
    effects such as explosions, fire, fireworks, smoke, and rain, among others, by
    displaying a large number of small graphic objects referred to as particles.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is very easy to implement. Let us add a default explosion effect, by simply
    adding the following lines to our `explodeBombs` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![Adding particle systems to our game](img/B04193_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can try the other particle systems embedded in the engine by changing the
    name of the particle class in the first highlighted line of the preceding code
    listing with the following class names: `ParticleFireworks`, `ParticleFire`, `ParticleRain`,
    `ParticleSnow`, `ParticleSmoke`, `ParticleSpiral`, `ParticleMeteor`, and `ParticleGalaxy`.'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the particle systems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we created a realistic explosion by simply adding three
    lines of code. We can customize many parameters of a particle system. For instance,
    we could modify how much we would like our particle system to expand by modifying
    the life property.
  prefs: []
  type: TYPE_NORMAL
- en: We could also modify how big or how small we would want our particle system
    to be at the beginning and the size that we want it to have at the end, by setting
    the values to the `startSize` property and the `endSize` property. For example,
    if we would like to simulate the turbine of a rocket, then we could configure
    the emitter to start with a small size and to end with a big size.
  prefs: []
  type: TYPE_NORMAL
- en: We can adjust the angle to which the particle is going to move by modifying
    the angle property. You can assign random angles to your particle systems, so
    that it will look more realistic.
  prefs: []
  type: TYPE_NORMAL
- en: The particle systems can have two modes, radius and gravity. The most common
    particle systems use the gravity mode, on which we can parameterize the gravity,
    speed, radial, and tangential acceleration. This means that the particles created
    by the emitter are attracted by a force called gravity, and we can customize theirs
    horizontal and vertical components. The radial mode has the radial movement and
    rotation, so this mode of the particle systems will swirl in a spiral.
  prefs: []
  type: TYPE_NORMAL
- en: The total amount of particles can also be changed through the `totalParticles`
    property. The greater the amount of particles, the thicker the particle system
    will appear, but be aware that the amount of particles rendered also impacts the
    running performance. To give you an idea, the default explosion particle system
    has 700 total particles and the smoke effect has 200 total particles.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can modify the properties mentioned in this section by calling the method,
    set<property name> in the emitter instance. For instance, if you want to modify
    the total particles of the system, then call the `setTotalParticles` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following code listing, we will modify the total amount of particles,
    the speed, and the lifespan of the particle system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![Configuring the particle systems](img/B04193_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating customized particle systems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have tried all the particle systems that are bundled with the Cocos2d-x
    framework, but during our journey as games developers, there will be many situations
    where we will have to create our own particle systems.
  prefs: []
  type: TYPE_NORMAL
- en: There are tools which allow us to create particle systems and adjust their properties
    in a very graphical way. This allows us to create the **What You See Is What You
    Get** (**WYSIWYG**) type of particle system.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most common application for creating the particle systems, which is actually
    mentioned several times within the official Cocos2d-x documentation, is called
    Particle Designer. It is currently available only for the Mac OS, and you need
    to buy the license in order to export the particle system to a plist file. You
    can download it and try it for free from the following link: [https://71squared.com/particledesigner](https://71squared.com/particledesigner).
    The Particle Designer is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating customized particle systems](img/B04193_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can also create your particle systems in a graphical way by using the following
    web app hosted at [http://www.particle2dx.com/](http://www.particle2dx.com/) for
    free:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating customized particle systems](img/B04193_07_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can also use the V-Play particle editor, which can be downloaded and used
    for free on the Windows, Android, iOS, and Mac platforms. These tools are available
    and can be downloaded from [http://games.v-play.net/particleeditor](http://games.v-play.net/particleeditor).
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating customized particle systems](img/B04193_07_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: By using any of the previously mentioned tools, you can adjust the particle
    system properties, such as max particles, duration, lifetime, emission rate, and
    angle, and then save it in a plist file.
  prefs: []
  type: TYPE_NORMAL
- en: We have created our own particle system and exported it to a plist file. We
    are including it in the code archive bundled with the source code of this chapter.
    We have placed this plist file in a newly created folder, which is in the `Resources`
    directory named `particles`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since our plist file is not in the root of the `Resources` folder, we need
    to add the `particles` directory to the search path within the `applicationDidFinishLaunching`
    method of the `AppDelegate` class by adding the following line of code just after
    adding the `sounds` directory to the `searchPaths`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code listing shows how to display our custom particle system
    by using the `ParticleSystemQuad` class and passing as a parameter to its `create`
    static method the name of the plist file generated by using the tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: As you can see we have also added a line of code for playing an audio each time
    a bomb reaches our player sprite, so that it adds a more realistic effect. We
    have added this MP3 file to the code provided in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating customized particle systems](img/B04193_07_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Putting everything together
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: During this chapter, we have added the particle systems to our game for adding
    realistic explosions each time our player touches a bomb. To achieve this goal,
    we have modified the `HelloWorldScene.h` header file and the `HelloWorldScene.cpp`
    implementation file.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is how our `HelloWorldScene.h` header file looks, after the modifications
    made during this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, the following code listing shows how our `HelloWorldScene.cpp` implementation
    file looks after the modifications that we have made during this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Within the following method, we first verify whether or not the user has touched
    a bomb, if the user has, then an explosion particle system will be rendered at
    the location where the bomb was at the moment of the touch.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'In the following method, we have added an event listener that will be triggered
    each time the user touches the screen in order to verify whether a bomb has been
    touched:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'In the following method, we are adding the newly spawned bombs to our new `cocos2d:Vector`
    collection by using its `pushBack` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Now we are going to see how our `init` method looks after the modifications
    done in this chapter. Note that we have added the first bomb, which was created
    during the initialization phase, to our new `cocos2d:Vector _bombs` collection.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have seen how to use the particle systems to simulate realistic
    fire, explosions, rain, and snow in our game, how to customize them, and how to
    create them from scratch. We have also seen how to use the `Vector` class bundled
    with the Cocos2d-x API for creating collections of the Cocos2d-x objects.
  prefs: []
  type: TYPE_NORMAL
- en: In next chapter, we will show you how to add the Android native code to our
    game by using Java Native Interface (JNI).
  prefs: []
  type: TYPE_NORMAL
