- en: Chapter 6. Google Play Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you have become familiar with the use of components on layouts, you
    should start thinking about extra functionality. Google Play Services give you
    features to attract users using Google features such as Google Maps, Google+,
    and more. How can you easily add these features to your application? What features
    are available? What are the Android version requirements to use Google Play Services?
  prefs: []
  type: TYPE_NORMAL
- en: This chapter focuses on the creation, integration, and use of Google Play Services
    using Android Studio. We will learn about which Google services are available.
    We will also learn about the standard authorization API in order to have a safe
    way to grant and receive access tokens to Google Play Services. We will also learn
    about the limitations of these services and the benefits of using them.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the topics we''ll be covering in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Existing Google Services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding Google Play Services from the IDE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating Google Play Services in your app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding automatic updates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Google Services in your app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How Google Play Services work
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When Google previewed Google Play Services at Google I/O 2012, it said that
    the platform ([https://developers.google.com/events/io/2012/](https://developers.google.com/events/io/2012/))...
  prefs: []
  type: TYPE_NORMAL
- en: '...consists of a services component that runs on the device and a thin client
    library that you package with your app.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'This means that Google Play Services work thanks to two main components: the
    Google Play Services client library and the Google Play Services APK.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Client library**: The Google Play Services client library includes the interfaces
    to each Google Service that is used by your app. The library is included when
    you pack your app and it allows your users to authorize the app with access to
    these services using their credentials. The client library is upgraded from time
    to time by Google, adding new features and services. You may upgrade the library
    in your app through an update to your app, although it is not necessary if you
    are not including any of the new features.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Google Play Services APK**: The Google Play Services **Android Package**
    (**APK**) runs as a background service in the Android operating system. Using
    the client library, your app accesses this service, which is the one that carries
    out the actions during runtime. The APK is not guaranteed to be installed on all
    devices. In case the device does not come with it installed, the APK is available
    in the Google Play Store.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This way, Google manages to separate the runtime of its services from the implementation
    you do as a developer, so you do not need to upgrade your application every time
    Google Play Services are upgraded.
  prefs: []
  type: TYPE_NORMAL
- en: Although Google Play Services are not included in the Android platform itself,
    they are supported by most Android-based devices. Any Android device running Android
    2.2 or newer is ready to install any application that uses Google Play Services.
  prefs: []
  type: TYPE_NORMAL
- en: Services available
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Google Play Services are thought to easily add more features to attract users
    on a wide range of devices while using well-known features powered by Google.
    Using these services, you can add new revenue sources, manage the distribution
    of the app, access statistics and learn about your application''s users customs,
    and improve your application with easy to implement Google features such as maps
    or Google''s social network, Google+. The services are explained as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Games**: Using this Google Play Game Service, you can improve your game with
    a more social experience.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Location**: Integrating the location APIs, you can make your application
    location-aware.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Google Maps**: Google Maps API allows you to use the maps provided by Google
    in your application and to customize them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Google+**: Using Google+ Platform for Android, you can authenticate the user
    of your app. Once authenticated, you can also access their public profile and
    social graph.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**In-app Billing**: Selling digital content from your apps is possible using
    Google Play In-app Billing. You can use this service to sell one-time billing
    or temporal subscriptions to premium services and features.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cloud Messaging**: **Google Cloud Messaging** (**GCM**) for Android allows
    you to exchange data between the app running in an Android-based device and your
    server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Panorama**: It enables the user to see a 360-degree panorama picture.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding Google Play Services to Android Studio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first thing we need to know is what we need to add to our Android Studio.
    We have just learned that the APK is available in Google Play Store and it is
    the actual runtime of the services. We, as developers, only need this package
    to be available in our testing device while debugging our application. What we
    need to add to Android Studio is the Google Play Services client library.
  prefs: []
  type: TYPE_NORMAL
- en: This library is distributed through the Android SDK Manager (Software Development
    Kit Manager), which will be explained in detail in [Chapter 7](ch07.html "Chapter 7. Tools"),
    *Tools*. To open it, navigate to **Tools** | **Android** | **SDK Manager**. We
    can find Google Play Services in the packages list under the folder **Extras**.
    Select the **Google Play Services** checkbox and click on the **Install 1 package...**
    button.
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding Google Play Services to Android Studio](img/5273OS_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Performing these actions will add the library project into the location of our
    SDK installation folder, `/sdk/extras/google/google_play_services/`. You can check
    the exact path by hovering the mouse over the Google Play Services row in the
    SDK manager and looking at the tool tip.
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding Google Play Services to Android Studio](img/5273OS_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Navigate to the library folder to examine its content. The `samples` folder
    contains sample projects of the authentication service (`auth/`), the Google Maps
    v2 service (`maps/`), the Google+ service (`plus/`), and the Panorama service
    (`panorama/`). The folder that contains the Google Play Services library project
    is `libproject/`. In this project folder is where the `google-play-services.jar`
    file is placed, `libproject/google-play-services_lib/libs/ google-play-services.jar`.
  prefs: []
  type: TYPE_NORMAL
- en: Add this JAR file to your project by just dragging it into the `libs/` folder.
    Once this is done, select the JAR file and press the right mouse button on it.
    Select the **Add as Library** option. In the **create library** dialog, select
    the project library level, select your application module, and click on **OK**.
  prefs: []
  type: TYPE_NORMAL
- en: You now have the `google-play-services.jar` file available in your project libraries,
    under the `libs/` folder, and you will now be able to reference Google Play Services
    from your code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, you will need to add the library to your Gradle''s build file. To
    do this just edit the file `MyApplication/build.gradle` and add the following
    line in the `dependencies` section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Google Maps Android API v2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Google Maps Android API allows the user of your application to explore the maps
    available at the Google service. The new Maps Version 2 offers more functionalities
    such as 3D maps, indoor and satellite maps, efficient caching and drawing using
    vector-based technology, and animated transitions through the map.
  prefs: []
  type: TYPE_NORMAL
- en: Let's import the sample project to examine the most important classes. Click
    on **File** | **Import Project**. Search for the sample project in your SDK installation
    folder and select the project root directory, /`google_play_services/samples/maps/`.
    In the next dialog, check the **Create project from existing sources** option.
    Continue clicking on **Next** in the successive dialogs and finally click on the
    **Finish** button and open the sample project in a new window. Now we have the
    Google Play Services project and the maps sample project loaded in a new window
    in Android Studio.
  prefs: []
  type: TYPE_NORMAL
- en: Open the `BasicMapActivity` class to examine a simple example of the use of
    Google Maps. You can find this activity in the maps project inside the `src/`
    folder. The package `com.google.android.gms.maps` contains the Google Maps Android
    API classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'This activity declares a private `GoogleMap` object named as `mMap`. The **GoogleMap
    class** is the main class of the API and it is the entry point for all the methods
    related to a map. You may change the theme colors and the icons of your map to
    match your application style. You can also customize your map by adding markers
    to your maps. To add a simple marker you can use the `addMarker` method of the
    `GoogleMap` class. Examine the `setUpMap` method in the `BasicMapActivity` class
    to see the following code example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The method `addMarker` has a `MarkerOptions` object as parameter. Using the
    method `position` we indicate the coordinates of the marker on the map and using
    the method `title` we can add a custom string to show up on the marker.
  prefs: []
  type: TYPE_NORMAL
- en: To add a map into a layout we can use the `MapView` class, which extends the
    class `View` and displays a map. But the easiest way to place a map in an application
    is using a `MapFragment` object. A fragment represents a piece of the user interface
    or behavior that can be embedded in an activity. A fragment is a reusable module.
  prefs: []
  type: TYPE_NORMAL
- en: 'The **MapFragment class** wraps a view of a map to automatically handle the
    necessary life cycle needs of a component. It extends the class `Fragment` and
    can therefore be added to a layout by adding the following XML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: To see an example of the previous code, open the layout associated to the `BasicMapActivity`
    class; this is the `basic_demo.xml` file in the `/res/layout/` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we need the code to obtain the `GoogleMap` object from the fragment.
    We can find the map `Fragment` using the method `findFragmentById`, and then we
    get the map from the `Fragment` using the method `getMap`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The example of this code in the `BasicMapActivity` class is in the `setUpMapIfNeeded`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: 'One last important class is the `GoogleMapOptions` class, which defines the
    configuration for a map. You can also modify the initial state of a map by editing
    the layout XML code. Here are some interesting options available:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapType`: Specify the type of a map. Its value can be `none`, `normal`, `hybrid`,
    `satellite,` and `terrain`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`uiCompass`: Define whether compass controls are enabled or disabled.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`uiZoomControls`: Define whether zoom controls are enabled or disabled.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cameraTargetLat` and `cameraTargetLong`: Specify the initial camera position.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google+ Platform for Android
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using the Google+ Platform for Android lets the developer authenticate users
    with the same credentials they use on Google+. You can also use the public profile
    and social graph to be able to welcome the users by their name, display their
    pictures, or connect with friends.
  prefs: []
  type: TYPE_NORMAL
- en: The package `com.google.android.gms.plus` contains the Google+ Platform for
    Android classes. Import the Google+ sample project to learn about the most important
    classes. The Google+ sample project can be found in the Google Play Services installation
    folder, in /`google_play_services/samples/plus/`.
  prefs: []
  type: TYPE_NORMAL
- en: '`PlusClient` and `PlusClient.Builder`: `PlusClient` is the main class of the
    API. It is the entry point for Google+ integration. `PlusClient.Builder` is a
    builder to configure the `PlusClient` object to communicate properly with the
    Google+ APIs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PlusOneButton`: The class to implement a +1 button to recommend a URL on Google+.
    Add it to a layout using the following code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The available sizes are small, medium, tall, or standard.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Example code about this functionality can be found in the sample project, in
    the `PlusOneActivity` class in the `src/` folder and its associated layout, `plus_one_activity.xml`
    in the `res/layout/` folder.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`PlusShare`: Include resources in posts shared on Google+. Example code about
    sharing resources can be found in the `ShareActivity` class in the `src/` folder
    and its associated layout, `share_activity.xml` in the `res/layout/` folder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: First of all, a `PlusClient` object should be instantiated in the `onCreate`
    method of your activity class to call its asynchronous method `connect`, which
    will connect the client to Google+ services. When the app is done using a `PlusClient`
    instance, it should call the method `disconnect,` which terminates the connection,
    and should also always be called from the `onStop` method of the activity.
  prefs: []
  type: TYPE_NORMAL
- en: Google Play In-app Billing v3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In-app Billing v3 allows you to sell virtual content from your apps. This virtual
    content may be paid once with a one-time billing or may be a timed concession
    through subscriptions or fees. Using this service, you can allow users to pay
    for extra features and access premium content.
  prefs: []
  type: TYPE_NORMAL
- en: 'Any app published in Google Play Store can implement the In-app Billing API,
    since it only requires the same accounts as publishing an app: a Google Play Developer
    Console account and a Google Wallet merchant account.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the Google Play Developer Console you can define your products, including
    type, identification code (SKU), price, description, and more. Once you have your
    products defined, you can access this content from this application. When the
    user wants to buy this content, the following purchase flow will happen between
    your In-app Billing application and Google Play App:'
  prefs: []
  type: TYPE_NORMAL
- en: Your app calls `isBillingSupported()` to Google Play to check if the In-app
    Billing version you are using is supported.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the In-app Billing API version is supported, you may use `getPurchases()`
    to get a list of the SKUs of the purchased items. This list will be returned in
    a `Bundle` object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will probably want to inform your user of the in-app purchases available.
    To do this your app may send a `getSkuDetails()` request, which will result in
    a list with the product's price, title, description, and more information available
    for the item.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Google Cloud Messaging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GCM for Android allows the communication between your server and your application
    through the use of asynchronous messages. You do not have to worry about handling
    low-level aspects of this communication such as queuing and message construction.
    Using this service, you can easily implement a notification system for your application.
  prefs: []
  type: TYPE_NORMAL
- en: 'You have two options when using GCM:'
  prefs: []
  type: TYPE_NORMAL
- en: The server can inform your app that there is new data available to be fetched
    from the server and then the application gets this data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The server can send the data directly in a message. The message payload can
    be up to 4 KB. This allows your application to access the data at once and act
    accordingly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In order to send or receive messages, you will need to get a registration ID.
    This registration ID identifies the combination of device and application. To
    allow your app to use the GCM service, you need to add the following line to the
    manifest file of your project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The main class you will need to use is `GoogleCloudMessaging`. This class is
    available in the package `com.google.android.gms.gcm`.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By the end of this chapter, we know about the available Google Play Services.
    We learned how to improve our application using Google Play Services through its
    client library and Android package. The reader should have successfully installed
    the Google Play Services client library in Android Studio using the SDK Manager
    and should be able to build applications using the library features. We have also
    learned some tips about Google Maps v2, Google+ Platform for Android authentication,
    Google Play In-app Billing, and GCM.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter we will learn about some useful tools available in the Android
    Studio. We will again use the SDK Manager in detail to install different packages.
    We will also learn about the AVD Manager to be able to have different virtual
    devices to test our applications on. We will generate Javadoc documentation for
    our project using the Javadoc utility and we will learn about the version control
    systems available in Android Studio.
  prefs: []
  type: TYPE_NORMAL
