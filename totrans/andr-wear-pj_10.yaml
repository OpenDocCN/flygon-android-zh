- en: Just a Face for Your Time - WatchFace and Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The face, also known as the dial, is the part of the clock that displays the
    time with fixed numbers with moving hands. The appearance of a clock face can
    be designed with various artistic approaches and creativity. Designing a conventional
    watch face is a beautiful art; a watch face artist will know what it takes to
    carve and engineer a watch face for traditional wearable watches. In Android Wear,
    the process is very similar, except you, being the watch face maker, will not
    have any tools in your hands, but will instead need to know which service you
    need to extend and what piece of code will help you customize the look and feel
    of the watch face. The watch face will show the time and date. Here, in Android
    Wear, a watch face can be analog or it can be digital.
  prefs: []
  type: TYPE_NORMAL
- en: 'Android Wear watch faces are services that are packaged inside a wearable app.
    When users select one of the available watch faces, the wearable device shows
    the watch face and invokes its service callback methods. Custom watch faces use
    a dynamic, digital canvas that can incorporate hues, activities, and relevant
    data. When we install a wearable watch face application in Android Wear, we can
    switch between different watch faces through the watch face picker. Users can
    install various watch faces on their watch using the companion application from
    the Google Play Store on their phones. You will learn the following topics in
    this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: The `CanvasWatchFaceService` class and registering your watch face
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `CanvasWatchFaceService.Engine` and Callback methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing watch faces and handling gestures and tap events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding watch face elements and initializing them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Common issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The CanvasWatchFaceService class and registering your watch face
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Watch faces are services with drawing and visual rendering ability; all watch
    faces will extend the `CanvasWatchFaceService` class. The `CanvasWatchFaceService`
    class extracts its functionalities from the `WallpaperSevice` and `WallpaperService.Engine`
    classes. The `Engine` class, with its callback methods, helps the watch face with
    its lifecycle. If you have to make a watch face for an Android Wear, you should
    use the `CanvasWatchfaceService` class instead of plain old vanilla `WallpaperService`.
    A watch face service, like a wallpaper service, must implement only the `onCreateEngine()`
    method. Watch face engines need to implement the method `onTimeTick()` to refresh
    the time and refresh the view and `onAmbientModeChanged(boolean)` to switch between
    different version of watch faces, such as the grey mode and colorful watch face.
    Watch face engines in a like manner implement `onInterruptionFilterChanged(int)`
    to update the view dependent upon how much information the user has inquired.
    For the updates that occur in the ambient mode, `wake_lock` will be held, so the
    device doesn''t go to rest until the watch face finishes the drawing process.
    Registering watch faces in the application works closely to registering wallpapers,
    with a couple of additional steps. However, watch faces require the `wake_lock`
    permission, which is demonstrated as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Later, your watch face service declaration needs preview metadata:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Lastly, we need to add a special intent filter with the goal that watch.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The CanvasWatchFaceService.Engine class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `CanvasWatchFaceService.Engine` class extends the `WatchFaceService.Engine`
    class. Here, actual implementation of a watch face that draws on a canvas can
    be accomplished. We ought to implement `onCreateEngine()` to reestablish your
    concrete engine implementation. `CanvasWatchFaceService.Engine` has one public
    constructor with a couple of procedures to enable us to implement the watch face.
    How about we examine a couple of methods that we will implement in the later bit
    of this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '`void invalidate ()`: Plans a call to `onDraw(Canvas, Rect)` to draw the following
    frame. This must be approached on the main thread.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`void onDestroy ()`: In this callback, we can release the hardware and other
    resources that we would be using to complete the watch face.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`void onDraw(Canvas canvas, Rect bounds)`: Draws the watch face, all the visual
    components, and clock revive rationale, and other clock arrangements are accomplished
    in this method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`void onSurfaceChanged()`: This method takes four params, `void onSurfaceChanged
    (SurfaceHolder holder, int organise, int width, int stature)`. The `SurfaceHolder`
    parameter enables you to control the surface size and different arrangements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`void postInvalidate()`: Posts a message to schedule a call to `onDraw(Canvas,
    Rect)` to draw the following frame. Furthermore, this method is thread-safe. We
    can call this method from any thread.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These methods play a noteworthy part in planning your watch face. Let's begin
    making a watch face. In the following exercise, we will figure out how to make
    a digital watch face.
  prefs: []
  type: TYPE_NORMAL
- en: Writing your own watch face
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Android Studio is the primary tool that we should use to write Wear apps for
    numerous reasons; since we have already configured our development environment
    for Wear 2.0 development, it shouldn't be a challenge. Let's fire up Android Studio
    and create a Wear project.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Activity chooser, select Add No Activity. Since a watch face is a service,
    we don''t need activity:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00131.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We have read in the previous section that we will be extending the class to
    `CanvasWatchFaceService`, where watch face is being drawn on a canvas, and another
    class is `CanvasWatchFaceService.Engine`**,** where we will work on the actual
    implementation of the watch face and more important methods that we have discussed.
    It will help us to achieve the necessary setup for the watch face.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's create a class file called `PacktWatchFace` in the package.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `PacktWatchFace` class will extend to the `CanvasWatchFaceService` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00132.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: After creating the class file, extend it to the **`CanvasWatchFaceService`**
    class; this is the service class that we will register in the manifest. Inside
    this class, we need to create one subclass for the Wear design implementation.
    After that, inside the same class, we need to override an `onCreateEngine()` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code is the entry point setup for the Wear watch face design:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `PacktWatchFace` class implements only one method `onCreateEngine()` that
    returns the actual implementation of `CanvasWatchFaceService.Engine`. Now, it
    is time to register the `watchFace` service class in the manifest file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Within in the application scope of manifest register, add the `PacktWatchFace`
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file under the `xml` folder in the `res` directory and call it `watch_face.xml`.
    Inside, add the `wallpaper` XML tag, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Watch face service declaration needs preview metadata, as shown earlier. The
    same metadata is used in the preview of the watch face picker in wearables. These
    elements would specify the metadata of watch face service. The watch face will
    use the preview image and other information that we provide in this metadata tag.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following permission to your manifest:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s set up the essential instances for graphical elements and chronology
    instance, globally:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In the `onDraw` method, we can draw what we need to display on the watch face.
    The drawn visual is going to be static; we cannot make it dynamic just by drawing
    on the canvas. The implementation of the chronological time display plays an important
    role.
  prefs: []
  type: TYPE_NORMAL
- en: 'What information the watch face needs to show and other cosmetics are decided
    by the watch face designer. Now, let''s initialize all the instances in the `onCreate`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will write a separate method, which is `createPaint()`, for returning
    the values of all the calls:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Handling tap events and gestures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'On the watch face, users can interact, but the `CanvasWatchService.Engine`
    class provides only a single interaction method, which is a single tap. If we
    want to have other interactions, we need to override the `onTapCommand` method.
    We need to request `tapevents` in the `onCreate` method by changing the style
    of the Wear application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Thereafter, we can override the `onTapCommand()` method to handle the tap events
    and we can override the function to provide features and services when a user
    taps on the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following shows toast message when a user clicks on the watch face:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This way, we can customize the tap functionality. The default function signature
    gives two coordinates, *x* and *y*; by using these coordinates, we can determine
    where a user has clicked, which helps watch face designers to customize gestures
    and tap events accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: Supporting different form factors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Android Wear devices comes in square and rectangle designs. It''s a watch face
    developer''s responsibility to make the watch face looks same in both the form
    factors. Most of the UI arrangements that are designed for rectangular displays
    will fail on circular displays, and vice versa. To resolve this issue, the `WallpaperService`
    Engine has a facility called the `onApplyWindowInsets` function. The `onApplyWindowInsets`
    method helps to check whether the device is round or not; by determining this,
    we can draw either a round or a square watch face:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s write a complete method that draws the watch face with timely updates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The `onVisibilityChanged` method helps in registering and unregistering the
    receiver that tells the time to watch face:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'To make sure the timer is running only when the watch face is visible, we will
    set the following configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'To update the time periodically in the watch face, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s finalize the code with the `WeakReference` class implementation.
    Weak reference objects will allow referents to be finalized, and can be accessed
    later. Weak reference will make all of the previous weakly reachable objects to
    be finalized. Finally, it will en queue those recently cleared weak references
    that registered with the reference queues:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'To add a drawable, we can make use of the `BitmapFactory` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that the complete logic definition is complete, let''s see the complete
    finalized class for watch face:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The final, compiled watch face will be available in your Wear device''s watch
    face picker:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00133.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Congratulations on building your first watch face.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding watch face elements and initializing them
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Depending on what kind of watch face we are developing, we need to plan out
    certain elements for the watch face. We have seen what it takes to build a digital
    watch face, but to build an analog watch face, we need to understand a few watch
    face elements that will help in constructing watch face.
  prefs: []
  type: TYPE_NORMAL
- en: 'Generally, analog watch face is the combination of three essential components,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`HOUR_STROKE`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MINUTE_STROKE`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SECOND_TICK_STROKE`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, to construct an analog watch face, we need these three components and the
    rest of the things are going to be almost similar as constructing a digital watch
    face. Here, we need to make a little more effort in animating the strokes.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to design `Strokes`, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Now, with the previously designed `Strokes`, we can design and customize the
    watch face the way we want, and can add different backgrounds on the canvas, along
    with other cosmetic elements that will make your analog watch special.
  prefs: []
  type: TYPE_NORMAL
- en: For a digital watch face, you need a reference for the text and other graphical
    elements you will be using in the watch face.
  prefs: []
  type: TYPE_NORMAL
- en: Common issues
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Wear watch face applications are different than Wear apps. The most common issue
    that watch face apps encounter is different form factors, such as square and round
    dial chin. To resolve this issue, programmers have to detect the Wear form factor
    before the watch face executes. As we have already discussed, the `onApplyWindowInsets()`
    method of `CanvasWatchFaceService.Engine` helps in finding the shape of the Wear.
  prefs: []
  type: TYPE_NORMAL
- en: 'Watch face apps are always running; essentially, watch face service extends
    to wallpaper service. When we have a lot of services that fetch data from the
    network API calls, the battery might drain quickly. Such services might include:'
  prefs: []
  type: TYPE_NORMAL
- en: Different form factors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Battery efficacy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UI accommodation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Too much of animations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assets we use to build the Wear watch face
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Watch face depending on hardware
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'UI accommodation is another challenge for watch face makers; while we enable
    `setHotwordIndicator()` in the watch face style, the Android system should be
    able to post and overlay notification cards on top of the watch face we build.
    The analog watches we build must take care of this scenario, since analog watches
    are little reluctant to resize and, in the continuous animation of strokes, it
    will not coordinate with system notifications. Too much of animations in watch
    face is not a good idea. Having many animations results in CPU and GPU performance
    issues. The things to consider when we have animations in watch face are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Reducing the frame rate of animations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Letting the CPU sleep between animations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reducing the size of bitmaps assets used
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Disabling anti-aliasing when drawing scaled bitmaps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Moving expensive operations outside the drawing method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When your watch face depends on a hardware to show data, you should make sure
    you are periodically accessing the hardware and releasing it. For instance, when
    we are using the GPS to show the current location and the watch face is continuously
    listening to the GPS, we will not just drain the battery, the garbage collector
    will also throw an error.
  prefs: []
  type: TYPE_NORMAL
- en: Interactive watch faces
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The trend changes every time when a Wear 2.0 update arrives which gives new
    interactive watch faces, which also can have unique interaction and style expression.
    All the watch face developers for Wear might have to start thinking of interactive
    watch faces.
  prefs: []
  type: TYPE_NORMAL
- en: What is exactly an interactive watch face?
  prefs: []
  type: TYPE_NORMAL
- en: The idea is to have the user like and love watch face by giving them delightful
    and useful information on a timely basis, which changes the user experience about
    the watch face.
  prefs: []
  type: TYPE_NORMAL
- en: 'Google addresses the following methodologies to achieve interactive watch faces:'
  prefs: []
  type: TYPE_NORMAL
- en: Creative vision
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Different form factors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Display modes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: System UI elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data integrated watch faces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Android Wear offers a digital canvas to express time in a very efficient way.
    Android Wear offers to integrate a data on watch faces for higher level of personalization
    as well. Watch faces and designs need to be glanceable and should convey prioritized
    information to the watch face user.
  prefs: []
  type: TYPE_NORMAL
- en: We know that the different form factors of Android Wear is an implementation
    challenge for the watch face developers. The watch face should be identical across
    different form factors with regards to its design language, which is a common
    set of colors, line width, shading, and other design elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Wear 2.0, there are two display modes:'
  prefs: []
  type: TYPE_NORMAL
- en: Active mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Always active mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Active mode is when a user moves their wrist or touches the display to glance
    the time. Wear will light up the display and make the watch face active. In this
    mode, the watch face can use colorful animations and fluid design language to
    express the time and other information.
  prefs: []
  type: TYPE_NORMAL
- en: Always active mode helps to save battery power and the display capabilities
    are limited to black, white, and gray when the Wear device enters to the always
    active mode. We need to carefully design what to display in the always active
    mode that looks similar to the design of the watch face, but with less color and
    animations.
  prefs: []
  type: TYPE_NORMAL
- en: System UI elements indicate the status of the Wear devices; for instance, battery
    level and other system UI elements. The watch face should allow these indicators
    to be displayed in some specific location of Wear device.
  prefs: []
  type: TYPE_NORMAL
- en: Data integrated watch faces help watch face users to check out the chosen information
    at a glance, for example, step counts, weather reports, and so on can be displayed
    on the watch face.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we have explored the fundamental understanding of designing
    watch faces and we have built a digital watch face. We have understood how the
    `CanvasWatchFaceService` class helps in building watch faces and we have also
    seen the following watch face-related concepts:'
  prefs: []
  type: TYPE_NORMAL
- en: The `CanvasWatchFaceService` class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `canvasWatchFaceService.Engine` method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Registering watch face in a Wear module manifest
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling tap gesture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Different form factors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding bitmap images to the watch face
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Watch face elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Common issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interactive watch faces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making watch faces is an excellent artistic engineering, including what data
    we should express in the watch face and how time and date data is being displayed.
    The `ComplicationsAPI` is new in Wear 2.0\. Let's discuss that in the next chapter
    along with a few advanced concepts.
  prefs: []
  type: TYPE_NORMAL
