- en: Just a Face for Your Time - WatchFace and Services
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 只为时间而生 - 手表表盘与服务
- en: The face, also known as the dial, is the part of the clock that displays the
    time with fixed numbers with moving hands. The appearance of a clock face can
    be designed with various artistic approaches and creativity. Designing a conventional
    watch face is a beautiful art; a watch face artist will know what it takes to
    carve and engineer a watch face for traditional wearable watches. In Android Wear,
    the process is very similar, except you, being the watch face maker, will not
    have any tools in your hands, but will instead need to know which service you
    need to extend and what piece of code will help you customize the look and feel
    of the watch face. The watch face will show the time and date. Here, in Android
    Wear, a watch face can be analog or it can be digital.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 表盘，也称为表盘，是显示固定数字和移动指针的时间的部分。表盘的外观可以通过各种艺术手法和创新来设计。设计传统手表表盘是一门优美的艺术；手表表盘设计师会知道雕刻和设计传统可穿戴手表表盘需要什么。在安卓穿戴中，这个过程非常相似，除了作为表盘制作者，你手中没有任何工具，但需要知道你需要扩展哪个服务以及哪段代码可以帮助你自定义表盘的外观和感觉。表盘将显示时间和日期。在安卓穿戴中，表盘可以是模拟的，也可以是数字的。
- en: 'Android Wear watch faces are services that are packaged inside a wearable app.
    When users select one of the available watch faces, the wearable device shows
    the watch face and invokes its service callback methods. Custom watch faces use
    a dynamic, digital canvas that can incorporate hues, activities, and relevant
    data. When we install a wearable watch face application in Android Wear, we can
    switch between different watch faces through the watch face picker. Users can
    install various watch faces on their watch using the companion application from
    the Google Play Store on their phones. You will learn the following topics in
    this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 安卓穿戴的表盘是包装在可穿戴应用内的服务。当用户选择可用的某个表盘时，可穿戴设备会显示表盘并调用其服务回调方法。自定义表盘使用动态的数字画布，可以融入色彩、活动和相关数据。在安卓穿戴中安装可穿戴表盘应用后，我们可以通过表盘选择器在不同的表盘之间切换。用户可以通过手机上的谷歌应用商店中的配套应用程序，在他们的手表上安装各种表盘。在本章中，你将学习以下主题：
- en: The `CanvasWatchFaceService` class and registering your watch face
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CanvasWatchFaceService` 类和注册你的手表表盘'
- en: The `CanvasWatchFaceService.Engine` and Callback methods
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CanvasWatchFaceService.Engine` 和回调方法'
- en: Writing watch faces and handling gestures and tap events
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写表盘和处理手势和点击事件
- en: Understanding watch face elements and initializing them
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解表盘元素并初始化它们
- en: Common issues
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 常见问题
- en: The CanvasWatchFaceService class and registering your watch face
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CanvasWatchFaceService 类和注册你的手表表盘
- en: 'Watch faces are services with drawing and visual rendering ability; all watch
    faces will extend the `CanvasWatchFaceService` class. The `CanvasWatchFaceService`
    class extracts its functionalities from the `WallpaperSevice` and `WallpaperService.Engine`
    classes. The `Engine` class, with its callback methods, helps the watch face with
    its lifecycle. If you have to make a watch face for an Android Wear, you should
    use the `CanvasWatchfaceService` class instead of plain old vanilla `WallpaperService`.
    A watch face service, like a wallpaper service, must implement only the `onCreateEngine()`
    method. Watch face engines need to implement the method `onTimeTick()` to refresh
    the time and refresh the view and `onAmbientModeChanged(boolean)` to switch between
    different version of watch faces, such as the grey mode and colorful watch face.
    Watch face engines in a like manner implement `onInterruptionFilterChanged(int)`
    to update the view dependent upon how much information the user has inquired.
    For the updates that occur in the ambient mode, `wake_lock` will be held, so the
    device doesn''t go to rest until the watch face finishes the drawing process.
    Registering watch faces in the application works closely to registering wallpapers,
    with a couple of additional steps. However, watch faces require the `wake_lock`
    permission, which is demonstrated as follows:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Later, your watch face service declaration needs preview metadata:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Lastly, we need to add a special intent filter with the goal that watch.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The CanvasWatchFaceService.Engine class
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `CanvasWatchFaceService.Engine` class extends the `WatchFaceService.Engine`
    class. Here, actual implementation of a watch face that draws on a canvas can
    be accomplished. We ought to implement `onCreateEngine()` to reestablish your
    concrete engine implementation. `CanvasWatchFaceService.Engine` has one public
    constructor with a couple of procedures to enable us to implement the watch face.
    How about we examine a couple of methods that we will implement in the later bit
    of this chapter:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '`void invalidate ()`: Plans a call to `onDraw(Canvas, Rect)` to draw the following
    frame. This must be approached on the main thread.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`void onDestroy ()`: In this callback, we can release the hardware and other
    resources that we would be using to complete the watch face.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`void onDraw(Canvas canvas, Rect bounds)`: Draws the watch face, all the visual
    components, and clock revive rationale, and other clock arrangements are accomplished
    in this method.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`void onSurfaceChanged()`: This method takes four params, `void onSurfaceChanged
    (SurfaceHolder holder, int organise, int width, int stature)`. The `SurfaceHolder`
    parameter enables you to control the surface size and different arrangements.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`void postInvalidate()`: Posts a message to schedule a call to `onDraw(Canvas,
    Rect)` to draw the following frame. Furthermore, this method is thread-safe. We
    can call this method from any thread.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These methods play a noteworthy part in planning your watch face. Let's begin
    making a watch face. In the following exercise, we will figure out how to make
    a digital watch face.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: Writing your own watch face
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Android Studio is the primary tool that we should use to write Wear apps for
    numerous reasons; since we have already configured our development environment
    for Wear 2.0 development, it shouldn't be a challenge. Let's fire up Android Studio
    and create a Wear project.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: 'In Activity chooser, select Add No Activity. Since a watch face is a service,
    we don''t need activity:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00131.jpeg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
- en: We have read in the previous section that we will be extending the class to
    `CanvasWatchFaceService`, where watch face is being drawn on a canvas, and another
    class is `CanvasWatchFaceService.Engine`**,** where we will work on the actual
    implementation of the watch face and more important methods that we have discussed.
    It will help us to achieve the necessary setup for the watch face.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's create a class file called `PacktWatchFace` in the package.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: 'The `PacktWatchFace` class will extend to the `CanvasWatchFaceService` class:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00132.jpeg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
- en: After creating the class file, extend it to the **`CanvasWatchFaceService`**
    class; this is the service class that we will register in the manifest. Inside
    this class, we need to create one subclass for the Wear design implementation.
    After that, inside the same class, we need to override an `onCreateEngine()` method.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code is the entry point setup for the Wear watch face design:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `PacktWatchFace` class implements only one method `onCreateEngine()` that
    returns the actual implementation of `CanvasWatchFaceService.Engine`. Now, it
    is time to register the `watchFace` service class in the manifest file.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: 'Within in the application scope of manifest register, add the `PacktWatchFace`
    class:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Create a file under the `xml` folder in the `res` directory and call it `watch_face.xml`.
    Inside, add the `wallpaper` XML tag, as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Watch face service declaration needs preview metadata, as shown earlier. The
    same metadata is used in the preview of the watch face picker in wearables. These
    elements would specify the metadata of watch face service. The watch face will
    use the preview image and other information that we provide in this metadata tag.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following permission to your manifest:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Let''s set up the essential instances for graphical elements and chronology
    instance, globally:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the `onDraw` method, we can draw what we need to display on the watch face.
    The drawn visual is going to be static; we cannot make it dynamic just by drawing
    on the canvas. The implementation of the chronological time display plays an important
    role.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: 'What information the watch face needs to show and other cosmetics are decided
    by the watch face designer. Now, let''s initialize all the instances in the `onCreate`
    method:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Next, we will write a separate method, which is `createPaint()`, for returning
    the values of all the calls:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Handling tap events and gestures
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'On the watch face, users can interact, but the `CanvasWatchService.Engine`
    class provides only a single interaction method, which is a single tap. If we
    want to have other interactions, we need to override the `onTapCommand` method.
    We need to request `tapevents` in the `onCreate` method by changing the style
    of the Wear application:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Thereafter, we can override the `onTapCommand()` method to handle the tap events
    and we can override the function to provide features and services when a user
    taps on the application.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: 'The following shows toast message when a user clicks on the watch face:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This way, we can customize the tap functionality. The default function signature
    gives two coordinates, *x* and *y*; by using these coordinates, we can determine
    where a user has clicked, which helps watch face designers to customize gestures
    and tap events accordingly.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: Supporting different form factors
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Android Wear devices comes in square and rectangle designs. It''s a watch face
    developer''s responsibility to make the watch face looks same in both the form
    factors. Most of the UI arrangements that are designed for rectangular displays
    will fail on circular displays, and vice versa. To resolve this issue, the `WallpaperService`
    Engine has a facility called the `onApplyWindowInsets` function. The `onApplyWindowInsets`
    method helps to check whether the device is round or not; by determining this,
    we can draw either a round or a square watch face:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now, let''s write a complete method that draws the watch face with timely updates:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The `onVisibilityChanged` method helps in registering and unregistering the
    receiver that tells the time to watch face:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'To make sure the timer is running only when the watch face is visible, we will
    set the following configuration:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'To update the time periodically in the watch face, do the following:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now, let''s finalize the code with the `WeakReference` class implementation.
    Weak reference objects will allow referents to be finalized, and can be accessed
    later. Weak reference will make all of the previous weakly reachable objects to
    be finalized. Finally, it will en queue those recently cleared weak references
    that registered with the reference queues:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'To add a drawable, we can make use of the `BitmapFactory` class:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now that the complete logic definition is complete, let''s see the complete
    finalized class for watch face:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The final, compiled watch face will be available in your Wear device''s watch
    face picker:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00133.jpeg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
- en: Congratulations on building your first watch face.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: Understanding watch face elements and initializing them
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Depending on what kind of watch face we are developing, we need to plan out
    certain elements for the watch face. We have seen what it takes to build a digital
    watch face, but to build an analog watch face, we need to understand a few watch
    face elements that will help in constructing watch face.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: 'Generally, analog watch face is the combination of three essential components,
    as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '`HOUR_STROKE`'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MINUTE_STROKE`'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SECOND_TICK_STROKE`'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, to construct an analog watch face, we need these three components and the
    rest of the things are going to be almost similar as constructing a digital watch
    face. Here, we need to make a little more effort in animating the strokes.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to design `Strokes`, as shown in the following code:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Now, with the previously designed `Strokes`, we can design and customize the
    watch face the way we want, and can add different backgrounds on the canvas, along
    with other cosmetic elements that will make your analog watch special.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: For a digital watch face, you need a reference for the text and other graphical
    elements you will be using in the watch face.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: Common issues
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Wear watch face applications are different than Wear apps. The most common issue
    that watch face apps encounter is different form factors, such as square and round
    dial chin. To resolve this issue, programmers have to detect the Wear form factor
    before the watch face executes. As we have already discussed, the `onApplyWindowInsets()`
    method of `CanvasWatchFaceService.Engine` helps in finding the shape of the Wear.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: 'Watch face apps are always running; essentially, watch face service extends
    to wallpaper service. When we have a lot of services that fetch data from the
    network API calls, the battery might drain quickly. Such services might include:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: Different form factors
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Battery efficacy
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UI accommodation
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Too much of animations
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assets we use to build the Wear watch face
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Watch face depending on hardware
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'UI accommodation is another challenge for watch face makers; while we enable
    `setHotwordIndicator()` in the watch face style, the Android system should be
    able to post and overlay notification cards on top of the watch face we build.
    The analog watches we build must take care of this scenario, since analog watches
    are little reluctant to resize and, in the continuous animation of strokes, it
    will not coordinate with system notifications. Too much of animations in watch
    face is not a good idea. Having many animations results in CPU and GPU performance
    issues. The things to consider when we have animations in watch face are as follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: Reducing the frame rate of animations
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Letting the CPU sleep between animations
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reducing the size of bitmaps assets used
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Disabling anti-aliasing when drawing scaled bitmaps
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Moving expensive operations outside the drawing method
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When your watch face depends on a hardware to show data, you should make sure
    you are periodically accessing the hardware and releasing it. For instance, when
    we are using the GPS to show the current location and the watch face is continuously
    listening to the GPS, we will not just drain the battery, the garbage collector
    will also throw an error.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: Interactive watch faces
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The trend changes every time when a Wear 2.0 update arrives which gives new
    interactive watch faces, which also can have unique interaction and style expression.
    All the watch face developers for Wear might have to start thinking of interactive
    watch faces.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: What is exactly an interactive watch face?
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: The idea is to have the user like and love watch face by giving them delightful
    and useful information on a timely basis, which changes the user experience about
    the watch face.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: 'Google addresses the following methodologies to achieve interactive watch faces:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: Creative vision
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Different form factors
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Display modes
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: System UI elements
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data integrated watch faces
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Android Wear offers a digital canvas to express time in a very efficient way.
    Android Wear offers to integrate a data on watch faces for higher level of personalization
    as well. Watch faces and designs need to be glanceable and should convey prioritized
    information to the watch face user.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: We know that the different form factors of Android Wear is an implementation
    challenge for the watch face developers. The watch face should be identical across
    different form factors with regards to its design language, which is a common
    set of colors, line width, shading, and other design elements.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: 'In Wear 2.0, there are two display modes:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: Active mode
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Always active mode
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Active mode is when a user moves their wrist or touches the display to glance
    the time. Wear will light up the display and make the watch face active. In this
    mode, the watch face can use colorful animations and fluid design language to
    express the time and other information.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: Always active mode helps to save battery power and the display capabilities
    are limited to black, white, and gray when the Wear device enters to the always
    active mode. We need to carefully design what to display in the always active
    mode that looks similar to the design of the watch face, but with less color and
    animations.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: System UI elements indicate the status of the Wear devices; for instance, battery
    level and other system UI elements. The watch face should allow these indicators
    to be displayed in some specific location of Wear device.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: Data integrated watch faces help watch face users to check out the chosen information
    at a glance, for example, step counts, weather reports, and so on can be displayed
    on the watch face.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we have explored the fundamental understanding of designing
    watch faces and we have built a digital watch face. We have understood how the
    `CanvasWatchFaceService` class helps in building watch faces and we have also
    seen the following watch face-related concepts:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: The `CanvasWatchFaceService` class
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `canvasWatchFaceService.Engine` method
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Registering watch face in a Wear module manifest
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling tap gesture
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Different form factors
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding bitmap images to the watch face
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Watch face elements
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Common issues
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interactive watch faces
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making watch faces is an excellent artistic engineering, including what data
    we should express in the watch face and how time and date data is being displayed.
    The `ComplicationsAPI` is new in Wear 2.0\. Let's discuss that in the next chapter
    along with a few advanced concepts.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 制作手表表盘是一项卓越的艺术工程技术，包括我们应该在表盘上表达哪些数据，以及时间和日期数据是如何被展示的。`ComplicationsAPI`是Wear
    2.0中的新特性。我们将在下一章讨论这个内容，同时也会涉及一些高级概念。
