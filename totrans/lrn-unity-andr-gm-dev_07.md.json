["```java\n    public void OnTriggerEnter2D(Collider2D other) {\n      Destroy(other.gameObject);\n    }\n    ```", "```java\n    public float totalHealth = 100f;\n    private float health = 100f;\n\n    public Material damageMaterial;\n    public Renderer plankRenderer;\n    private bool didSwap = false;\n\n    public int scoreValue = 100;\n    ```", "```java\n    public void Awake() {\n      health = totalHealth;\n      didSwap = false;\n    }\n    ```", "```java\n    public void OnCollisionEnter2D(Collision2D collision) {\n      health -= collision.relativeVelocity.magnitude;\n\n      if(!didSwap && health < totalHealth / 2f) {\n        SwapToDamaged();\n      }\n\n      if(health <= 0) {\n        Destroy(gameObject);\n        LevelTracker.AddScore(scoreValue);\n      }\n    }\n    ```", "```java\n    public void SwapToDamaged() {\n      didSwap = true;\n      if(plankRenderer == null) return;\n\n      if(damageMaterial != null) {\n        plankRenderer.sharedMaterial = damageMaterial;\n      }\n    }\n    ```", "```java\n    private static int score = 0;\n    ```", "```java\n    public void Awake() {\n      score = 0;\n    }\n    ```", "```java\n    public static void AddScore(int amount) {\n      score += amount;\n    }\n    ```", "```java\n    public Sprite damageSprite;\n    ```", "```java\n    if(damageSprite != null) {\n      SpriteRenderer spriteRend = plankRenderer as SpriteRenderer;\n      spriteRend.sprite = damageSprite;\n    }\n    ```", "```java\n    using UnityEngine.UI;\n    ```", "```java\n    public Transform[] pigs = new Transform[0];\n\n    private gameOver = false;\n\n    public Text scoreBox;\n    public Text finalMessage;\n    public Text finalScore;\n\n    public GameObject finalGroup;\n    ```", "```java\n    FinalGroup.SetActive(false);\n    ```", "```java\n    public void LateUpdate() {\n      if(!gameOver) {\n        CheckPigs();\n\n        scoreBox.text = \"Score: \" + score;\n        finalScore.text = \"Score: \" + score;\n      }\n    }\n    ```", "```java\n    private void CheckPigs() {\n      for(int i=0;i<pigs.Length;i++) {\n        if(pigs[i] != null) return;\n      }\n\n      gameOver = true;\n      finalMessage.text = \"You destroyed the pigs!\";\n\n      scoreBox.gameObject.SetActive(false);\n      finalGroup.SetActive(true);\n    }\n    ```", "```java\n    public void OutOfBirds() {\n      if(gameOver) return;\n\n      gameOver = true;\n      finalMessage.text = \"You ran out of birds!\";\n\n      scoreBox.gameObject.SetActive(false);\n      finalGroup.SetActive(true);\n    }\n    ```", "```java\n    public void SaveScore() {\n      string key = \"LevelScore\" + Application.loadedLevel;\n      int previousScore = PlayerPrefs.GetInt(key, 0);\n      if(previousScore < score) {\n        PlayerPrefs.SetInt(key, score);\n      }\n\n      Application.LoadLevel(0);\n    }\n    ```", "```java\n    public float health = 50;\n    protected bool didSpecial = false;\n    public Rigidbody2D body;\n    ```", "```java\n    public void Update() {\n      if(didSpecial) return;\n      if(!Input.GetMouseButtonDown(0)) return;\n      if(body == null || body.isKinematic) return;\n\n      DoSpecial();\n    }\n    ```", "```java\n    protected virtual void DoSpecial() {\n      didSpecial = true;\n    }\n    ```", "```java\n    public void OnCollisionEnter2D(Collision2D collision) {\n      health -= collision.relativeVelocity.magnitude;\n      if(health < 0)\n        Destroy(gameObject);\n    }\n    ```", "```java\n    public RigidbodyDamper rigidbodyDamper;\n\n    public GameObject[] levelBirds = new GameObject[0];\n    private Rigidbody2D[] currentBirds;\n    private int nextIndex = 0;\n    public Transform waitPoint;\n    public Rigidbody2D toFireBird;\n    public bool didFire = false;\n    public bool isAiming = false;\n\n    public Transform pouch;\n    public Transform focalPoint;\n    public Transform pouchBirdPoint;\n\n    public float maxRange = 3;\n\n    public float maxFireStrength = 25;\n    public float minFireStrength = 5;\n    ```", "```java\n    public void Awake() {\n      currentBirds = new Rigidbody2D[levelBirds.Length];\n      for(int i=0;i<levelBirds.Length;i++) {\n        GameObject nextBird = Instantiate(levelBirds[i]) as GameObject;\n        currentBirds[i] = nextBird.GetComponent<Rigidbody2D>();\n        currentBirds[i].isKinematic = true;\n      }\n\n      ReadyNextBird();\n      SetWaitPositions();\n    }\n    ```", "```java\n    public void ReadyNextBird() {\n      if(currentBirds.Length <= nextIndex) {\n        LevelTracker tracker = FindObjectOfType(typeof(LevelTracker)) as LevelTracker;\n        tracker.OutOfBirds();\n        return;\n      }\n\n      toFireBird = currentBirds[nextIndex];\n      nextIndex++;\n\n      toFireBird.transform.parent = pouchBirdPoint;\n      toFireBird.transform.localPosition = Vector3.zero;\n      toFireBird.transform.localRotation = Quaternion.identity;\n\n      didFire = false;\n      isAiming = false;\n    }\n    ```", "```java\n    public void SetWaitPositions() {\n      for(int i=nextIndex;i<currentBirds.Length;i++) {\n        if(currentBirds[i] == null) continue;\n        Vector3 offset = Vector3.right * (i – nextIndex) * 2;\n        currentBirds[i].transform.position = waitPoint.position – offset;\n      }\n    }\n    ```", "```java\n    public void Update() {\n      if(didFire) {\n        if(rigidbodyDamper.allSleeping) {\n          ReadyNextBird();\n          SetWaitPositions();\n        }\n        return;\n      }\n      else if(isAiming) {\n        DoAiming();\n      }\n      else {\n        if(Input.touchCount <= 0) return;\n        Vector3 touchPoint = GetTouchPoint();\n        isAiming = Vector3.Distance(touchPoint, focalPoint.position) < maxRange / 2f;\n      }\n    }\n    ```", "```java\n    private void DoAiming() {\n      if(Input.touchCount <= 0) {\n        FireBird();\n        return;\n      }\n\n      Vector3 touchPoint = GetTouchPoint();\n\n      pouch.position = touchPoint;\n      pouch.LookAt(focalPoint);\n\n      float distance = Vector3.Distance(focalPoint.position, pouch.position);\n      if(distance > maxRange) {\n        pouch.position = focalPoint.position – (pouch.forward * maxRange);\n      }\n    }\n    ```", "```java\n    private Vector3 GetTouchPoint() {\n      Ray touchRay = Camera.main.ScreenPointToRay(Input.GetTouch(0).position);\n      Vector3 touchPoint = touchRay.origin;\n      touchPoint.z = 0;\n      return touchPoint;\n    }\n    ```", "```java\n    private void FireBird() {\n      didFire = true;\n\n      Vector3 direction = (focalPoint.position – pouch.position).normalized;\n      float distance = Vector3.Distance(focalPoint.position, pouch.position);\n      float power = distance <= 0 ? 0 : distance / maxRange;\n      power *= maxFireStrength;\n      power = Mathf.Clamp(power, minFireStrength, maxFireStrength);\n\n      toFireBird.transform.parent = null;\n      toFireBird.isKinematic = false;\n      toFireBird.AddForce(new Vector2(direction.x, direction.y) * power, ForceMode2D.Impulse);\n\n      pouch.position = focalPoint.position;\n\n      rigidbodyDamper.ReadyDamp();\n    }\n    ```", "```java\n    public float dampWaitLength = 10f;\n    public float dampAmount = 0.9f;\n    private float dampTime = -1f;\n    private bool canDamp = false;\n    private Rigidbody2D[] rigidbodies = new Rigidbody2D[0];\n\n    public bool allSleeping = false;\n    ```", "```java\n    public void ReadyDamp() {\n      rigidbodies = FindObjectsOfType(typeof(Rigidbody2D)) as Rigidbody2D[];\n      dampTime = Time.time + dampWaitLength;\n      canDamp = true;\n      allSleeping = false;\n\n      StartCoroutine(CheckSleepingRigidbodies());\n    }\n    ```", "```java\n    public void FixedUpdate() {\n      if(!canDamp || dampTime > Time.time) return;\n\n      foreach(Rigidbody2D next in rigidbodies) {\n        if(next != null && !next.isKinematic && !next.isSleeping()) {\n          next.angularVelocity *= dampAmount;\n          next.velocity *= dampAmount;\n        }\n      }\n    }\n    ```", "```java\n    private IEnumerator CheckSleepingRigidbodies() {\n      bool sleepCheck = false;\n\n      while(!sleepCheck) {\n        sleepCheck = true;\n\n        foreach(Rigidbody2D next in rigidbodies) {\n          if(next != null && !next.isKinematic && !next.IsSleeping()) {\n            sleepCheck = false;\n            yield return null;\n            break;\n          }\n        }\n      }\n\n      allSleeping = true;\n      canDamp = false;\n    }\n    ```", "```java\n    public void AddBodiesToCheck(Rigidbody2D[] toAdd) {\n      Rigidbody2D[] temp = rigidbodies;\n      rigidbodies = new Rigidbody2D[temp.Length + toAdd.Length];\n\n      for(int i=0;i<temp.Length;i++) {\n        rigidbodies[i] = temp[i];\n      }\n      for(int i=0;i<toAdd.Length;i++) {\n        rigidbodies[i + temp.Length] = toAdd[i];\n      }\n    }\n    ```", "```java\n    public Transform endPoint;\n    public LineRenderer lineRenderer;\n    ```", "```java\n    public void Awake() {\n      if(lineRenderer == null) return;\n      if(endPoint == null) return;\n\n      lineRenderer.SetVertexCount(2);\n      lineRenderer.SetPosition(0, transform.position);\n      lineRenderer.SetPosition(1, endPoint.position);\n    }\n    ```", "```java\n    public void LateUpdate() {\n      if(endPoint == null) return;\n      if(lineRenderer == null) return;\n\n      lineRenderer.SetPosition(1, endPoint.position);\n    }\n    ```", "```java\n    public Slingshot slingshot;\n    public Transform rightPoint;\n    public Transform leftPoint;\n    public Transform topPoint;\n\n    public float waitTime = 3f;\n    private float headBackTime = -1f;\n    private Vector3 waitPosition;\n    private float headBackDuration = 3f;\n\n    public float dragScale = 0.075f;\n\n    private bool followBird = false;\n    private Vector3 followVelocity = Vector3.zero;\n    public float followSmoothTime = 0.1f;\n    ```", "```java\n    public void Awake() {\n      followBird = false;\n      StartWait();\n    }\n    ```", "```java\n    public void StartWait() {\n      headBackTime = Time.time + waitTime;\n      waitPosition = transform.position;\n    }\n    ```", "```java\n    public void Update() {\n      if(!slingshot.didFire) {\n        if(slingshot.isAiming) {\n          followBird = true;\n          followVelocity = Vector3.zero;\n        }\n        else {\n          followBird = false;\n        }\n      }\n\n      if(followBird) {\n        FollowBird();\n        StartWait();\n      }\n      else if(Input.touchCount > 0) {\n        DragCamera();\n        StartWait();\n      }\n\n      if(!slingshot.didFire && headBackTime < Time.time) {\n        BackToLeft();\n      }\n    }\n    ```", "```java\n    private void FollowBird() {\n      if(slingshot.toFireBird == null) {\n        followBird = false;\n        return;\n      }\n\n      Vector3 targetPoint = slingshot.toFireBird.transform.position;\n      targetPoint.z = transform.position.z;\n\n      transform.position = Vector3.SmoothDamp(transform.position, targetPoint, ref followVelocity, followSmoothTime);\n      ClampPosition();\n    }\n    ```", "```java\n    private void DragCamera() {\n      transform.position -= new Vector3(Input.GetTouch(0).deltaPosition.x, Input.GetTouch(0).deltaPosition.y, 0) * dragScale;\n      ClampPosition();\n    }\n    ```", "```java\n    private void ClampPosition() {\n      Vector3 clamped = transform.position;\n      clamped.x = Mathf.Clamp(clamped.x, leftPoint.position.x, rightPoint.position.x);\n      clamped.y = Mathf.Clamp(clamped.y, leftPoint.position.y, topPoint.position.y);\n      transform.position = clamped;\n    }\n    ```", "```java\n    private void BackToLeft() {\n      float progress = (Time.time – headBackTime) / headBackDuration;\n      Vector3 newPosition = transform.position;\n      newPosition.x = Mathf.SmoothStep(waitPosition.x, leftPoint.position.x, progress);\n      newPosition.y = Mathf.SmoothStep(waitPosition.y, leftPoint.position.y, progress);\n      transform.position = newPosition;\n    }\n    ```", "```java\n    public Material[] materials = new Material[0];\n    public float[] speeds = new float[0];\n\n    private Vector3 lastPosition = Vector3.zero;\n    ```", "```java\n    public void Start() {\n      lastPosition = Camera.main.transform.position;\n    }\n    ```", "```java\n    public void LateUpdate() {\n      Vector3 newPosition = Camera.main.transform.position;\n      float move = newPosition.x – lastPosition.x;\n\n      for(int i=0;i<materials.Length;i++) {\n        Vector2 offset = materials[i].mainTextureOffset;\n        offset.x -= move * speeds[i];\n        materials[i].mainTextureOffset = offset;\n      }\n\n      lastPosition = newPosition;\n    }\n    ```", "```java\n    public class YellowBird : Bird {\n    ```", "```java\n    public float multiplier = 2f;\n    ```", "```java\n    protected override void DoSpecial() {\n      didSpecial = true;\n      body.velocity *= multiplier;\n    }\n    ```", "```java\n    public class BlueBird : Bird {\n    ```", "```java\n    public GameObject[] splitBirds = new GameObject[0];\n    public float launchAngle = 15f;\n    public float spawnLead = 0.5f;\n    ```", "```java\n    protected override void DoSpecial() {\n      didSpecial = true;\n\n      int halfLength = splitBirds.Length / 2;\n      Rigidbody2D[] newBodies = new Rigidbody2D[splitBirds.Length];\n    ```", "```java\n    for(int i=0;i<splitBirds.Length;i++) {\n      if(splitBirds[i] == null) continue;\n\n      GameObject next = Instantiate(splitBirds[i], transform.position, transform.rotation) as GameObject;\n\n      Rigidbody2D nextBody = next.GetComponent<Rigidbody2D>();\n      if(nextBody == null) continue;\n\n      newBodies[i] = nextBody;\n    ```", "```java\n    Quaternion rotate = Quaternion.Euler(0, 0, launchAngle * (i – halfLength));\n    nextBody.velocity = rotate * nextBody.velocity;\n    Vector2 offset = nextBody.velocity.normalized * spawnLead;\n    next.transform.position += new Vector3(offset.x, offset.y, 0);\n    }\n    ```", "```java\n    Slingshot slingshot = FindObjectOfType(typeof(Slingshot)) as Slingshot;\n    if(slingshot != null) {\n      slingshot.toFireBird = newBodies[0];\n      slingshot.rigidbodyDamper.AddBodiesToCheck(newBodies);\n    }\n\n    Destroy(gameObject);\n    }\n    ```", "```java\n    public class BlackBird : Bird {\n    ```", "```java\n    public float radius = 2.5f;\n    public float power = 25f;\n    ```", "```java\n    protected override void DoSpecial() {\n      didSpecial = true;\n\n      Collider2D[] colliders = Physics2D.OverlapCircleAll(transform.position, radius);\n\n      Vector2 explosionPos = new Vector2(transform.position.x, transform.position.y) – (Vector2.up * 3);\n\n      foreach(Collider2D hit in colliders) {\n        if(hit == null) continue;\n        if(hit.attachedRigidbody != null) {\n    ```", "```java\n    Vector3 hitPos = hit.attachedRigidbody.transform.position;\n    Vector2 dir = new Vector2(hitPos.x, hitPos.y) – explosionPos;\n    float wearoff = 1 – (dir.magnitude / radius);\n    Vector2 force = dir.normalized * power * wearoff;\n    hit.attachedRigidbody.AddForceAtPosition(force, explosionPos, ForceMode2D.Impulse);\n    }\n    }\n    ```", "```java\n    Destroy(gameObject);\n    }\n    ```", "```java\n    using UnityEngine.UI;\n    ```", "```java\n    public Text[] buttonText = new Text[0];\n    ```", "```java\n    public void Awake() {\n      for(int i=0;i<buttonText.Length;i++) {\n        int levelScore = PlayerPrefs.GetInt(\"LevelScore\" + (i + 1), 0);\n        buttonText[i].text = \"Level \" + (i + 1) + \"\\nScore: \" + levelScore;\n      }\n    }\n    ```", "```java\n    public void LoadLevel(int lvl) {\n      Application.LoadLevel(lvl);\n    }\n    ```"]