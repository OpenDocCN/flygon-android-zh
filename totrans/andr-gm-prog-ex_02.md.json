["```java\npackage com.gamecodeschool.c1tappydefender;\n\nimport android.app.Activity;\nimport android.os.Bundle;\n\npublic class MainActivity extends Activity{\n\n    // This is the entry point to our game\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        //Here we set our UI layout as the view\n        setContentView(R.layout.activity_main);\n\n    }\n}\n```", "```java\n//Here we set our UI layout as the view\nsetContentView(R.layout.activity_main);\n\n// Get a reference to the button in our layout\nfinal Button buttonPlay =\n (Button)findViewById(R.id.buttonPlay);\n// Listen for clicks\nbuttonPlay.setOnClickListener(this);\n\n```", "```java\npublic class MainActivity extends Activity \n implements View.OnClickListener{\n\n```", "```java\n@Override\npublic void onClick(View v) {\n  //Our code goes here\n}\n```", "```java\n// must be the Play button.\n// Create a new Intent object\nIntent i = new Intent(this, GameActivity.class);\n// Start our GameActivity class via the Intent\nstartActivity(i);\n// Now shut this activity down\nfinish();    \n```", "```java\n    android:name=\".MainActivity\"\n    ```", "```java\n    android:theme=\"@android:style/Theme.NoTitleBar.Fullscreen\"\n    android:screenOrientation=\"landscape\"\n    ```", "```java\n    android:name=\".GameActivity\"\n    ```", "```java\n    android:theme=\"@android:style/Theme.NoTitleBar.Fullscreen\"\n    android:screenOrientation=\"landscape\"\n    ```", "```java\n    package com.gamecodeschool.c1tappydefender;\n\n    import android.view.SurfaceView;\n\n    public class TDView extends SurfaceView implements Runnable{\n\n    }\n    ```", "```java\npackage com.gamecodeschool.c1tappydefender;\n\nimport android.content.Context;\nimport android.view.SurfaceView;\n\npublic class TDView extends SurfaceView implements Runnable{\n\n    public TDView(Context context) {\n        super(context);\n    }\n}\n```", "```java\n@Override\n    public void run() {\n        while (playing) {\n            update();\n            draw();\n            control();\n        }\n    }\n```", "```java\nprivate void update(){\n\n}\n\nprivate void draw(){\n\n}\n\nprivate void control(){\n\n}\n```", "```java\nvolatile boolean playing;\n```", "```java\n// Clean up our thread if the game is interrupted or the player quits\npublic void pause() {\n        playing = false;\n        try {\n            gameThread.join();\n        } catch (InterruptedException e) {\n\n        }\n    }\n\n    // Make a new thread and start it\n    // Execution moves to our R\n    public void resume() {\n           playing = true;\n           gameThread = new Thread(this);\n           gameThread.start();\n    }\n```", "```java\nvolatile boolean playing;\nThread gameThread = null;\n\n```", "```java\npackage com.gamecodeschool.c1tappydefender;\n\nimport android.app.Activity;\nimport android.os.Bundle;\n\npublic class GameActivity extends Activity {\n\n    // This is where the \"Play\" button from HomeActivity sends us\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n    }\n\n    // If the Activity is paused make sure to pause our thread\n    @Override\n    protected void onPause() {\n        super.onPause();\n        gameView.pause();\n    }\n\n    // If the Activity is resumed make sure to resume our thread\n    @Override\n    protected void onResume() {\n        super.onResume();\n        gameView.resume();\n    }\n\n}\n```", "```java\n// Our object to handle the View\nprivate TDView gameView;\n```", "```java\n// Create an instance of our Tappy Defender View (TDView)\n// Also passing in \"this\" which is the Context of our app\ngameView = new TDView(this);\n\n// Make our gameView the view for the Activity\nsetContentView(gameView);\n```", "```java\nprivate Bitmap bitmap;\nprivate int x, y;\nprivate int speed = 0;\n```", "```java\n// Constructor\npublic PlayerShip(Context context) {\n        x = 50;\n        y = 50;\n        speed = 1;\n        bitmap = BitmapFactory.decodeResource \n        (context.getResources(), R.drawable.ship);\n\n    }\n```", "```java\npublic void update() {\n  x++;\n}\n```", "```java\n//Getters\npublic Bitmap getBitmap() {\n  return bitmap;\n}\n\npublic int getSpeed() {\n  return speed;\n}\n\npublic int getX() {\n  return x;\n}\n\npublic int getY() {\n  return y;\n}\n```", "```java\n//Game objects\nprivate PlayerShip player;\n```", "```java\n// For drawing\nprivate Paint paint;\nprivate Canvas canvas;\nprivate SurfaceHolder ourHolder;\n```", "```java\n// Initialize our drawing objects\nourHolder = getHolder();\npaint = new Paint();\n```", "```java\n// Initialize our player ship\nplayer = new PlayerShip(context);\n```", "```java\n// Update the player\nplayer.update();\n```", "```java\nif (ourHolder.getSurface().isValid()) {\n\n  //First we lock the area of memory we will be drawing to\n  canvas = ourHolder.lockCanvas();\n\n  // Rub out the last frame\n  canvas.drawColor(Color.argb(255, 0, 0, 0));\n\n  // Draw the player\n  canvas.drawBitmap(\n    player.getBitmap(), \n    player.getX(), \n    player.getY(), \n    paint);\n\n  // Unlock and draw the scene\n  ourHolder.unlockCanvasAndPost(canvas);\n}\n```", "```java\ntry {\n    gameThread.sleep(17);\n    } catch (InterruptedException e) {\n\n    }\n```"]