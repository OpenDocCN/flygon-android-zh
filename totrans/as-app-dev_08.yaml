- en: Chapter 8. Debugging
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章. 调试
- en: The debugging environment is one of the most important features of an IDE. Using
    a debugging tool allows you to easily optimize your application and improve its
    performance. Do you want to use one of these debug tools while programming in
    Android Studio? Android Studio includes the **Dalvik Debug Monitor Server** (**DDMS**)
    debugging tool.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 调试环境是IDE最重要的功能之一。使用调试工具可以轻松优化你的应用程序并提高其性能。在Android Studio中编程时，你想使用这些调试工具之一吗？Android
    Studio包括**Dalvik Debug Monitor Server**（**DDMS**）调试工具。
- en: In this chapter we will start by learning about the run and debug options and
    how to emulate our application in one of the Android virtual devices we learned
    to create in the previous chapter. We will learn about the debugger tab, the console
    tab, and the LogCat tab in depth. We will also learn how to use breakpoints using
    the debugger and how to run our application stopping in those breakpoints. We
    will end this chapter with information about each tab available in the advanced
    debugging tool included in Android Studio DDMS.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将从了解运行和调试选项开始，以及如何在前一章学到的Android虚拟设备中模拟我们的应用程序。我们将深入探讨调试器标签页、控制台标签页和LogCat标签页。我们还将学习如何使用调试器设置断点，以及如何运行我们的应用程序并在这些断点处停止。我们将在本章最后介绍Android
    Studio DDMS中包含的高级调试工具的每个标签页的信息。
- en: 'These are the topics we''ll be covering in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们将在本章中介绍的主题：
- en: Debugging
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试
- en: LogCat
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LogCat
- en: DDMS tools
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DDMS工具
- en: Running and debugging
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行与调试
- en: Android applications can be run from Android Studio in a real device using the
    USB connection or in a virtual device using the emulator. Virtual devices make
    it possible to test our applications in different types of hardware and software
    configurations. In this chapter we are using the emulator to run and debug our
    application because of its simplicity and flexibility.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Android应用程序可以通过Android Studio在真实设备上使用USB连接或在虚拟设备上使用模拟器运行。虚拟设备使我们能够在不同的硬件和软件配置中测试我们的应用程序。由于简单和灵活性，在本章中我们使用模拟器来运行和调试我们的应用程序。
- en: To directly run an application, navigate to the menu **Run** | **Run 'MyApplication'**.
    You can also click on the play icon button from the toolbar. To debug an application,
    navigate to the menu **Run** | **Debug 'MyApplication'** or click on the bug icon
    from the toolbar.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要直接运行一个应用程序，请导航到菜单 **运行** | **运行 'MyApplication'**。你也可以从工具栏中点击播放图标按钮。要调试一个应用程序，请导航到菜单
    **运行** | **调试 'MyApplication'**，或者从工具栏中点击虫子图标。
- en: When we select the debug option, a dialog to choose the device is opened. The
    first option is to choose a running device; the available connected devices are
    listed, real or virtual ones. The second option is to launch a new instance of
    the emulator; the available virtual devices are listed. Check the **Launch emulator**
    option and select the virtual device created in [Chapter 7](ch07.html "Chapter 7. Tools"),
    *Tools*. Click on **OK**. The emulator will be launched. The next time we run
    or debug the application, the emulator is already running, so we will choose the
    first option (**Choose a running device**).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们选择调试选项时，会打开一个选择设备的对话框。第一个选项是选择正在运行设备；列出可用的连接设备，无论是真实的还是虚拟的。第二个选项是启动模拟器的新实例；列出可用的虚拟设备。勾选**启动模拟器**选项，并选择在[第7章](ch07.html
    "第7章. 工具")，*工具*中创建的虚拟设备。点击**确定**。模拟器将被启动。下次我们运行或调试应用程序时，模拟器已经在运行，因此我们将选择第一个选项（**选择一个运行中的设备**）。
- en: '![Running and debugging](img/5273OS_08_01.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![运行与调试](img/5273OS_08_01.jpg)'
- en: 'While debugging, on the bottom of Android Studio there are three tabs: **Debugger**,
    **Console**, and **LogCat**.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在调试过程中，在Android Studio的底部有三个标签页：**调试器**，**控制台**，和**LogCat**。
- en: 'The **Console** displays the events that are taking place while the emulator
    is being launched. Open it to examine the messages and check that the emulator
    and the application are correctly being executed. The actions that should appear
    are:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**控制台**显示在启动模拟器时发生的事件。打开它以检查消息，并确认模拟器和应用程序是否正确执行。应该出现的操作有：'
- en: '`Waiting for device`: Start point when the emulator is being launched.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`等待设备`：启动模拟器时的起始点。'
- en: '`Uploading file`: The application is packed and stored in the device.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`上传文件`：应用程序被打包并存储在设备上。'
- en: '`Installing`: The application is being installed in the device. After the installation
    a success message should be printed.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`安装`：应用程序正在设备上安装。安装完成后应该会打印成功消息。'
- en: '`Launching application`: The application starts to execute.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`启动应用程序`：应用程序开始执行。'
- en: '`Waiting for process`: The application should now be running and the debug
    system tries to connect to the application process in the device.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`等待进程`：应用程序现在应该正在运行，调试系统尝试连接到设备中的应用程序进程。'
- en: After the success of the previous steps, the application will be visible in
    the emulator. Test it by typing any name in the text input and click on the **Accept**
    button. The greeting message should change.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 完成以上步骤后，应用程序将在模拟器中可见。通过在文本输入中输入任何名字并点击**接受**按钮来测试它。问候语应该会改变。
- en: The **Debugger** manages the breakpoints, controls the execution of the code,
    and shows information about the variables. To add a breakpoint in our code, just
    click on the left edge of a line code. A red point will appear next to the line
    code to indicate the breakpoint. To delete the breakpoint, click on it. If you
    click on a breakpoint using the right mouse button, more options are available.
    We can disable it without deleting it or we can set a condition for the breakpoint.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**调试器**管理断点，控制代码的执行，并显示有关变量的信息。要在我们的代码中添加断点，只需点击行代码左侧边缘。行代码旁边会出现一个红点来指示断点。要删除断点，请点击它。如果使用鼠标右键点击断点，将提供更多选项。我们可以禁用它而不删除它，或者为断点设置条件。'
- en: Add a breakpoint in the conditional statement of the `onAcceptClick` method
    of our main activity and debug the application again.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们主活动的`onAcceptClick`方法的条件语句中添加一个断点，并再次调试应用程序。
- en: '![Running and debugging](img/5273OS_08_02.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![运行和调试](img/5273OS_08_02.jpg)'
- en: Enter your name in the application and click on the **Accept** button. When
    the execution gets to the breakpoint, it pauses and the debugger tab is opened.
    Since we added the breakpoint in the conditional statement, before assigning the
    text, our greeting message has not changed.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序中输入你的名字并点击**接受**按钮。当执行到断点时，它会暂停并打开调试标签页。由于我们在条件语句中添加了断点，在分配文本之前，我们的问候语还没有改变。
- en: 'From the debugger tab we can examine the method call hierarchy and the variables
    state at that point of execution. The available variables are the parameter of
    the method (`v`), the `TextView` and `EditText` objects obtained by the `findViewById`
    method and the reference to the current activity (`this`). Expand the `EditText`
    object named as `et_name` and search for the property `mText`. This property should
    contain the name you typed before:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 从调试标签页我们可以检查方法调用层次结构和执行到该点时的变量状态。可用的变量包括方法的参数（`v`）、通过`findViewById`方法获得的`TextView`和`EditText`对象以及当前活动的引用（`this`）。展开名为`et_name`的`EditText`对象，查找`mText`属性。这个属性应该包含你之前输入的名字：
- en: To execute the next line of code without stepping into the method call, navigate
    to **Run** | **Step Over** or use the keyboard shortcut indicated for this option,
    usually key *F8*
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要在不进入方法调用的情况下执行下一行代码，请导航到**运行** | **单步跳过**或使用为此选项指定的键盘快捷键，通常是*F8*键。
- en: To step into the method call, navigate to **Run** | **Step Into** or press *F7*
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要进入方法调用，请导航到**运行** | **单步执行**或按*F7*键。
- en: To resume the execution until the next breakpoint if there is one, navigate
    to **Run** | **Resume Program** or press *F9*
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要执行到下一个断点（如果有的话），请导航到**运行** | **恢复程序**或按*F9*键。
- en: To stop the execution, navigate to **Run** | **Stop** or press *Ctrl* + *F2*
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要停止执行，请导航到**运行** | **停止**或按*Ctrl* + *F2*键。
- en: These options, among others, are also available from the debugger tab as icon
    shortcuts.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这些选项（以及其他选项）也可以从调试标签页作为图标快捷方式使用。
- en: Expand the `tv_greeting` object to check the value of its `mText` property.
    Now step over the conditional statement and step over the call of the `setText`
    method. Notice how the value of the `mText` property has changed. Finally, resume
    the execution so the greeting message changes in the device screen.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 展开对象`tv_greeting`以检查其`mText`属性的值。现在单步跳过条件语句并单步跳过`setText`方法的调用。注意`mText`属性的值是如何改变的。最后，恢复执行，以便在设备屏幕上更改问候语。
- en: LogCat
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: LogCat
- en: '**LogCat** is the Android logging system that displays all the log messages
    generated by the Android system in the running device. Log messages have several
    levels of significance. From the LogCat tab we can filter the log messages by
    these levels. For example, if we select the information level as filter, the messages
    from information, warning, and error levels will be displayed.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**LogCat** 是Android的日志系统，它显示运行设备中由Android系统生成的所有日志消息。日志消息有几个重要性级别。从LogCat标签页我们可以根据这些级别过滤日志消息。例如，如果我们选择信息级别作为过滤器，那么来自信息、警告和错误级别的消息将被显示。'
- en: '![LogCat](img/5273OS_08_03.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![LogCat](img/5273OS_08_03.jpg)'
- en: 'To print log messages from our code we need to import the `Log` class. This
    class has a method for each level: `v` method for debug level, `d` method for
    verbose, `i` method for information, `w` method for warning, and `e` method for
    error messages. These methods receive two string parameters. The first string
    parameter usually identifies the source class of the message and the second string
    parameter identifies the message itself. To identify the source class, we recommend
    using a constant static string tag, although in the next example we directly use
    the string to simplify the code. Add the following log messages in the `onAcceptClick`
    method of our main activity:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要从我们的代码中打印日志信息，需要导入`Log`类。这个类为每个级别都有一个方法：`v`方法用于调试级别，`d`方法用于详细，`i`方法用于信息，`w`方法用于警告，`e`方法用于错误信息。这些方法接收两个字符串参数。第一个字符串参数通常标识消息的来源类，第二个字符串参数标识消息本身。为了标识来源类，我们建议使用一个常量静态字符串标签，尽管在下一个示例中我们直接使用字符串以简化代码。在我们的主活动的`onAcceptClick`方法中添加以下日志信息：
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We have a log message to inform about the name obtained from the user input
    and a log message to print a warning if the user did not type any name. Remove
    any breakpoint we previously created and then debug the application.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一条日志信息用于提示从用户输入获取的名称，以及一条如果用户未输入任何名称则打印警告的日志信息。移除之前创建的任何断点，然后调试应用程序。
- en: The LogCat tab has printed all the log messages generated by the device, so
    reading the messages of our application can be complex. We need to filter the
    messages. In the LogCat tab there is an expandable list with the **No Filters**
    option selected. Expand it and select the option **Edit Filter Configuration**.
    A dialog to create filters is opened. Log messages can be filtered by their tag
    or their content using regular expressions, by the name of the package that printed
    them, by the process ID (PID), or by their level.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: LogCat标签打印了设备生成的所有日志信息，因此阅读我们应用程序的消息可能会比较复杂。我们需要过滤这些消息。在LogCat标签中有一个可扩展的列表，默认选择**无过滤**选项。展开它并选择**编辑过滤器配置**选项。将打开一个创建过滤器的对话框。可以使用正则表达式通过它们的标签或内容、打印它们的软件包名称、进程ID（PID）或它们的级别来过滤日志消息。
- en: 'Create a new filter named `MyApplication` and filter by **Package Name** using
    the package of our application as value: `com.example.myapplication`. Click on
    **OK**. Now the LogCat log has been filtered and it is easier to read our messages.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`MyApplication`的新过滤器，并使用我们应用程序的包作为值，通过**包名称**进行过滤：`com.example.myapplication`。点击**确定**。现在LogCat日志已经过过滤，更容易阅读我们的消息。
- en: Focus the emulator window, enter a name in the application, and click on **Accept**.
    Observe how our log message is printed in the LogCat view.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将焦点放在模拟器窗口上，在应用程序中输入一个名字，并点击**接受**。观察我们的日志信息如何在LogCat视图中打印出来。
- en: Delete your name in the application and click on **Accept**. This time, the
    warning message is printed. Notice the different colors used for each type of
    message.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用程序中删除你的名字并点击**接受**。这次，打印了警告信息。注意每种类型消息使用的不同颜色。
- en: If we double-click on a LogCat entrance, we can navigate to the source line
    that generated that log message.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们双击LogCat入口，可以导航到生成该日志信息的源代码行。
- en: DDMS
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DDMS
- en: The Dalvik Debug Monitor Server (DDMS) is a more advanced debugging tool from
    the SDK that has also been integrated into Android Studio. This tool is able to
    monitor both a real device and the emulator.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Dalvik调试监控服务器（DDMS）是SDK中一个更高级的调试工具，它也已经集成到Android Studio中。这个工具能够监控真实设备和模拟器。
- en: To open the DDMS perspective navigate to **Tools** | **Android** | **Monitor
    (DDMS included)**. You can also click on the Android icon button from the toolbar.
    A new window will be opened with the DDMS perspective.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要打开DDMS透视图，请导航到**工具** | **Android** | **监控（包含DDMS）**。你也可以从工具栏点击Android图标按钮。将打开一个新的窗口，并显示DDMS透视图。
- en: On the left part of the window, the list of connected devices is shown. Currently,
    just our virtual device is listed. In the devices section the list of the processes
    running on each device is also presented. We should be able to locate our application
    in the processes of the device we launched before. From the toolbar of the devices
    section, we can stop a process using the stop sign icon button. We can also take
    a screen capture of the virtual device by clicking on the camera icon button.
    Some of the other options will be explained later.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 窗口的左侧显示了已连接设备的列表。目前，仅列出我们的虚拟设备。在设备部分，还展示了每个设备上运行的过程列表。我们应该能够在之前启动的设备的进程中找到我们的应用程序。从设备部分的工具栏中，我们可以使用停止标志图标按钮停止一个进程。我们还可以通过点击相机图标按钮来捕获虚拟设备的屏幕截图。其他一些选项将在后面解释。
- en: 'On the right part of the window, detailed information of the device is provided.
    This information is divided into seven tabs: **Threads**, **Heap**, **Allocation
    Tracker**, **Network Statistics**, **File Explorer**, **Emulator Control**, and
    **System Information**. On the bottom part of the window is the LogCat, which
    has been also integrated in the DDMS perspective.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 窗口的右侧提供了设备的详细信息，这些信息分为七个标签页：**线程**，**堆**，**分配跟踪器**，**网络统计**，**文件浏览器**，**模拟器控制**和**系统信息**。窗口的底部是
    LogCat，它也已经被集成到了 DDMS 视角中。
- en: Threads
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 线程
- en: The threads tab displays the list of threads that belong to the selected process.
    Select our application process from the devices section. The process is identified
    by the package name `com.example.myapplication`. Click on the **Update Threads**
    icon button from the toolbar of the devices section and the threads will be loaded
    in the content of the tab.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 线程标签页显示属于所选进程的线程列表。从设备部分选择我们的应用程序进程，进程通过包名`com.example.myapplication`进行标识。点击设备部分工具栏中的**更新线程**图标按钮，线程将被加载到标签页的内容中。
- en: '![Threads](img/5273OS_08_04.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![线程](img/5273OS_08_04.jpg)'
- en: The first columns are the IDs of the threads. The **Status** column indicates
    the thread state, **utime** indicates the total time spent by the thread executing
    user code, **stime** indicates the total time spent by the thread executing system
    code, and **Name** indicates the name of the thread. The threads that interest
    us are those that spend time executing our user code.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 第一列是线程的 ID。**状态**列指示线程的状态，**utime**表示线程执行用户代码的总时间，**stime**表示线程执行系统代码的总时间，**名称**表示线程的名称。我们感兴趣的线程是那些花费时间执行我们用户代码的线程。
- en: This tool is useful if we create threads in our application apart from the main
    thread. We can check if they are being executed at a certain point of the application
    or if their execution time is moderate or not.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在应用程序中除了主线程之外创建线程，这个工具将非常有用。我们可以检查它们是否在应用程序的某个点上正在执行，或者它们的执行时间是否适度。
- en: Method profiling
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 方法分析
- en: 'Method profiling is a tool to measure the performance of the methods'' execution
    in the selected process. The measured parameters are the number of calls and the
    CPU time spent while executing. There are two types of spent time, the exclusive
    and the inclusive:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 方法分析是测量选定进程中方法执行性能的工具。测量的参数是调用次数和执行时花费的 CPU 时间。有两种类型的耗时，即独占时间和包含时间：
- en: '**Exclusive time**: Time spent in the execution of the method itself.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**独占时间**：在执行方法本身时花费的时间。'
- en: '**Inclusive time**: Total time spent in the execution of the method. This measure
    includes the time spent by any called methods inside the method. These called
    functions are known as its children methods.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**包含时间**：在执行方法中花费的总时间。这个度量包括在方法内部调用的任何方法所花费的时间。这些被调用的函数被称为它的子方法。'
- en: To collect the method profiling data, select our application process from the
    devices section and click on the **Start Method Profiling** icon button from the
    toolbar of the devices section, next to the **Update Threads** icon button. Then
    perform some actions in the application, for example, in our example application,
    type a name and click on the **Accept** button in order to execute the `onAcceptClick`
    method of the main activity. Stop the method profiling by clicking on the **Stop
    Method Profiling** icon button.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 要收集方法分析数据，请从设备部分选择我们的应用程序进程，然后点击设备部分工具栏中的**开始方法分析**图标按钮，该按钮位于**更新线程**图标按钮旁边。接着在应用程序中执行一些操作，例如，在我们的示例应用程序中，输入一个名字并点击**接受**按钮，以执行主活动的`onAcceptClick`方法。通过点击**停止方法分析**图标按钮来停止方法分析。
- en: When the method profiling is stopped, a new tab with the resultant trace is
    opened in the DDMS perspective. On the top of this new tab, the method calls are
    represented in a time graph; each row belongs to a thread. On the bottom of the
    trace, the summary of the time spent in a method is represented in a table.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当方法分析停止时，DDMS透视图会打开一个带有结果跟踪的新标签。在这个新标签的顶部，方法调用以时间图的形式表示；每一行属于一个线程。在跟踪的底部，以表格形式表示了在方法中花费时间的概要。
- en: 'Order the methods by their name to search for our `onAcceptClick` method. Click
    on it to expand the detailed information about the execution of this method. Notice
    the following facts:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 按方法名称排序，以搜索我们的`onAcceptClick`方法。点击它以展开有关此方法执行详细的信息。注意以下事实：
- en: The children methods called inside the `onAcceptClick` method are listed. We
    can see the `EditText.getText` method, the `Activity.findViewById` method, or
    the `TextView.setText` method, which indeed we directly call inside the method
    in the following screenshot.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`onAcceptClick`方法内部调用的子方法被列出。我们可以看到`EditText.getText`方法、`Activity.findViewById`方法或`TextView.setText`方法，实际上我们直接在下面截图中的方法内调用它们。
- en: 'The number of calls. For example, we can see that the `Activity.findViewById`
    method is called twice: that is one call to find the `TextView` object and a second
    call to find the `EditText` object.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用次数。例如，我们可以看到`Activity.findViewById`方法被调用了两次：一次是查找`TextView`对象，第二次是查找`EditText`对象。
- en: The exclusive time columns have no value for the parents or children methods
    due to their own definition of this type of measured time.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 独占时间列对于父方法或子方法没有值，这是由于这种测量时间类型的自身定义。
- en: '![Method profiling](img/5273OS_08_05.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![方法分析](img/5273OS_08_05.jpg)'
- en: Method profiling is very useful to detect methods that spend too much time in
    its execution and be able to optimize them. We can learn which are the most expensive
    methods, to avoid unnecessary calls to them.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 方法分析对于检测执行时间过长的方法非常有用，以便能够优化它们。我们可以了解哪些是最昂贵的方法，以避免对它们进行不必要的调用。
- en: Heap
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 堆
- en: The heap tab displays the heap memory usage information and statistics of the
    selected process. Select the application process and click on the **Update Heap**
    icon button from the toolbar of the devices section to enable it. The heap information
    is shown after a garbage collector (GC) execution. To force it, click on the **Cause
    GC** button or click on the garbage icon button from the toolbar of the devices
    section.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 堆标签显示了选定进程的堆内存使用信息及统计。选择应用进程，并点击设备部分工具栏中的**更新堆**图标按钮以启用它。堆信息在垃圾收集器（GC）执行后显示。若要强制执行，请点击**触发GC**按钮，或点击设备部分工具栏中的垃圾图标按钮。
- en: 'The first table displays the summary of the heap usage: the total size, the
    allocated space, the free space, and the number of allocated objects. The statistics
    table gives the details of the objects allocated in the heap by its type: the
    number of objects, the total size of those objects, the size of the smallest and
    largest objects, the median size, and the average size. Select one of the types
    to load the bottom bar graph. The graph draws the number of the objects of that
    type by its size in bytes. If we click on the graph using the right mouse button,
    we can change its properties (title, colors, font, labels...) and save it as an
    image in PNG format.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个表格显示了堆使用的概要：总大小、已分配空间、空闲空间以及已分配对象的数量。统计表格按类型详细显示了堆中分配的对象：对象数量、这些对象的总大小、最小和最大对象的大小、中位数大小以及平均大小。选择一个类型以加载底部条形图。该图按字节大小绘制了该类型对象的数量。如果我们使用鼠标右键点击图表，可以更改其属性（标题、颜色、字体、标签等）并将其保存为PNG格式的图像。
- en: '![Heap](img/5273OS_08_06.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![堆](img/5273OS_08_06.jpg)'
- en: Allocation tracker
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分配跟踪器
- en: The allocation tracker tab displays the memory allocations of the selected process.
    Select the application process and click on the **Start Tracking** button to start
    tracking the memory information. Then click on the **Get Allocations** button
    to get the list of allocated objects.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 分配跟踪器标签显示了选定进程的内存分配情况。选择应用进程并点击**开始跟踪**按钮以开始跟踪内存信息。然后点击**获取分配**按钮以获取已分配对象列表。
- en: We can use the filter on the top of the tab to filter the objects allocated
    in our own classes. Type our package name in the filter, `com.example.myapplication`.
    For each object, the table shows its allocation size, the thread, the object or
    class, and the method in which the object was allocated. Click on any object to
    see more information, for example, the line number that allocated it. Finally,
    click on the **Stop Tracking** button.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用标签页顶部的过滤器来筛选分配在我们自己类中的对象。在过滤器中输入我们的包名，`com.example.myapplication`。对于每个对象，表格显示其分配大小、线程、对象或类，以及分配该对象的方法。点击任何对象查看更多信息，例如，分配它的行号。最后，点击**停止追踪**按钮。
- en: The allocation tracker is very useful to examine the objects that are being
    allocated when doing certain interactions in our application in order to improve
    the memory consumption.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 分配追踪器对于检查在应用程序中进行某些交互时分配的对象非常有用，以便改善内存消耗。
- en: Network statistics
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络统计
- en: The network statistics tab displays how our application uses the network resources.
    To get the network statistics of any application that uses the network, click
    on the **Start** button. The data transfers will start to appear in the graph.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 网络统计标签页展示了我们的应用程序如何使用网络资源。要获取使用网络的任何应用程序的网络统计信息，请点击**开始**按钮。数据传输将开始出现在图表中。
- en: The network statistics are useful to optimize the network requests in our code
    and control the data transferred at a certain point of the execution.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 网络统计信息有助于优化我们代码中的网络请求，并在执行过程中的某个点控制数据传输。
- en: File Explorer
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文件浏览器
- en: This tab exposes the whole filesystem of the device. For each element we can
    examine its size, date, or permissions. Navigate to `/data/app/` to search for
    our application package file, `com.example.myapplication.apk`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 此标签页暴露了设备上的整个文件系统。对于每个元素，我们可以检查其大小、日期或权限。导航到`/data/app/`以搜索我们的应用程序包文件，`com.example.myapplication.apk`。
- en: Emulator control
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模拟器控制
- en: 'Emulator control allows us to emulate some special states or activities in
    the virtual device. We can test our application in different environments and
    situations to check that it behaves as expected. If our application has features
    that depend on the device physical location, we can use mock locations:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟器控制允许我们在虚拟设备中模拟一些特殊状态或活动。我们可以在不同的环境和情况下测试我们的应用程序，以确保其行为符合预期。如果我们的应用程序具有依赖于设备物理位置的功能，我们可以使用模拟位置：
- en: '**Telephony Status**: Choose the voice and data status, its speed, and latency'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通话状态**：选择语音和数据状态，其速度和延迟'
- en: '**Telephony Actions**: Simulate an incoming call or SMS'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通话操作**：模拟来电或短信'
- en: '**Location Controls**: Set the geolocation of the device'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**位置控制**：设置设备的地理位置'
- en: System information
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 系统信息
- en: The system information tab presents the frame render time, the total CPU load,
    and the total memory usage of the device as graphs. We can search for our application
    and easily compare it along with the rest of the processes running on the device.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 系统信息标签页以图表形式展示设备的帧渲染时间、总CPU负载和总内存使用情况。我们可以搜索我们的应用程序，并将其轻松地与设备上运行的其他进程进行比较。
- en: We can change the properties of the graphs such as colors, font, title and we
    can save them as images in the PNG format. To open these options, click on the
    graph elements using the right mouse button.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以更改图表的属性，如颜色、字体、标题，并将其保存为PNG格式的图像。要打开这些选项，请使用右键点击图表元素。
- en: Open the CPU load and save the graph when our application is running in the
    foreground. Then close the application and update the CPU load by clicking on
    the **Update from Device** button. Notice the difference between both graphs and
    notice the growth of the idle percentage.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们的应用程序在前台运行时，打开CPU负载并保存图表。然后关闭应用程序，并通过点击**从设备更新**按钮更新CPU负载。注意两张图表之间的差异，并注意空闲百分比的升高。
- en: '![System information](img/5273OS_08_07.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![系统信息](img/5273OS_08_07.jpg)'
- en: Summary
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: By the end of this chapter, the users should know the different launch options
    for their application and how to use the console and the LogCat for debugging.
    They should also have learned how to debug an application and to interpret the
    data provided by the DDMS in each of the tabs available.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，用户应该了解他们应用程序的不同启动选项以及如何使用控制台和LogCat进行调试。他们还应该学会如何调试应用程序，并解读DDMS在每个可用标签页中提供的数据。
- en: In the next chapter we will prepare our application for its release using Android
    Studio. First we will learn about the necessary steps to prepare our application
    before building it in the release mode. We will learn about how the applications
    are compressed in `APK` files and how to generate our own `APK`. Finally, we will
    learn how to get our certificate as developers and how to generate a signed `APK`
    file, making it ready for release.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将使用 Android Studio 为我们的应用程序发布做准备。首先，我们会了解在以发布模式构建应用程序之前需要执行的必要步骤。我们将了解应用程序是如何在
    `APK` 文件中进行压缩的，以及如何生成我们自己的 `APK`。最后，我们将学习作为开发者如何获取我们的证书，以及如何生成签名的 `APK` 文件，使其准备好发布。
