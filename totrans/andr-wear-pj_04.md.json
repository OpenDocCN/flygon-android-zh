["```java\npublic class SensorActivity extends Activity implements SensorEventListener {\n  private SensorManager mSensorManager;\n  private Sensor mLight;\n\n  @Override\n  public final void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.main);\n\n    mSensorManager = (SensorManager)  \n    getSystemService(Context.SENSOR_SERVICE);\n    mLight = mSensorManager.getDefaultSensor(Sensor.TYPE_LIGHT);\n\n    mSensorManager = (SensorManager)     \n    getSystemService(Context.SENSOR_SERVICE); \n    final List<Sensor> deviceSensors = \n    mSensorManager.getSensorList(Sensor.TYPE_ALL); \n\n    for(Sensor type : deviceSensors){      \n        Log.e(\"sensors\",type.getStringType()); \n    }\n}\n\n  @Override\n  public final void onAccuracyChanged(Sensor sensor, int accuracy){\n    // Do something here if sensor accuracy changes.\n  }\n\n  @Override\n  public final void onSensorChanged(SensorEvent event) {\n\n  }\n\n  @Override\n  protected void onResume() {\n    super.onResume();\n\n  }\n\n  @Override\n  protected void onPause() {\n    super.onPause();\n    mSensorManager.unregisterListener(this);\n  }\n}\n\n```", "```java\nE/sensors: android.sensor.accelerometer\nE/sensors: android.sensor.magnetic_field\nE/sensors: android.sensor.orientation\nE/sensors: android.sensor.temperature\nE/sensors: android.sensor.proximity\nE/sensors: android.sensor.light\nE/sensors: android.sensor.pressure\nE/sensors: android.sensor.relative_humidity\nE/sensors: android.sensor.geomagnetic_rotation_vector\n\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n    <color name=\"colorPrimary\">#607d8b</color>\n    <color name=\"colorPrimaryDark\">#34515e</color>\n    <color name=\"colorAccent\">#FFF</color>\n</resources>\n\n```", "```java\n<android.support.wearable.view.drawer.WearableDrawerLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/drawer_layout\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:background=\"@color/colorPrimary\"\n    tools:context=\"com.packt.upbeat.MainActivity\"\n    tools:deviceIds=\"wear\">\n\n    .\n    .\n    .\n\n</android.support.wearable.view.drawer.WearableDrawerLayout>\n\n```", "```java\n<android.support.wearable.view.drawer.WearableDrawerLayout\n ...\n\n<android.support.v4.widget.NestedScrollView\n android:id=\"@+id/content\"\n android:layout_width=\"match_parent\"\n android:layout_height=\"match_parent\"\n android:fillViewport=\"true\">\n\n <FrameLayout\n android:id=\"@+id/content_frame\"\n android:layout_width=\"match_parent\"\n android:layout_height=\"match_parent\" />\n\n</android.support.v4.widget.NestedScrollView>\n\n<android.support.wearable.view.drawer.WearableNavigationDrawer\n android:id=\"@+id/top_navigation_drawer\"\n android:layout_width=\"match_parent\"\n android:layout_height=\"match_parent\"\n android:background=\"@color/colorPrimaryDark\" />\n\n<android.support.wearable.view.drawer.WearableActionDrawer\n android:id=\"@+id/bottom_action_drawer\"\n android:layout_width=\"match_parent\"\n android:layout_height=\"match_parent\"\n android:background=\"@color/colorPrimaryDark\"\n app:action_menu=\"@menu/drawer_menu\" />\n\n</android.support.wearable.view.drawer.WearableDrawerLayout>\n\n```", "```java\npublic class DrawerItem {\n    private String name;\n    private String navigationIcon;\n\n    public DrawerItem(String name, String navigationIcon) {\n        this.name = name;\n        this.navigationIcon = navigationIcon;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getNavigationIcon() {\n        return navigationIcon;\n    }\n\n    public void setNavigationIcon(String navigationIcon) {\n        this.navigationIcon = navigationIcon;\n    }\n}\n\n```", "```java\npublic class MainActivity extends WearableActivity  implements\n        WearableActionDrawer.OnMenuItemClickListener{\n\n....\n\n@Override\npublic boolean onMenuItemClick(MenuItem menuItem) {\n    Log.d(TAG, \"onMenuItemClick(): \" + menuItem);\n    final int itemId = menuItem.getItemId();\n  }\n}\n\n```", "```java\nprivate static final String TAG = \"MainActivity\";\nprivate WearableDrawerLayout mWearableDrawerLayout;\nprivate WearableNavigationDrawer mWearableNavigationDrawer;\nprivate WearableActionDrawer mWearableActionDrawer;\nprivate ArrayList<DrawerItem> drawer_itemArrayList;\nprivate int mSelectedScreen;\n\n```", "```java\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n    setAmbientEnabled();\n\n   //Initialise the arraylist\n    drawer_itemArrayList = initializeScreenSystem();\n    mSelectedScreen = 0;\n\n    // Initialize here for content to first screen.\n    ...\n\n    // Main Wearable Drawer Layout that holds all the content\n    mWearableDrawerLayout = (WearableDrawerLayout) \n    findViewById(R.id.drawer_layout);\n\n    // Top Navigation Drawer\n    mWearableNavigationDrawer =\n            (WearableNavigationDrawer) \n    findViewById(R.id.top_navigation_drawer);\n\n    mWearableNavigationDrawer.setAdapter(new NavigationAdapter(this));\n\n    // Bottom Action Drawer\n    mWearableActionDrawer =\n            (WearableActionDrawer) \n    findViewById(R.id.bottom_action_drawer);\n\n    mWearableActionDrawer.setOnMenuItemClickListener(this);\n\n    // Temporarily peeks the navigation and action drawers to ensure \n    the user is aware of them.\n    ViewTreeObserver observer = \n    mWearableDrawerLayout.getViewTreeObserver();\n    observer.addOnGlobalLayoutListener(new \n    ViewTreeObserver.OnGlobalLayoutListener() {\n        @Override\n        public void onGlobalLayout() {\n            mWearableDrawerLayout.getViewTreeObserver()\n            .removeOnGlobalLayoutListener(this);\n            mWearableDrawerLayout.peekDrawer(Gravity.TOP);\n            mWearableDrawerLayout.peekDrawer(Gravity.BOTTOM);\n        }\n    });\n}\n\n```", "```java\nprivate ArrayList<DrawerItem> initializeScreenSystem() {\n    ArrayList<DrawerItem> screens = new ArrayList<DrawerItem>();\n    String[] FragmentArrayNames = \n    getResources().getStringArray(R.array.screens);\n\n    for (int i = 0; i < FragmentArrayNames.length; i++) {\n        String planet = FragmentArrayNames[i];\n        int FragmentResourceId =\n                getResources().getIdentifier(planet, \"array\", \n                getPackageName());\n        String[] fragmentInformation = \n        getResources().getStringArray(FragmentResourceId);\n\n        screens.add(new DrawerItem(\n                fragmentInformation[0],   // Name\n                fragmentInformation[1]));\n    }\n\n    return screens;\n}\n\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n\n    <string-array name=\"screens\">\n        <item>water</item>\n        <item>heart</item>\n        <item>step</item>\n    </string-array>\n\n    <string-array name=\"water\">\n       // drawer item title  \n        <item>Drink water</item>\n      // drawer item icon\n        <item>water_bottle_flat</item>\n    </string-array>\n\n    <string-array name=\"heart\">\n        <item>Heart Beat</item>\n        <item>ic_heart_icon</item>\n    </string-array>\n\n    <string-array name=\"step\">\n        <item>Step Counter</item>\n        <item>ic_step_icon</item>\n    </string-array>\n\n</resources>\n\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <item android:id=\"@+id/menu_about\"\n          android:icon=\"@drawable/ic_info\"\n          android:title=\"About\"/>\n    <item android:id=\"@+id/menu_helathtips\"\n          android:icon=\"@drawable/ic_info\"\n          android:title=\"Health tips\" />\n    <item android:id=\"@+id/menu_calarie\"\n          android:icon=\"@drawable/ic_info\"\n          android:title=\"Calories chart\" />\n</menu>\n\n```", "```java\n@Override\npublic boolean onMenuItemClick(MenuItem menuItem) {\n    Log.d(TAG, \"onMenuItemClick(): \" + menuItem);\n\n    final int itemId = menuItem.getItemId();\n\n    String toastMessage = \"\";\n\n    switch (itemId) {\n        case R.id.menu_about:\n            toastMessage = \n            drawer_itemArrayList.get(mSelectedScreen).getName();\n            break;\n        case R.id.menu_helathtips:\n            toastMessage = \n            drawer_itemArrayList.get(mSelectedScreen).getName();\n            break;\n        case R.id.menu_volume:\n            toastMessage = \n            drawer_itemArrayList.get(mSelectedScreen).getName();\n            break;\n    }\n\n mWearableDrawerLayout.closeDrawer(mWearableActionDrawer);\n\n    if (toastMessage.length() > 0) {\n        Toast toast = Toast.makeText(\n                getApplicationContext(),\n                toastMessage,\n                Toast.LENGTH_SHORT);\n        toast.show();\n        return true;\n    } else {\n        return false;\n    }\n}\n\n```", "```java\nprivate final class NavigationAdapter\n        extends WearableNavigationDrawer\n        .WearableNavigationDrawerAdapter {\n\n@Override\npublic String getItemText(int i) {\n    return null;\n}\n\n@Override\npublic Drawable getItemDrawable(int i) {\n    return null;\n}\n\n@Override\npublic void onItemSelected(int i) {\n\n}\n\n@Override\npublic int getCount() {\n    return 0;\n}\n\n}\n\n```", "```java\n@Override\npublic void onItemSelected(int position) {\n    Log.d(TAG, \"WearableNavigationDrawerAdapter.onItemSelected(): \" + \n    position);\n    mSelectedScreen = position;\n\n    if(position==0) {\n        final DrinkWaterFragment drinkWaterFragment = new \n        DrinkWaterFragment();\n        getFragmentManager()\n                .beginTransaction()\n                .replace(R.id.content_frame, drinkWaterFragment)\n                .commit();\n    }\n\n}\n\n```", "```java\n@Override\npublic String getItemText(int pos) {\n    return drawer_itemArrayList.get(pos).getName();\n}\n\n```", "```java\n@Override\npublic Drawable getItemDrawable(int pos) {\n    String navigationIcon =   \n    drawer_itemArrayList.get(pos).getNavigationIcon();\n\n    int drawableNavigationIconId =\n            getResources().getIdentifier(navigationIcon, \"drawable\", \n            getPackageName());\n\n    return mContext.getDrawable(drawableNavigationIconId);\n}\n\n```", "```java\npublic class MainActivity extends WearableActivity  implements\n        WearableActionDrawer.OnMenuItemClickListener{\n\n    private static final String TAG = \"MainActivity\";\n    private WearableDrawerLayout mWearableDrawerLayout;\n    private WearableNavigationDrawer mWearableNavigationDrawer;\n    private WearableActionDrawer mWearableActionDrawer;\n    private ArrayList<DrawerItem> drawer_itemArrayList;\n    private int mSelectedScreen;\n\n    private DrinkWaterFragment mDrinkFragment;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        setAmbientEnabled();\n        drawer_itemArrayList = initializeScreenSystem();\n        mSelectedScreen = 0;\n\n        // Initialize content to first screen.\n        mDrinkFragment = new DrinkWaterFragment();\n        FragmentManager fragmentManager = getFragmentManager();\n        fragmentManager.beginTransaction().replace(R.id.content_frame, \n        mDrinkFragment).commit();\n\n        // Main Wearable Drawer Layout that holds all the content\n        mWearableDrawerLayout = (WearableDrawerLayout) \n        findViewById(R.id.drawer_layout);\n\n        // Top Navigation Drawer\n        mWearableNavigationDrawer =\n                (WearableNavigationDrawer) \n        findViewById(R.id.top_navigation_drawer);\n\n        mWearableNavigationDrawer.setAdapter(new \n        NavigationAdapter(this));\n\n        // Bottom Action Drawer\n        mWearableActionDrawer =\n                (WearableActionDrawer) \n                findViewById(R.id.bottom_action_drawer);\n\n        mWearableActionDrawer.setOnMenuItemClickListener(this);\n\n        // Temporarily peeks the navigation and action drawers to \n        ensure the user is aware of them.\n        ViewTreeObserver observer = \n        mWearableDrawerLayout.getViewTreeObserver();\n        observer.addOnGlobalLayoutListener(new \n        ViewTreeObserver.OnGlobalLayoutListener() {\n            @Override\n            public void onGlobalLayout() {\n                mWearableDrawerLayout.getViewTreeObserver()\n                .removeOnGlobalLayoutListener(this);\n                mWearableDrawerLayout.peekDrawer(Gravity.TOP);\n                mWearableDrawerLayout.peekDrawer(Gravity.BOTTOM);\n            }\n        });\n    }\n\n    private ArrayList<DrawerItem> initializeScreenSystem() {\n        ArrayList<DrawerItem> screens = new ArrayList<DrawerItem>();\n        String[] FragmentArrayNames = \n        getResources().getStringArray(R.array.screens);\n\n        for (int i = 0; i < FragmentArrayNames.length; i++) {\n            String planet = FragmentArrayNames[i];\n            int FragmentResourceId =\n                    getResources().getIdentifier(planet, \"array\", \n                    getPackageName());\n            String[] fragmentInformation = \n            getResources().getStringArray(FragmentResourceId);\n\n            screens.add(new DrawerItem(\n                    fragmentInformation[0],   // Name\n                    fragmentInformation[1]));\n        }\n\n        return screens;\n    }\n\n    @Override\n    public boolean onMenuItemClick(MenuItem menuItem) {\n        Log.d(TAG, \"onMenuItemClick(): \" + menuItem);\n\n        final int itemId = menuItem.getItemId();\n\n        String toastMessage = \"\";\n\n        switch (itemId) {\n            case R.id.menu_about:\n                toastMessage = \n                drawer_itemArrayList.get(mSelectedScreen).getName();\n                break;\n            case R.id.menu_helathtips:\n                toastMessage = \n                drawer_itemArrayList.get(mSelectedScreen).getName();\n                break;\n            case R.id.menu_volume:\n                toastMessage = \n                drawer_itemArrayList.get(mSelectedScreen).getName();\n                break;\n        }\n\n        mWearableDrawerLayout.closeDrawer(mWearableActionDrawer);\n\n        if (toastMessage.length() > 0) {\n            Toast toast = Toast.makeText(\n                    getApplicationContext(),\n                    toastMessage,\n                    Toast.LENGTH_SHORT);\n            toast.show();\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    private final class NavigationAdapter\n            extends \n    WearableNavigationDrawer.WearableNavigationDrawerAdapter {\n\n        private final Context mContext;\n\n        public NavigationAdapter(Context context) {\n            mContext = context;\n        }\n\n        @Override\n        public int getCount() {\n            return drawer_itemArrayList.size();\n        }\n\n        @Override\n        public void onItemSelected(int position) {\n            Log.d(TAG,              \n            \"WearableNavigationDrawerAdapter.onItemSelected():\"\n            + position);\n            mSelectedScreen = position;\n\n            if(position==0) {\n                final DrinkWaterFragment drinkWaterFragment = new \n                DrinkWaterFragment();\n                getFragmentManager()\n                        .beginTransaction()\n                        .replace(R.id.content_frame, \n                        drinkWaterFragment)\n                        .commit();\n\n            }\n            }\n\n        }\n\n        @Override\n        public String getItemText(int pos) {\n            return drawer_itemArrayList.get(pos).getName();\n        }\n\n        @Override\n        public Drawable getItemDrawable(int pos) {\n            String navigationIcon = \n            drawer_itemArrayList.get(pos).getNavigationIcon();\n\n            int drawableNavigationIconId =\n                    getResources().getIdentifier(navigationIcon, \n                    \"drawable\", getPackageName());\n\n            return mContext.getDrawable(drawableNavigationIconId);\n        }\n    }\n        @Override\n    public void onEnterAmbient(Bundle ambientDetails) {\n        super.onEnterAmbient(ambientDetails);\n    }\n\n    @Override\n    public void onUpdateAmbient() {\n        super.onUpdateAmbient();\n    }\n\n    @Override\n    public void onExitAmbient() {\n        super.onExitAmbient();\n    }\n}\n\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.wearable.view.BoxInsetLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/container\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\"com.packt.upbeat.fragments.HeartRateFragment\"\n    tools:deviceIds=\"wear\">\n\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_gravity=\"center\"\n        android:orientation=\"horizontal\">\n\n        <android.support.v7.widget.AppCompatButton\n            android:id=\"@+id/start\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"50dp\"\n            android:layout_margin=\"10dp\"\n            android:layout_weight=\"1\"\n            android:background=\"@drawable/button_background\"\n            android:elevation=\"5dp\"\n            android:gravity=\"center\"\n            android:text=\"Start\"\n            android:textAllCaps=\"true\"\n            android:textColor=\"@color/white\"\n            android:textStyle=\"bold\" />\n\n        <android.support.v7.widget.AppCompatButton\n            android:id=\"@+id/stop\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"50dp\"\n            android:layout_margin=\"10dp\"\n            android:layout_weight=\"1\"\n            android:background=\"@drawable/button_background\"\n            android:elevation=\"5dp\"\n            android:gravity=\"center\"\n            android:text=\"Stop\"\n            android:textAllCaps=\"true\"\n            android:textColor=\"@color/white\"\n            android:textStyle=\"bold\" />\n\n    </LinearLayout>\n</android.support.wearable.view.BoxInsetLayout>\n\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<selector xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <item android:drawable=\"@color/colorPrimaryDark\" \n    android:state_pressed=\"true\"/>\n    <item android:drawable=\"@color/grey\" android:state_focused=\"true\"/>\n    <item android:drawable=\"@color/colorPrimary\"/>\n</selector>\n\n```", "```java\npublic class DrinkWaterFragment extends Fragment {\n\n    private AppCompatButton mStart;\n    private AppCompatButton mStop;\n\n    public DrinkWaterFragment() {\n        // Required empty public constructor\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup \n    container,\n                             Bundle savedInstanceState) {\n        // Inflate the layout for this fragment\n        View rootView = inflater.inflate(R.layout.drink_water_fragment, \n        container, false);\n\n        mStart = (AppCompatButton) rootView.findViewById(R.id.start);\n        mStop = (AppCompatButton) rootView.findViewById(R.id.stop);\n        mStart.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) { \n\n}\n});\n\nmStop.setOnClickListener(new View.OnClickListener() {\n    @Override\n    public void onClick(View v) {\n\n    }\n\n});\n\n     return rootView;\n  }\n}\n\n```", "```java\npublic class WaterReminderReceiver extends BroadcastReceiver {\n    public static final String CONTENT_KEY = \"contentText\";\n\n    @Override\n    public void onReceive(Context context, Intent intent) {\n        Intent intent2 = new Intent(context, MainActivity.class);\n        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\n        PendingIntent pendingIntent = \n        PendingIntent.getActivity(context, 0, intent2,\n                PendingIntent.FLAG_ONE_SHOT);\n\n        Uri defaultSoundUri = \n        RingtoneManager.getDefaultUri(RingtoneManager.TYPE_ALARM);\n\n        NotificationCompat.Builder notificationBuilder = \n        (NotificationCompat.Builder) new \n        NotificationCompat.Builder(context)\n                .setAutoCancel(true)   \n                //Automatically delete the notification\n                .setSmallIcon(R.drawable.water_bottle_flat) \n                //Notification icon\n                .setContentIntent(pendingIntent)\n                .setContentTitle(\"Time to hydrate\")\n                .setContentText(\"Drink a glass of water now\")\n                .setCategory(Notification.CATEGORY_REMINDER)\n                .setPriority(Notification.PRIORITY_HIGH)\n                .setSound(defaultSoundUri);\n\n        NotificationManagerCompat notificationManager = \n        NotificationManagerCompat.from(context);\n        notificationManager.notify(0, notificationBuilder.build());\n\n        Toast.makeText(context, \"Repeating Alarm Received\", \n        Toast.LENGTH_SHORT).show();\n    }\n}\n\n```", "```java\n<receiver android:name=\".services.WaterReminderReceiver\" android:process=\":remote\" />\n\n```", "```java\nmStart.setOnClickListener(new View.OnClickListener() {\n    @Override\n    public void onClick(View v) {\n        Intent intent = new Intent(getActivity(), \n        WaterReminderReceiver.class);\n        PendingIntent sender = \n        PendingIntent.getBroadcast(getActivity(),\n                0, intent, 0);\n\n        // We want the alarm to go off 5 seconds from now.\n        long firstTime = SystemClock.elapsedRealtime();\n        firstTime += 5 * 1000;\n\n        // Schedule the alarm!\n        AlarmManager am = (AlarmManager) \n        getActivity().getSystemService(ALARM_SERVICE);\n        am.setRepeating(AlarmManager.ELAPSED_REALTIME_WAKEUP,\n                firstTime, 5 * 1000, sender);\n\n        //DOZE MODE SUPPORT       am.setAndAllowWhileIdle(AlarmManager\n        .ELAPSED_REALTIME_WAKEUP, firstTime, sender);\n\n        // Tell the user about what we did.\n        if (mToast != null) {\n            mToast.cancel();\n        }\n        mToast = Toast.makeText(getActivity(), \n        \"Subscribed to water alarm\",\n                Toast.LENGTH_LONG);\n        mToast.show();\n    }\n});\n\n```", "```java\n  mStop.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                // Create the same intent, and thus a matching \n                IntentSender, for the one that was scheduled.\n                Intent intent = new Intent(getActivity(), \n                WaterReminderReceiver.class);\n                PendingIntent sender = \n                PendingIntent.getBroadcast(getActivity(),\n                        0, intent, 0);\n\n                // And cancel the alarm.\n                AlarmManager am = (AlarmManager) \n                getActivity().getSystemService(ALARM_SERVICE);\n                am.cancel(sender);\n\n                // Tell the user about what we did.\n                if (mToast != null) {\n                    mToast.cancel();\n                }\n                mToast = Toast.makeText(getActivity(), \"Unsubscribed \n                from water reminder\",\n                        Toast.LENGTH_LONG);\n                mToast.show();\n            }\n        });\n\n```", "```java\npublic class DrinkWaterFragment extends Fragment {\n\n    private AppCompatButton mStart;\n    private AppCompatButton mStop;\n    private Toast mToast;\n\n    public DrinkWaterFragment() {\n        // Required empty public constructor\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup \n    container,\n                             Bundle savedInstanceState) {\n        // Inflate the layout for this fragment\n        View rootView = inflater.inflate(R.layout.drink_water_fragment, \n        container, false);\n\n        mStart = (AppCompatButton) rootView.findViewById(R.id.start);\n        mStop = (AppCompatButton) rootView.findViewById(R.id.stop);\n\n        mStart.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                Intent intent = new Intent(getActivity(), \n                WaterReminderReceiver.class);\n                PendingIntent sender = \n                PendingIntent.getBroadcast(getActivity(),\n                        0, intent, 0);\n\n                // We want the alarm to go off 5 seconds from now.\n                long firstTime = SystemClock.elapsedRealtime();\n                firstTime += 5 * 1000;\n\n                // Schedule the alarm!\n                AlarmManager am = (AlarmManager) \n                getActivity().getSystemService(ALARM_SERVICE);\n                am.setRepeating(AlarmManager.ELAPSED_REALTIME_WAKEUP,\n                        firstTime, 5 * 1000, sender);\n                //DOZE MODE SUPPORT\n                am.setAndAllowWhileIdle\n                (AlarmManager.ELAPSED_REALTIME_WAKEUP, \n                firstTime, sender);\n\n                // Tell the user about what we did.\n                if (mToast != null) {\n                    mToast.cancel();\n                }\n                mToast = Toast.makeText(getActivity(), \"Subscribed to \n                water alarm\",\n                        Toast.LENGTH_LONG);\n                mToast.show();\n            }\n        });\n\n        mStop.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                // Create the same intent, \n                and thus a matching IntentSender, for\n                // the one that was scheduled.\n                Intent intent = new Intent(getActivity(), \n                WaterReminderReceiver.class);\n                PendingIntent sender = \n                PendingIntent.getBroadcast(getActivity(),\n                        0, intent, 0);\n\n                // And cancel the alarm.\n                AlarmManager am = (AlarmManager) \n                getActivity().getSystemService(ALARM_SERVICE);\n                am.cancel(sender);\n\n                // Tell the user about what we did.\n                if (mToast != null) {\n                    mToast.cancel();\n                }\n                mToast = Toast.makeText(getActivity(), \"Unsubscribed \n                from water reminder\",\n                        Toast.LENGTH_LONG);\n                mToast.show();\n            }\n        });\n\n        return rootView;\n    }\n}\n\n```", "```java\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n\n...\n// Initialize content to first screen.\nmDrinkFragment = new DrinkWaterFragment();\nFragmentManager fragmentManager = getFragmentManager();\nfragmentManager.beginTransaction().replace(R.id.content_frame, mDrinkFragment).commit();\n\n}\n\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.wearable.view.BoxInsetLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/container\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\"com.packt.upbeat.fragments.HeartRateFragment\"\n    tools:deviceIds=\"wear\">\n\n    <LinearLayout xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:layout_gravity=\"center\"\n        android:orientation=\"horizontal\">\n\n        <ImageView\n        android:layout_weight=\"1\"\n        android:src=\"img/ic_heart_icon\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\" />\n\n        <TextView\n            android:id=\"@+id/heart_rate\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n            android:layout_gravity=\"center\"\n            android:layout_weight=\"1\"\n            android:gravity=\"left|center\"\n            android:hint=\"Reading\"\n            android:textColor=\"@color/colorAccent\"\n            android:textColorHint=\"#eaeaea\"\n            android:textSize=\"20sp\"\n            android:textStyle=\"bold\" />\n\n    </LinearLayout>\n</android.support.wearable.view.BoxInsetLayout>\n\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n\n    <declare-styleable name=\"HeartBeatView\">\n        <attr name=\"scaleFactor\" format=\"float\" />\n        <attr name=\"duration\" format=\"integer\" />\n    </declare-styleable>\n\n</resources>\n\n```", "```java\npublic class HeartBeatView extends AppCompatImageView{\n\n    public HeartBeatView(Context context) {\n        super(context);\n    }\n\n    public HeartBeatView(Context context, AttributeSet attrs) {\n        super(context, attrs);\n    }\n\n    public HeartBeatView(Context context, AttributeSet attrs, int \n    defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n    }\n}\n\n```", "```java\nprivate static final float DEFAULT_SCALE_FACTOR = 0.2f;\nprivate static final int DEFAULT_DURATION = 50;\nprivate Drawable heartDrawable;\n\nprivate boolean heartBeating = false;\n\nfloat scaleFactor = DEFAULT_SCALE_FACTOR;\nfloat reductionScaleFactor = -scaleFactor;\nint duration = DEFAULT_DURATION;\n\n```", "```java\n<vector xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:width=\"24dp\"\n    android:height=\"24dp\"\n    android:viewportHeight=\"24.0\"\n    android:viewportWidth=\"24.0\">\n    <path\n        android:fillColor=\"#FFFF0000\"\n        android:pathData=\"M12,21.35l-1.45,-1.32C5.4,15.36 2,12.28 2,8.5 \n        2,5.42 4.42,3 7.5,3c1.74,0 3.41,0.81 4.5,2.09C13.09,3.81\n        14.76,3 16.5,3 19.58,3 22,5.42 22,8.5c0,3.78 -3.4,6.86\n        -8.55,11.54L12,21.35z\"/>\n</vector>\n\n```", "```java\nprivate void init() {\n    //make this not mandatory\n    heartDrawable = ContextCompat.getDrawable(getContext(), \n    R.drawable.ic_heart_red_24dp);\n    setImageDrawable(heartDrawable);\n\n}\n\n```", "```java\n(Context context, AttributeSet attrs) {\n    TypedArray a = context.getTheme().obtainStyledAttributes(\n            attrs,\n            R.styleable.HeartBeatView,\n            0, 0\n    );\n    try {\n        scaleFactor = a.getFloat(R.styleable.HeartBeatView_scaleFactor, \n        DEFAULT_SCALE_FACTOR);\n        reductionScaleFactor = -scaleFactor;\n        duration = a.getInteger(R.styleable.HeartBeatView_duration, \n        DEFAULT_DURATION);\n\n    } finally {\n        a.recycle();\n    }\n\n}\n\n```", "```java\n/**\n * toggles current heat beat state\n */\npublic void toggle() {\n    if (heartBeating) {\n        stop();\n    } else {\n        start();\n    }\n}\n\n/**\n * Starts the heat beat/pump animation\n */\npublic void start() {\n    heartBeating = true;\n    animate().scaleXBy(scaleFactor).scaleYBy(scaleFactor)\n    .setDuration(duration).setListener(scaleUpListener);\n}\n\n/**\n * Stops the heat beat/pump animation\n */\npublic void stop() {\n    heartBeating = false;\n    clearAnimation();\n}\n\n```", "```java\npublic void setDurationBasedOnBPM(int bpm) {\n    if (bpm > 0) {\n        duration = Math.round((milliInMinute / bpm) / 3f);\n    }\n}\n\n```", "```java\npublic boolean isHeartBeating() {\n    return heartBeating;\n}\n\npublic int getDuration() {\n    return duration;\n}\n\n```", "```java\npublic void setDuration(int duration) {\n    this.duration = duration;\n}\n\npublic float getScaleFactor() {\n    return scaleFactor;\n}\n\npublic void setScaleFactor(float scaleFactor) {\n    this.scaleFactor = scaleFactor;\n    reductionScaleFactor = -scaleFactor;\n}\n\n```", "```java\n//Scale up animation \nprivate final Animator.AnimatorListener scaleUpListener = new Animator.AnimatorListener() {\n\n    @Override\n    public void onAnimationStart(Animator animation) {\n    }\n\n    @Override\n    public void onAnimationRepeat(Animator animation) {\n\n    }\n\n    @Override\n    public void onAnimationEnd(Animator animation) {\n        //we ignore heartBeating as we want to ensure the heart is \n        reduced back to original size\n        animate().scaleXBy(reductionScaleFactor)\n        .scaleYBy(reductionScaleFactor).setDuration(duration)\n        .setListener(scaleDownListener);\n    }\n\n    @Override\n    public void onAnimationCancel(Animator animation) {\n\n    }\n};\n\n//Scale down animation \nprivate final Animator.AnimatorListener scaleDownListener = new Animator.AnimatorListener() {\n\n    @Override\n    public void onAnimationStart(Animator animation) {\n    }\n\n    @Override\n    public void onAnimationRepeat(Animator animation) {\n    }\n\n    @Override\n    public void onAnimationEnd(Animator animation) {\n        if (heartBeating) {\n            //duration twice as long for the upscale\n            animate().scaleXBy(scaleFactor).scaleYBy(scaleFactor)\n            .setDuration(duration * 2).setListener(scaleUpListener);\n        }\n    }\n\n    @Override\n    public void onAnimationCancel(Animator animation) {\n    }\n};\n\n```", "```java\npublic class HeartBeatView extends AppCompatImageView {\n\n    private static final String TAG = \"HeartBeatView\";\n\n    private static final float DEFAULT_SCALE_FACTOR = 0.2f;\n    private static final int DEFAULT_DURATION = 50;\n    private Drawable heartDrawable;\n\n    private boolean heartBeating = false;\n\n    float scaleFactor = DEFAULT_SCALE_FACTOR;\n    float reductionScaleFactor = -scaleFactor;\n    int duration = DEFAULT_DURATION;\n\n    public HeartBeatView(Context context) {\n        super(context);\n        init();\n    }\n\n    public HeartBeatView(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        populateFromAttributes(context, attrs);\n        init();\n    }\n\n    public HeartBeatView(Context context, AttributeSet attrs, int \n    defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n        populateFromAttributes(context, attrs);\n        init();\n    }\n\n    private void init() {\n        //make this not mandatory\n        heartDrawable = ContextCompat.getDrawable(getContext(), \n        R.drawable.ic_heart_red_24dp);\n        setImageDrawable(heartDrawable);\n\n    }\n\n    private void populateFromAttributes(Context context, AttributeSet \n    attrs) {\n        TypedArray a = context.getTheme().obtainStyledAttributes(\n                attrs,\n                R.styleable.HeartBeatView,\n                0, 0\n        );\n        try {\n            scaleFactor = \n            a.getFloat(R.styleable.HeartBeatView_scaleFactor, \n            DEFAULT_SCALE_FACTOR);\n            reductionScaleFactor = -scaleFactor;\n            duration = a.getInteger(R.styleable.HeartBeatView_duration, \n            DEFAULT_DURATION);\n\n        } finally {\n            a.recycle();\n        }\n\n    }\n\n    /**\n     * toggles current heat beat state\n     */\n    public void toggle() {\n        if (heartBeating) {\n            stop();\n        } else {\n            start();\n        }\n    }\n\n    /**\n     * Starts the heat beat/pump animation\n     */\n    public void start() {\n        heartBeating = true;\n        animate().scaleXBy(scaleFactor).scaleYBy(scaleFactor)\n        .setDuration(duration).setListener(scaleUpListener);\n    }\n\n    /**\n     * Stops the heat beat/pump animation\n     */\n    public void stop() {\n        heartBeating = false;\n        clearAnimation();\n    }\n\n    /**\n     * is the heart currently beating\n     *\n     * @return\n     */\n    public boolean isHeartBeating() {\n        return heartBeating;\n    }\n\n    public int getDuration() {\n        return duration;\n    }\n\n    private static final int milliInMinute = 60000;\n\n    /**\n     * set the duration of the beat based on the beats per minute\n     *\n     * @param bpm (positive int above 0)\n     */\n    public void setDurationBasedOnBPM(int bpm) {\n        if (bpm > 0) {\n            duration = Math.round((milliInMinute / bpm) / 3f);\n        }\n    }\n\n    public void setDuration(int duration) {\n        this.duration = duration;\n    }\n\n    public float getScaleFactor() {\n        return scaleFactor;\n    }\n\n    public void setScaleFactor(float scaleFactor) {\n        this.scaleFactor = scaleFactor;\n        reductionScaleFactor = -scaleFactor;\n    }\n\n    private final Animator.AnimatorListener scaleUpListener = new \n    Animator.AnimatorListener() {\n\n        @Override\n        public void onAnimationStart(Animator animation) {\n        }\n\n        @Override\n        public void onAnimationRepeat(Animator animation) {\n\n        }\n\n        @Override\n        public void onAnimationEnd(Animator animation) {\n            //we ignore heartBeating as we want to ensure the heart is \n            reduced back to original size\n            animate().scaleXBy(reductionScaleFactor)\n            .scaleYBy(reductionScaleFactor).setDuration(duration)\n            .setListener(scaleDownListener);\n        }\n\n        @Override\n        public void onAnimationCancel(Animator animation) {\n\n        }\n    };\n\n    private final Animator.AnimatorListener scaleDownListener = new \n    Animator.AnimatorListener() {\n\n        @Override\n        public void onAnimationStart(Animator animation) {\n        }\n\n        @Override\n        public void onAnimationRepeat(Animator animation) {\n        }\n\n        @Override\n        public void onAnimationEnd(Animator animation) {\n            if (heartBeating) {\n                //duration twice as long for the upscale\n                animate().scaleXBy(scaleFactor).scaleYBy(scaleFactor)\n                .setDuration(duration * 2)\n                .setListener(scaleUpListener);\n            }\n        }\n\n        @Override\n        public void onAnimationCancel(Animator animation) {\n        }\n    };\n\n}\n\n```", "```java\n<com.packt.upbeat.utils.HeartBeatView\n    android:id=\"@+id/heartbeat\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:layout_marginLeft=\"25dp\"\n    android:layout_weight=\"1\" />\n\n```", "```java\npublic class HeartRateFragment extends Fragment implements SensorEventListener\n{\n      public HeartRateFragment() {\n    // Required empty public constructor\n     }\n\n@Override\npublic View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n    // Inflate the layout for this fragment\n    View rootView = inflater.inflate(R.layout.heart_rate_fragment, \n    container, false);\n\nreturn rootView;\n\n  }\n}\n\n```", "```java\nprivate BoxInsetLayout mContainerView;\nprivate TextView mTextView;\nprivate HeartBeatView heartbeat;\nprivate Sensor mHeartRateSensor;\nprivate SensorManager mSensorManager;\nprivate Integer currentValue = 0;\nprivate static final String TAG = \"HeartRateFragment\";\nprivate static final int SENSOR_PERMISSION_CODE = 123;\n\n```", "```java\nheartbeat = (HeartBeatView)rootView.findViewById(R.id.heartbeat);\n\nmContainerView = (BoxInsetLayout)rootView.findViewById(R.id.container);\nmTextView = (TextView)rootView.findViewById(R.id.heart_rate);\nmSensorManager = ((SensorManager)getActivity().getSystemService(SENSOR_SERVICE));\nmHeartRateSensor = mSensorManager.getDefaultSensor(Sensor.TYPE_HEART_RATE);\n\n```", "```java\n<uses-permission android:name=\"android.permission.WAKE_LOCK\" />\n<uses-permission android:name=\"android.permission.BODY_SENSORS\" />\n<uses-permission android:name=\"android.permission.RECEIVE_BOOT_COMPLETED\"/>\n\n```", "```java\n  //Requesting permission\n    private void requestSensorPermission() {\n        if (ContextCompat.checkSelfPermission(getActivity(),  \n        Manifest.permission.BODY_SENSORS) == \n        PackageManager.PERMISSION_GRANTED)\n            return;\n\n        if (ActivityCompat.shouldShowRequestPermissionRationale\n        (getActivity(), Manifest.permission.BODY_SENSORS)) {\n            //If the user has denied the permission previously your \n            code will come to this block\n            //Here you can explain why you need this permission\n            //Explain here why you need this permission\n        }\n        //And finally ask for the permission\n        ActivityCompat.requestPermissions(getActivity(), new String[]\n        {Manifest.permission.BODY_SENSORS}, SENSOR_PERMISSION_CODE);\n    }\n\n    //This method will be called when the user will tap \n    on allow or deny\n    @Override\n    public void onRequestPermissionsResult(int requestCode, \n    @NonNull String[] permissions, @NonNull int[] grantResults) {\n\n        //Checking the request code of our request\n        if (requestCode == SENSOR_PERMISSION_CODE) {\n\n            //If permission is granted\n            if (grantResults.length > 0 && grantResults[0] == \n            PackageManager.PERMISSION_GRANTED) {\n                //Displaying a toast\n                Toast.makeText(getActivity(), \"Permission granted now \n                you can read the storage\", Toast.LENGTH_LONG).show();\n            } else {\n                //Displaying another toast if permission is not granted\n                Toast.makeText(getActivity(), \"Oops you just denied the \n                permission\", Toast.LENGTH_LONG).show();\n            }\n        }\n    }\n}\n\n```", "```java\n@Override\npublic View onCreateView(LayoutInflater inflater, ViewGroup container,\n                         Bundle savedInstanceState) {\n    // Inflate the layout for this fragment\n    View rootView = inflater.inflate(R.layout.heart_rate_fragment, \n    container, false);\n\n  //other components.\n\n    requestSensorPermission();\n\n    return rootView;\n}\n\n```", "```java\n@Override\npublic void onSensorChanged(SensorEvent sensorEvent) {\n\n    if(sensorEvent.sensor.getType() == Sensor.TYPE_HEART_RATE && \n    sensorEvent.values.length > 0) {\n\n        for(Float value : sensorEvent.values) {\n\n            int newValue = Math.round(value);\n\n            if(currentValue != newValue) {\n                currentValue = newValue;\n\n                mTextView.setText(currentValue.toString());\n                heartbeat.setDurationBasedOnBPM(currentValue);\n                heartbeat.toggle();\n            }\n\n        }\n\n    }\n}\n\n```", "```java\n@Override\npublic void onStart() {\n    super.onStart();\n    if (mHeartRateSensor != null) {\n        Log.d(TAG, \"HEART RATE SENSOR NAME: \" +  \n        mHeartRateSensor.getName() + \" TYPE: \" + \n        mHeartRateSensor.getType());\n        mSensorManager.unregisterListener(this, this.mHeartRateSensor);\n        boolean isRegistered = mSensorManager.registerListener(this, \n        this.mHeartRateSensor, SensorManager.SENSOR_DELAY_FASTEST);\n        Log.d(TAG, \"HEART RATE LISTENER REGISTERED: \" + isRegistered);\n    } else {\n        Log.d(TAG, \"HEART RATE SENSOR NOT READY\");\n    }\n}\n\n@Override\npublic void onDestroy() {\n    super.onDestroy();\n    mSensorManager.unregisterListener(this);\n    Log.d(TAG, \"SENSOR UNREGISTERED\");\n}\n\n```", "```java\npublic class HeartRateFragment extends Fragment implements SensorEventListener {\n\n    private BoxInsetLayout mContainerView;\n    private TextView mTextView;\n    private HeartBeatView heartbeat;\n    private Sensor mHeartRateSensor;\n    private SensorManager mSensorManager;\n    private Integer currentValue = 0;\n    private static final String TAG = \"HeartRateFragment\";\n    private static final int SENSOR_PERMISSION_CODE = 123;\n\n    private GoogleApiClient mGoogleApiClient;\n\n    public HeartRateFragment() {\n        // Required empty public constructor\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup \n    container,\n                             Bundle savedInstanceState) {\n        // Inflate the layout for this fragment\n        View rootView = inflater.inflate(R.layout.heart_rate_fragment, \n        container, false);\n\n        heartbeat = (HeartBeatView)rootView.findViewById\n        (R.id.heartbeat);\n\n        mContainerView = (BoxInsetLayout)rootView.findViewById\n        (R.id.container);\n        mTextView = (TextView)rootView.findViewById(R.id.heart_rate);\n        mSensorManager = ((SensorManager)getActivity()\n        .getSystemService(SENSOR_SERVICE));\n        mHeartRateSensor = mSensorManager.getDefaultSensor\n        (Sensor.TYPE_HEART_RATE);\n\n        mGoogleApiClient = new GoogleApiClient.Builder(getActivity())\n        .addApi(Wearable.API).build();\n        mGoogleApiClient.connect();\n\n        requestSensorPermission();\n\n        return rootView;\n    }\n\n    @Override\n    public void onStart() {\n        super.onStart();\n        if (mHeartRateSensor != null) {\n            Log.d(TAG, \"HEART RATE SENSOR NAME: \" +  \n            mHeartRateSensor.getName() + \" TYPE: \" + \n            mHeartRateSensor.getType());\n            mSensorManager.unregisterListener(this, \n            this.mHeartRateSensor);\n            boolean isRegistered = mSensorManager.registerListener\n            (this, this.mHeartRateSensor, \n            SensorManager.SENSOR_DELAY_FASTEST);\n            Log.d(TAG, \"HEART RATE LISTENER REGISTERED: \" + \n            isRegistered);\n        } else {\n            Log.d(TAG, \"HEART RATE SENSOR NOT READY\");\n        }\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n        mSensorManager.unregisterListener(this);\n        Log.d(TAG, \"SENSOR UNREGISTERED\");\n    }\n\n    @Override\n    public void onSensorChanged(SensorEvent sensorEvent) {\n\n        if(sensorEvent.sensor.getType() == Sensor.TYPE_HEART_RATE && \n        sensorEvent.values.length > 0) {\n\n            for(Float value : sensorEvent.values) {\n\n                int newValue = Math.round(value);\n\n                if(currentValue != newValue) {\n                    currentValue = newValue;\n\n                    mTextView.setText(currentValue.toString());\n                    heartbeat.setDurationBasedOnBPM(currentValue);\n                    heartbeat.toggle();\n                }\n\n            }\n\n        }\n    }\n\n    @Override\n    public void onAccuracyChanged(Sensor sensor, int i) {\n        Log.d(TAG, \"ACCURACY CHANGED: \" + i);\n    }\n\n    //Requesting permission\n    private void requestSensorPermission() {\n        if (ContextCompat.checkSelfPermission(getActivity(),  \n        Manifest.permission.BODY_SENSORS) == \n        PackageManager.PERMISSION_GRANTED)\n            return;\n\n        if (ActivityCompat.shouldShowRequestPermissionRationale\n        (getActivity(), Manifest.permission.BODY_SENSORS)) {\n            //If the user has denied the permission previously your \n            code will come to this block\n            //Here you can explain why you need this permission\n            //Explain here why you need this permission\n        }\n        //And finally ask for the permission\n        ActivityCompat.requestPermissions(getActivity(), new String[]\n        {Manifest.permission.BODY_SENSORS}, SENSOR_PERMISSION_CODE);\n    }\n\n    //This method will be called when the user will tap \n    on allow or deny\n    @Override\n    public void onRequestPermissionsResult(int requestCode, @NonNull \n    String[] permissions, @NonNull int[] grantResults) {\n\n        //Checking the request code of our request\n        if (requestCode == SENSOR_PERMISSION_CODE) {\n\n            //If permission is granted\n            if (grantResults.length > 0 && grantResults[0] == \n            PackageManager.PERMISSION_GRANTED) {\n                //Displaying a toast\n                Toast.makeText(getActivity(), \"Permission granted now \n                 you can read the storage\", Toast.LENGTH_LONG).show();\n            } else {\n                //Displaying another toast if permission is not granted\n                Toast.makeText(getActivity(), \"Oops you just denied the \n                permission\", Toast.LENGTH_LONG).show();\n            }\n        }\n    }\n}\n\n```", "```java\nif(position==0) {\n    final DrinkWaterFragment drinkWaterFragment = new \n    DrinkWaterFragment();\n    getFragmentManager()\n            .beginTransaction()\n            .replace(R.id.content_frame, drinkWaterFragment)\n            .commit();\n\n}else if(position == 1){\n    final HeartRateFragment sectionFragment = new HeartRateFragment();\n    getFragmentManager()\n            .beginTransaction()\n            .replace(R.id.content_frame, sectionFragment)\n            .commit();\n}\n\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.wearable.view.BoxInsetLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/container\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\"com.packt.upbeat.fragments.HeartRateFragment\"\n    tools:deviceIds=\"wear\">\n\n    <LinearLayout\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:orientation=\"vertical\">\n\n        <TextView\n            android:text=\"@string/steps\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_gravity=\"center_horizontal|bottom\"\n            android:textSize=\"24sp\"\n            android:layout_weight=\"1\"/>\n\n        <TextView\n            android:id=\"@+id/steps\"\n            android:layout_gravity=\"center_horizontal|top\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:textSize=\"24sp\"\n            android:layout_weight=\"1\"/>\n\n    </LinearLayout>\n</android.support.wearable.view.BoxInsetLayout>\n\n```", "```java\npublic class EventReceiver {\n    private static ConcurrentMap<Class<?>, ConcurrentMap<Reporter, \n    String>> events\n            = new ConcurrentHashMap<Class<?>, ConcurrentMap<Reporter, \n    String>>();\n\n    private static BlockingQueue<Runnable> queue = new \n    LinkedBlockingQueue<Runnable>();\n    private static ExecutorService executorService = new \n    ThreadPoolExecutor(1, 10, 30, TimeUnit.SECONDS, queue);\n\n    public static void register(Class<?> event, Reporter reporter) {\n        if (null == event || null == reporter)\n            return;\n\n        events.putIfAbsent(event, new ConcurrentHashMap<Reporter, \n        String>());\n        events.get(event).putIfAbsent(reporter, \"\");\n    }\n\n    public static void remove(Class<?> event, Reporter reporter) {\n        if (null == event || null == reporter)\n            return;\n\n        if (!events.containsKey(event))\n            return;\n\n        events.get(event).remove(reporter);\n    }\n\n    public static void notify(final Object event) {\n        if (null == event)\n            return;\n\n        if (!events.containsKey(event.getClass()))\n            return;\n\n        for (final Reporter m : events.get(event.getClass()).keySet()) {\n            executorService.execute(new Runnable() {\n                @Override\n                public void run() {\n                    m.notifyEvent(event);\n                }\n            });\n        }\n    }\n\n}\n\n```", "```java\npublic interface Reporter {\n    public void notifyEvent(Object o);\n}\n\n```", "```java\npublic class AlarmNotification extends BroadcastReceiver {\n\n    private static final String TAG = \"AlarmNotification\";\n\n    @Override\n    public void onReceive(Context context, Intent intent) {\n        Log.d(TAG, \"alarm fired\");\n        context.startService(new Intent(context, \n        WearStepService.class));\n    }\n}\n\n```", "```java\npublic class WearStepService extends Service implements SensorEventListener {\n\n    public static final String TAG = \"WearStepService\";\n    private static final long THREE_MINUTES = 3 * 60 * 1000;\n    private static final String STEP_COUNT_PATH = \"/step-count\";\n    private static final String STEP_COUNT_KEY = \"step-count\";\n    private SensorManager sensorManager;\n    private Sensor countSensor;\n\n}\n\n```", "```java\nprivate void getSensorManager() {\n    if (null != sensorManager)\n        return;\n\n    Log.d(TAG, \"getSensorManager\");\n    sensorManager = (SensorManager) \n    getSystemService(Context.SENSOR_SERVICE);\n    registerCountSensor();\n}\n\n```", "```java\nprivate void getCountSensor() {\n    if (null != countSensor)\n        return;\n\n    Log.d(TAG, \"getCountSensor\");\n    countSensor = \n    sensorManager.getDefaultSensor(Sensor.TYPE_STEP_COUNTER);\n    registerCountSensor();\n}\n\n```", "```java\nprivate void registerCountSensor() {\n    if (countSensor == null)\n        return;\n\n    Log.d(TAG, \"sensorManager.registerListener\");\n    sensorManager.registerListener(this, countSensor, \n    SensorManager.SENSOR_DELAY_UI);\n}\n\n```", "```java\nprivate void setAlarm() {\n    Log.d(TAG, \"setAlarm\");\n\n    Intent intent = new Intent(this, AlarmNotification.class);\n    PendingIntent pendingIntent =  \n    PendingIntent.getBroadcast(this.getApplicationContext(), \n    234324243, intent, 0);\n    AlarmManager alarmManager = (AlarmManager) \n    getSystemService(ALARM_SERVICE);\n    long firstRun = System.currentTimeMillis() + THREE_MINUTES;\n    alarmManager.setInexactRepeating(AlarmManager.RTC_WAKEUP, firstRun, \n    THREE_MINUTES, pendingIntent);\n}\n\n```", "```java\n    @Override\n    public void onSensorChanged(SensorEvent event) {\n        if (event.sensor.getType() == Sensor.TYPE_STEP_COUNTER)\n            StepsTaken.updateSteps(event.values.length);\n        Log.d(TAG, \"onSensorChanged: steps count is\" + \n        event.values.length);\n        updateNotification();\n    }\n\n```", "```java\nprivate void updateNotification() {\n    // Create a notification builder that's compatible with platforms \n    >= version 4\n    NotificationCompat.Builder builder =\n            new NotificationCompat.Builder(getApplicationContext());\n\n    // Set the title, text, and icon\n    builder.setContentTitle(getString(R.string.app_name))\n            .setSmallIcon(R.drawable.ic_step_icon);\n\n    builder.setContentText(\"steps: \" + StepsTaken.getSteps());\n\n    // Get an instance of the Notification Manager\n    NotificationManager notifyManager = (NotificationManager)\n            getSystemService(Context.NOTIFICATION_SERVICE);\n\n    // Build the notification and post it\n    notifyManager.notify(0, builder.build());\n}\n\n```", "```java\n@Override\npublic int onStartCommand(Intent intent, int flags, int startId) {\n    Log.d(TAG, \"onStartCommand\");\n\n    getSensorManager();\n    getCountSensor();\n\n    return super.onStartCommand(intent, flags, startId);\n}\n\n```", "```java\n@Override\npublic void onAccuracyChanged(Sensor sensor, int accuracy) {\n    // drop these messages\n    updateNotification();\n\n}\n\n```", "```java\n<service android:name=\".services.WearStepService\" />\n\n<receiver android:name=\".services.AlarmNotification\">\n    <intent-filter>\n        <action android:name=\"android.intent.action.BOOT_COMPLETED\"/>\n    </intent-filter>\n</receiver>\n\n```", "```java\npublic class StepsTaken implements Serializable {\n\n    private static int steps = 0;\n    private static long lastUpdateTime = 0L;\n    private static final String TAG = \"StepsTaken\";\n\n    public static void updateSteps(int stepsTaken) {\n        steps += stepsTaken;\n\n        // today\n        Calendar tomorrow = new GregorianCalendar();\n        tomorrow.setTimeInMillis(lastUpdateTime);\n        // reset hour, minutes, seconds and millis\n        tomorrow.set(Calendar.HOUR_OF_DAY, 0);\n        tomorrow.set(Calendar.MINUTE, 0);\n        tomorrow.set(Calendar.SECOND, 0);\n        tomorrow.set(Calendar.MILLISECOND, 0);\n\n        // next day\n        tomorrow.add(Calendar.DAY_OF_MONTH, 1);\n\n        Calendar now = Calendar.getInstance();\n\n        if (now.after(tomorrow)) {\n            Log.d(TAG, \"I think it's tomorrow, resetting\");\n            steps = stepsTaken;\n        }\n\n        lastUpdateTime = System.currentTimeMillis();\n    }\n\n    public static int getSteps() {\n        return steps;\n    }\n}\n\n```", "```java\npublic class WearStepService extends Service implements SensorEventListener {\n\n    public static final String TAG = \"WearStepService\";\n    private static final long THREE_MINUTES = 3 * 60 * 1000;\n    private SensorManager sensorManager;\n    private Sensor countSensor;\n\n    GoogleApiClient mGoogleApiClient;\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        Log.d(TAG, \"onCreate\");\n        setAlarm();\n    }\n\n    @Override\n    public int onStartCommand(Intent intent, int flags, int startId) {\n        Log.d(TAG, \"onStartCommand\");\n\n        getSensorManager();\n        getCountSensor();\n        getGoogleClient();\n\n        return super.onStartCommand(intent, flags, startId);\n    }\n\n    @Override\n    public IBinder onBind(Intent intent) {\n        return null;\n    }\n\n    private void getGoogleClient() {\n        if (null != mGoogleApiClient)\n            return;\n\n        Log.d(TAG, \"getGoogleClient\");\n        mGoogleApiClient = new GoogleApiClient.Builder(this)\n                .addApi(Wearable.API)\n                .build();\n        mGoogleApiClient.connect();\n    }\n\n    /**\n     * if the countSensor is null, try initializing it, and try \n     registering it with sensorManager\n     */\n    private void getCountSensor() {\n        if (null != countSensor)\n            return;\n\n        Log.d(TAG, \"getCountSensor\");\n        countSensor = sensorManager\n        .getDefaultSensor(Sensor.TYPE_STEP_COUNTER);\n        registerCountSensor();\n    }\n\n    /**\n     * if the countSensor exists, then try registering\n     */\n    private void registerCountSensor() {\n        if (countSensor == null)\n            return;\n\n        Log.d(TAG, \"sensorManager.registerListener\");\n        sensorManager.registerListener(this, countSensor, \n        SensorManager.SENSOR_DELAY_UI);\n    }\n\n    /**\n     * if the sensorManager is null, initialize it, and try registering \n     the countSensor\n     */\n    private void getSensorManager() {\n        if (null != sensorManager)\n            return;\n\n        Log.d(TAG, \"getSensorManager\");\n        sensorManager = (SensorManager) \n        getSystemService(Context.SENSOR_SERVICE);\n        registerCountSensor();\n    }\n\n    private void setAlarm() {\n        Log.d(TAG, \"setAlarm\");\n\n        Intent intent = new Intent(this, AlarmNotification.class);\n        PendingIntent pendingIntent = PendingIntent.getBroadcast\n        (this.getApplicationContext(), 234324243, intent, 0);\n        AlarmManager alarmManager = (AlarmManager) \n        getSystemService(ALARM_SERVICE);\n        long firstRun = System.currentTimeMillis() + THREE_MINUTES;\n        alarmManager.setInexactRepeating(AlarmManager.RTC_WAKEUP, \n        firstRun, THREE_MINUTES, pendingIntent);\n    }\n\n    @Override\n    public void onSensorChanged(SensorEvent event) {\n        if (event.sensor.getType() == Sensor.TYPE_STEP_COUNTER)\n            StepsTaken.updateSteps(event.values.length);\n        Log.d(TAG, \"onSensorChanged: steps count is\" + \n        event.values.length);\n//        sendToPhone();\n        sendData();\n        updateNotification();\n    }\n\n    private void sendData(){\n\n        if (mGoogleApiClient == null)\n            return;\n\n        // use the api client to send the heartbeat value to our \n        handheld\n        final PendingResult<NodeApi.GetConnectedNodesResult> nodes = \n        Wearable.NodeApi.getConnectedNodes(mGoogleApiClient);\n        nodes.setResultCallback(new \n        ResultCallback<NodeApi.GetConnectedNodesResult>() {\n            @Override\n            public void onResult(NodeApi.GetConnectedNodesResult \n            result) {\n                final List<Node> nodes = result.getNodes();\n                final String path = \"/stepcount\";\n                String Message = StepsTaken.getSteps()+\"\";\n\n                for (Node node : nodes) {\n                    Log.d(TAG, \"SEND MESSAGE TO HANDHELD: \" + Message);\n                    node.getDisplayName();\n                    byte[] data = \n                    Message.getBytes(StandardCharsets.UTF_8);\n                    Wearable.MessageApi.sendMessage(mGoogleApiClient, \n                    node.getId(), path, data);\n                }\n            }\n        });\n    }\n\n    private void updateNotification() {\n        // Create a notification builder that's compatible with \n        platforms >= version 4\n        NotificationCompat.Builder builder =\n                new NotificationCompat.Builder\n                (getApplicationContext());\n\n        // Set the title, text, and icon\n        builder.setContentTitle(getString(R.string.app_name))\n                .setSmallIcon(R.drawable.ic_step_icon);\n\n        builder.setContentText(\"steps: \" + StepsTaken.getSteps());\n\n        // Get an instance of the Notification Manager\n        NotificationManager notifyManager = (NotificationManager)\n                getSystemService(Context.NOTIFICATION_SERVICE);\n\n        // Build the notification and post it\n        notifyManager.notify(0, builder.build());\n    }\n\n    @Override\n    public void onAccuracyChanged(Sensor sensor, int accuracy) {\n        // drop these messages\n        updateNotification();\n\n    }\n}\n\n```", "```java\npublic class StepCounterFragment extends Fragment implements Reporter {\n\n    private TextView tv;\n    private Handler handler = new Handler();\n\n    public StepCounterFragment() {\n        // Required empty public constructor\n    }\n\n@Override\npublic View onCreateView(LayoutInflater inflater, ViewGroup container,\n                         Bundle savedInstanceState) {\n    // Inflate the layout for this fragment\n    View rootView = inflater.inflate(R.layout.step_counter_fragment, \n    container, false); return rootView;\n }\n}\n\n```", "```java\ngetActivity().startService(new Intent(getActivity(), WearStepService.class));\n\ntv = (TextView)rootView.findViewById(R.id.steps);\ntv.setText(String.valueOf(StepsTaken.getSteps()));\n\n```", "```java\n@Override\npublic void notifyEvent(final Object o) {\n    handler.post(new Runnable() {\n        @Override\n        public void run() {\n            if (o instanceof StepsTaken)\n                tv.setText(String.valueOf(StepsTaken.getSteps()));\n        }\n    });\n\n}\n\n```", "```java\n@Override\npublic void onResume() {\n    EventReceiver.register(StepsTaken.class, this);\n    super.onResume();\n}\n\n@Override\npublic void onPause() {\n    EventReceiver.remove(StepsTaken.class, this);\n    super.onPause();\n}\n\n```", "```java\npublic class StepCounterFragment extends Fragment implements Reporter {\n\n    private TextView tv;\n    private Handler handler = new Handler();\n\n    public StepCounterFragment() {\n        // Required empty public constructor\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup \n    container,\n                             Bundle savedInstanceState) {\n        // Inflate the layout for this fragment\n        View rootView =    \n        inflater.inflate(R.layout.step_counter_fragment, \n        container, false);\n\n        getActivity().startService(new Intent(getActivity(), \n        WearStepService.class));\n\n        tv = (TextView)rootView.findViewById(R.id.steps);\n        tv.setText(String.valueOf(StepsTaken.getSteps()));\n\n        return rootView;\n    }\n\n    @Override\n    public void notifyEvent(final Object o) {\n        handler.post(new Runnable() {\n            @Override\n            public void run() {\n                if (o instanceof StepsTaken)\n                    tv.setText(String.valueOf(StepsTaken.getSteps()));\n            }\n        });\n\n    }\n\n    @Override\n    public void onResume() {\n        EventReceiver.register(StepsTaken.class, this);\n        super.onResume();\n    }\n\n    @Override\n    public void onPause() {\n        EventReceiver.remove(StepsTaken.class, this);\n        super.onPause();\n    }\n\n}\n\n```", "```java\nif(position==0) {\n    final DrinkWaterFragment drinkWaterFragment = new DrinkWaterFragment();\n    getFragmentManager()\n            .beginTransaction()\n            .replace(R.id.content_frame, drinkWaterFragment)\n            .commit();\n\n}else if(position == 1){\n    final HeartRateFragment sectionFragment = new HeartRateFragment();\n    getFragmentManager()\n            .beginTransaction()\n            .replace(R.id.content_frame, sectionFragment)\n            .commit();\n}else if(position == 2){\n    final StepCounterFragment stepCounterFragment = new \n    StepCounterFragment();\n    getFragmentManager()\n            .beginTransaction()\n            .replace(R.id.content_frame, stepCounterFragment)\n            .commit();\n}\n\n```"]