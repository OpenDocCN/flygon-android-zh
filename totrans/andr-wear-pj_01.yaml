- en: Getting You Ready to Fly - Setting Up Your Development Environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The culture of Wearing a utility that helps us to perform certain actions has
    always been part of a modern civilization. Wrist watches for human beings have
    become an augmented tool for checking the time and date. Wearing a watch lets
    you check the time with just a glance. Technology has taken this watch-wearing
    experience to the next level. The first modern Wearable watch was a combination
    of a calculator and a watch, introduced to the world in 1970\. Over the decades,
    advancements in microprocessors and wireless technology have led to the introduction
    of a concept called *ubiquitous computing*. During this time, most leading electronics
    industry start-ups started to work on their ideas, which has made Wearable devices
    very popular.
  prefs: []
  type: TYPE_NORMAL
- en: Tech giant companies, such as Google, Apple, Samsung, and Sony, have joined
    the force of the Wearable devices era. They have introduced their competitive
    Wearable products, which are extremely successful in the Wearable device market.
    More interestingly, Google's Android Wear is powerful, follows the same Android
    smartphone development practices, and has a very good developer community compared
    to Apple Watch OS and Samsung's Tizen OS developer community.
  prefs: []
  type: TYPE_NORMAL
- en: Google announced Android Wear in March 2014\. Since then, Android Wear as a
    smartwatch and Wearable software platform has evolved. Google's continuous advancement
    in designing and user experience have resulted in a new generation of the Android
    Wear operating system, which has the ability to handle biometric sensors like
    never before with more features in the platform; Google calls it Android Wear
    2.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Android Wear 2.0 will cause a lot of excitement in app development with remarkably
    competitive features to develop. Android Wear 2.0 allows a developer to build
    and carve his idea specific to Android Wear; there is no need to pair a watch
    and mobile app. Google calls it a standalone application. Android Wear 2.0 introduces
    a new way to input within the Android watch: a new application programming interface
    called Complications, which allows watch faces to display vital information from
    biometrics and other sensors. New updated notifications support for Android Wear
    2.0 will help users and developers to present notifications in a more comprehensive
    manner.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will explore the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Android Wear design principles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring essential UI components specific to Wear apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a development environment for Wear apps development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating your first Android Wear application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Android Wear design principles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Designing a Wear application is different than designing a mobile or tablet
    application. The Wear operating system is very lightweight and has a specific
    set of jobs to accomplish by sharing the right information with the Wearer.
  prefs: []
  type: TYPE_NORMAL
- en: General Wear principles are Timely, Glanceable, Easy to Tap, Time-Saving.
  prefs: []
  type: TYPE_NORMAL
- en: '**Timely**'
  prefs: []
  type: TYPE_NORMAL
- en: Giving the right information at the right time.
  prefs: []
  type: TYPE_NORMAL
- en: '**Glanceable**'
  prefs: []
  type: TYPE_NORMAL
- en: Keeping the Wear application user interface clean and uncluttered.
  prefs: []
  type: TYPE_NORMAL
- en: '**Easy to Tap**'
  prefs: []
  type: TYPE_NORMAL
- en: The actions users will click on should have the right spacing and size of the
    picture.
  prefs: []
  type: TYPE_NORMAL
- en: '**Time-Saving**'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the best application flows that do tasks quickly.
  prefs: []
  type: TYPE_NORMAL
- en: 'For any Wear application, we need the proper building blocks to control the
    business logic of the application and other architectural implementation. The
    following are the scenarios for developing a Wear application to help us to carve
    the wear application better:'
  prefs: []
  type: TYPE_NORMAL
- en: Defining layouts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating lists
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Showing confirmations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wear navigation and actions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multifunction buttons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining layouts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Wearable applications can use the same layouts that we use in handheld Android
    device programming but with specific constraints for Wear applications. We should
    not do heavy processing actions similar to handheld Android devices in Wear applications
    and expect a good user experience.
  prefs: []
  type: TYPE_NORMAL
- en: 'An application designed for a round screen will not look great on square Wear
    devices. To resolve this, the Android Wear support library comes with the following
    two solutions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`BoxInsetLayout`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Curved Layout`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can provide different resources to allow Android to detect the shape of the
    Android Wear at runtime.
  prefs: []
  type: TYPE_NORMAL
- en: Creating lists
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Lists let the user select an item from a set of items. In the legacy Wear, 1.x
    API `WearableListView` helped programmers to build lists and custom lists. Wearable
    UI library now has `WearableRecyclerView` with `curvedLayout` support and has
    the best implementation experience in Wear devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can add gestures and other magnificent functionalities:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00005.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Exploring UI components for Wear devices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this subchapter, let's explore the commonly used Wear-specific UI components.
    In Wear application programming, we can use all the components that we use in
    mobile app programming, but how we accommodate the visual appearance of components
    in the Wear device needs to be well thought of before using it.
  prefs: []
  type: TYPE_NORMAL
- en: '`WatchViewStub`: `WatchViewStub` helps in rendering the views for different
    form factors of Wearable devices. If your application is being installed on a
    round watch device, `WatchViewStub` will load the specific layout configuration
    for round watches. If it is square, it will load the square layout configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '`WearableRecyclerView`: `WearableRecyclerView` is the implementation of `recyclerview`
    specific to wearable devices. It provides a flexible view for datasets in the
    Wearable device viewport. We will explore `WearbaleRecyclerView` in detail in
    the coming chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Note: `WearableListView` is deprecated; the Android community recommends using
    `WearableRecyclerView`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`CircledImageVIew`: An `Imageview` surrounded by a circle. A very handy component
    for presenting the image in round form factor Wearable devices:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '`BoxInsetLayout`: This Layout extends directly to `Framelayout` and it has
    the ability to recognize the form factor of the Wearable device. Shape-aware `FrameLayout`
    can box its children in the center square of the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: After the Wear 2.0 release, a few components were deprecated for an immersive
    activity experience and Google strictly prohibits using them; we can still use
    all the components that we know in Android programming.
  prefs: []
  type: TYPE_NORMAL
- en: Showing confirmations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Compared to confirmations in handheld Android devices, in Wear applications,
    confirmations should occupy the whole screen or more than what handheld devices
    show as a dialogue box. This ensures users can see these confirmations at one
    glance. The Wearable UI library helps in displaying confirmation timers and animated
    timers in Android Wear.
  prefs: []
  type: TYPE_NORMAL
- en: DelayedConfirmationView
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A `DelayedConfirmationView` is an automatic confirmation view based on the
    timer:'
  prefs: []
  type: TYPE_NORMAL
- en: '****![](img/00006.jpeg)********![](img/00007.jpeg)****'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Wear navigation and actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the new release of Android Wear, the **Material design** library adds the
    following two interactive drawers:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigation drawer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Action drawer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Navigation drawer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Lets user switch between views in the application. Developers can allow the
    drawer to be opened anywhere within the scrolling parent''s content by setting
    the `setShouldOnlyOpenWhenAtTop()` method to false:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Action drawer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The action drawer gives access to easy and common actions in your application.
    By default, action drawer appears at the bottom of the screen and provides specific
    actions to users:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Multifunction buttons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In addition to the power button, Android Wear supports another button called
    the multifunction button on the device. The Wearable support library provides
    API for determining the multifunction buttons included by the manufacturer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Visit [https://developer.android.com/training/wearables/ui/index.html](https://developer.android.com/training/wearables/ui/index.html)
    for any sort of query that you might have on design guidelines for Wear device
    programming.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a development environment for Wear development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will set up a development environment for Wear application
    development.
  prefs: []
  type: TYPE_NORMAL
- en: '**Prerequisites**'
  prefs: []
  type: TYPE_NORMAL
- en: Your favorite operating system (Windows, macOS, or Linux)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Determine whether you have the latest JRE installed on your operating system
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the latest version of JDK or Open JDK
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the latest version of Android Studio (at the time of writing this book,
    the latest version is 2.2.3 and any newer version should be fine)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing Android Studio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Visit [https://developer.android.com/studio/index.html](https://developer.android.com/studio/index.html)
    to download the latest version of Android Studio. Google highly recommends using
    Android Studio for all Android application development, since Android Studio has
    tight integration with Gradle and useful Android APIs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00008.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After the Android Studio installation, it''s now time to download the necessary
    SDK in the SDK Platforms tab in SDK Manager. Install one complete version of Android;
    for the scope of this book, we will install Android 7.1.1 API level 25:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00009.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After the successful installation of the SDK of Nougat 7.1.1 API level 25,
    under the **SDK Tools** tab, make sure you have installed the following components,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: Android Support Library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Play services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Android Support Repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00010.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Google releases updates on IDE and SDK Tools frequently; keep your development
    environment up-to-date.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: if you plan to make your application available in China, then you must
    use the special release version 7.8.87 of the Google Play services client library
    to handle communication between a phone and watch: [https://developer.android.com/training/wearables/apps/creating-app-china.html](https://developer.android.com/training/wearables/apps/creating-app-china.html)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Visit the following link to check the update Release Notes on SDK Tools: [https://developer.android.com/studio/releases/sdk-tools.html.](https://developer.android.com/studio/releases/sdk-tools.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00011.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Updating your IDE from the stable channel is highly recommended. Updates for
    Android Studio are available on four different channels:'
  prefs: []
  type: TYPE_NORMAL
- en: Canary channel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dev channel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Beta channel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stable channel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Canary channel**: The Android Studio engineering team works continuously
    to make Android Studio better. In this channel, every week there will be an update
    release, and it will include new functionality changes and improvements; you can
    check those changes in the release notes. But updates from this channel are not
    recommended for application production.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Dev Channel:** On this channel, a release happens after a complete round
    of internal testing from the Android Studio team.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Beta channel:** On this channel, updates are totally based on stable Canary
    builds. Before publishing these builds to a stable channel, Google releases them
    in the beta channel to get developer feedback.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Stable Channel:** Are the official stable releases of the Android Studio
    and will be available to download on Google''s official page [http://developer.android.com/studio.](http://developer.android.com/studio.)'
  prefs: []
  type: TYPE_NORMAL
- en: By default, Android Studio receives updates from a stable channel.
  prefs: []
  type: TYPE_NORMAL
- en: Creating your first Android Wear application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, let's understand the essential steps required to create your
    first Wear project.
  prefs: []
  type: TYPE_NORMAL
- en: Before you continue to create your application, ensure you have one complete
    version of Android installed with a Wear system image and you have the latest
    version of Android Studio.
  prefs: []
  type: TYPE_NORMAL
- en: The following picture is the initial interface of Android Studio. In this window,
    one can import legacy ADT Android projects, configure the Android SDK, and update
    Android Studio.
  prefs: []
  type: TYPE_NORMAL
- en: 'Android Studio welcome window with basic controls for getting started:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00012.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Creating your first Wear project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Click on the Start a new Android Studio project option in the Android Studio
    window. You will be prompted by another window with project details.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the window that allows users to configure their
    project details, such as project name, Package name, and whether the project needs
    native C++ support:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00013.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can name your project as you wish. After you have chosen your project name
    and your project local system location, you can press the Next button in the window,
    which brings up another window with a few configuration queries, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00014.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In this window, you can choose to write a standalone Wear application if you
    uncheck the Phone and Tablet option. In this way, you will see only Wear application
    templates:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00015.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, Android Studio templates prompt only Android Wear activity templates with
    the following set of options:'
  prefs: []
  type: TYPE_NORMAL
- en: Add No Activity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Always On Wear Activity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blank Wear Activity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Display Notification
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Maps Wear Activity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Watch Face
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The activity template chooser helps you to access the default boilerplate codes,
    which are already templatized and can be used directly in projects:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00016.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To create the first project, we will choose Blank Wear Activity and click on
    the Next button in the window. Android Studio will prompt another window for creating
    the name of the activity and layout file. In this template, the two form factors
    of Android Wearable devices, which are mostly round and square shapes, are prepopulated
    with the boilerplate code stub:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00017.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: When your project is ready to be created, click on the Finish button. After
    clicking on Finish, Android Studio will take a few moments to create the project
    for us.
  prefs: []
  type: TYPE_NORMAL
- en: 'Way to go! You have now created a working boilerplate code for the Android
    Wear standalone application without the phone companion application. When successfully
    created, you will see the following files and codes added to your project by default:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00018.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If your SDK is not updated with API level 25, you might see the Wear option
    in the Android Studio project creating prompts with Android Wear support library
    1.x; you can update this in the Wear module Gradle file with the following dependency:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Creating a Wear emulator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The process of creating a Wear emulator is very similar to creating a phone
    emulator.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the AVD manager, click on the Create Virtual Device... button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00019.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Choose the required form factor emulator according to your application needs.
    Now, let''s create the Android Wear square emulator:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00020.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After selecting the right emulator for your Wear, you will get another prompt
    to choose the Wear operating system. Let''s choose the API Level 25 Nougat emulator,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00021.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The last prompt asks for the emulator name and other orientation configurations
    based on your needs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00022.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Way to go! Now, we have successfully created a square form factor emulator
    for the project. Let''s run the project that we have created in the emulator:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00023.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Google recommends developing Wear apps in the actual hardware device to have
    the best user experience. However, working on emulators has the benefit of creating
    different screen form factors to check the application's rendering.
  prefs: []
  type: TYPE_NORMAL
- en: Working with actual Wear device
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open the settings menu on the Wear device
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to About device
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the build number seven times to enable developer mode
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now enable ADB debugging on the watch
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can now connect the Wear device directly to your machine with the USB cable.
    You can debug your applications over Wi-Fi and Bluetooth with the following setups.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging over Wi-Fi
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Make sure your watch has the developer options enabled. Debugging over Wi-Fi
    is possible only when the Wear device and machine are connected to the same network.
  prefs: []
  type: TYPE_NORMAL
- en: In the Wear device developer option, tap on Debug over Wi-Fi
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The watch will display its IP address (for example, 192.168.1.100). Keep a reference;
    we need this for the next step.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connect the debugger to the device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Using the following command, we can attach the actual device to the ADB debugger:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Enable Bluetooth debugging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We need to ensure debugging is enabled in developer options, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Enable Debug over Bluetooth
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install the companion app on the phone (download it from [https://play.google.com/store/apps/details?id=com.google.android.wearable.app&hl=en](https://play.google.com/store/apps/details?id=com.google.android.wearable.app&hl=en))
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Go to settings in the companion app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enable debugging over Bluetooth
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connect the phone to the machine through the cable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can use the following commands to establish the connection:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: In your Android Wear, just allow ADB Debugging when it asks.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have a working setup of our development environment, let's understand
    the basic Android Wear-specific UI components.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have looked at the initial setup for Wear application development.
    We have understood the necessary components to download, setting up a Wear emulator,
    connecting the Wear emulator to the ADB bridge, debugging over Wi-Fi, and essential
    user interface components specific to Wear development. In the next chapter, we
    will explore how to build a note-taking application which persists the data that
    users enter.
  prefs: []
  type: TYPE_NORMAL
