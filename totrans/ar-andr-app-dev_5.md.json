["```java\nJNIEXPORT int JNICALL\nJava_com_ar4android_VuforiaJMEActivity_loadTrackerData(JNIEnv *, jobject)\n{\n    LOG(\"Java_com_ar4android_VuforiaJMEActivity_ImageTargets_loadTrackerData\");\n\n    // Get the image tracker:\n    QCAR::TrackerManager& trackerManager = QCAR::TrackerManager::getInstance();\n    QCAR::ImageTracker* imageTracker = static_cast<QCAR::ImageTracker*>(trackerManager.getTracker(QCAR::Tracker::IMAGE_TRACKER));\n    if (imageTracker == NULL)\n    {\n        LOG(\"Failed to load tracking data set because the ImageTracker has not been initialized.\");\n        return 0;\n    }\n```", "```java\n    // Create the data sets:\n    dataSetStonesAndChips = imageTracker->createDataSet();\n    if (dataSetStonesAndChips == 0)\n    {\n        LOG(\"Failed to create a new tracking data.\");\n        return 0;\n    }\n```", "```java\n    // Load the data sets:\n    if (!dataSetStonesAndChips->load(\"VuforiaJME.xml\", QCAR::DataSet::STORAGE_APPRESOURCE))\n    {\n        LOG(\"Failed to load data set.\");\n        return 0;\n    }\n```", "```java\n    // Activate the data set:\n    if (!imageTracker->activateDataSet(dataSetStonesAndChips))\n    {\n        LOG(\"Failed to activate data set.\");\n        return 0;\n    }\n\n    LOG(\"Successfully loaded and activated data set.\");\n    return 1;\n}\n```", "```java\nclass ImageTargets_UpdateCallback : public QCAR::UpdateCallback\n{   \n    virtual void QCAR_onUpdate(QCAR::State& state)\n    {\n       //inspired from:\n       //https://developer.vuforia.com/forum/faq/android-how-can-i-access-camera-image\n\n QCAR::Image *imageRGB565 = NULL;\n        QCAR::Frame frame = state.getFrame();\n\n        for (int i = 0; i < frame.getNumImages(); ++i) {\n              const QCAR::Image *image = frame.getImage(i);\n              if (image->getFormat() == QCAR::RGB565) {\n                  imageRGB565 = (QCAR::Image*)image;\n\n                  break;\n              }\n        }\n```", "```java\n        if (imageRGB565) {\n            JNIEnv* env = 0;\n\n            if ((javaVM != 0) && (activityObj != 0) && (javaVM->GetEnv((void**)&env, JNI_VERSION_1_4) == JNI_OK)) {\n\n                const short* pixels = (const short*) imageRGB565->getPixels();\n                int width = imageRGB565->getWidth();\n                int height = imageRGB565->getHeight();\n                int numPixels = width * height;\n\n                jbyteArray pixelArray = env->NewByteArray(numPixels * 2);\n                env->SetByteArrayRegion(pixelArray, 0, numPixels * 2, (const jbyte*) pixels);\n                jclass javaClass = env->GetObjectClass(activityObj);\n                jmethodID method = env-> GetMethodID(javaClass, \"setRGB565CameraImage\", \"([BII)V\");\n                env->CallVoidMethod(activityObj, method, pixelArray, width, height);\n\n                env->DeleteLocalRef(pixelArray);\n\n            }\n        }\n\n};\n```", "```java\nJNIEXPORT void JNICALL\nJava_com_ar4android_VuforiaJME_updateTracking(JNIEnv *env, jobject obj)\n{\n    //LOG(\"Java_com_ar4android_VuforiaJMEActivity_GLRenderer_renderFrame\");\n\n    //Get the state from QCAR and mark the beginning of a rendering section\n    QCAR::State state = QCAR::Renderer::getInstance().begin();\n\n    // Did we find any trackables this frame?\n    for(int tIdx = 0; tIdx < state.getNumTrackableResults(); tIdx++)\n    {\n        // Get the trackable:\n        const QCAR::TrackableResult* result = state.getTrackableResult(tIdx);\n```", "```java\n        QCAR::Matrix44F modelViewMatrix = QCAR::Tool::convertPose2GLMatrix(result->getPose());\n\n        QCAR::Matrix44F inverseMV = MathUtil::Matrix44FInverse(modelViewMatrix);\n        QCAR::Matrix44F invTranspMV = MathUtil::Matrix44FTranspose(inverseMV);\n\n        float cam_x = invTranspMV.data[12];\n        float cam_y = invTranspMV.data[13];\n        float cam_z = invTranspMV.data[14];\n\n        float cam_right_x = invTranspMV.data[0];\n        float cam_right_y = invTranspMV.data[1];\n        float cam_right_z = invTranspMV.data[2];\n        float cam_up_x = invTranspMV.data[4];\n        float cam_up_y = invTranspMV.data[5];\n        float cam_up_z = invTranspMV.data[6];\n        float cam_dir_x = invTranspMV.data[8];\n        float cam_dir_y = invTranspMV.data[9];\n        float cam_dir_z = invTranspMV.data[10];\n```", "```java\nfloat nearPlane = 1.0f;\nfloat farPlane = 1000.0f;\nconst QCAR::CameraCalibration& cameraCalibration = QCAR::CameraDevice::getInstance().getCameraCalibration();\nQCAR::Matrix44F projectionMatrix = QCAR::Tool::getProjectionGL(cameraCalibration, nearPlane, farPlane);\n```", "```java\n        QCAR::Vec2F size = cameraCalibration.getSize();\n        QCAR::Vec2F focalLength = cameraCalibration.getFocalLength();\n        float fovRadians = 2 * atan(0.5f * size.data[1] / focalLength.data[1]);\n        float fovDegrees = fovRadians * 180.0f / M_PI;\n        float aspectRatio=(size.data[0]/size.data[1]);\n\n        float viewportDistort=1.0;\n        if (viewportWidth != screenWidth)     {\n        \tviewportDistort = viewportWidth / (float) screenWidth;\n            fovDegrees=fovDegrees*viewportDistort;\n            aspectRatio=aspectRatio/viewportDistort;\n        }\n        if (viewportHeight != screenHeight)  {\n        \tviewportDistort = viewportHeight / (float) screenHeight;\n            fovDegrees=fovDegrees/viewportDistort;\n            aspectRatio=aspectRatio*viewportDistort;\n        }\n```", "```java\njclass activityClass = env->GetObjectClass(obj);\n        jmethodID setCameraPerspectiveMethod = env->GetMethodID(activityClass,\"setCameraPerspectiveNative\", \"(FF)V\");\n        env->CallVoidMethod(obj,setCameraPerspectiveMethod,fovDegrees,aspectRatio);\n        jmethodID setCameraViewportMethod = env->GetMethodID(activityClass,\"setCameraViewportNative\", \"(FFFF)V\");\n        env->CallVoidMethod(obj,setCameraViewportMethod,viewportWidth,viewportHeight,cameraCalibration.getSize().data[0],cameraCalibration.getSize().data[1]);\n       // jclass activityClass = env->GetObjectClass(obj);\n        jmethodID setCameraPoseMethod = env->GetMethodID(activityClass,\"setCameraPoseNative\", \"(FFF)V\");\n        env->CallVoidMethod(obj,setCameraPoseMethod,cam_x,cam_y,cam_z);\n\n        //jclass activityClass = env->GetObjectClass(obj);\n        jmethodID setCameraOrientationMethod = env->GetMethodID(activityClass,\"setCameraOrientationNative\", \"(FFFFFFFFF)V\");\n        env->CallVoidMethod(obj,setCameraOrientationMethod,cam_right_x,cam_right_y,cam_right_z,\n        cam_up_x,cam_up_y,cam_up_z,cam_dir_x,cam_dir_y,cam_dir_z);\n\n    }\n\n    QCAR::Renderer::getInstance().end();\n}\n```", "```java\nInstall        : libQCAR.so => libs/armeabi-v7a/libQCAR.so\nCompile++ arm  : VuforiaNative <= VuforiaNative.cpp\nSharedLibrary  : libVuforiaNative.so\nInstall        : libVuforiaNative.so => libs/armeabi-v7a/libVuforiaNative.so\n```", "```java\n  public void setCameraPerspectiveNative(float fovY,float aspectRatio) {\n            fgCam.setFrustumPerspective(fovY,aspectRatio, 1, 1000);\n  }  \n  public void setCameraPoseNative(float cam_x,float cam_y,float cam_z){\n           fgCam.setLocation(new Vector3f(cam_x,cam_y,cam_z));\n  }\n\n  public void setCameraOrientationNative(float cam_right_x,float cam_right_y,float cam_right_z,\n  float cam_up_x,float cam_up_y,float cam_up_z,float cam_dir_x,float cam_dir_y,float cam_dir_z) {\n       //left,up,direction\n       fgCam.setAxes(new Vector3f(-cam_right_x,-cam_right_y,-cam_right_z), \n         new Vector3f(-cam_up_x,-cam_up_y,-cam_up_z), \n         new Vector3f(cam_dir_x,cam_dir_y,cam_dir_z));\n  } \n```", "```java\npublic void setCameraViewportNative(float viewport_w,float viewport_h,float size_x,float size_y) {\t\t\n      float newWidth = 1.f;\n      float newHeight = 1.f;\n\n      if (viewport_h != settings.getHeight())\n      {\n        newWidth=viewport_w/viewport_h;\n        newHeight=1.0f;\n        videoBGCam.resize((int)viewport_w,(int)viewport_h,true);\n        videoBGCam.setParallelProjection(true);\n      }\n      float viewportPosition_x =  (((int)(settings.getWidth()  - viewport_w)) / (int) 2);//+0\n      float viewportPosition_y =  (((int)(settings.getHeight() - viewport_h)) / (int) 2);//+0\n      float viewportSize_x = viewport_w;//2560\n      float viewportSize_y = viewport_h;//1920\n\n      //transform in normalized coordinate\n      viewportPosition_x =  (float)viewportPosition_x/(float)viewport_w;\n      viewportPosition_y =  (float)viewportPosition_y/(float)viewport_h;\n      viewportSize_x = viewportSize_x/viewport_w;\n      viewportSize_y = viewportSize_y/viewport_h;\n\n    //adjust for viewport start (modify video quad)\n        mVideoBGGeom.setLocalTranslation(-0.5f*newWidth+viewportPosition_x,-0.5f*newHeight+viewportPosition_y,0.f);\n    //adust for viewport size (modify video quad)\n    mVideoBGGeom.setLocalScale(newWidth, newHeight, 1.f);\n  }\n```"]