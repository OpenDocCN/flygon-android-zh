["```java\ndefault:// Probably a regular tile\n    if (hit == 1) {// Left or right\n        lm.player.setxVelocity(0);\n        lm.player.setPressingRight(false);\n    }\n\n   if (hit == 2) {// Feet\n        lm.player.isFalling = false;\n    }\n    break;\n}\n}\n\n//Check bullet collisions\nfor (int i = 0; i < lm.player.bfg.getNumBullets(); i++) {\n //Make a hitbox out of the the current bullet\n RectHitbox r = new RectHitbox();\n r.setLeft(lm.player.bfg.getBulletX(i));\n r.setTop(lm.player.bfg.getBulletY(i));\n r.setRight(lm.player.bfg.getBulletX(i) + .1f);\n r.setBottom(lm.player.bfg.getBulletY(i) + .1f);\n\n if (go.getHitbox().intersects(r)) {\n // Collision detected\n // make bullet disappear until it \n // is respawned as a new bullet\n lm.player.bfg.hideBullet(i);\n\n //Now respond depending upon the type of object hit\n if (go.getType() != 'g' && go.getType() != 'd') {\n sm.playSound(\"ricochet\");\n\n } else if (go.getType() == 'g') {\n // Knock the guard back\n go.setWorldLocationX(go.getWorldLocation().x +\n 2 * (lm.player.bfg.getDirection(i)));\n\n sm.playSound(\"hit_guard\");\n\n } else if (go.getType() == 'd') {\n //destroy the droid\n sm.playSound(\"explode\");\n //permanently clip this drone\n go.setWorldLocation(-100, -100, 0);\n }\n }\n}\n\nif (lm.isPlaying()) {\n    // Run any un-clipped updates\n    go.update(fps, lm.gravity);\n        //...\n```", "```java\nimport android.content.Context;\n\npublic class Fire extends GameObject{\n\n    Fire(Context context, float worldStartX, \n    float worldStartY, char type, int pixelsPerMetre) {\n\n        final int ANIMATION_FPS = 3;\n        final int ANIMATION_FRAME_COUNT = 3;\n        final String BITMAP_NAME = \"fire\";\n\n        final float HEIGHT = 1;\n        final float WIDTH = 1;\n\n        setHeight(HEIGHT); // 1 metre tall\n        setWidth(WIDTH); // 1 metre wide\n\n        setType(type);\n        // Now for the player's other attributes\n        // Our game engine will use these\n        setMoves(false);\n        setActive(true);\n        setVisible(true);\n\n        // Choose a Bitmap\n        setBitmapName(BITMAP_NAME);\n        // Set this object up to be animated\n        setAnimFps(ANIMATION_FPS);\n        setAnimFrameCount(ANIMATION_FRAME_COUNT);\n        setBitmapName(BITMAP_NAME);\n        setAnimated(context, pixelsPerMetre, true);\n\n        // Where does the tile start\n        // X and y locations from constructor parameters\n        setWorldLocation(worldStartX, worldStartY, 0);\n        setRectHitbox();\n    }\n\n public void update(long fps, float gravity) {\n }\n}\n```", "```java\ncase 'g':\n    index = 7;\n    break;\n\ncase 'f':\n index = 8;\n break;\n\ndefault:\n    index = 0;\n    break;\n```", "```java\ncase 'g':\n    index = 7;\n    break;\n\ncase 'f':\n index = 8;\n break;\n\ndefault:\n    index = 0;\n    break;\n```", "```java\ncase 'g':\n     // Add a guard to the gameObjects\n     gameObjects.add(new Guard(context, j, i, c, pixelsPerMetre));\n     break;\n\n case 'f':\n // Add a fire tile the gameObjects\n gameObjects.add(new Fire\n (context, j, i, c, pixelsPerMetre));\n\n break;\n\n```", "```java\ncase 'g':\n    //hit by guard\n    sm.playSound(\"player_burn\");\n    ps.loseLife();\n    location = new PointF(ps.loadLocation().x,\n        ps.loadLocation().y);\n    lm.player.setWorldLocationX(location.x);\n    lm.player.setWorldLocationY(location.y);\n    lm.player.setxVelocity(0);\n    break;\n\ncase 'f':\n sm.playSound(\"player_burn\");\n ps.loseLife();\n location = new PointF(ps.loadLocation().x,\n ps.loadLocation().y);\n lm.player.setWorldLocationX(location.x);\n lm.player.setWorldLocationY(location.y);\n lm.player.setxVelocity(0);\n break;\n\ndefault:// Probably a regular tile\n    if (hit == 1) {// Left or right\n        lm.player.setxVelocity(0);\n        lm.player.setPressingRight(false);\n    }\n\n    if (hit == 2) {// Feet\n        lm.player.isFalling = false;\n    }\n    break;\n```", "```java\npublic class Brick extends GameObject {\n\n    Brick(float worldStartX, float worldStartY, char type) {\n        setTraversable();\n        final float HEIGHT = 1;\n        final float WIDTH = 1;\n        setHeight(HEIGHT); \n        setWidth(WIDTH); \n        setType(type);\n        setBitmapName(\"brick\");\n        setWorldLocation(worldStartX, worldStartY, 0);\n        setRectHitbox();\n    }\n\n    public void update(long fps, float gravity) {\n    }\n}\n```", "```java\npublic class Coal extends GameObject {\n\n    Coal(float worldStartX, float worldStartY, char type) {\n        setTraversable();\n        final float HEIGHT = 1;\n        final float WIDTH = 1;\n        setHeight(HEIGHT); \n        setWidth(WIDTH);\n        setType(type);\n        setBitmapName(\"coal\");\n        setWorldLocation(worldStartX, worldStartY, 0);\n        setRectHitbox();\n    }\n\n    public void update(long fps, float gravity) {\n    }\n}\n```", "```java\npublic class Concrete extends GameObject {\n\n    Concrete(float worldStartX, float worldStartY, char type) {\n        setTraversable();\n        final float HEIGHT = 1;\n        final float WIDTH = 1;\n        setHeight(HEIGHT);\n        setWidth(WIDTH);\n        setType(type);\n        setBitmapName(\"concrete\");\n        setWorldLocation(worldStartX, worldStartY, 0);\n        setRectHitbox();\n    }\n\n    public void update(long fps, float gravity) {\n    }\n}\n```", "```java\npublic class Scorched extends GameObject {\n\n    Scorched(float worldStartX, float worldStartY, char type) {\n        setTraversable();\n        final float HEIGHT = 1;\n        final float WIDTH = 1;\n        setHeight(HEIGHT);\n        setWidth(WIDTH);\n        setType(type);\n        setBitmapName(\"scorched\");\n        setWorldLocation(worldStartX, worldStartY, 0);\n        setRectHitbox();\n    }\n\n    public void update(long fps, float gravity) {\n    }\n}\n```", "```java\npublic class Snow extends GameObject {\n\n    Snow(float worldStartX, float worldStartY, char type) {\n        setTraversable();\n        final float HEIGHT = 1;\n        final float WIDTH = 1;\n        setHeight(HEIGHT);\n        setWidth(WIDTH);\n        setType(type);\n        setBitmapName(\"snow\");\n        setWorldLocation(worldStartX, worldStartY, 0);\n        setRectHitbox();\n    }\n\n    public void update(long fps, float gravity) {\n    }\n}\n```", "```java\npublic class Stone extends GameObject {\n\n    Stone(float worldStartX, float worldStartY, char type) {\n        setTraversable();\n        final float HEIGHT = 1;\n        final float WIDTH = 1;\n        setHeight(HEIGHT);\n        setWidth(WIDTH); \n        setType(type);\n        setBitmapName(\"stone\");\n        setWorldLocation(worldStartX, worldStartY, 0);\n        setRectHitbox();\n    }\n\n    public void update(long fps, float gravity) {\n    }\n}\n```", "```java\ncase 'f':\n    index = 8;\n    break;\n\ncase '2':\n index = 9;\n break;\n\ncase '3':\n index = 10;\n break;\n\ncase '4':\n index = 11;\n break;\n\ncase '5':\n index = 12;\n break;\n\ncase '6':\n index = 13;\n break;\n\ncase '7':\n index = 14;\n break;\n\ndefault:\n    index = 0;\n    break;\n```", "```java\ncase 'f':\n    index = 8;\n    break;\n\ncase '2':\n index = 9;\n break;\n\ncase '3':\n index = 10;\n break;\n\ncase '4':\n index = 11;\n break;\n\ncase '5':\n index = 12;\n break;\n\ncase '6':\n index = 13;\n break;\n\ncase '7':\n index = 14;\n break;\n\ndefault:\n    index = 0;\n    break;\n```", "```java\ncase 'f':\n    // Add a fire tile the gameObjects\n    gameObjects.add(new Fire(context, j, i, c, pixelsPerMetre));\n    break;\n\ncase '2':\n // Add a tile to the gameObjects\n gameObjects.add(new Snow(j, i, c));\n break;\n\ncase '3':\n // Add a tile to the gameObjects\n gameObjects.add(new Brick(j, i, c));\n break;\n\ncase '4':\n // Add a tile to the gameObjects\n gameObjects.add(new Coal(j, i, c));\n break;\n\ncase '5':\n // Add a tile to the gameObjects\n gameObjects.add(new Concrete(j, i, c));\n break;\n\ncase '6':\n // Add a tile to the gameObjects\n gameObjects.add(new Scorched(j, i, c));\n break;\n\ncase '7':\n // Add a tile to the gameObjects\n gameObjects.add(new Stone(j, i, c));\n break;\n\n```", "```java\npublic class Boulders extends GameObject {\n\n    Boulders(float worldStartX, float worldStartY, char type) {\n\n        final float HEIGHT = 1;\n        final float WIDTH = 3;\n\n        setHeight(HEIGHT); // 1 metre tall\n        setWidth(WIDTH); // 1 metre wide\n\n        setType(type);\n\n        // Choose a Bitmap\n        setBitmapName(\"boulder\");\n        setActive(false);//don't check for collisions etc\n\n        // Randomly set the tree either just in front or just \n        //behind the player -1 or 1\n        Random rand = new Random();\n        if(rand.nextInt(2)==0) {\n            setWorldLocation(worldStartX, worldStartY, -1);\n        }else{\n            setWorldLocation(worldStartX, worldStartY, 1);//\n        }\n        //No hitbox!!\n\n    }\n\n    public void update(long fps, float gravity) {\n    }\n}\n```", "```java\npublic class Cart extends GameObject {\n\n  Cart(float worldStartX, float worldStartY, char type) {\n\n        final float HEIGHT = 2;\n        final float WIDTH = 3;\n        setWidth(WIDTH);\n        setHeight(HEIGHT);\n        setType(type);\n        setBitmapName(\"cart\");\n        setActive(false);\n        Random rand = new Random();\n        if(rand.nextInt(2)==0) {\n          setWorldLocation(worldStartX, worldStartY, -1);\n        }else{\n          setWorldLocation(worldStartX, worldStartY, 1);\n        }\n     }\n\n  public void update(long fps, float gravity) {\n     }\n}\n```", "```java\npublic class Lampost extends GameObject {\n\n  Lampost(float worldStartX, float worldStartY, char type) {\n\n        final float HEIGHT = 3;\n        final float WIDTH = 1;\n        setHeight(HEIGHT);\n        setWidth(WIDTH); \n        setType(type);\n        setBitmapName(\"lampost\");\n        setActive(false);\n        Random rand = new Random();\n        if(rand.nextInt(2)==0) {\n          setWorldLocation(worldStartX, worldStartY, -1);\n        }else{\n          setWorldLocation(worldStartX, worldStartY, 1);\n        }\n  }\n\n    public void update(long fps, float gravity) {\n   }\n}\n```", "```java\nimport java.util.Random;\n\npublic class Stalagmite extends GameObject {\n\n  Stalagmite(float worldStartX, float worldStartY, char type) {\n\n        final float HEIGHT = 3;\n        final float WIDTH = 2;\n        setHeight(HEIGHT);\n        setWidth(WIDTH);\n        setType(type);\n        setBitmapName(\"stalacmite\");\n        setActive(false);\n        Random rand = new Random();\n        if(rand.nextInt(2)==0) {\n         setWorldLocation(worldStartX, worldStartY, -1);\n        }else{\n         setWorldLocation(worldStartX, worldStartY, 1);\n        }\n    }\n\n    public void update(long fps, float gravity) {\n    }\n}\n```", "```java\nimport java.util.Random;\n\npublic class Stalactite extends GameObject {\n\n  Stalactite(float worldStartX, float worldStartY, char type) {\n\n        final float HEIGHT = 3;\n        final float WIDTH = 2;\n        setHeight(HEIGHT);\n        setWidth(WIDTH);\n        setType(type);\n        setBitmapName(\"stalactite\");\n        setActive(false);\n        Random rand = new Random();\n        if(rand.nextInt(2)==0) {\n          setWorldLocation(worldStartX, worldStartY, -1);\n        }else{\n          setWorldLocation(worldStartX, worldStartY, 1);\n        }\n  }\n\n     public void update(long fps, float gravity) {\n     }\n}\n```", "```java\nimport java.util.Random;\n\npublic class Tree extends GameObject {\n\n  Tree(float worldStartX, float worldStartY, char type) {\n\n       final float HEIGHT = 4;\n       final float WIDTH = 2;\n       setWidth(WIDTH);\n        setHeight(HEIGHT);\n        setType(type);\n        setBitmapName(\"tree1\");\n        setActive(false);\n        Random rand = new Random();\n        if(rand.nextInt(2)==0) {\n          setWorldLocation(worldStartX, worldStartY, -1);\n        }else{\n          setWorldLocation(worldStartX, worldStartY, 1);\n        }\n     }\n\n     public void update(long fps, float gravity) {\n     }\n}\n```", "```java\nimport java.util.Random;\n\npublic class Tree2 extends GameObject {\n\n  Tree2(float worldStartX, float worldStartY, char type) {\n\n        final float HEIGHT = 4;\n        final float WIDTH = 2;\n        setWidth(WIDTH);\n        setHeight(HEIGHT);\n        setType(type);\n        setBitmapName(\"tree2\");\n        setActive(false);\n        Random rand = new Random();\n        if(rand.nextInt(2)==0) {\n          setWorldLocation(worldStartX, worldStartY, -1);\n        }else{\n          setWorldLocation(worldStartX, worldStartY, 1);\n        }\n  }\n\n     public void update(long fps, float gravity) {\n     }\n}\n```", "```java\ncase '7':\n    index = 14;\n    break;\n\ncase 'w':\n index = 15;\n break;\n\ncase 'x':\n index = 16;\n break;\n\ncase 'l':\n index = 17;\n break;\n\ncase 'r':\n index = 18;\n break;\n\ncase 's':\n index = 19;\n break;\n\ncase 'm':\n index = 20;\n break;\n\ncase 'z':\n index = 21;\n break;\n\ndefault:\n    index = 0;\n    break;\n```", "```java\ncase '7':\n    index = 14;\n    break;\n\ncase 'w':\n index = 15;\n break;\n\ncase 'x':\n index = 16;\n break;\n\ncase 'l':\n index = 17;\n break;\n\ncase 'r':\n index = 18;\n break;\n\ncase 's':\n index = 19;\n break;\n\ncase 'm':\n index = 20;\n break;\n\ncase 'z':\n index = 21;\n break;\n\ndefault:\n    index = 0;\n    break;\n```", "```java\ncase '7':\n    // Add a tile to the gameObjects\n    gameObjects.add(new Stone(j, i, c));\n    break;\n\ncase 'w':\n // Add a tree to the gameObjects\n gameObjects.add(new Tree(j, i, c));\n break;\n\ncase 'x':\n // Add a tree2 to the gameObjects\n gameObjects.add(new Tree2(j, i, c));\n break;\n\ncase 'l':\n // Add a tree to the gameObjects\n gameObjects.add(new Lampost(j, i, c));\n break;\n\ncase 'r':\n // Add a stalactite to the gameObjects\n gameObjects.add(new Stalactite(j, i, c));\n break;\n\ncase 's':\n // Add a stalagmite to the gameObjects\n gameObjects.add(new Stalagmite(j, i, c));\n break;\n\ncase 'm':\n // Add a cart to the gameObjects\n gameObjects.add(new Cart(j, i, c));\n break;\n\ncase 'z':\n // Add a boulders to the gameObjects\n gameObjects.add(new Boulders(j, i, c));\n break;\n\n```", "```java\npublic class BackgroundData {\n  String bitmapName;\n     boolean isParallax;\n     //layer 0 is the map\n     int layer;\n     float startY;\n     float endY;\n     float speed;\n     int height;\n     int width;\n\n     BackgroundData(String bitmap, boolean isParallax, \n     int layer, float startY, float endY, \n     float speed, int height){\n\n      this.bitmapName = bitmap;\n      this.isParallax = isParallax;\n      this.layer = layer;\n      this.startY = startY;\n      this.endY = endY;\n      this.speed = speed;\n      this.height = height;\n  }\n}\n```", "```java\nArrayList<String> tiles;\nArrayList<BackgroundData> backgroundDataList;\n\n// This class will evolve along with the project\n```", "```java\nimport android.content.Context;\nimport android.graphics.Bitmap;\nimport android.graphics.BitmapFactory;\nimport android.graphics.Matrix;\n\npublic class Background {\n\n     Bitmap bitmap;\n     Bitmap bitmapReversed;\n\n     int width;\n     int height;\n\n     boolean reversedFirst;\n     int xClip;// controls where we clip the bitmaps each frame\n     float y;\n     float endY;\n     int z;\n\n     float speed;\n     boolean isParallax;//Not currently used\n```", "```java\n  Background(Context context, int yPixelsPerMetre, \n    int screenWidth, BackgroundData data){\n\n      int resID =   context.getResources().getIdentifier\n      (data.bitmapName, \"drawable\", \n      context.getPackageName());\n\n          bitmap = BitmapFactory.decodeResource\n          (context.getResources(), resID);\n\n          // Which version of background (reversed or regular) is // currently drawn first (on left)\n          reversedFirst = false;\n\n          //Initialize animation variables.\n          xClip = 0;  //always start at zero\n          y = data.startY;\n          endY = data.endY;\n          z = data.layer;\n          isParallax = data.isParallax;\n          speed = data.speed; //Scrolling background speed\n\n          //Scale background to fit the screen.\n          bitmap = Bitmap.createScaledBitmap(bitmap, screenWidth,\n                data.height * yPixelsPerMetre\n                , true); \n\n          width = bitmap.getWidth();\n          height = bitmap.getHeight();\n\n          // Create a mirror image of the background\n          Matrix matrix = new Matrix();  \n          matrix.setScale(-1, 1); //Horizontal mirror effect.\n          bitmapReversed = Bitmap.createBitmap(\n          bitmap, 0, 0, width, height, matrix, true);\n\n    }\n}\n```", "```java\nbackgroundDataList = new ArrayList<BackgroundData>();\n// note that speeds less than 2 cause problems\nthis.backgroundDataList.add(\n  new BackgroundData(\"skyline\", true, -1, 3, 18, 10, 15 ));\n\nthis.backgroundDataList.add(\n  new BackgroundData(\"grass\", true, 1, 20, 24, 24, 4 ));\n```", "```java\nLevelData levelData;\nArrayList<GameObject> gameObjects;\nArrayList<Background> backgrounds;\n\n```", "```java\nprivate void loadBackgrounds(Context context, \n  int pixelsPerMetre, int screenWidth) {\n\n  backgrounds = new ArrayList<Background>();\n     //load the background data into the Background objects and\n     // place them in our GameObject arraylist\n     for (BackgroundData bgData : levelData.backgroundDataList) {\n            backgrounds.add(new Background(context,       \n            pixelsPerMetre, screenWidth, bgData));\n     }\n}\n```", "```java\n// Load all the GameObjects and Bitmaps\nloadMapData(context, pixelsPerMetre, px, py);\nloadBackgrounds(context, pixelsPerMetre, screenWidth);\n\n```", "```java\npublic int getPixelsPerMetreY(){\n  return  pixelsPerMetreY;\n}\n\npublic int getyCentre(){\n  return screenCentreY;\n}\n\npublic float getViewportWorldCentreY(){\n  return currentViewportWorldCentre.y;\n}\n```", "```java\nprivate void drawBackground(int start, int stop) {\n\n     Rect fromRect1 = new Rect();\n     Rect toRect1 = new Rect();\n     Rect fromRect2 = new Rect();\n     Rect toRect2 = new Rect();\n```", "```java\n     for (Background bg : lm.backgrounds) {\n     if (bg.z < start && bg.z > stop) {\n\n```", "```java\n          // Is this layer in the viewport?\n            // Clip anything off-screen\n            if (!vp.clipObjects(-1, bg.y, 1000, bg.height)) {\n                float floatstartY = ((vp.getyCentre() -                     \n                    ((vp.getViewportWorldCentreY() - bg.y) * \n                    vp.getPixelsPerMetreY())));\n\n                int startY = (int) floatstartY;\n\n                float floatendY = ((vp.getyCentre() -           \n                    ((vp.getViewportWorldCentreY() - bg.endY) *                                 \n                    vp.getPixelsPerMetreY())));\n\n                int endY = (int) floatendY;\n```", "```java\n        // Define what portion of bitmaps to capture \n        // and what coordinates to draw them at\n        fromRect1 = new Rect(0, 0, bg.width - bg.xClip,     \n          bg.height);\n\n        toRect1 = new Rect(bg.xClip, startY, bg.width, endY);\n             fromRect2 = new Rect(bg.width - bg.xClip, 0, bg.width, bg.height);\n\n        toRect2 = new Rect(0, startY, bg.xClip, endY);\n        }// End if (!vp.clipObjects...\n```", "```java\n          //draw backgrounds\n            if (!bg.reversedFirst) {\n\n                canvas.drawBitmap(bg.bitmap,\n                    fromRect1, toRect1, paint);\n                canvas.drawBitmap(bg.bitmapReversed, \n                    fromRect2, toRect2, paint);\n\n            } else {\n                canvas.drawBitmap(bg.bitmap, \n                    fromRect2, toRect2, paint);\n\n                canvas.drawBitmap(bg.bitmapReversed, \n                    fromRect1, toRect1, paint);\n            }\n```", "```java\n          // Calculate the next value for the background's\n            // clipping position by modifying xClip\n            // and switching which background is drawn first,\n            // if necessary.\n            bg.xClip -= lm.player.getxVelocity() / (20 / bg.speed);\n            if (bg.xClip >= bg.width) {\n                bg.xClip = 0;\n                bg.reversedFirst = !bg.reversedFirst;\n            } \n            else if (bg.xClip <= 0) {\n                bg.xClip = bg.width;\n                bg.reversedFirst = !bg.reversedFirst;\n\n            }\n        }\n    }\n}\n```", "```java\n// Rub out the last frame with arbitrary color\npaint.setColor(Color.argb(255, 0, 0, 255));\ncanvas.drawColor(Color.argb(255, 0, 0, 255));\n\n// Draw parallax backgrounds from -1 to -3\ndrawBackground(0, -3);\n\n// Draw all the GameObjects\nRect toScreen2d = new Rect();\n```", "```java\n// Draw parallax backgrounds from layer 1 to 3\ndrawBackground(4, 0);\n\n// Text for debugging\n```", "```java\npublic void moveViewportRight(int maxWidth){\n  if(currentViewportWorldCentre.x < maxWidth -       \n    (metresToShowX/2)+3) {\n\n     currentViewportWorldCentre.x += 1;\n  }\n}\n\npublic void moveViewportLeft(){\n  if(currentViewportWorldCentre.x > (metresToShowX/2)-3){\n    currentViewportWorldCentre.x -= 1;\n     }\n}\n\npublic void moveViewportUp(){\n  if(currentViewportWorldCentre.y > (metresToShowY /2)-3) {\n        currentViewportWorldCentre.y -= 1;\n   }\n}\n\npublic void moveViewportDown(int maxHeight){\n  if(currentViewportWorldCentre.y < \n    maxHeight - (metresToShowY / 2)+3) {\n\n    currentViewportWorldCentre.y += 1;\n  }\n}\n```", "```java\n//Move the viewport around to explore the map\nswitch (motionEvent.getAction() & MotionEvent.ACTION_MASK) {\n  case MotionEvent.ACTION_DOWN:\n if (right.contains(x, y)) {\n vp.moveViewportRight(l.mapWidth);\n } else if (left.contains(x, y)) {\n vp.moveViewportLeft();\n } else if (jump.contains(x, y)) {\n vp.moveViewportUp();\n } else if (shoot.contains(x, y)) {\n vp.moveViewportDown(l.mapHeight);\n } else if (pause.contains(x, y)) {\n l.switchPlayingStatus();\n }\n      break;\n}\n```", "```java\nswitch (level) {\n  case \"LevelCave\":\n     levelData = new LevelCave();\n     break;\n\n// We can add extra levels here\ncase \"LevelCity\": \n levelData = new LevelCity(); \n break; \n\ncase \"LevelForest\": \n levelData = new LevelForest(); \n break;\n\ncase \"LevelMountain\": \n levelData = new LevelMountain(); \n break;\n}\n```", "```java\nloadLevel(\"LevelCave\", 1, 16);\n```", "```java\nif (lm.isPlaying()) {\n    // Reset the players location as \n    // the world centre of the viewport\n    //if game is playing\n    vp.setWorldCentre(lm.gameObjects.get(lm.playerIndex)\n        .getWorldLocation().x,\n        lm.gameObjects.get(lm.playerIndex)\n        .getWorldLocation().y);\n\n //Has player fallen out of the map?\n if (lm.player.getWorldLocation().x < 0 ||\n lm.player.getWorldLocation().x > lm.mapWidth ||\n lm.player.getWorldLocation().y > lm.mapHeight) {\n\n sm.playSound(\"player_burn\");\n ps.loseLife();\n PointF location = new PointF(ps.loadLocation().x,\n ps.loadLocation().y);\n\n lm.player.setWorldLocationX(location.x);\n lm.player.setWorldLocationY(location.y);\n lm.player.setxVelocity(0);\n }\n\n // Check if game is over\n if (ps.getLives() == 0) {\n ps = new PlayerState();\n loadLevel(\"LevelCave\", 1, 16);\n }\n}\n```", "```java\npublic class Location {\n     String level;\n     float x;\n     float y;\n\n     Location(String level, float x, float y){\n        this.level = level;\n        this.x = x;\n        this.y = y;\n     }\n}\n```", "```java\npublic class Teleport extends GameObject {\n\n    Location target;\n\n    Teleport(float worldStartX, float worldStartY, \n        char type, Location target) {\n\n        final float HEIGHT = 2;\n        final float WIDTH = 2;\n        setHeight(HEIGHT); // 2 metres tall\n        setWidth(WIDTH); // 1 metre wide\n        setType(type);\n        setBitmapName(\"door\");\n\n        this.target = new Location(target.level, \n            target.x, target.y);\n\n        // Where does the tile start\n        // X and y locations from constructor parameters\n        setWorldLocation(worldStartX, worldStartY, 0);\n\n        setRectHitbox();\n    }\n\n    public Location getTarget(){\n        return target;\n    }\n\n    public void update(long fps, float gravity){\n    }\n}\n```", "```java\nArrayList<String> tiles;\nArrayList<BackgroundData> backgroundDataList;\nArrayList<Location> locations;\n\n// This class will evolve along with the project\n```", "```java\n// Declare the values for the teleports in order of appearance\nlocations = new ArrayList<Location>();\nthis.locations.add(new Location(\"LevelCity\", 118f, 18f));\n```", "```java\ncase 'z':\n  index = 21;\n  break;\n\ncase 't':\n index = 22;\n break;\n\ndefault:\n  index = 0;\n  break;\n```", "```java\ncase 'z':\n  index = 21;\n     break;\n\ncase 't':\n index = 22;\n break;\n\ndefault:\n  index = 0;\n  break;\n```", "```java\n//Keep track of where we load our game objects\nint currentIndex = -1;\nint teleportIndex = -1;\n// how wide and high is the map? Viewport needs to know\n```", "```java\ncase 'z':\n    // Add a boulders to the gameObjects\n    gameObjects.add(new Boulders(j, i, c));\n    break;\n\n case 't':\n // Add a teleport to the gameObjects\n teleportIndex++;\n gameObjects.add(new Teleport(j, i, c,\n levelData.locations.get(teleportIndex)));\n\n break;\n\n```", "```java\ncase 'f':\n    sm.playSound(\"player_burn\");\n    ps.loseLife();\n    location = new PointF(ps.loadLocation().x,\n      ps.loadLocation().y); \n    lm.player.setWorldLocationX(location.x);\n    lm.player.setWorldLocationY(location.y);\n    lm.player.setxVelocity(0);\n    break;\n\ncase 't':\n Teleport teleport = (Teleport) go;\n Location t = teleport.getTarget();\n loadLevel(t.level, t.x, t.y);\n sm.playSound(\"teleport\");\n break;\n\ndefault:// Probably a regular tile\n    if (hit == 1) {// Left or right\n        lm.player.setxVelocity(0);\n        lm.player.setPressingRight(false);\n    }\n    if (hit == 2) {// Feet\n        lm.player.isFalling = false;\n    }\n    break;\n```", "```java\nps.saveLocation(location);\n\n// Reload the players current fire rate from the player state\nlm.player.bfg.setFireRate(ps.getFireRate());\n\n```", "```java\nloadLevel(\"LevelMountain\", 118, 17);\nloadLevel(\"LevelForest\", 1, 17);\nloadLevel(\"LevelCity\", 118, 18);\nloadLevel(\"LevelCave\", 1, 16);\n```", "```java\n// Draw the HUD\n// This code needs bitmaps: extra life, upgrade and coin\n// Therefore there must be at least one of each in the level\n\nint topSpace = vp.getPixelsPerMetreY() / 4;\nint iconSize = vp.getPixelsPerMetreX();\nint padding = vp.getPixelsPerMetreX() / 5;\nint centring = vp.getPixelsPerMetreY() / 6;\npaint.setTextSize(vp.getPixelsPerMetreY()/2);\npaint.setTextAlign(Paint.Align.CENTER);\n\npaint.setColor(Color.argb(100, 0, 0, 0));\ncanvas.drawRect(0,0,iconSize * 7.0f, topSpace*2 + iconSize,paint);\npaint.setColor(Color.argb(255, 255, 255, 0));\n\ncanvas.drawBitmap(lm.getBitmap('e'), 0, topSpace, paint);\ncanvas.drawText(\"\" + ps.getLives(), (iconSize * 1) + padding, \n  (iconSize) - centring, paint);\n\ncanvas.drawBitmap(lm.getBitmap('c'), (iconSize * 2.5f) + padding, \n  topSpace, paint);\n\ncanvas.drawText(\"\" + ps.getCredits(), (iconSize * 3.5f) + padding * 2, (iconSize) - centring, paint);\n\ncanvas.drawBitmap(lm.getBitmap('u'), (iconSize * 5.0f) + padding, \n  topSpace, paint);\n\ncanvas.drawText(\"\" + ps.getFireRate(), (iconSize * 6.0f) + padding * 2, (iconSize) - centring, paint);\n```"]