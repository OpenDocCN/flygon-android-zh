- en: Chapter 5. Creating User Interfaces
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第五章 创建用户界面
- en: Now that you have created your first project and have become familiar with the
    code editor and its functionalities, we will begin our application by creating
    our user interface. Is there more than one way to create a user interface using
    Android Studio? How can you add components to your user interface? Have you ever
    wondered how to make your applications support different screen sizes and resolutions?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建了你的第一个项目，并熟悉了代码编辑器及其功能，我们将通过创建用户界面开始我们的应用程序。有没有多种方法可以使用Android Studio创建用户界面？你如何向你的用户界面添加组件？你是否曾想过如何让你的应用程序支持不同的屏幕尺寸和分辨率？
- en: This chapter focuses on the creation of the user interfaces using layouts. The
    layouts can be created using a graphical view or a text-based view. We will learn
    how to use both of them to create our layout. We will also code a *Hello World*
    application using simple components. We will learn about fragmentation on different
    Android-based devices and how to prepare our application for this issue. We will
    end this chapter with basic notions of handling events on our application.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章重点介绍使用布局创建用户界面。布局可以通过图形视图或基于文本的视图创建。我们将学习如何使用它们来创建我们的布局。我们还将使用简单组件编写一个 *Hello
    World* 应用程序。我们将了解基于不同Android设备的碎片化问题，以及如何为这个问题准备我们的应用程序。我们将以了解如何在我们的应用程序上处理事件的基本概念结束本章。
- en: 'These are the topics we''ll be covering in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们将在本章中讨论的主题：
- en: Existing layout editors
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现有的布局编辑器
- en: Creating a new layout
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建新布局
- en: Adding components
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加组件
- en: Supporting different screens
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持不同的屏幕
- en: Changing the UI theme
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改UI主题
- en: Handling events
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理事件
- en: The graphical editor
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图形编辑器
- en: Open the main layout located at `/src/main/res/layout/activity_main.xml` in
    our project. The graphical editor will be opened by default. Initially, this main
    layout contains just a text view with a **Hello world!** message. To switch between
    the graphical and the text editor, click on the bottom tabs, **Design** and **Text**.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 打开位于我们项目中的 `/src/main/res/layout/activity_main.xml` 的主布局。默认情况下会打开图形编辑器。最初，这个主布局只包含一个带有
    **Hello world!** 消息的文本视图。要在图形和文本编辑器之间切换，请点击底部的 **Design** 和 **Text** 标签。
- en: '![The graphical editor](img/5273OS_05_01.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![图形编辑器](img/5273OS_05_01.jpg)'
- en: The toolbar contains some options to change the layout style and preview. The
    options of the toolbar are explained throughout the chapter.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 工具栏包含一些用于更改布局样式和预览的选项。本章将解释工具栏的选项。
- en: '![The graphical editor](img/5273OS_05_02.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![图形编辑器](img/5273OS_05_02.jpg)'
- en: The components tree displays the components placed in the layout as a hierarchy.
    The properties inspector shows the properties of the selected component from the
    layout and it allows us to change them.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 组件树显示布局中放置的组件层次结构。属性检查器显示从布局中选择的组件的属性，并允许我们更改它们。
- en: The palette lists the existing **UI** (**User Interface**) components to place
    in our layout. The palette organizes the components in different categories.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 调色板列出了可以在布局中放置的现有**UI**（**用户界面**）组件。调色板将这些组件按不同类别组织起来。
- en: '**Layouts**: A layout is a container object to distribute the components on
    the screen. The root element of a user interface is a layout object, but layouts
    can also contain more layouts, creating a hierarchy of components structured in
    layouts. The recommendation is to keep this layout hierarchy as simple as possible.
    Our main layout has a relative layout as a root element.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**布局**：布局是一个容器对象，用于在屏幕上分布组件。用户界面的根元素是布局对象，但布局也可以包含更多布局，创建在布局中结构的组件层次。建议保持这个布局层次尽可能简单。我们的主布局有一个相对布局作为根元素。'
- en: '**Widgets**: Buttons, checkboxes, text views, switches, image views, progress
    bars, spinners, or web views are in this category. They are the most common components
    used in most layouts.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**小部件**：按钮、复选框、文本视图、开关、图像视图、进度条、下拉列表或网页视图都属于这一类。它们是大多数布局中最常用的组件。'
- en: '**Text Fields**: These are inputs in which users can type text. The difference
    between them is the type of text users can type.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文本字段**：这些是用户可以输入文本的输入框。它们之间的区别在于用户可以输入的文本类型。'
- en: '**Containers**: These are containers group components that share a common behavior.
    Radio groups, list views, scroll views, or tab hosts are some of them.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容器**：这些容器将共享常见行为的组件组合在一起。单选按钮组、列表视图、滚动视图或标签主机都属于这一类。'
- en: '**Date & Time**: These are components related to date and time, as a calendar
    or clocks.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日期和时间**：这些是与日期和时间相关的组件，如日历或时钟。'
- en: '**Expert**: These components are not as common as the ones in the widgets category,
    but it is worth taking a look at them.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**专家**：这些组件不如小部件类别中的那些常见，但值得一看。'
- en: '**Custom**: These are components that allow us to include our custom components,
    which are usually other layouts from our project.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自定义**：这些组件允许我们包含自定义组件，通常是项目中的其他布局。'
- en: The text-based editor
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文本编辑器
- en: Change the graphical editor to the text editor by clicking on the **Text** tab.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击**文本**标签页，将图形编辑器更改为文本编辑器。
- en: '![The text-based editor](img/5273OS_05_03.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![文本编辑器](img/5273OS_05_03.jpg)'
- en: The toolbar is the same as the graphical editor. The preview displays the layout
    but it cannot be changed, you should use the design tab instead. The components
    are added to the layout using their XML declarations. The properties are also
    configured using the XML declarations. Like the graphical editor, the text editor
    shows just the text view element inside the root layout.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 工具栏与图形编辑器相同。预览显示布局，但无法更改，应使用设计标签页。使用组件的XML声明将组件添加到布局中。属性也使用XML声明进行配置。与图形编辑器一样，文本编辑器仅显示根布局内的文本视图元素。
- en: Creating a new layout
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建新布局
- en: When we created our main activity, the associated layout was also created. This
    is a way to create a layout, while creating an activity.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 创建主活动时，关联的布局也会创建。这是在创建活动时创建布局的一种方式。
- en: If we want to add an independent layout without creating a new activity, then
    click with the right mouse button on the layouts folder (`res/layout/`) and navigate
    to **New** | **Layout resource file**. You can also navigate to the menu option
    **File** | **New** | **Layout resource file**. Type the filename and the root
    element.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想在不创建新活动的情况下添加一个独立的布局，那么请右键点击布局文件夹（`res/layout/`）并导航到**新建** | **布局资源文件**。也可以导航到菜单选项**文件**
    | **新建** | **布局资源文件**。输入文件名和根元素。
- en: Once the layout is created, the associated activity can be changed from the
    editor to another one. If the layout has no activity, any existing one can be
    linked to it from the editor. To accomplish this, in the toolbar of the layout
    editor, search for the activity option, click on it, and select the **Associate
    with other Activity** option. A dialog box that lists all the activities of your
    project will be opened so you can select one of them.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 创建布局后，可以从编辑器将关联的活动更改为另一个。如果布局没有活动，可以从编辑器将任何现有活动与其关联。为此，在布局编辑器的工具栏中查找活动选项，点击它，然后选择**与其他活动关联**的选项。将打开一个列出项目所有活动的对话框，以便您可以选择其中之一。
- en: Adding components
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加组件
- en: Our main layout is a relative layout and contains a text view saying **Hello
    world!**, but let's add a new component. The easiest way to do this is using the
    graphical editor, so open the design tab. Select a component and drag it into
    the layout preview, for example, navigate to **Text Fields** | **Person Name**
    and place it below the text view.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的主布局是一个相对布局，包含一个显示**Hello world!**的文本视图，但让我们添加一个新组件。最简单的方法是使用图形编辑器，因此请打开设计标签页。选择一个组件并将其拖动到布局预览中，例如，导航到**文本字段**
    | **Person Name**并将其放置在文本视图下方。
- en: In the component tree view, now there is a new `EditText` object. Keep the text
    field selected to examine its properties loaded in the properties inspector. Let's
    change some of them and observe the differences in the layout preview and in the
    component tree.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在组件树视图中，现在有一个新的`EditText`对象。保持文本字段的选择状态，以便在属性检查器中检查其属性。让我们更改其中一些属性，并观察布局预览和组件树中的差异。
- en: '**layout:width**: Its current value is `wrap_content`. This option will adapt
    the width of the field to its content. Change it to `match_parent` to adapt it
    to the parent layout width (the root relative layout).'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**layout:width**：其当前值为`wrap_content`。此选项将使字段的宽度适应其内容。将其更改为`match_parent`以适应父布局的宽度（根相对布局）。'
- en: '**hint**: Type `Enter your name` as the hint of the field. The hint is a text
    shown when the field is empty to indicate the information that should be typed.
    Due to the field having a default value, `Name`, the hint is not visible.'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**hint**：将字段的提示设置为`Enter your name`。提示是在字段为空时显示的文本，指示应输入的信息。由于字段具有默认值`Name`，提示不可见。'
- en: '**id**: Its current ID is `@+id/editText`. This ID will be used from the code
    to get access to this object and is the one displayed in the component tree. Change
    it to `@+id/editText_name` to easily distinguish it from other text fields. Check
    that in the component tree the component ID has also changed.![Adding components](img/5273OS_05_04.jpg)'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**id**：其当前 ID 是 `@+id/editText`。这个 ID 将用于代码中访问此对象，是在组件树中显示的 ID。将其更改为 `@+id/editText_name`
    以便于与其他文本字段区分。检查组件树中组件 ID 是否也已更改。![添加组件](img/5273OS_05_04.jpg)'
- en: '**text**: Delete the value of this field. The hint should now be visible.'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**text**：删除此字段的值。现在提示应该可见。'
- en: 'If we switch to the text editor, we can see the XML definition of the text
    field with the properties we edited:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们切换到文本编辑器，我们可以看到我们编辑过的文本字段的 XML 定义：
- en: '[PRE0]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: From the text editor, the existing components and their properties can also
    be changed. Modify the text view ID (`android:id` property) from `@+id/textView`
    to `@+id/textView_greeting`. Having a descriptive ID is important since it will
    be used from our code. Descriptive variable names allow the code to be self-documenting.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 从文本编辑器中，也可以更改现有组件及其属性。将文本视图 ID（`android:id` 属性）从 `@+id/textView` 更改为 `@+id/textView_greeting`。拥有一个描述性的
    ID 很重要，因为它将用于我们的代码中。描述性变量名可以使代码自我文档化。
- en: 'Let''s add another component using the text editor this time. Press the open
    tag key and start typing `Button`. Let the suggestion list appear and select a
    `Button` object. Inside the `Button` tag, add the next properties:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这一次，让我们使用文本编辑器添加另一个组件。按下开放标签键并开始输入 `Button`。让建议列表出现并选择一个 `Button` 对象。在 `Button`
    标签内，添加以下属性：
- en: '[PRE1]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Create the ID property with the value `@+id/button_accept`. Let the width and
    height adapt to the button content (`wrap_content` value). Place the button below
    the name text field using the `android:layout_below` property. We reference the
    name text field by its ID (`@+id/editText_name`). Center horizontally the button
    in the parent layout using the `layout_centerHorizontal` property. Set the text
    of the button (`Accept`).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 ID 属性，值为 `@+id/button_accept`。让宽度和高度适应按钮内容（`wrap_content` 值）。使用 `android:layout_below`
    属性将按钮放置在名字文本字段下方。我们通过其 ID（`@+id/editText_name`）引用名字文本字段。使用 `layout_centerHorizontal`
    属性在父布局中水平居中按钮。设置按钮的文本（`Accept`）。
- en: 'The button is displayed in the layout preview. The next screenshot shows that
    if we switch to the graphical editor, the button is also displayed in it and in
    the component tree:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮在布局预览中显示。下一张截图显示，如果我们切换到图形编辑器，按钮也会在其中和组件树中显示：
- en: '![Adding components](img/5273OS_05_05.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![添加组件](img/5273OS_05_05.jpg)'
- en: Supporting multiple screens
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 支持多屏幕
- en: When creating an Android application, we have to be aware of the existence of
    multiple screen sizes and screen resolutions. It is important to check how our
    layouts are displayed in different screen configurations. To accomplish this,
    Android Studio provides a functionality to change the layout preview when we are
    in the design mode.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建 Android 应用程序时，我们必须意识到存在多种屏幕尺寸和屏幕分辨率。检查我们的布局在不同屏幕配置下的显示情况非常重要。为了实现这一点，Android
    Studio 提供了一个功能，可以在设计模式下更改布局预览。
- en: We can find this functionality in the toolbar, the **device definition** option
    used in the preview is by default **Nexus 4**. Click on it to open the list of
    available device definitions.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在工具栏中找到这个功能，预览中使用的**设备定义**选项默认为**Nexus 4**。点击它打开可用设备定义的列表。
- en: '![Supporting multiple screens](img/5273OS_05_06.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![支持多屏幕](img/5273OS_05_06.jpg)'
- en: Try some of them. The difference between a tablet device and a device like the
    Nexus one are very notable. We should adapt the views to all the screen configurations
    our application supports to ensure they are displayed optimally.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试一些设备。平板设备与 Nexus 等设备的区别非常明显。我们应该调整视图以适应应用程序支持的所有屏幕配置，以确保它们能够最佳显示。
- en: The device definitions indicate the screen inches, the resolution, and the screen
    density. Android divides into ldpi, mdpi, hdpi, xhdpi, and even xxhdpi the screen
    densities.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 设备定义指出了屏幕英寸、分辨率和屏幕密度。Android 将屏幕密度分为 ldpi、mdpi、hdpi、xhdpi 甚至 xxhdpi。
- en: '**ldpi** (**low-density dots per inch**): About 120 dpi'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ldpi**（**低密度每英寸点数**）：大约 120 dpi'
- en: '**mdpi** (**medium-density dots per inch**): About 160 dpi'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**mdpi**（**中密度每英寸点数**）：大约 160 dpi'
- en: '**hdpi** (**high-density dots per inch**): About 240 dpi'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**hdpi**（**高密度每英寸点数**）：大约 240 dpi'
- en: '**xhdpi** (**extra-high-density dots per inch**): About 320 dpi'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**xhdpi**（**超高密度每英寸点数**）：大约 320 dpi'
- en: '**xxhdpi** (**extra-extra-high-density dots per inch**): About 480 dpi'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**xxhdpi** (**超超高密度每英寸点数**): 大约 480 dpi'
- en: The last dashboards published by Google show that most devices have high-density
    screens (34.3 percent), followed by xhdpi (23.7 percent) and mdpi (23.5 percent).
    Therefore, we can cover 81.5 percent of the devices by testing our application
    using these three screen densities. Official Android dashboards are available
    at [http://developer.android.com/about/dashboards](http://developer.android.com/about/dashboards).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌最近发布的数据显示，大多数设备具有高密度屏幕（34.3%），其次是 xxhdpi（23.7%）和 mdpi（23.5%）。因此，通过测试这三种屏幕密度，我们可以覆盖
    81.5% 的设备。官方的 Android 数据面板可以在 [http://developer.android.com/about/dashboards](http://developer.android.com/about/dashboards)
    上找到。
- en: Another issue to keep in mind is the **device orientation**. Do we want to support
    the landscape mode in our application? If the answer is yes, we have to test our
    layouts in the landscape orientation. On the toolbar, click on the layout state
    option to change the mode from portrait to landscape or from landscape to portrait.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个需要考虑的问题是**设备方向**。我们是否希望应用程序支持横屏模式？如果答案是肯定的，我们必须在横屏方向上测试我们的布局。在工具栏上，点击布局状态选项，将模式从纵向切换到横向，或从横向切换到纵向。
- en: 'In the case that our application supports the landscape mode and the layout
    does not display as expected in this orientation, we may want to create a variation
    of the layout. Click on the first icon of the toolbar, that is, the configuration
    option, and select the option **Create Landscape Variation**. A new layout will
    be opened in the editor. This layout has been created in the resources folder,
    under the directory `layout-land` and using the same name as the portrait layout:
    `/src/main/res/layout-land/activity_main.xml`. Now we can edit the new layout
    variation perfectly conformed to the landscape mode.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们的应用程序支持横屏模式，且布局在此方向上显示不如预期，我们可能需要创建布局的变体。点击工具栏上的第一个图标，即配置选项，并选择 **创建横屏变体**
    选项。将在编辑器中打开一个新的布局。这个布局已经在资源文件夹中创建，位于 `layout-land` 目录下，并使用与纵向布局相同的名称：`/src/main/res/layout-land/activity_main.xml`。现在我们可以完美地编辑符合横屏模式的新布局变体。
- en: 'Similarly, we can create a variation of the layout for *xlarge* screens. Select
    the option **Create layout-xlarge Variation**. The new layout will be created
    in the `layout-xlarge` folder: `/src/main/res/layout-xlarge/activity_main.xml`.
    Android divides into *small*, *normal*, *large*, and *xlarge* the actual screen
    sizes:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们可以为 *xlarge* 屏幕创建布局的变体。选择 **创建 layout-xlarge 变体** 选项。新的布局将在 `layout-xlarge`
    文件夹中创建：`/src/main/res/layout-xlarge/activity_main.xml`。Android 将实际屏幕尺寸分为 *small*、*normal*、*large*
    和 *xlarge*。
- en: '**small**: Screens classified in this category are at least 426 dp x 320 dp'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**small**: 归入此类别的屏幕至少为 426 dp x 320 dp'
- en: '**normal**: Screens classified in this category are at least 470 dp x 320 dp'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**normal**: 归入此类别的屏幕至少为 470 dp x 320 dp'
- en: '**large**: Screens classified in this category are at least 640 dp x 480 dp'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**large**: 归入此类别的屏幕至少为 640 dp x 480 dp'
- en: '**xlarge**: Screens classified in this category are at least 960 dp x 720 dp'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**xlarge**: 归入此类别的屏幕至少为 960 dp x 720 dp'
- en: A **dp** is a density independent pixel, equivalent to one physical pixel on
    a 160 dpi screen.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**dp** 是一个与密度无关的像素单位，相当于在 160 dpi 屏幕上的一个物理像素。'
- en: The last dashboards published by Google show that most devices have a normal
    screen size (79.6 percent). If you want to cover a bigger percentage of devices,
    test your application by also using a small screen (9.5 percent), so the coverage
    will be 89.1 percent of devices.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌最近发布的数据显示，大多数设备具有正常屏幕尺寸（79.6%）。如果你想覆盖更多比例的设备，还可以使用小屏幕（9.5%）测试你的应用程序，这样覆盖的设备比例将达到
    89.1%。
- en: To display multiple device configurations at the same time, in the toolbar click
    on the configuration option and select the option **Preview All Screen Sizes**,
    or click on the **Preview Representative Sample** to open just the most important
    screen sizes. We can also delete any of the samples by clicking on it using the
    right mouse button and selecting the **Delete** option of the menu. Another useful
    action of this menu is the **Save screenshot** option, which allows us to take
    a screenshot of the layout preview.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 要同时显示多个设备配置，请在工具栏上点击配置选项，并选择 **预览所有屏幕尺寸** 的选项，或者点击 **预览代表性样本** 来打开最重要的屏幕尺寸。我们还可以通过右键点击样本并选择菜单中的
    **删除** 选项来删除任何样本。此菜单中的另一个有用操作是 **保存截图** 选项，它允许我们截取布局预览的屏幕截图。
- en: '![Supporting multiple screens](img/5273OS_05_07.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![支持多屏幕](img/5273OS_05_07.jpg)'
- en: If we create some layout variations, we can preview all of them selecting the
    option **Preview Layout Versions**.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们创建了一些布局变体，可以选择 **预览布局版本** 选项来预览所有这些变体。
- en: Changing the UI theme
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更改 UI 主题
- en: Layouts and widgets are created using the default UI theme of our project. We
    can change the appearance of the elements of the UI by creating styles. Styles
    can be grouped to create a theme and a theme can be applied to a whole activity
    or application. Some themes are provided by default, such as the Holo style. Styles
    and themes are created as resources under the `/src/res/values` folder.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 布局和小部件是使用我们项目的默认 UI 主题创建的。我们可以通过创建样式来改变 UI 元素的外观。样式可以分组以创建一个主题，主题可以应用于整个活动或应用程序。一些默认提供的主题，例如
    Holo 风格。样式和主题是在 `/src/res/values` 文件夹下作为资源创建的。
- en: 'Open the main layout using the graphical editor. The selected theme for our
    layout is indicated in the toolbar: `AppTheme`. This theme was created for our
    project and can be found in the styles file (`/src/res/values/styles.xml`). Open
    the styles file and notice that this theme is an extension of another theme (`Theme.Light`).'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 使用图形编辑器打开主布局。我们布局所选的主题在工具栏中指示为：`AppTheme`。这个主题是为我们的项目创建的，可以在样式文件（`/src/res/values/styles.xml`）中找到。打开样式文件，注意到这个主题是另一个主题（`Theme.Light`）的扩展。
- en: 'To custom our theme, edit the styles file. For example, add the next line in
    the `AppTheme` definition to change the window background color:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 要自定义我们的主题，请编辑样式文件。例如，在 `AppTheme` 定义中添加下一行以更改窗口背景颜色：
- en: '[PRE2]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Save the file and switch to the layout tab. The background is now light gray.
    This background color will be applied to all our layouts due to the fact that
    we configured it in the theme and not just in the layout.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 保存文件并切换到布局标签。现在背景是浅灰色。由于我们在主题中配置了此背景色，而不是仅在布局中，因此它将被应用到我们所有的布局中。
- en: To completely change the layout theme, click on the theme option from the toolbar
    in the graphical editor. The theme selector dialog is now opened, displaying a
    list of the available themes.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 要完全更改布局主题，请在图形编辑器的工具栏中点击主题选项。现在打开了主题选择对话框，显示可用主题的列表。
- en: '![Changing the UI theme](img/5273OS_05_08.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![更改 UI 主题](img/5273OS_05_08.jpg)'
- en: The themes created in our own project are listed in the **Project Themes** section.
    The section **Manifest Themes** shows the theme configured in the application
    manifest file (`/src/main/AndroidManifest.xml`). The **All** section lists all
    the available themes.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们自己项目中创建的主题列在**项目主题**部分。**清单主题**部分显示了在应用程序清单文件（`/src/main/AndroidManifest.xml`）中配置的主题。**所有**部分列出了所有可用的主题。
- en: Handling events
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理事件
- en: 'The user interface would be useless if the rest of the application could not
    interact with it. Events in Android are generated when the user interacts with
    our application. All the UI widgets are children of the `View` class and they
    share some events handled by the next listeners:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果应用程序的其余部分不能与用户界面交互，那么用户界面将毫无用处。在用户与我们的应用程序交互时，会在 Android 中生成事件。所有 UI 小部件都是
    `View` 类的子类，它们共享一些由以下监听器处理的事件：
- en: '`OnClickListener`: Captures the event when the user clicks the view element'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnClickListener`：捕获用户点击视图元素时的事件'
- en: '`OnCreateContextMenu`: Captures the event when the user performs a long click
    on the view element and we want to open a context menu'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnCreateContextMenu`：捕获用户在视图元素上执行长按操作并且我们想要打开上下文菜单时的事件'
- en: '`OnDragListener`: Captures the event when the user drags and drops the event
    element'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnDragListener`：捕获用户拖放事件元素时的事件'
- en: '`OnFocusChange`: Captures the event when the user navigates from an element
    to another in the same view'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnFocusChange`：捕获用户在相同视图中从一个元素导航到另一个元素时的事件'
- en: '`OnKeyListener`: Captures the event when the user presses any key while the
    view element has the focus'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnKeyListener`：捕获用户在视图元素具有焦点时按下任意键的事件'
- en: '`OnLongClickListener`: Captures the event when the user touches the view element
    and holds it'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnLongClickListener`：捕获用户触摸并按住视图元素时的事件'
- en: '`OnTouchListener`: Captures the event when the user touches the view element'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnTouchListener`：捕获用户触摸视图元素时的事件'
- en: In addition to these events and listeners, some UI widgets have some more specific
    ones. Checkboxes can register a listener to capture when its state changes (`OnCheckedChangeListener`),
    or spinners can register a listener to capture when an item is clicked (`OnItemClickListener`).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些事件和监听器之外，一些UI小部件还有一些更具体的事件。复选框可以注册一个监听器来捕获其状态变化（`OnCheckedChangeListener`），或者下拉列表可以注册一个监听器来捕获点击项目的事件（`OnItemClickListener`）。
- en: The most common event to capture is when the user clicks on the view elements.
    For this event, there is an easy way to handle it, using the view properties.
    Select the accept button in our layout and look for the `onClick` property. This
    property indicates the name of the method that will be executed when the user
    clicks on the button. This method has to be created in the activity associated
    with the current layout, in this case, in our main activity, `MainActivity.java`.
    Type `onAcceptClick` as the value of this property.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的事件是捕获用户点击视图元素的时候。对于这个事件，有一种简单的方法来处理它，即使用视图属性。在我们的布局中选择接受按钮，并查找`onClick`属性。此属性指示当用户点击按钮时将执行的方法的名称。这个方法必须在关联当前布局的活动中创建，在本例中，是在我们的主活动`MainActivity.java`中创建。将`onAcceptClick`作为此属性的值输入。
- en: Open the main activity to create the method definition. An event callback method
    when a view is clicked has to be public, with a void return type, and it receives
    the view that has been clicked as a parameter. This method will be executed every
    time the user clicks on the button.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 打开主活动以创建方法定义。当一个视图被点击时的事件回调方法必须是公开的，返回类型为void，并且接收被点击的视图作为参数。每次用户点击按钮时，都会执行此方法。
- en: '[PRE3]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: From the main activity we can interact with all the components of the interface,
    so when the user clicks on the accept button, our code can read the text from
    the name field and change the greeting to include the name in it.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 从主活动中，我们可以与界面上的所有组件进行交互，因此当用户点击接受按钮时，我们的代码可以读取名字字段的文本，并将问候语更改为包含名字的内容。
- en: To get the reference to a view object, use the `findViewById` method inherited
    from the `Activity` class. This method receives the ID of the component and returns
    the `View` object corresponding to that ID. The returned view object has to be
    casted to its specific class in order to use its methods, such as the `getText`
    method of the `EditText` class to get the name typed by the user.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取对视图对象的引用，请使用从`Activity`类继承的`findViewById`方法。此方法接收组件的ID并返回与该ID对应的`View`对象。返回的视图对象必须转换为其特定的类，以便使用其方法，例如`EditText`类的`getText`方法，以获取用户输入的名字。
- en: '[PRE4]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In the first two lines of the method, the references to the elements of the
    layout are retrieved: the text view that contains the greeting and the text field
    where the user can type a name. The components are found by its ID, the same ID
    we indicated in the properties of the element in the layout file. All the IDs
    of resources are included in the `R` class. The `R` class is autogenerated in
    the build phase and we must not edit it. If this class is not autogenerated, then
    probably some file of our resources contains an error.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在方法的头两行中，获取了对布局元素的引用：包含问候语的文本视图和用户可以输入名字的文本字段。通过其ID找到组件，这是我们在布局文件中指定元素的属性中的相同ID。所有资源的ID都包含在`R`类中。`R`类是在构建阶段自动生成的，我们不得编辑它。如果此类未自动生成，则我们的资源文件中可能包含错误。
- en: The next line is a conditional statement to check that the user typed a name,
    a case in which the text will be replaced by a new greeting that contains that
    name. In the next chapters we will learn how to execute our application in an
    emulator and we will be able to test this code.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的行是一个条件语句，用于检查用户是否输入了名字，如果是这种情况，文本将被替换为包含该名字的新问候语。在下一章中，我们将学习如何在模拟器中执行我们的应用程序，并且我们将能够测试这段代码。
- en: 'In case the event we want to handle is not the user click, then we have to
    create and add the listener by code in the `onCreate` method of the activity.
    There are two options:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们要处理的事件不是用户点击，那么我们必须在活动的`onCreate`方法中通过代码创建并添加监听器。有两种选择：
- en: Implement the listener interface in the activity and then add the unimplemented
    methods. The methods required by the interface are the methods to receive the
    events.
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在活动中实现监听器接口，然后添加未实现的方法。接口需要的方法是接收事件的方法。
- en: Create a private anonymous implementation of the listener in the activity file.
    The methods that receive the events are implemented in this object.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在活动文件中创建一个私有的匿名监听器实现。在这个对象中实现了接收事件的方法。
- en: 'Finally, the listener implementation has to be assigned to the view element
    using the setter methods, `setOnClickListener`, `setOnCreateContextMenu`, `setOnDragListener`,
    `setOnFocusChange`, `setOnKeyListener`, and so on. The listener assignment is
    usually included in the `onCreate` method of the activity. If the listener was
    implemented directly by the activity, then the parameter indicated to the setter
    method is its own activity using the keyword `this` as the following code shows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，需要通过设置器方法（如`setOnClickListener`、`setOnCreateContextMenu`、`setOnDragListener`、`setOnFocusChange`、`setOnKeyListener`等）将监听器实现分配给视图元素。监听器的分配通常包含在活动的`onCreate`方法中。如果监听器是由活动直接实现的，那么传递给设置器方法的参数就是它自己的活动，使用关键字`this`，如下面的代码所示：
- en: '[PRE5]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The activity should then implement the listener and the `onClick` method required
    by the listener interface.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 活动应该实现监听器所需的`onClick`方法和监听器接口。
- en: '[PRE6]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Summary
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: By the end of this chapter, we have learned how to create and edit the user
    interface layouts by using both the graphical and the text-based editors. We finished
    our first small application and we have upgraded it with some basic components.
    The user should now be able to create a simple layout and to test it with different
    styles, screens sizes and screen resolutions. We have also learned about the different
    available UI themes and finally, we have learned about events and how to handle
    them using listeners.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，我们已经学会了如何使用图形编辑器和基于文本的编辑器创建和编辑用户界面布局。我们完成了第一个小应用程序，并用一些基本组件对其进行了升级。用户现在应该能够创建一个简单的布局，并通过不同的样式、屏幕尺寸和屏幕分辨率进行测试。我们还了解了可用的不同UI主题，最后，我们学习了关于事件以及如何使用监听器处理它们。
- en: In the next chapter we will learn about Google Play available services and how
    to integrate them into our project using Android Studio. We will learn how to
    install and integrate different libraries available with Google technology such
    as Google Maps, Google Plus, and more.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习Google Play可用的服务以及如何使用Android Studio将它们集成到我们的项目中。我们将学习如何安装和集成不同的库，这些库可使用谷歌技术，如Google
    Maps、Google Plus等。
