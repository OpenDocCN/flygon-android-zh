- en: Chapter 1. Using Command-line Tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will take a tour of the main command-line tools, specifically
    related to the creation and packaging of Android applications. We will learn how
    to install and configure Android NDK on Microsoft Windows, Apple OS X, and Ubuntu/Debian
    Linux, and how to build and run your first native application on an Android-based
    device. Usage of command-line tools to build your projects is essential for cross-platform
    mobile development using C++.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This book is based on the Android SDK revision 24.3.3 and the Android NDK r10e.
    The source code was tested with Android API Level 23 (Marshmallow).
  prefs: []
  type: TYPE_NORMAL
- en: Our main focus will be the command-line centric and platform-independent development
    process.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Android Studio is a very nice new portable development IDE, which has recently
    arrived at version 1.4\. However, it still has very limited NDK support and will
    not be discussed in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Using Android command-line tools on Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To start developing native C++ applications for Android in a Microsoft Windows
    environment, you will need some essential tools to be installed on your system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start NDK development for Android using the following list of all the prerequisites
    you will need:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Android SDK: You can find this at [http://developer.android.com/sdk/index.html](http://developer.android.com/sdk/index.html).
    We use revision 24.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Android NDK: You can find this at [http://developer.android.com/tools/sdk/ndk/index.html](http://developer.android.com/tools/sdk/ndk/index.html).
    We use version r10e.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The **Java Development Kit** (**JDK**): You can find this at [http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html).
    We use Oracle JDK Version 8.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Apache Ant: You can find this at [http://ant.apache.org](http://ant.apache.org).
    This is a tool used to build Java applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Gradle: You can find this at [https://www.gradle.org](https://www.gradle.org).
    Compared to Ant, this is a more modern Java build automation tool capable of managing
    external dependencies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The current versions of these tools will run on Windows without using any intermediate
    compatibility layer; they do not require Cygwin any more.
  prefs: []
  type: TYPE_NORMAL
- en: As much as it pains us to write this, Android SDK and NDK should still be installed
    into folders that do not contain any whitespaces in their names. This is a limitation
    of build scripts within the Android SDK; the unquoted environment variables content
    are split into words based on tab, space and newline characters.
  prefs: []
  type: TYPE_NORMAL
- en: We will install the Android SDK to `D:\android-sdk-windows`, the Android NDK
    to `D:\ndk`, and other software to their default locations.
  prefs: []
  type: TYPE_NORMAL
- en: In order to compile our portable C++ code for Windows, we need a decent toolchain.
    We recommend using the latest version of the MinGW from the Equation package available
    at [http://www.equation.com](http://www.equation.com). You can choose 32- or 64-bit
    versions as you go.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once all the tools are in their folders, you need to set environment variables
    to point to those install locations. The `JAVA_HOME` variable should point to
    the Java Development Kit folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The `NDK_HOME` variable should point to the Android NDK installation folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The `ANDROID_HOME` should point to the Android SDK folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note the double backslash in the last line.
  prefs: []
  type: TYPE_NORMAL
- en: Both NDK and SDK will have new versions from time to time, so it might be helpful
    to have the version number on the folder name and manage NDK folders per project
    if necessary.
  prefs: []
  type: TYPE_NORMAL
- en: Using Android command-line tools on OS X
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Installation of Android development tools on OS X is straightforward. First
    of all, you will need to download the required official SDK and NDK packages from
    [http://developer.android.com/sdk/index.html](http://developer.android.com/sdk/index.html).
    As we are going for command-line tools, we can use the SDK Tools Only package
    available at [http://dl.google.com/android/android-sdk_r24.0.2-macosx.zip](http://dl.google.com/android/android-sdk_r24.0.2-macosx.zip).
    As for the NDK, OS X Yosemite works with the 64-bit Android NDK, which can be
    downloaded from [http://developer.android.com/tools/sdk/ndk/index.html](http://developer.android.com/tools/sdk/ndk/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: We will install all these tools into the user's home folder; in our case, it
    is `/Users/sk`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get Apache Ant and Gradle, the best way would be to install the package
    manager Homebrew from [http://brew.sh](http://brew.sh) and bring in the required
    tools using the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This way you will not be bothered with installation paths and other low-level
    configuration stuff. The following are the steps to install packages and set path
    for them:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Since the notion of this book is doing stuff from the command line, we will
    indeed do so the hard way. However, you are encouraged to actually visit the download
    page, [http://developer.android.com/sdk/index.html](http://developer.android.com/sdk/index.html),
    in your browser and check for updated versions of the Android SDK and NDK.
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the Android SDK for OS X from the official page and put it into your
    home directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Unpack it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, download the Android NDK. It comes as a self-extracting binary:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'So, just make it executable and run it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The packages are in place. Now, add paths to your tools and all the necessary
    environment variables to the `.profile` file in your home directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use these variables within Android scripts and tools:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Edit the `local.properties` file to set up the paths on a per-project basis.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using Android command-line tools on Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Installation on Linux is as easy as its OS X counterpart.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Indeed, Linux development environment is truly native for all kinds of Android
    development since all the toolchains and Android Open Source Project are based
    on Linux tools.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we will point out just some differences. First of all, we don''t need
    to install Homebrew. Just go with the available package manager. On Ubuntu, we
    prefer using `apt`. The following are the steps to install the packages as well
    as set path on Linux:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start with updating all `apt` packages and installing the default Java
    Development Kit:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install the Apache Ant build automation tool:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install Gradle:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Download the official Android SDK which suits your version of Linux from [http://developer.android.com/sdk/index.html](http://developer.android.com/sdk/index.html),
    and unpack it into a folder in your home directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Download the official NDK package suitable for your Linux, 32- or 64-bit, and
    run it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The executable will unpack the content of the NDK package into the current directory.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now you can set up the environment variables to point to the actual folders:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: It is useful to add environment variables definitions to `/etc/profile` or `/etc/environment`.
    This way these settings will be applicable to all the users of the system.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Creating an Ant-based application template manually
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's start with the lowest level and create a template for our applications
    buildable with Apache Ant. Every Android application which is to be built using
    Apache Ant should contain a predefined directories structure and configuration
    `.xml` files. This is usually done using Android SDK tools and IDEs. We will explain
    how to do it by hand to let you know the machinery behind the curtains.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this book, the source code files can be downloaded or forked from the following
    GitHub repository as well: [https://github.com/corporateshark/Mastering-Android-NDK](https://github.com/corporateshark/Mastering-Android-NDK)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The directory structure of our minimalistic project looks like the following
    screenshot (see the source code bundle for the complete source code):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an Ant-based application template manually](img/image00212.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We need to create the following files within this directory structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '`res/drawable/icon.png`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`res/values/strings.xml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`src/com/packtpub/ndkmastering/App1Activity.java`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AndroidManifest.xml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`build.xml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`project.properties`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The icon `icon.png` should be there, and currently contains a dummy image of
    an Android application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an Ant-based application template manually](img/image00213.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The file `strings.xml` is required to make use of the Android localization
    system. In the manifest `AndroidManifest.xml`, we use the string parameter `app_name`
    instead of the actual application name. The file `strings.xml` resolves this parameter
    into a human readable string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The Java source code of the minimal buildable application is in the `App1Activity.java`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The rest three files, `AndroidManifest.xml`, `build.xml`, and `project.properties`,
    contain the description of the project necessary for Ant to build it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The manifest `AndroidManifest.xml` is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Our application will require Android 4.4 (API Level 19) and is tested with
    Android 6.0 (API Level 23):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Most of the examples in this book will require OpenGL ES 3\. Let''s mention
    it here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the name of the main activity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'We want a fullscreen application in the landscape orientation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Our application can be started from the system launcher. The displayable name
    of the application is stored in the `app_name` parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can read the official Google documentation on the application manifest at
    [http://developer.android.com/guide/topics/manifest/manifest-intro.html](http://developer.android.com/guide/topics/manifest/manifest-intro.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'The file `build.xml` is much simpler and will resemble mostly what Android
    tools would generate:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: There is a difference to Android SDK Tools, since we don't use `ant.properties`
    here. This was done just for the sake of simplicity and just has an educational
    purpose.
  prefs: []
  type: TYPE_NORMAL
- en: 'The same situation exists with the file `project.properties`, which contains
    platform-specific declarations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, our first application (which does not even contain any native code yet)
    is ready to be built. Use the following one-liner to build it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'If everything was done correctly, you should see the tail of the output similar
    to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an Ant-based application template manually](img/image00214.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: To install an `.apk` file from the command line, run `adb install -r bin/App1-debug.apk`
    to install the freshlybuilt `.apk` on your device. Start the application from
    your launcher (**AntApp1**) and enjoy the black screen. You can use the **BACK**
    key to exit the application.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Gradle-based application template manually
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Gradle is a more versatile Java building tool compared to Ant, which lets you
    handle external dependencies and repositories with ease.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We recommend that you watch this video from Google available at [https://www.youtube.com/watch?v=LCJAgPkpmR0](https://www.youtube.com/watch?v=LCJAgPkpmR0)
    and read this official command-line building manual available at [http://developer.android.com/tools/building/building-cmdline.html](http://developer.android.com/tools/building/building-cmdline.html)
    before proceeding with Gradle.
  prefs: []
  type: TYPE_NORMAL
- en: The recent versions of Android SDK are tightly integrated with Gradle, and Android
    Studio is built using it as its build system. Let's extend our previous `1_AntApp`
    application to make it buildable with Gradle.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, go to the root folder of the project, and create the `build.gradle`
    file with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'After this, run the command `gradle init`. The output should be similar to
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The subfolder `.gradle` will be created in the current folder. Now, run the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The tail of the output should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The resulting `.apk` packages can be found in the `build\outputs\apk` folder.
    Try installing and running `2_GradleApp-debug.apk` on your device.
  prefs: []
  type: TYPE_NORMAL
- en: Embedding native code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s stick to the topic of this book and write some native C++ code for our
    template application. We will start with the `jni/Wrappers.cpp` file, which will
    contain a single function definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'This function will be called from Java using the JNI mechanism. Update `AppActivity.java`
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we have to build this code into an installable `.apk` package. We need
    a couple of configuration files for this. The first one, `jni/Application.mk`,
    contains the platform and toolchain information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: We use the latest version of the Clang compiler—that is 3.6, as we write these
    lines, and the `armeabi-v7a-hard` target, which enables support of hardware floating
    point computations and function arguments passing via hardware floating point
    registers resulting in a faster code.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second configuration file is `jni/Android.mk`, and it specifies which `.cpp`
    files we want to compile and what compiler options should be there:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Here, we link against OpenGL ES 2, specify compiler switches to enable the hardware
    floating point for non-x86 targets and list the required `.cpp` source files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the following command from the root folder of the project to build the
    native code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'The last thing is to tell Gradle that we want to pack the resulting native
    library into the `.apk`. Edit the `build.gradle` file and add the following line
    to the `main` section of `sourceSets`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Now, if we run the command `gradle build`, the resulting package `build\outputs\apk\3_NDK-debug.apk`
    will contain the required `libNativeLib.so` file. You can install and run it as
    usual. Check the line **Hello Android NDK!** printed into the Android system log
    with `adb logcat`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Those who do not want to tackle Gradle in such a small project without dependencies
    will be able to use good old Apache Ant. Just run the command `ant debug` to make
    it happen. No additional configuration files are required to put shared C++ libraries
    into `.apk` this way.
  prefs: []
  type: TYPE_NORMAL
- en: Building and signing release Android applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We learned how to use the command line to create Android applications with the
    native code. Let's put the final stroke on the topic of the command-line tools
    and learn how to prepare and sign the release version of your application.
  prefs: []
  type: TYPE_NORMAL
- en: The detailed explanation of the signing procedure on Android is given in the
    developer manual at [http://developer.android.com/tools/publishing/app-signing.html](http://developer.android.com/tools/publishing/app-signing.html).
    Let's do it using Ant and Gradle.
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, we need to rebuild the project and create a release version of
    the `.apk` package. Let''s do it with our `3_NDK` project. We invoke `ndk-build`
    and Apache Ant using the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The tail of the output from Ant looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Let's do the same thing with Gradle. Maybe you have already noticed when we
    run gradle build there is a `3_NDK-release-unsigned.apk` file in the `build/outputs/apk`
    folder. This is exactly what we need. This will be our raw material for the signing
    procedure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we need to have a valid release key. We can create a self-signed release
    key using `keytool` from the Java Development Kit using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'This will ask us to fill out all the fields necessary for the key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we are ready to proceed with the actual `.apk` package signing. Use the
    `jarsigner` tool from the Java Development Kit to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'This command is interactive, and it will require the user to enter the `keystore`
    and the `key passwords`. However, we can provide both passwords as arguments to
    this command in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Of course, passwords should match with what you have entered while creating
    your `release key` and `keystore`.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is one more important thing left before we can safely proceed with publishing
    our `.apk` package on Google Play. Android applications can access uncompressed
    content within `.apk` using memory-mapped files and `mmap()` system calls, yet
    `mmap()` may imply some alignment restrictions on the underlying data. We need
    to align all uncompressed data within `.apk` on 4-byte boundaries. The Android
    SDK has the `zipalign` tool to do this, as seen in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Now, our `.apk` is ready to be published on Google Play.
  prefs: []
  type: TYPE_NORMAL
- en: Organizing the cross-platform code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This book continues the idea from our previous book *Android NDK Game Development
    Cookbook*, *Packt Publishing*: the possibility of cross-platform development using
    the principle *What You See (on a desktop PC) is What You Get (on a mobile device)*.
    Most of the application logic can be developed and tested in a familiar desktop
    environment such as Windows with all necessary tools at hand, and this can be
    built for Android using the NDK whenever necessary.'
  prefs: []
  type: TYPE_NORMAL
- en: To organize and maintain the cross-platform C++ source code, we need to split
    everything into platform-specific and platform-independent parts. Our Android-specific
    native code will be stored in the `jni` subfolder of the project, exactly as we
    did in our previous minimalistic example. The shared platform-independent C++
    code will go into the `src-native` subfolder.
  prefs: []
  type: TYPE_NORMAL
- en: Using TeamCity continuous integration server with Android applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: TeamCity is a powerful continuous integration and deployment server, which can
    be used to automate your Android application builds. This can be found at [https://www.jetbrains.com/teamcity](https://www.jetbrains.com/teamcity).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: TeamCity is free for small projects that require no more than 20 build configurations
    and 3 build agents and is absolutely free for open source projects. Ask for an
    open-source license at [https://www.jetbrains.com/teamcity/buy](https://www.jetbrains.com/teamcity/buy).
  prefs: []
  type: TYPE_NORMAL
- en: The server installation procedure is straightforward. Windows, OS X, or Linux
    machine can be used as the server or a build agent. Here, we will show how to
    install TeamCity on Windows.
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the latest version of the installer from [https://www.jetbrains.com/teamcity/download](https://www.jetbrains.com/teamcity/download)
    and run it using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Install all components and run it as **Windows Service**. For simplicity, we
    will run both the server and the agent on a single machine, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using TeamCity continuous integration server with Android applications](img/image00215.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Choose the desired TeamCity server port. We will use the default HTTP port 80\.
    Run the **TeamCity Server** and **Agent** services under the `SYSTEM` account.
  prefs: []
  type: TYPE_NORMAL
- en: Once the server is online, open your browser and connect to it using the address
    `http://localhost`. Create a new project and a build configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To work with TeamCity, you should put the source code of your project into a
    version control system. Git and GitHub will be a good choice.
  prefs: []
  type: TYPE_NORMAL
- en: If your project is already on GitHub, you can create a Git VCS root pointing
    to the URL of your GitHub repository, like this `https://github.com/<your login>/<your
    project>.git`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a new command-line build step and type the content of the script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: You can also add signing using `jarsigner` here and use the `zipalign` tool
    to create the final production `.apk`.
  prefs: []
  type: TYPE_NORMAL
- en: Now, go to the **General Settings** step and add an artifact path to `bin/3_NDK-release.apk`.
    The project is ready for continuous integration.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to install and configure the essential tools
    for Android native development using the command line, and how to write Android
    application basic configuration files manually without falling back to graphical
    IDEs. In the subsequent chapters, we will practice these skills and build some
    projects.
  prefs: []
  type: TYPE_NORMAL
