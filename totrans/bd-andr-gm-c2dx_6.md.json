["```java\n#include \"SimpleAudioEngine.h\"\n```", "```java\nvoid initAudio();\n```", "```java\nusing namespace CocosDenshion;\n```", "```java\nvoid HelloWorld::initAudio()\n{\n   SimpleAudioEngine::getInstance()->playBackgroundMusic(\"music.mp3\",    true);\n   SimpleAudioEngine::getInstance()->preloadEffect(\"uh.wav\");   \n}\n```", "```java\nsearchPaths.push_back(\"sounds\");\n```", "```java\nSimpleAudioEngine::getInstance()->stopBackgroundMusic();\nSimpleAudioEngine::getInstance()->playEffect(\"uh.wav\");\n```", "```java\ninitAudio();\n```", "```java\nSimpleAudioEngine::getInstance()->setBackgroundMusicVolume(0.5f);\nSimpleAudioEngine::getInstance()->setEffectsVolume(1.0f);\n```", "```java\n// if you use SimpleAudioEngine, it must be pause\n SimpleAudioEngine::getInstance()->pauseBackgroundMusic();\n```", "```java\nusing namespace CocosDenshion;\n```", "```java\n // if you use SimpleAudioEngine, it must resume here\nSimpleAudioEngine::getInstance()->resumeBackgroundMusic();\n```", "```java\n#include \"audio/include/AudioEngine.h\"\n```", "```java\nusing namespace cocos2d::experimental;\n```", "```java\nvoid HelloWorld::initAudioNewEngine()\n{   \n   if(AudioEngine::lazyInit())\n   {\n      auto musicId = AudioEngine::play2d(\"music.mp3\");\n      AudioEngine::setVolume(musicId, 0.25f);\n      CCLOG(\"Audio initialized successfully\");\n\n   }else\n   {\n      log(\"Error while initializing new audio engine\");\n   }   \n}\n```", "```java\nAudioEngine::stopAll();\nAudioEngine::play2d(\"uh.mp3\");\n```", "```java\nint _musicId;\ncocos2d::MenuItemImage* _muteItem;\ncocos2d::MenuItemImage* _unmuteItem;\nvoid initMuteButton();\nvoid muteCallback(cocos2d::Ref* pSender);\n```", "```java\nvoid HelloWorld::initMuteButton()\n{\n   _muteItem = MenuItemImage::create(\"mute.png\", \"mute.png\", CC_CALLBACK_1(HelloWorld::muteCallback, this));    \n\n   _muteItem->setPosition(Vec2(_visibleSize.width - _muteItem-  >getContentSize().width/2 ,\n   _visibleSize.height - _muteItem->getContentSize(). height / 2));\n   _unmuteItem = MenuItemImage::create(\"unmute.png\", \"unmute.png\", CC_CALLBACK_1(HelloWorld::muteCallback, this));    \n\n   _unmuteItem->setPosition(Vec2(_visibleSize.width - _unmuteItem- >getContentSize().width/2 , _visibleSize.height - _unmuteItem->getContentSize().height /2));\n   _unmuteItem -> setVisible(false);\n\n   auto menu = Menu::create(_muteItem, _unmuteItem , nullptr);\n   menu->setPosition(Vec2::ZERO);\n   this->addChild(menu, 1);\n}\n```", "```java\nvoid HelloWorld::muteCallback(cocos2d::Ref* pSender)\n{   \n   if(_muteItem -> isVisible())\n   {\n\n      //CocosDenshion\n      //SimpleAudioEngine::getInstance()->setBackgroundMusicVolume(0);\n      AudioEngine::setVolume(_musicId, 0);\n   }else\n   {   \n      //SimpleAudioEngine::getInstance()->setBackgroundMusicVolume(1);\n      AudioEngine::setVolume(_musicId, 1);\n   }\n\n   _muteItem->setVisible(!_muteItem->isVisible());\n   _unmuteItem->setVisible(!_muteItem->isVisible());\n}\n```", "```java\nbool AppDelegate::applicationDidFinishLaunching() {\n    auto director = Director::getInstance();\n    // OpenGL initialization done by cocos project creation script\n    auto glview = director->getOpenGLView();\n    if(!glview) {\n    glview = GLViewImpl::create(\"Happy Bunny\");\n    glview->setFrameSize(480, 800);\n    director->setOpenGLView(glview);\n   }\n\n   Size screenSize = glview->getFrameSize();\n   Size designSize(768, 1280);\n   std::vector<std::string> searchPaths;   \n searchPaths.push_back(\"sounds\");\n\n   if (screenSize.height > 800){\n      //High Resolution\n      searchPaths.push_back(\"images/high\");\n      director->setContentScaleFactor(1280.0f / designSize.height);\n   }\n   else if (screenSize.height > 600){\n      //Mid resolution\n      searchPaths.push_back(\"images/mid\");\n      director->setContentScaleFactor(800.0f / designSize.height);\n   }\n   else{\n      //Low resolution\n      searchPaths.push_back(\"images/low\");\n      director->setContentScaleFactor(320.0f / designSize.height);\n   }\n   FileUtils::getInstance()->setSearchPaths(searchPaths);\n   glview->setDesignResolutionSize(designSize.width, designSize. height, ResolutionPolicy::EXACT_FIT);\n   auto scene = HelloWorld::createScene();\n   director->runWithScene(scene);\n   return true;\n}\n```", "```java\n#ifndef __HELLOWORLD_SCENE_H__\n#define __HELLOWORLD_SCENE_H__\n\n#include \"cocos2d.h\"\n#include \"PauseScene.h\"\n#include \"GameOverScene.h\"\n\nclass HelloWorld : public cocos2d::Layer\n{\npublic:\n    static cocos2d::Scene* createScene();\n    virtual bool init();\n    CREATE_FUNC(HelloWorld);\nprivate:\n   cocos2d::Director *_director;\n   cocos2d::Size _visibleSize;   \n   cocos2d::Sprite* _sprBomb;\n   cocos2d::Sprite* _sprPlayer;   \n   cocos2d::MenuItemImage* _muteItem;\n   cocos2d::MenuItemImage* _unmuteItem;   \n   int _score;\n   int _musicId;\n   void initPhysics();\n   void pauseCallback(cocos2d::Ref* pSender);\n   void muteCallback(cocos2d::Ref* pSender);\n   bool onCollision(cocos2d::PhysicsContact& contact);\n   void setPhysicsBody(cocos2d::Sprite* sprite);\n   void initTouch();\n   void movePlayerByTouch(cocos2d::Touch* touch, cocos2d::Event* event);\n   void movePlayerIfPossible(float newX);\n   void movePlayerByAccelerometer(cocos2d::Acceleration* acceleration, cocos2d::Event* event);\n   void initAccelerometer();\n   void initBackButtonListener();\n   void onKeyPressed(cocos2d::EventKeyboard::KeyCode keyCode, cocos2d::Event* event);\n   void updateScore(float dt);\n   void addBombs(float dt);   \n   void initAudio();\n   void initAudioNewEngine();\n   void initMuteButton();\n};\n\n#endif // __HELLOWORLD_SCENE_H__\n```", "```java\n#include \"HelloWorldScene.h\"#include \"SimpleAudioEngine.h\"\n#include \"audio/include/AudioEngine.h\"\n#include \"../cocos2d/cocos/platform/android/jni/Java_org_cocos2dx_lib_Cocos2dxHelper.h\"\n\nUSING_NS_CC;\nusing namespace CocosDenshion;\nusing namespace cocos2d::experimental;\n\nScene* HelloWorld::createScene()\n{\n  //no changes here\n}\n\n// physics code …\n\n// event handling code …\n```", "```java\nvoid HelloWorld::initAudioNewEngine()\n{   \n   if(AudioEngine::lazyInit())\n   {      \n      _musicId = AudioEngine::play2d(\"music.mp3\");\n      AudioEngine::setVolume(_musicId, 1);      \n      AudioEngine::setLoop(_musicId,true);      \n      CCLOG(\"Audio initialized successfully\");\n   }else\n   {\n      CCLOG(\"Error while initializing new audio engine\");\n   }   \n}\n```", "```java\nvoid HelloWorld::initAudio()\n{\n   SimpleAudioEngine::getInstance()->playBackgroundMusic(\"music. mp3\",true);   \n   SimpleAudioEngine::getInstance()->preloadEffect(\"uh.wav\");   \n   SimpleAudioEngine::getInstance()->setBackgroundMusicVolume(1.0f);\n}\n```", "```java\nvoid HelloWorld::initMuteButton()\n{\n   _sprMute = Sprite::create(\"mute.png\");\n   _sprUnmute = Sprite::create(\"unmute.png\");\n   _muteItem = MenuItemImage::create(\"mute.png\", \"mute.png\", CC_CALLBACK_1(HelloWorld::muteCallback, this));    \n   _muteItem->setPosition(Vec2(_visibleSize.width - _muteItem- >getContentSize().width/2 ,\n   _visibleSize.height - _muteItem->getContentSize().height / 2));\n   _unmuteItem = MenuItemImage::create(\"unmute.png\", \"unmute.png\", CC_CALLBACK_1(HelloWorld::muteCallback, this));    \n   _unmuteItem->setPosition(Vec2(_visibleSize.width - _unmuteItem->getContentSize().width/2 ,\n   _visibleSize.height - _unmuteItem->getContentSize(). height /2));\n   _unmuteItem -> setVisible(false);\n   auto menu = Menu::create(_muteItem, _unmuteItem , nullptr);\n    menu->setPosition(Vec2::ZERO);\n    this->addChild(menu, 1);\n\n}\n```", "```java\nvoid HelloWorld::muteCallback(cocos2d::Ref* pSender)\n{   \n   if(_muteItem -> isVisible())\n   {\n      //CocosDenshion\n      //SimpleAudioEngine::getInstance()->setBackgroundMusicVolume(0);\n      AudioEngine::setVolume(_musicId, 0);   \n\n   }else\n   {   \n      //SimpleAudioEngine::getInstance()->setBackgroundMusicVolume(1);\n      AudioEngine::setVolume(_musicId, 1);\n   }\n\n   _muteItem->setVisible(!_muteItem->isVisible());\n   _unmuteItem->setVisible(!_muteItem->isVisible());\n}\n```", "```java\nbool HelloWorld::init()\n{\n    if ( !Layer::init() )\n    {\n        return false;\n    }\n   _score = 0;\n   _director = Director::getInstance();\n   _visibleSize = _director->getVisibleSize();\n   auto origin = _director->getVisibleOrigin();\n   auto closeItem = MenuItemImage::create(\"pause.png\", \"pause_pressed.png\", CC_CALLBACK_1(HelloWorld::pauseCallback, this));\n   closeItem->setPosition(Vec2(_visibleSize.width - closeItem->getContentSize().width/2, closeItem->getContentSize().height/2));\n   auto menu = Menu::create(closeItem, nullptr);\n   menu->setPosition(Vec2::ZERO);\n   this->addChild(menu, 1);\n   _sprBomb = Sprite::create(\"bomb.png\");   \n   _sprBomb->setPosition(_visibleSize.width / 2, _visibleSize.height +_sprBomb->getContentSize().height/2);\n   this->addChild(_sprBomb,1);\n   auto bg = Sprite::create(\"background.png\");\n   bg->setAnchorPoint(Vec2());\n   bg->setPosition(0,0);\n   this->addChild(bg, -1);\n   _sprPlayer = Sprite::create(\"player.png\");   \n   _sprPlayer->setPosition(_visibleSize.width / 2, _visibleSize.height* 0.23);\n   setPhysicsBody(_sprPlayer);\n   this->addChild(_sprPlayer, 0);\n   //Animations\n   Vector<SpriteFrame*> frames;\n   Size playerSize = _sprPlayer->getContentSize();\n   frames.pushBack(SpriteFrame::create(\"player.png\", Rect(0, 0, playerSize.width, playerSize.height)));\n   frames.pushBack(SpriteFrame::create(\"player2.png\", Rect(0, 0, playerSize.width, playerSize.height)));\n   auto animation = Animation::createWithSpriteFrames(frames,0.2f);\n   auto animate = Animate::create(animation);\n   _sprPlayer->runAction(RepeatForever::create(animate));      \n   setPhysicsBody(_sprBomb);   \n   initPhysics();   \n   _sprBomb->getPhysicsBody()->setVelocity(Vect(0,-100));   \n   initTouch();\n   initAccelerometer();   \n   #if (CC_TARGET_PLATFORM == CC_PLATFORM_ANDROID)\n   setKeepScreenOnJni(true);\n   #endif\n   initBackButtonListener();\n   schedule(CC_SCHEDULE_SELECTOR(HelloWorld::updateScore), 3.0f);\n   schedule(CC_SCHEDULE_SELECTOR(HelloWorld::addBombs), 8.0f);\n   initAudioNewEngine();\n initMuteButton();\n   return true;\n}\n```"]