["```java\nGoogleApiClient mGoogleApiClient;\n\n```", "```java\n@Override\npublic int onStartCommand(Intent intent, int flags, int startId) {\n    Log.d(TAG, \"onStartCommand\");\n\n    getSensorManager();\n    getCountSensor();\n getGoogleClient();\n\n    return super.onStartCommand(intent, flags, startId);\n}\n\n```", "```java\nprivate void getGoogleClient() {\n    if (null != mGoogleApiClient)\n        return;\n\n    Log.d(TAG, \"getGoogleClient\");\n    mGoogleApiClient = new GoogleApiClient.Builder(this)\n            .addApi(Wearable.API)\n            .build();\n    mGoogleApiClient.connect();\n}\n\n```", "```java\n@Override\npublic IBinder onBind(Intent intent) {\n    return null;\n}\n\n```", "```java\nprivate final IBinder mBinder = new LocalBinder();\n\n@Override\npublic IBinder onBind(Intent intent) {\n return mBinder;\n}\n\n```", "```java\nnode.getDisplayName();\n\n```", "```java\nprivate void sendData(){\n\n    if (mGoogleApiClient == null)\n        return;\n\n    // use the api client to send the heartbeat value to our handheld\n    final PendingResult<NodeApi.GetConnectedNodesResult> nodes = \n    Wearable.NodeApi.getConnectedNodes(mGoogleApiClient);\n    nodes.setResultCallback(new \n    ResultCallback<NodeApi.GetConnectedNodesResult>() {\n        @Override\n        public void onResult(NodeApi.GetConnectedNodesResult result) {\n            final List<Node> nodes = result.getNodes();\n            final String path = \"/stepcount\";\n            String Message = StepsTaken.getSteps()+\"\";\n\n            for (Node node : nodes) {\n                Log.d(TAG, \"SEND MESSAGE TO HANDHELD: \" + Message);\n                node.getDisplayName();\n                byte[] data = Message.getBytes(StandardCharsets.UTF_8);\n                Wearable.MessageApi.sendMessage(mGoogleApiClient, \n                node.getId(), path, data);\n            }\n        }\n    });\n}\n\n```", "```java\npublic class WearStepService extends Service implements SensorEventListener {\n\n    public static final String TAG = \"WearStepService\";\n    private static final long THREE_MINUTES = 3 * 60 * 1000;\n    private static final String STEP_COUNT_PATH = \"/step-count\";\n    private static final String STEP_COUNT_KEY = \"step-count\";\n    private SensorManager sensorManager;\n    private Sensor countSensor;\n\n    GoogleApiClient mGoogleApiClient;\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        Log.d(TAG, \"onCreate\");\n        setAlarm();\n    }\n\n    @Override\n    public int onStartCommand(Intent intent, int flags, int startId) {\n        Log.d(TAG, \"onStartCommand\");\n\n        getSensorManager();\n        getCountSensor();\n        getGoogleClient();\n\n        return super.onStartCommand(intent, flags, startId);\n    }\n\n    @Override\n    public IBinder onBind(Intent intent) {\n        return null;\n    }\n\n    private void getGoogleClient() {\n        if (null != mGoogleApiClient)\n            return;\n\n        Log.d(TAG, \"getGoogleClient\");\n        mGoogleApiClient = new GoogleApiClient.Builder(this)\n                .addApi(Wearable.API)\n                .build();\n        mGoogleApiClient.connect();\n    }\n\n    /**\n     * if the countSensor is null, try initializing it, and try               \n     registering it with sensorManager\n     */\n    private void getCountSensor() {\n        if (null != countSensor)\n            return;\n\n        Log.d(TAG, \"getCountSensor\");\n        countSensor = \n        sensorManager.getDefaultSensor(Sensor.TYPE_STEP_COUNTER);\n        registerCountSensor();\n    }\n\n    /**\n     * if the countSensor exists, then try registering\n     */\n    private void registerCountSensor() {\n        if (countSensor == null)\n            return;\n\n        Log.d(TAG, \"sensorManager.registerListener\");\n        sensorManager.registerListener(this, countSensor, \n        SensorManager.SENSOR_DELAY_UI);\n    }\n\n    /**\n     * if the sensorManager is null, initialize it, and try registering \n     the countSensor\n     */\n    private void getSensorManager() {\n        if (null != sensorManager)\n            return;\n\n        Log.d(TAG, \"getSensorManager\");\n        sensorManager = (SensorManager) \n        getSystemService(Context.SENSOR_SERVICE);\n        registerCountSensor();\n    }\n\n    private void setAlarm() {\n        Log.d(TAG, \"setAlarm\");\n\n        Intent intent = new Intent(this, AlarmNotification.class);\n        PendingIntent pendingIntent = \n        PendingIntent.getBroadcast(this.getApplicationContext(), \n        234324243, intent, 0);\n        AlarmManager alarmManager = (AlarmManager) \n        getSystemService(ALARM_SERVICE);\n        long firstRun = System.currentTimeMillis() + THREE_MINUTES;\n        alarmManager.setInexactRepeating(AlarmManager.RTC_WAKEUP, \n        firstRun, THREE_MINUTES, pendingIntent);\n    }\n\n    @Override\n    public void onSensorChanged(SensorEvent event) {\n        if (event.sensor.getType() == Sensor.TYPE_STEP_COUNTER)\n            StepsTaken.updateSteps(event.values.length);\n        Log.d(TAG, \"onSensorChanged: steps count is\" + \n        event.values.length);\n//        sendToPhone();\n        sendData();\n        updateNotification();\n    }\n\n    private void sendData(){\n\n        if (mGoogleApiClient == null)\n            return;\n\n        // use the api client to send the heartbeat value to our \n        handheld\n        final PendingResult<NodeApi.GetConnectedNodesResult> nodes = \n        Wearable.NodeApi.getConnectedNodes(mGoogleApiClient);\n        nodes.setResultCallback(new \n        ResultCallback<NodeApi.GetConnectedNodesResult>() {\n            @Override\n            public void onResult(NodeApi.GetConnectedNodesResult \n            result) {\n                final List<Node> nodes = result.getNodes();\n                final String path = \"/stepcount\";\n                String Message = StepsTaken.getSteps()+\"\";\n\n                for (Node node : nodes) {\n                    Log.d(TAG, \"SEND MESSAGE TO HANDHELD: \" + Message);\n                    node.getDisplayName();\n                    byte[] data = \n                    Message.getBytes(StandardCharsets.UTF_8);\n                    Wearable.MessageApi.sendMessage(mGoogleApiClient, \n                    node.getId(), path, data);\n                }\n            }\n        });\n    }\n\n    private void updateNotification() {\n        // Create a notification builder that's compatible with \n        platforms >= version 4\n        NotificationCompat.Builder builder =\n                new NotificationCompat.Builder\n                (getApplicationContext());\n\n        // Set the title, text, and icon\n        builder.setContentTitle(getString(R.string.app_name))\n                .setSmallIcon(R.drawable.ic_step_icon);\n\n        builder.setContentText(\"steps: \" + StepsTaken.getSteps());\n\n        // Get an instance of the Notification Manager\n        NotificationManager notifyManager = (NotificationManager)\n                getSystemService(Context.NOTIFICATION_SERVICE);\n\n        // Build the notification and post it\n        notifyManager.notify(0, builder.build());\n    }\n\n    @Override\n    public void onAccuracyChanged(Sensor sensor, int accuracy) {\n        // drop these messages\n        updateNotification();\n\n    }\n}\n\n```", "```java\npublic class StepListner extends WearableListenerService {\n\n    private static final String TAG = \"StepListner\";\n\n    @Override\n    public void onMessageReceived(MessageEvent messageEvent) {\n        if (messageEvent.getPath().equals(\"/stepcount\")) {\n            final String message = new String(messageEvent.getData());\n            Log.v(TAG, \"Message path received from wear is: \" + \n            messageEvent.getPath());\n            Log.v(TAG, \"Message received on watch is: \" + message);\n\n            // Broadcast message to wearable activity for display\n            Intent messageIntent = new Intent();\n            messageIntent.setAction(Intent.ACTION_SEND);\n            messageIntent.putExtra(\"message\", message);\n            LocalBroadcastManager.getInstance(this)\n            .sendBroadcast(messageIntent);\n        }\n        else {\n            super.onMessageReceived(messageEvent);\n        }\n    }\n}\n\n```", "```java\n<service android:name=\".services.StepListner\">\n    <intent-filter>\n        <action android:name=\n        \"com.google.android.gms.wearable.DATA_CHANGED\" />\n        <action android:name=\n        \"com.google.android.gms.wearable.MESSAGE_RECEIVED\" />\n\n        <data\n            android:host=\"*\"\n            android:pathPrefix=\"/stepcount\"\n            android:scheme=\"wear\" />\n    </intent-filter>\n</service>\n\n```", "```java\npublic class StepReceiver extends BroadcastReceiver {\n        @Override\n        public void onReceive(Context context, Intent intent) {\n            String message = intent.getStringExtra(\"message\");\n            Log.v(\"steps\", \"Main activity received message: \" + \n            message);\n\n        // Shows the step counts received by the wearlistener //service        \n            mSteps.setText(\"Steps:\"+ message);\n            int value = Integer.valueOf(message);\n      }\n    }\n\n```", "```java\n// Register the local broadcast receiver\nIntentFilter StepFilter = new IntentFilter(Intent.ACTION_SEND);\nStepReceiver StepReceiver = new StepReceiver();\nLocalBroadcastManager.getInstance(this).registerReceiver(StepReceiver, StepFilter);\n\n```", "```java\nprivate GoogleApiClient mGoogleApiClient;\n\n```", "```java\nmGoogleApiClient = new GoogleApiClient.Builder(getActivity()).\naddApi(Wearable.API).\nbuild();\n\nmGoogleApiClient.connect();\n\n```", "```java\nprivate void sendMessageToHandheld(final String message) {\n\n    if (mGoogleApiClient == null)\n        return;\n\n    // use the api client to send the heartbeat value to our handheld\n    final PendingResult<NodeApi.GetConnectedNodesResult> nodes = \n    Wearable.NodeApi.getConnectedNodes(mGoogleApiClient);\n    nodes.setResultCallback(new \n    ResultCallback<NodeApi.GetConnectedNodesResult>() {\n        @Override\n        public void onResult(NodeApi.GetConnectedNodesResult result) {\n            final List<Node> nodes = result.getNodes();\n            final String path = \"/heartRate\";\n\n            for (Node node : nodes) {\n                Log.d(TAG, \"SEND MESSAGE TO HANDHELD: \" + message);\n\n                byte[] data = message.getBytes(StandardCharsets.UTF_8);\n                Wearable.MessageApi.sendMessage(mGoogleApiClient, \n                node.getId(), path, data);\n            }\n        }\n    });\n}\n\n```", "```java\nsendMessageToHandheld(currentValue.toString());\n\n```", "```java\npublic class HeartListener extends WearableListenerService {\n\n    @Override\n    public void onMessageReceived(MessageEvent messageEvent) {\n\n    }\n\n}\n\n```", "```java\npublic class HeartListener extends WearableListenerService {\n\n    @Override\n    public void onMessageReceived(MessageEvent messageEvent) {\n        if (messageEvent.getPath().equals(\"/heartRate\")) {\n            final String message = new String(messageEvent.getData());\n            Log.v(\"pactchat\", \"Message path received on watch is: \" + \n            messageEvent.getPath());\n            Log.v(\"packtchat\", \"Message received on watch is: \" + \n            message);\n\n            // Broadcast message to wearable activity for display\n            Intent messageIntent = new Intent();\n            messageIntent.setAction(Intent.ACTION_SEND);\n            messageIntent.putExtra(\"heart\", message);\n            LocalBroadcastManager.getInstance(this)\n            .sendBroadcast(messageIntent);\n        }\n        else {\n            super.onMessageReceived(messageEvent);\n        }\n    }\n}\n\n```", "```java\n<service android:name=\".services.HeartListener\">\n    <intent-filter>\n        <action android:name=\n        \"com.google.android.gms.wearable.DATA_CHANGED\" />\n        <action android:name=\n        \"com.google.android.gms.wearable.MESSAGE_RECEIVED\" />\n\n        <data\n            android:host=\"*\"\n            android:pathPrefix=\"/heartRate\"\n            android:scheme=\"wear\" />\n    </intent-filter>\n</service>\n\n```", "```java\n public class HeartRateReciver extends BroadcastReceiver {\n        @Override\n        public void onReceive(Context context, Intent intent) {\n            String data = intent.getStringExtra(\"heart\");\n            Log.v(\"heart\", \"Main activity received message: \" + \n            message);\n\n            mHeart.setText(message);\n\n        }\n    }\n\n```", "```java\n// Register the local broadcast receiver\nIntentFilter DataFilter = new IntentFilter(Intent.ACTION_SEND);\nHeartRateReciver DataReceiver = new HeartRateReciver();\nLocalBroadcastManager.getInstance(this).registerReceiver(DataReceiver, DataFilter);\n\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n    <color name=\"colorPrimary\">#607d8b</color>\n    <color name=\"colorPrimaryDark\">#34515e</color>\n    <color name=\"colorAccent\">#FFF</color>\n    <color name=\"grey\">#afaeae</color>\n    <color name=\"white\">#fff</color>\n</resources>\n\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<selector xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <item android:drawable=\"@color/colorPrimaryDark\" \n    android:state_pressed=\"true\"/>\n    <item android:drawable=\"@color/grey\" android:state_focused=\"true\"/>\n    <item android:drawable=\"@color/colorPrimary\"/>\n</selector>\n\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\"com.packt.upbeat.MainActivity\">\n\n    <LinearLayout\n        android:orientation=\"horizontal\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginLeft=\"10dp\"\n        android:layout_marginRight=\"10dp\"\n        android:layout_marginBottom=\"102dp\"\n        android:layout_above=\"@+id/calory\"\n        android:layout_centerHorizontal=\"true\">\n\n        <TextView\n            android:id=\"@+id/steps\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_alignBottom=\"@+id/linearLayout\"\n            android:layout_toStartOf=\"@+id/calory\"\n            android:layout_weight=\"1\"\n            android:text=\"Steps!\"\n            android:textColor=\"@color/colorPrimaryDark\"\n            android:textSize=\"30sp\"\n            android:textStyle=\"bold\"\n            app:layout_constraintBottom_toBottomOf=\"parent\"\n            app:layout_constraintLeft_toLeftOf=\"parent\"\n            app:layout_constraintRight_toRightOf=\"parent\"\n            app:layout_constraintTop_toTopOf=\"parent\" />\n\n        <LinearLayout\n            android:layout_weight=\"1\"\n            android:id=\"@+id/linearLayout\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:gravity=\"center\">\n\n            <ImageView\n                android:id=\"@+id/heartbeat\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_alignStart=\"@+id/heart\"\n                android:layout_below=\"@+id/heart\"/>\n\n            <TextView\n                android:id=\"@+id/heart\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_alignBaseline=\"@+id/steps\"\n                android:layout_alignBottom=\"@+id/steps\"\n                android:layout_alignParentEnd=\"true\"\n                android:layout_marginEnd=\"25dp\"\n                android:text=\"Heart!\"\n                android:textColor=\"@color/colorPrimaryDark\"\n                android:textSize=\"30sp\"\n                android:textStyle=\"bold\" />\n        </LinearLayout>\n\n    </LinearLayout>\n\n    <TextView\n        android:id=\"@+id/calory\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:gravity=\"center\"\n        android:text=\"Calories!\"\n        android:textColor=\"@color/colorPrimary\"\n        android:textSize=\"20sp\"\n        android:textStyle=\"bold\"\n        android:layout_centerVertical=\"true\"\n        android:layout_centerHorizontal=\"true\" />\n\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_alignParentBottom=\"true\"\n        android:layout_alignParentStart=\"true\"\n        android:orientation=\"horizontal\">\n\n        <android.support.v7.widget.AppCompatButton\n            android:id=\"@+id/reset\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"50dp\"\n            android:layout_weight=\"1\"\n            android:background=\"@drawable/button_background\"\n            android:elevation=\"5dp\"\n            android:gravity=\"center\"\n            android:text=\"Reset\"\n            android:textAllCaps=\"true\"\n            android:textColor=\"@color/white\"\n            android:textStyle=\"bold\" />\n\n        <android.support.v7.widget.AppCompatButton\n            android:id=\"@+id/history\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"50dp\"\n            android:layout_weight=\"1\"\n            android:background=\"@drawable/button_background\"\n            android:elevation=\"5dp\"\n            android:gravity=\"center\"\n            android:text=\"History\"\n            android:textAllCaps=\"true\"\n            android:textColor=\"@color/white\"\n            android:textStyle=\"bold\" />\n\n        <android.support.v7.widget.AppCompatButton\n            android:id=\"@+id/pulseRequest\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"50dp\"\n            android:layout_weight=\"1\"\n            android:background=\"@drawable/button_background\"\n            android:elevation=\"5dp\"\n            android:gravity=\"center\"\n            android:text=\"Request pulse\"\n            android:textAllCaps=\"true\"\n            android:textColor=\"@color/white\"\n            android:textStyle=\"bold\" />\n    </LinearLayout>\n</RelativeLayout>\n\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n\n    <declare-styleable name=\"HeartBeatView\">\n        <attr name=\"scaleFactor\" format=\"float\" />\n        <attr name=\"duration\" format=\"integer\" />\n    </declare-styleable>\n\n</resources>\n\n```", "```java\n<vector xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:width=\"24dp\"\n    android:height=\"24dp\"\n    android:viewportHeight=\"24.0\"\n    android:viewportWidth=\"24.0\">\n    <path\n        android:fillColor=\"#FFFF0000\"\n        android:pathData=\"M12,21.35l-1.45,-1.32C5.4,15.36 2,12.28 2,8.5 \n        2,5.42 4.42,3 7.5,3c1.74,0 3.41,0.81 4.5,2.09C13.09,3.81 \n        14.76,3 16.5,3 19.58,3 22,5.42 22,8.5c0,3.78 -3.4,6.86 \n       -8.55,11.54L12,21.35z\"/>\n</vector>\n\n```", "```java\npublic class HeartBeatView extends AppCompatImageView {\n\n    private static final String TAG = \"HeartBeatView\";\n\n    private static final float DEFAULT_SCALE_FACTOR = 0.2f;\n    private static final int DEFAULT_DURATION = 50;\n    private Drawable heartDrawable;\n\n    private boolean heartBeating = false;\n\n    float scaleFactor = DEFAULT_SCALE_FACTOR;\n    float reductionScaleFactor = -scaleFactor;\n    int duration = DEFAULT_DURATION;\n\n    public HeartBeatView(Context context) {\n        super(context);\n        init();\n    }\n\n    public HeartBeatView(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        populateFromAttributes(context, attrs);\n        init();\n    }\n\n    public HeartBeatView(Context context, AttributeSet attrs, int \n    defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n        populateFromAttributes(context, attrs);\n        init();\n    }\n\n    private void init() {\n        //make this not mandatory\n        heartDrawable = ContextCompat.getDrawable(getContext(), \n        R.drawable.ic_heart_red_24dp);\n        setImageDrawable(heartDrawable);\n\n    }\n\n    private void populateFromAttributes(Context context, AttributeSet \n    attrs) {\n        TypedArray a = context.getTheme().obtainStyledAttributes(\n                attrs,\n                R.styleable.HeartBeatView,\n                0, 0\n        );\n        try {\n            scaleFactor = a.getFloat(R.styleable\n            .HeartBeatView_scaleFactor, DEFAULT_SCALE_FACTOR);\n            reductionScaleFactor = -scaleFactor;\n            duration = a.getInteger(R.styleable.HeartBeatView_duration, \n            DEFAULT_DURATION);\n\n        } finally {\n            a.recycle();\n        }\n\n    }\n\n    /**\n     * toggles current heat beat state\n     */\n    public void toggle() {\n        if (heartBeating) {\n            stop();\n        } else {\n            start();\n        }\n    }\n\n    /**\n     * Starts the heat beat/pump animation\n     */\n    public void start() {\n        heartBeating = true;\n        animate().scaleXBy(scaleFactor)\n        .scaleYBy(scaleFactor).setDuration(duration)\n        .setListener(scaleUpListener);\n    }\n\n    /**\n     * Stops the heat beat/pump animation\n     */\n    public void stop() {\n        heartBeating = false;\n        clearAnimation();\n    }\n\n    /**\n     * is the heart currently beating\n     *\n     * @return\n     */\n    public boolean isHeartBeating() {\n        return heartBeating;\n    }\n\n    public int getDuration() {\n        return duration;\n    }\n\n    private static final int milliInMinute = 60000;\n\n    /**\n     * set the duration of the beat based on the beats per minute\n     *\n     * @param bpm (positive int above 0)\n     */\n    public void setDurationBasedOnBPM(int bpm) {\n        if (bpm > 0) {\n            duration = Math.round((milliInMinute / bpm) / 3f);\n        }\n    }\n\n    public void setDuration(int duration) {\n        this.duration = duration;\n    }\n\n    public float getScaleFactor() {\n        return scaleFactor;\n    }\n\n    public void setScaleFactor(float scaleFactor) {\n        this.scaleFactor = scaleFactor;\n        reductionScaleFactor = -scaleFactor;\n    }\n\n    private final Animator.AnimatorListener scaleUpListener = new \n    Animator.AnimatorListener() {\n\n        @Override\n        public void onAnimationStart(Animator animation) {\n        }\n\n        @Override\n        public void onAnimationRepeat(Animator animation) {\n\n        }\n\n        @Override\n        public void onAnimationEnd(Animator animation) {\n            //we ignore heartBeating as we want to ensure the heart is \n            reduced back to original size\n            animate().scaleXBy(reductionScaleFactor)\n            .scaleYBy(reductionScaleFactor).setDuration(duration)\n            .setListener(scaleDownListener);\n        }\n\n        @Override\n        public void onAnimationCancel(Animator animation) {\n\n        }\n    };\n\n    private final Animator.AnimatorListener scaleDownListener = new \n    Animator.AnimatorListener() {\n\n        @Override\n        public void onAnimationStart(Animator animation) {\n        }\n\n        @Override\n        public void onAnimationRepeat(Animator animation) {\n        }\n\n        @Override\n        public void onAnimationEnd(Animator animation) {\n            if (heartBeating) {\n                //duration twice as long for the upscale\n                animate().scaleXBy(scaleFactor).scaleYBy(scaleFactor)\n                .setDuration\n                (duration * 2).setListener(scaleUpListener);\n            }\n        }\n\n        @Override\n        public void onAnimationCancel(Animator animation) {\n        }\n    };\n}\n\n```", "```java\n<com.packt.upbeat.utils.HeartBeatView\n    android:id=\"@+id/heartbeat\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:layout_alignStart=\"@+id/heart\"\n    android:layout_below=\"@+id/heart\"/>\n\n```", "```java\nprivate AppCompatButton mReset, mHistory, mHeartPulse;\nprivate TextView mSteps, mHeart, mCalory;\nprivate HeartBeatView heartbeat;\n\n```", "```java\nheartbeat = (HeartBeatView)findViewById(R.id.heartbeat);\nmSteps = (TextView) findViewById(R.id.steps);\nmHeart = (TextView) findViewById(R.id.heart);\nmCalory = (TextView) findViewById(R.id.calory);\nmReset = (AppCompatButton) findViewById(R.id.reset);\nmHistory = (AppCompatButton) findViewById(R.id.history);\nmHeartPulse = (AppCompatButton) findViewById(R.id.pulseRequest);\n\n```", "```java\n @Override\n        public void onReceive(Context context, Intent intent) {\n            String data = intent.getStringExtra(\"heart\");\n            Log.v(\"heart\", \"Main activity received message: \" + data);\n\n            mHeart.setText(data);\n            heartbeat.setDurationBasedOnBPM(Integer.valueOf(data));\n            heartbeat.toggle();\n        }\n\n```", "```java\nmSteps.setText(\"Steps:\"+ message);\n\n```", "```java\nint value = Integer.valueOf(message);\nmCalory.setText(String.valueOf((int)(value * 0.045)) + \"/ncalories\" + \"/nburnt\");\n\n```", "```java\nclasspath \"io.realm:realm-gradle-plugin:2.2.1\"\n\n```", "```java\napply plugin: 'realm-android'\n\n```", "```java\npublic class StepCounts extends RealmObject {\n\n    private String ReceivedDateTime;\n    private String Data;\n\n    public String getReceivedDateTime() {\n        return ReceivedDateTime;\n    }\n\n    public void setReceivedDateTime(String receivedDateTime) {\n        ReceivedDateTime = receivedDateTime;\n    }\n\n    public String getData() {\n        return Data;\n    }\n\n    public void setData(String data) {\n        Data = data;\n    }\n}\n\n```", "```java\nprivate Realm realm;\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n...\nRealm.init(this);\nrealm = Realm.getDefaultInstance();\n\n}\n\n```", "```java\nrealm.beginTransaction();\nStepCounts Steps = realm.createObject(StepCounts.class);\nSteps.setData(message);\nString TimeStamp =  DateFormat.getDateTimeInstance().format(System.currentTimeMillis());\nSteps.setReceivedDateTime(TimeStamp);\nrealm.commitTransaction();\n\n```", "```java\nRealmResults<StepCounts> results = realm.where(StepCounts.class).findAll();\n\nif(results.size() == 0){\n    mSteps.setText(\"Steps: \");\n}else{\n    mSteps.setText(\"Steps: \"+results.get(results.size()-1).getData());\n    int value = Integer.valueOf(results\n    .get(results.size()-1).getData());\n    mCalory.setText(String.valueOf((int)(value * 0.045)) \n    + \"/ncalories\" + \"/nburnt\");\n}\n\n```", "```java\nmHistory.setOnClickListener(new View.OnClickListener() {\n    @Override\n    public void onClick(View v) {\n\n    }\n});\n\nmHeartPulse.setOnClickListener(new View.OnClickListener() {\n    @Override\n    public void onClick(View v) {\n\n    }\n});\n\nmReset.setOnClickListener(new View.OnClickListener() {\n    @Override\n    public void onClick(View v) {\n\n    }\n});\n\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\"com.packt.upbeat.HistoryActivity\">\n\n    <android.support.v7.widget.RecyclerView\n        android:id=\"@+id/recycler_view\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:layout_margin=\"5dp\" />\n\n</LinearLayout>\n\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:card_view=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:orientation=\"vertical\">\n\n    <android.support.v7.widget.CardView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginBottom=\"0dp\"\n        android:layout_marginLeft=\"5dp\"\n        android:layout_marginRight=\"5dp\"\n        android:layout_marginTop=\"9dp\"\n        card_view:cardCornerRadius=\"3dp\"\n        card_view:cardElevation=\"0.01dp\">\n\n        <LinearLayout\n            android:layout_margin=\"10dp\"\n            android:orientation=\"vertical\"\n            android:id=\"@+id/top_layout\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\">\n\n            <TextView\n                android:layout_margin=\"10dp\"\n                android:id=\"@+id/steps\"\n                android:text=\"Steps\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\" />\n            <TextView\n                android:layout_margin=\"10dp\"\n                android:id=\"@+id/calories\"\n                android:text=\"calory\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\" />\n            <TextView\n                android:layout_margin=\"10dp\"\n                android:id=\"@+id/distance\"\n                android:text=\"distance\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\" />\n\n            <TextView\n                android:layout_margin=\"10dp\"\n                android:id=\"@+id/date\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"40dp\"\n                android:layout_gravity=\"bottom\"\n                android:background=\"#ff444444\"\n                android:gravity=\"center\"\n                android:text=\"Timestamp\"\n                android:textColor=\"#fff\"\n                android:textSize=\"20dp\" />\n\n        </LinearLayout>\n    </android.support.v7.widget.CardView>\n</LinearLayout>\n\n```", "```java\npublic class HistoryAdapter extends RecyclerView.Adapter<HistoryAdapter.ViewHolder> {\n\n    public List<StepCounts> steps;\n    public Context mContext;\n\n    public HistoryAdapter(List<StepCounts> steps, Context mContext) {\n        this.steps = steps;\n        this.mContext = mContext;\n    }\n\n    @Override\n    public ViewHolder onCreateViewHolder(ViewGroup viewGroup, int i) {\n        View v = LayoutInflater.from(viewGroup.getContext())\n                .inflate(R.layout.row_item, viewGroup, false);\n        ViewHolder viewHolder = new ViewHolder(v);\n        return viewHolder;\n    }\n\n    @Override\n    public void onBindViewHolder(ViewHolder viewHolder, int i) {\n        viewHolder.steps.setText(steps.get(i).getData()+\" Steps\");\n        viewHolder.date.setText(steps.get(i).getReceivedDateTime());\n\n        int value = Integer.valueOf(steps.get(i).getData());\n        DecimalFormat df = new DecimalFormat(\"#.00\") ;\n        String kms = String.valueOf(df.format(value * 0.000762)) + \" \n        kms\" ;\n        viewHolder.calory.setText(String.valueOf((int)(value * 0.045)) \n        + \" calories \" + \"burnt\");\n        viewHolder.distance.setText(\"Distance: \"+kms);\n\n    }\n\n    @Override\n    public int getItemCount() {\n        return steps.size();\n    }\n\n    public static class ViewHolder extends RecyclerView.ViewHolder  {\n\n        public TextView steps,calory,distance,date;\n\n        public ViewHolder(View itemView) {\n            super(itemView);\n            steps = (TextView) itemView.findViewById(R.id.steps);\n            calory = (TextView) itemView.findViewById(R.id.calories);\n            distance = (TextView) itemView.findViewById(R.id.distance);\n            date = (TextView) itemView.findViewById(R.id.date);\n        }\n    }\n\n}\n\n```", "```java\nRealm realm;\nRecyclerView mRecyclerView;\nRecyclerView.LayoutManager mLayoutManager;\nRecyclerView.Adapter mAdapter;\n\n```", "```java\nmRecyclerView = (RecyclerView) findViewById(R.id.recycler_view);\nmRecyclerView.setHasFixedSize(true);\n\nRealm.init(this);\nrealm = Realm.getDefaultInstance();\nRealmResults<StepCounts> results = realm.where(StepCounts.class).findAll();\n// The number of Columns\nmLayoutManager = new GridLayoutManager(this, 1);\nmRecyclerView.setLayoutManager(mLayoutManager);\n\nmAdapter = new HistoryAdapter(results,HistoryActivity.this);\nmRecyclerView.setAdapter(mAdapter);\n\n```", "```java\npublic class HistoryActivity extends AppCompatActivity {\n\n    Realm realm;\n    RecyclerView mRecyclerView;\n    RecyclerView.LayoutManager mLayoutManager;\n    RecyclerView.Adapter mAdapter;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_history);\n        // Calling the RecyclerView\n        mRecyclerView = (RecyclerView) \n        findViewById(R.id.recycler_view);\n        mRecyclerView.setHasFixedSize(true);\n\n        Realm.init(this);\n        realm = Realm.getDefaultInstance();\n        RealmResults<StepCounts> results = \n        realm.where(StepCounts.class).findAll();\n        // The number of Columns\n        mLayoutManager = new GridLayoutManager(this, 1);\n        mRecyclerView.setLayoutManager(mLayoutManager);\n\n        mAdapter = new HistoryAdapter(results,HistoryActivity.this);\n        mRecyclerView.setAdapter(mAdapter);\n    }\n}\n\n```", "```java\nmHistory.setOnClickListener(new View.OnClickListener() {\n    @Override\n    public void onClick(View v) {\n        startActivity(new Intent(MainActivity.this, \n        HistoryActivity.class));\n    }\n});\n\n```", "```java\nclass SendToDataLayerThread extends Thread {\n    String path;\n    String message;\n\n    // Constructor to send a message to the data layer\n    SendToDataLayerThread(String p, String msg) {\n        path = p;\n        message = msg;\n    }\n\n    public void run() {\n        NodeApi.GetConnectedNodesResult nodes = \n        Wearable.NodeApi.getConnectedNodes(googleClient).await();\n        for (Node node : nodes.getNodes()) {\n            MessageApi.SendMessageResult result =  \n            Wearable.MessageApi.sendMessage(googleClient, \n            node.getId(), path, message.getBytes()).await();\n            if (result.getStatus().isSuccess()) {\n                Log.v(\"myTag\", \"Message: {\" + message + \"} sent to: \" + \n                node.getDisplayName());\n            } else {\n                // Log an error\n                Log.v(\"myTag\", \"ERROR: failed to send Message\");\n            }\n        }\n    }\n}\n\n```", "```java\nmHeartPulse.setOnClickListener(new View.OnClickListener() {\n    @Override\n    public void onClick(View v) {\n        new SendToDataLayerThread(\"/heart\", \"Start upbeat for heart \n        rate\").start();\n    }\n});\n\n```", "```java\npublic class MobileListener extends WearableListenerService {\n\n    @Override\n    public void onMessageReceived(MessageEvent messageEvent) {\n\n        if (messageEvent.getPath().equals(\"/heart\")) {\n            final String message = new String(messageEvent.getData());\n            Log.v(\"myTag\", \"Message path received on watch is: \" + \n            messageEvent.getPath());\n            Log.v(\"myTag\", \"Message received on watch is: \" + message);\n\n            // Broadcast message to wearable activity for display\n            Intent messageIntent = new Intent();\n            messageIntent.setAction(Intent.ACTION_SEND);\n            messageIntent.putExtra(\"message\", message);\n            LocalBroadcastManager.getInstance(this)\n            .sendBroadcast(messageIntent);\n\n            Intent intent2 = new Intent\n            (getApplicationContext(), MainActivity.class);\n\n            PendingIntent pendingIntent = PendingIntent.getActivity\n            (getApplicationContext(), 0, intent2,\n                    PendingIntent.FLAG_ONE_SHOT);\n\n            Uri defaultSoundUri = RingtoneManager.getDefaultUri\n            (RingtoneManager.TYPE_ALARM);\n\n            NotificationCompat.Builder notificationBuilder = \n            (NotificationCompat.Builder) new \n            NotificationCompat.Builder(getApplicationContext())\n                    .setAutoCancel(true)   //Automatically delete the \n                    notification\n                    .setSmallIcon(R.drawable.ic_heart_icon) \n                    //Notification icon\n                    .setContentIntent(pendingIntent)\n                    .setContentTitle(\"Open upbeat\")\n                    .setContentText(\"UpBeat to check the pulse\")\n                    .setCategory(Notification.CATEGORY_REMINDER)\n                    .setPriority(Notification.PRIORITY_HIGH)\n                    .setSound(defaultSoundUri);\n\n            NotificationManagerCompat notificationManager =    \n            NotificationManagerCompat.from\n            (getApplicationContext());\n            notificationManager.notify(0, notificationBuilder.build());\n\n        }\n        else {\n            super.onMessageReceived(messageEvent);\n        }\n    }\n}\n\n```", "```java\n<service android:name=\".services.MobileListener\">\n    <intent-filter>\n        <action android:name=\n        \"com.google.android.gms.wearable.DATA_CHANGED\" />\n        <action android:name=\n        \"com.google.android.gms.wearable.MESSAGE_RECEIVED\" />\n\n        <data\n            android:host=\"*\"\n            android:pathPrefix=\"/heart\"\n            android:scheme=\"wear\" />\n    </intent-filter>\n</service>\n\n```", "```java\npublic void Reset(){\n    RealmResults<StepCounts> results = \n    realm.where(StepCounts.class).findAll();\n\n    realm.beginTransaction();\n\n    results.deleteAllFromRealm();\n\n    realm.commitTransaction();\n}\n\n```", "```java\nmReset.setOnClickListener(new View.OnClickListener() {\n    @Override\n    public void onClick(View v) {\n        Reset();\n        recreate();\n    }\n});\n\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.wearable.view.BoxInsetLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/container\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:padding=\"5dp\"\n    app:layout_box=\"all\"\n    tools:deviceIds=\"wear\">\n\n    <android.support.wearable.view.WearableRecyclerView\n        android:id=\"@+id/wearable_recycler_view\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\" />\n\n</android.support.wearable.view.BoxInsetLayout>\n\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"vertical\"\n    android:tag=\"cards main container\">\n\n    <android.support.v7.widget.CardView \n    xmlns:card_view=\"http://schemas.android.com/apk/res-auto\"\n        android:id=\"@+id/card_view\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        card_view:cardBackgroundColor=\"@color/colorPrimary\"\n        card_view:cardCornerRadius=\"10dp\"\n        card_view:cardElevation=\"5dp\"\n        card_view:cardUseCompatPadding=\"true\">\n\n            <LinearLayout\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:layout_marginTop=\"12dp\"\n                android:layout_weight=\"2\"\n                android:orientation=\"vertical\">\n\n                <TextView\n                    android:id=\"@+id/health_tip\"\n                    android:layout_width=\"wrap_content\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_gravity=\"center_horizontal\"\n                    android:layout_marginTop=\"10dp\"\n                    android:text=\"HealthTip\"\n                    android:textColor=\"@color/white\"\n                    android:textAppearance=\"?\n                    android:attr/textAppearanceLarge\" />\n\n                <TextView\n                    android:id=\"@+id/tip_details\"\n                    android:layout_width=\"wrap_content\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_gravity=\"center_horizontal\"\n                    android:layout_marginTop=\"10dp\"\n                    android:text=\"Details\"\n                    android:textColor=\"@color/white\"\n                    android:textAppearance=\"?\n                    android:attr/textAppearanceMedium\" />\n\n        </LinearLayout>\n\n    </android.support.v7.widget.CardView>\n\n</LinearLayout>\n\n```", "```java\npublic class HealthTipsItem {\n\n    public String Title;\n    public String MoreInfo;\n\n    public HealthTipsItem(String title, String moreInfo) {\n        Title = title;\n        MoreInfo = moreInfo;\n    }\n\n    public String getTitle() {\n        return Title;\n    }\n\n    public void setTitle(String title) {\n        Title = title;\n    }\n\n    public String getMoreInfo() {\n        return MoreInfo;\n    }\n\n    public void setMoreInfo(String moreInfo) {\n        MoreInfo = moreInfo;\n    }\n}\n\n```", "```java\npublic class HealthTips {\n\n   public static String[] nameArray =\n           {\"Food style\",\n                   \"Food style\",\n                   \"Food style\",\n                   \"Drinking water\",\n                   \"Unhealthy drinks\",\n                   \"Alcohol and drugs\",\n                   \"Body Mass index\",\n                   \"Physical excercise\",\n                   \"Physical activities\",\n                   \"Meditation\",\n                   \"Healthy signs\"};\n\n    public static String[] versionArray = {\n            \"Along with fresh vegetables and fruits, eat lean meats (if \n            you're not vegetarian), nuts, and seeds.\",\n            \"Opt for seasonal and local products instead of those \n            exotic imported foodstuff\",\n            \"Make sure you get a proper balanced diet, as often as \n            possible\",\n            \"Drink water - you need to stay hydrated. It is great for \n            your internal organs, and it also keeps your skin healthy \n            and diminishes acne\",\n            \"Stop drinking too much caffeine and caffeinated \n            beverages\",\n            \"Limit alcohol intake. Tobacco and drugs should be a firm \n            No\",\n            \"Maintain a healthy weight.\",\n            \"Exercise at least four days a week for 20 to 30 minutes \n            each day. Another option is to break your workouts into \n            several sessions\",\n            \"Try to have as much physical activity as you can. Take the \n             stairs instead of elevator; walk to the market instead of \n             taking your car etc\",\n            \"Practice simple meditation. It balances your body, mind, \n            and soul\",\n            \"When speaking about health tips, skin, teeth, hair, and \n            nails are all health signs. Loss of hair or fragile nails \n            might mean poor nutrition\"};\n\n}\n\n```", "```java\npublic class RecyclerViewAdapter\n        extends WearableRecyclerView.Adapter\n        <RecyclerViewAdapter.ViewHolder> {\n\n    private List<HealthTipsItem> mListTips = new ArrayList<>();\n    private Context mContext;\n\n    public RecyclerViewAdapter(List<HealthTipsItem> mListTips, Context \n    mContext) {\n        this.mListTips = mListTips;\n        this.mContext = mContext;\n    }\n\n    static class ViewHolder extends RecyclerView.ViewHolder {\n        private TextView Title, info;\n\n        ViewHolder(View view) {\n            super(view);\n            Title = (TextView) view.findViewById(R.id.health_tip);\n            info = (TextView) view.findViewById(R.id.tip_details);\n        }\n    }\n\n    @Override\n    public RecyclerViewAdapter.ViewHolder onCreateViewHolder(ViewGroup \n    parent, int viewType) {\n        View view = LayoutInflater.from(parent.getContext())\n                .inflate(R.layout.health_tips_row, parent, false);\n\n        return new ViewHolder(view);\n    }\n\n    @Override\n    public void onBindViewHolder(ViewHolder holder, int position) {\n\n        holder.Title.setText(mListTips.get(position).getTitle());\n        holder.info.setText(mListTips.get(position).getMoreInfo());\n    }\n\n    @Override\n    public int getItemCount() {\n        return mListTips.size();\n    }\n}\n\n```", "```java\nprivate RecyclerViewAdapter mAdapter;\nprivate List<HealthTipsItem> myDataSet = new ArrayList<>();\n\n```", "```java\nWearableRecyclerView recyclerView = (WearableRecyclerView) findViewById(R.id.wearable_recycler_view);\nrecyclerView.setHasFixedSize(true);\nLinearLayoutManager mLayoutManager = new LinearLayoutManager(this);\nrecyclerView.setLayoutManager(mLayoutManager);\n\nmyDataSet = new ArrayList<HealthTipsItem>();\nfor (int i = 0; i < HealthTips.nameArray.length; i++) {\n    myDataSet.add(new HealthTipsItem(\n            HealthTips.nameArray[i],\n            HealthTips.versionArray[i]\n    ));\n}\n\nmAdapter = new RecyclerViewAdapter(myDataSet,HealthTipsActivity.this);\nrecyclerView.setAdapter(mAdapter);\n\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.wearable.view.BoxInsetLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/container\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:padding=\"5dp\"\n    app:layout_box=\"all\"\n    tools:deviceIds=\"wear\">\n\n    <android.support.wearable.view.WearableRecyclerView\n        android:id=\"@+id/wearable_recycler_view\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\" />\n\n</android.support.wearable.view.BoxInsetLayout>\n\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"vertical\"\n    android:tag=\"cards main container\">\n\n    <android.support.v7.widget.CardView \n    xmlns:card_view=\"http://schemas.android.com/apk/res-auto\"\n        android:id=\"@+id/card_view\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        card_view:cardBackgroundColor=\"@color/colorPrimary\"\n        card_view:cardCornerRadius=\"10dp\"\n        card_view:cardElevation=\"5dp\"\n        card_view:cardUseCompatPadding=\"true\">\n\n            <LinearLayout\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:layout_margin=\"12dp\"\n                android:layout_weight=\"2\"\n                android:orientation=\"vertical\">\n\n                <TextView\n                    android:id=\"@+id/health_tip\"\n                    android:layout_width=\"wrap_content\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_gravity=\"center_horizontal\"\n                    android:layout_marginTop=\"10dp\"\n                    android:text=\"calory\"\n                    android:textColor=\"@color/white\"\n                    android:textAppearance=\"?\n                    android:attr/textAppearanceLarge\" />\n\n        </LinearLayout>\n\n    </android.support.v7.widget.CardView>\n\n</LinearLayout>\n\n```", "```java\npublic class CaloryItem {\n\n    public String Calories;\n\n    public CaloryItem(String calories) {\n        Calories = calories;\n    }\n\n    public String getCalories() {\n        return Calories;\n    }\n\n    public void setCalories(String calories) {\n        Calories = calories;\n    }\n}\n\n```", "```java\npublic class RecyclerViewCaloryAdapter\n        extends WearableRecyclerView.Adapter<RecyclerViewCaloryAdapter.ViewHolder> {\n\n    private List<CaloryItem> mCalory = new ArrayList<>();\n    private Context mContext;\n\n    public RecyclerViewCaloryAdapter(List<CaloryItem> mCalory, Context \n    mContext) {\n        this.mCalory = mCalory;\n        this.mContext = mContext;\n    }\n\n    static class ViewHolder extends RecyclerView.ViewHolder {\n        private TextView Title;\n\n        ViewHolder(View view) {\n            super(view);\n            Title = (TextView) view.findViewById(R.id.health_tip);\n        }\n    }\n\n    @Override\n    public RecyclerViewCaloryAdapter.ViewHolder \n    onCreateViewHolder(ViewGroup parent, int viewType) {\n        View view = LayoutInflater.from(parent.getContext())\n                .inflate(R.layout.calory_row, parent, false);\n\n        return new ViewHolder(view);\n    }\n\n    @Override\n    public void onBindViewHolder(ViewHolder holder, int position) {\n        holder.Title.setText(mCalory.get(position).getCalories());\n    }\n\n    @Override\n    public int getItemCount() {\n        return mCalory.size();\n    }\n}\n\n```", "```java\nprivate RecyclerViewCaloryAdapter mAdapter;\nprivate List<CaloryItem> myDataSet = new ArrayList<>();\n\n```", "```java\nWearableRecyclerView recyclerView = (WearableRecyclerView) findViewById(R.id.wearable_recycler_view);\nrecyclerView.setHasFixedSize(true);\nLinearLayoutManager mLayoutManager = new LinearLayoutManager(this);\nrecyclerView.setLayoutManager(mLayoutManager);\n\nmyDataSet = new ArrayList<CaloryItem>();\nfor (int i = 0; i < Calory.nameArray.length; i++) {\n    myDataSet.add(new CaloryItem(\n            Calory.nameArray[i]\n    ));\n}\n\nmAdapter = new RecyclerViewCaloryAdapter(myDataSet,CaloryChartActivity.this);\nrecyclerView.setAdapter(mAdapter);\n\n```"]