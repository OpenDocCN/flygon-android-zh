["```java\n  <uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\"/>\n  <uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\"/>\n```", "```java\nprivate LocationManager locationManager;\n```", "```java\nprivate LocationListener locListener= new LocationListener() {\n  …\n\n  @Override\n  public void onLocationChanged(Location location) {\n    Log.d(TAG, \"onLocation: \" + location.toString());\n    if ((com.ar4android.LocationAccessJME) app != null) {\n      ((com.ar4android.LocationAccessJME) app)\n        .setUserLocation(xyzposition);\n    }\n  }\n  …\n}\n```", "```java\n  public void onResume() {\n    super.onResume();\n    …\n    locationManager = (LocationManager)getSystemService(LOCATION_SERVICE);\n    locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 500, 0, locListener);\n  }\n```", "```java\n  //the User position which serves as intermediate storage place for the Android\n  //Location listener position update\n  private Vector3f mUserPosition;\n\n  //A flag indicating if a new Location is available\n  private boolean mNewUserPositionAvailable =false;\n```", "```java\n    public void setUserLocation(Vector3f location) {\n    if (!mSceneInitialized) {\n      return;\n    }\n    WSG84toECEF(location,mUserPosition);\n    //update your POI location in reference to the user position\n    ….\n    mNewUserPositionAvailable =true;\n  }\n```", "```java\n    Vector3f ECEFNinja=new Vector3f();\n    Vector3f ENUNinja=new Vector3f();\n    WSG84toECEF(locationNinja,ECEFNinja);\n    ECEFtoENU(location,mUserPosition,ECEFNinja,ENUNinja);\n    mNinjaPosition.set(ENUNinja.x,0,ENUNinja.y);\n```", "```java\n    if (mNewUserPositionAvailable) {\n      Log.d(TAG,\"update user location\");\n      ninja.setLocalTranslation(mNinjaPosition.x+0.0f,mNinjaPosition.y-2.5f,mNinjaPosition.z+0.0f);\n      mNewUserPositionAvailable=false;\n    }\n```", "```java\n    if (firstTimeLocation) {\n      //put it at 10 meters\n      locationNinja.setLatitude(location.getLatitude()+0.0001);\n      locationNinja.setLongitude(location.getLongitude());\n      firstTimeLocation=false;\n    }\n```", "```java\n  private SensorManager sensorManager;\n  Sensor rotationVectorSensor;\n  Sensor gyroscopeSensor;\n  Sensor magneticFieldSensor;\n  Sensor accelSensor;\n  Sensor linearAccelSensor; \n```", "```java\nprivate SensorEventListener sensorListener = new SensorEventListener() {    \n    …\n@Override\npublic void onSensorChanged(SensorEvent event) {\n  switch(event.sensor.getType()) {\n      …\n      case Sensor.TYPE_ROTATION_VECTOR:\n  float[] rotationVector = {event.values[0],event.values[1], event.values[2]};\n  float[] quaternion = {0.f,0.f,0.f,0.f};\n  sensorManager.getQuaternionFromVector(quaternion,rotationVector);\n  float qw = quaternion[0]; float qx = quaternion[1];\n  float qy = quaternion[2];float qz = quaternion[3];\n    double headingQ = Math.atan2(2*qy*qw-2*qx*qz , 1 - 2*qy*qy - 2*qz*qz);\n  double pitchQ = Math.asin(2*qx*qy + 2*qz*qw); \n  double rollQ = Math.atan2(2*qx*qw-2*qy*qz ,1 - 2*qx*qx - 2*qz*qz);\n  if ((com.ar4android.SensorAccessJME) app != null) {\n  ((com.ar4android.SensorAccessJME) app).setRotation((float)pitchQ, (float)rollQ, (float)headingQ);\n  }\n  }\n}\n};\n```", "```java\n  // sensor setup\n  sensorManager = (SensorManager)getSystemService(SENSOR_SERVICE);\n  List<Sensor> deviceSensors = sensorManager.getSensorList(Sensor.TYPE_ALL);\n  Log.d(TAG, \"Integrated sensors:\");\n  for(int i = 0; i < deviceSensors.size(); ++i ) {\n    Sensor curSensor = deviceSensors.get(i);\n    Log.d(TAG, curSensor.getName() + \"\\t\" + curSensor.getType() + \"\\t\" + curSensor.getMinDelay() / 1000.0f);\n  }\ninitSensors();\n```", "```java\n    protected void initSensors(){\n      //look specifically for the gyroscope first and then for the rotation_vector_sensor (underlying sensors vary from platform to platform)\n    gyroscopeSensor = initSingleSensor(Sensor.TYPE_GYROSCOPE, \"TYPE_GYROSCOPE\");\n    rotationVectorSensor = initSingleSensor(Sensor.TYPE_ROTATION_VECTOR, \"TYPE_ROTATION_VECTOR\");\n    accelSensor = initSingleSensor(Sensor.TYPE_ACCELEROMETER, \"TYPE_ACCELEROMETER\");\n      linearAccelSensor = initSingleSensor(Sensor.TYPE_LINEAR_ACCELERATION, \"TYPE_LINEAR_ACCELERATION\");\n    magneticFieldSensor = initSingleSensor(Sensor.TYPE_MAGNETIC_FIELD, \"TYPE_MAGNETIC_FIELD\");\n    }\n```", "```java\n    protected Sensor initSingleSensor( int type, String name ){\n    Sensor newSensor = sensorManager.getDefaultSensor(type);\n    if(newSensor != null){\n      if(sensorManager.registerListener(sensorListener, newSensor, SensorManager.SENSOR_DELAY_GAME)) {\n        Log.i(TAG, name + \" successfully registered default\");\n      } else {\n        Log.e(TAG, name + \" not registered default\");\n      }\n    } …\n    return newSensor;\n    }\n```", "```java\n    public void onStop() {\n      super.onStop();\n      sensorManager.unregisterListener(sensorListener);\n    }\n```", "```java\n  private Quaternion mRotXYZQ;\n  private Quaternion mInitialCamRotation;\n  private Quaternion mCurrentCamRotation; \n```", "```java\n  public void setRotation(float pitch, float roll, float heading) {\n    if (!mSceneInitialized) {\n      return;\n    }\n    mRotXYZQ.fromAngles(pitch , roll - FastMath.HALF_PI, 0);\n    mCurrentCamRotation = mInitialCamRotation.mult(mRotXYZQ);\n    mNewCamRotationAvailable = true;\n```", "```java\n    if (mNewCamRotationAvailable) {\n      fgCam.setAxes(mCurrentCamRotation);\n      mNewCamRotationAvailable = false;\n    }\n```", "```java\n// angular speeds from gyro\nprivate float[] gyro = new float[3]; …\n```", "```java\n  if ((com.ar4android.SensorFusionJME) app != null) {\n        ((com.ar4android.SensorFusionJME) app).setRotationFused((float)(fusedOrientation[2]), (float)(-fusedOrientation[0]), (float)(fusedOrientation[1]));\n      }\n  }\n```", "```java\npublic void onSensorChanged(SensorEvent event) {\n  switch(event.sensor.getType()) {\n  case Sensor.TYPE_ACCELEROMETER:\n    System.arraycopy(event.values, 0, accel, 0, 3);\n    calculateAccMagOrientation();\n    break;\n  case Sensor.TYPE_MAGNETIC_FIELD:  \n    System.arraycopy(event.values, 0, magnet, 0, 3);\n    break;\n  case Sensor.TYPE_GYROSCOPE:\n    gyroFunction(event)\n    break;\n}\n```", "```java\nfuseTimer.scheduleAtFixedRate(new calculateFusedOrientationTask(), 1000, TIME_CONSTANT);\n```", "```java\npublic void setRotationFused(float pitch, float roll, float heading) {\n  if (!mSceneInitialized) {\n    return;\n  } // pitch: cams x axis roll: cams y axisheading: cams z axis\n  mRotXYZQ.fromAngles(pitch + FastMath.HALF_PI , roll - FastMath.HALF_PI, 0);\n  mCurrentCamRotationFused = mInitialCamRotation.mult(mRotXYZQ);\n  mNewUserRotationFusedAvailable = true;\n}\n```", "```java\nprivate class POI {\n  public String placesReference;\n  public String name;\n  public Location location;\n…\n}\n```", "```java\npublic void sendPlacesQuery(final Location location,  final Handler guiHandler) throws Exception  {\nThread t = new Thread() {\npublic void run() {\n  Looper.prepare();\n  BufferedReader in = null;\n  try {\n    String url = \"https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=\" + location.getLatitude() + \",\" + location.getLongitude() + \"&radius=\" +  mPlacesRadius + \"&sensor=true&key=\" + mPlacesKey;\n    HttpConnectionParams.setConnectionTimeout(mHttpClient.getParams(), 10000);\n    HttpResponse response;\n    HttpGet get = new HttpGet(url);\n    response = mHttpClient.execute(get);\n    Message toGUI = guiHandler.obtainMessage();\n…\nguiHandler.sendMessage(toGUI);\n…\n```", "```java\n{\n   …\n   \"results\" : [\n      {\n         \"geometry\" : {\n            \"location\" : {\n               \"lat\" : 47.07010720,\n               \"lng\" : 15.45455070\n            },\n   …\n         },\n         \"name\" : \"Sankt Leonhard\",\n         \"reference\" : \"CpQBiQAAADXt6JM47sunYZ8vZvt0GViZDLICZi2JLRdfhHGbtK-ekFMjkaceN6GmECaynOnR69buuDZ6t-PKow-J98l2tFyg3T50P0Fr39DRV3YQMpqW6YGhu5sAzArNzipS2tUY0ocoMNHoNSGPbuuYIDX5QURVgncFQ5K8eQL8OkPST78A_lKTN7icaKQV7HvvHkEQJBIQrx2r8IxIYuaVhL1mOZOsKBoUQjlsuuhqa1k7OCtxThYqVgfGUGw\",\n         …\n      },\n…\n}\n```", "```java\npublic void handleMessage(Message msg) {\n  try {\n    JSONObject response = new JSONObject(msg.obj.toString());\n    JSONArray results = response.getJSONArray(\"results\");\n    for(int i = 0; i < results.length(); ++i) {\n      JSONObject curResult = results.getJSONObject(i);\n      String poiName = curResult.getString(\"name\");\n      String poiReference = curResult.getString(\"reference\");\n      double lat = curResult.getJSONObject(\"geometry\").getJSONObject(\"location\").getDouble(\"lat\");\n      double lng = curResult.getJSONObject(\"geometry\").getJSONObject(\"location\").getDouble(\"lng\");\n      Location refLoc = new Location(LocationManager.GPS_PROVIDER);\n      refLoc.setLatitude(lat);\n      refLoc.setLongitude(lng);\n      mPOIs.add(new POI(poiReference, poiName, refLoc));\n      …\n    }\n  …\n  }\n} \n```"]