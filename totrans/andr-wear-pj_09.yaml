- en: Let us Chat in a Smart Way - Notifications and More
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让我们以智能的方式进行聊天 - 通知及其他
- en: The previous chapter helped us in building a conversational messaging application,
    but the Wear app had a very normal user interface with no notifications whatsoever.
    Notification is a very important aspect of a messaging application, but it needs
    complex infrastructure to process the notification. When the sender sends a message
    to the receiver, the receiver should get a notification conveying certain information,
    such as the sender name, and a quick message preview.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 前一章帮助我们构建了一个对话式消息应用，但穿戴设备的应用界面非常普通，没有任何通知功能。通知是消息应用非常重要的一个方面，但实现它需要复杂的基础架构来处理通知。当发送者向接收者发送消息时，接收者应该收到一个通知，传达一些信息，比如发送者的名字以及一条快速消息预览。
- en: Notification is a component in Android that we can use to display information.
    In the case of a messaging application, the receiver should get the push notification
    to instantiate the notification component. So, whenever there is a real-time database
    update in Firebase, both the handheld device and the Wear device should get the
    notification. Thankfully, we don't need a server to handle the notification; Firebase
    will handle push notifications for your messaging application. When there is an
    update in the real-time database, we need to fire a push notification.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 通知是 Android 中我们可以用来显示信息的组件。在消息应用的情况下，接收者应该收到推送通知来实例化通知组件。所以，每当 Firebase 中的实时数据库更新时，手持设备和穿戴设备都应该收到通知。幸运的是，我们不需要服务器来处理通知；Firebase
    会为你的消息应用处理推送通知。当实时数据库有更新时，我们需要触发推送通知。
- en: 'In this chapter, we will explore the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨以下内容：
- en: Firebase functions
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Firebase 函数
- en: Notifications
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通知
- en: Material design Wear app
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 材料设计穿戴应用
- en: Firebase functions
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Firebase 函数
- en: Firebase functions are the smartest solution for monitoring database triggers
    and many more server-related executions. Instead of hosting a server, which listens
    to Firebase database changes and then fires the push notification, we shall utilize
    one of the Firebase technologies to complete this task. Firebase functions has
    an efficient control on all the Firebase technologies, such as Firebase authentication,
    storage, analytics, and so on. Firebase functions can be used in various aspects;
    for example, when your analytic cohorts meet some milestone, you can send targeted
    notifications, invites, and so on. Any server level business logic that you might
    want to implement in your Firebase system has been made with Firebase functions.
    We will use Firebase functions for sending push notifications whenever a database
    trigger occurs. We need an entry level JavaScript understanding to complete this
    task.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Firebase 函数是监控数据库触发器以及许多服务器相关执行的最智能解决方案。我们不需要托管一个服务器来监听 Firebase 数据库的变化，然后再触发推送通知，我们可以利用
    Firebase 的一项技术来完成这项任务。Firebase 函数对所有 Firebase 技术都有有效的控制，比如 Firebase 认证、存储、分析等。Firebase
    函数可以在各种方面使用；例如，当你的分析群组达到某个里程碑时，你可以发送有针对性的通知、邀请等。任何你可能在 Firebase 系统中实现的服务器级别的业务逻辑都可以用
    Firebase 函数来完成。我们将使用 Firebase 函数在数据库触发时发送推送通知。完成这项任务我们需要具备入门级的 JavaScript 知识。
- en: To get started on Firebase functions, we need Node.js environment that you can
    install it from [https://nodejs.org/](https://nodejs.org/). When you install Node.js,
    it will also install **node package manager** (**npm**). It helps install the
    JavaScript frameworks, plugins, and so on. After installing Node.js, go to the
    terminal or your command line.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用 Firebase 函数，我们需要 Node.js 环境，你可以从 [https://nodejs.org/](https://nodejs.org/)
    安装它。安装 Node.js 时，它还会安装 **node 包管理器** (**npm**)。它有助于安装 JavaScript 框架、插件等。安装 Node.js
    后，打开终端或命令行。
- en: 'Check whether node is installed by entering `$node --version`. If the CLI returns
    the latest version number, then you are good to go:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 输入 `$node --version` 检查是否安装了 node。如果 CLI 返回最新的版本号，那么你就可以开始了：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If you encounter any errors, you should execute the command in the super user
    mode:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你遇到任何错误，你应该以超级用户模式执行命令：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Navigate to a directory in which you wish to save the Firebase function programs
    and authenticate yourself using following command:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到你想保存 Firebase 函数程序的目录，并使用以下命令进行身份验证：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'After successful authentication you can initialize the Firebase functions:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 成功认证后，你可以初始化 Firebase 函数：
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The CLI tool will generate the Firebase function and the necessary code in the
    directory you initialized. Open `index.js` in your favorite editor. We create
    a Firebase function for the `Realtime` database events with `functions.database`
    to handle the real-time database triggers. We shall call ref(path) to reach to
    the particular database `path. onwrite()` method from the functions, which will
    send notifications whenever there is an update in the database.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: CLI 工具将在您初始化的目录中生成 Firebase 函数和必要的代码。用您喜欢的编辑器打开 `index.js`。我们使用 `functions.database`
    创建一个用于处理实时数据库触发器的 `Realtime` 数据库事件的 Firebase 函数。我们将调用 ref(path)，以从函数中达到特定的数据库
    `path` 的 `onwrite()` 方法，该方法将在数据库更新时发送通知。
- en: 'Now, to construct our notification payload, let''s understand our real-time
    database structure:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了构建我们的通知负载，让我们了解我们的实时数据库结构：
- en: '![](img/00123.jpeg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00123.jpeg)'
- en: We can see that messages have a child named `ashok_geetha`, which conveys that
    these two users' conversations are stored inside with a unique Firebase ID. For
    this implementation, we will pick `ashok_geetha` for push notification.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，消息有一个名为 `ashok_geetha` 的子节点，这意味着这两个用户的对话存储在其中，具有唯一的 Firebase ID。对于此实现，我们将选择
    `ashok_geetha` 以推送通知。
- en: 'Now, in the `index.js` file, add the following code:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在 `index.js` 文件中，添加以下代码：
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: When we have different firebase structure, using the url-id configuration we
    can trigger the firebase functions for making the pushnotification to work with
    all your users. We just need to make the following change in the url. `/messages/{ChatID}/{pushId}`
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们拥有不同的 Firebase 结构时，通过使用 url-id 配置，我们可以触发 Firebase 函数，以使推送通知能够与所有用户一起工作。我们只需在
    url 中进行以下更改即可。 `/messages/{ChatID}/{pushId}`
- en: 'Now, in the terminal, complete the deployment of Firebase functions with the
    `$ firebase deploy` command:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在终端中，使用 `$ firebase deploy` 命令完成 Firebase 函数的部署：
- en: '![](img/00124.jpeg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00124.jpeg)'
- en: The previous Node.js setup fires the push notification using the Firebase functions.
    Now, we need a mechanism to receive the message from the Firebase in our local
    mobile and Wear application.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的 Node.js 设置使用 Firebase 函数触发推送通知。现在，我们需要一种机制，以便在我们的本地移动和穿戴应用程序中接收来自 Firebase
    的消息。
- en: 'Switch to Android Studio and add the following dependency to your mobile project
    gradle module file:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 切换到 Android Studio，并将以下依赖项添加到您的移动项目 gradle 模块文件中：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'After adding the dependency, create a class called `MessagingService`, which
    extends to the `FirebaseMessagingService` class. The `FirebaseMessaging` class
    extends to `com.google.firebase.iid.zzb` and the `zzb` class extends to Android
    `Service` class. This class will help the communication process between Firebase
    messaging and Android application. It also can display notifications automatically.
    Let''s create the class and extend it to the `FirebaseMessagingService` class,
    as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 添加依赖项后，创建一个名为 `MessagingService` 的类，该类扩展自 `FirebaseMessagingService` 类。`FirebaseMessaging`
    类扩展自 `com.google.firebase.iid.zzb`，而 `zzb` 类扩展自 Android `Service` 类。这个类将帮助 Firebase
    消息传递和 Android 应用之间的通信过程。它还可以自动显示通知。让我们创建一个类并将其扩展到 `FirebaseMessagingService` 类，如下所示：
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'It''s time to add the override method `onMessageReceived`. This method receives
    the notification when app is at the foreground or background and we can retrieve
    all the notification parameters with the `getnotification()` method:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候添加 `onMessageReceived` 重写方法了。当应用在前台或后台时，该方法接收通知，我们可以使用 `getnotification()`
    方法检索所有通知参数：
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The `RemoteMessage` object will have all the data we sent in the notification
    payload from Firebase functions. Inside the method, add the following code to
    get the title and message content. We are sending a message in the title param
    on the Firebase functions; you can customize it as per your use cases:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`RemoteMessage` 对象将包含我们从 Firebase 函数中的通知负载中发送的所有数据。在方法内部，添加以下代码以获取标题和消息内容。我们在
    Firebase 函数上发送标题参数中的消息；您可以根据自己的用例进行自定义：'
- en: '[PRE8]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'For constructing notification, we will use `NotificationCompat.Builder` and,
    when a user clicks on the notification, we will take him to `MainActivity`:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 为了构建通知，我们将使用 `NotificationCompat.Builder`，当用户点击通知时，我们会将他带到 `MainActivity`：
- en: '[PRE9]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Call the method inside `onMessageReceived` and pass the content to the `sendNotification`
    method:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `onMessageReceived` 内部调用该方法，并将内容传递给 `sendNotification` 方法：
- en: '[PRE10]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The complete class code will look as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的类代码如下所示：
- en: '[PRE11]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We can now register the previous service in the manifest:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以在清单中注册之前的服务：
- en: '[PRE12]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'After all, we now have a service for listening to `pushNotification` but we
    need to listen to the particular string we are sending. We can add the string
    to some constants or to the XML file, but when we ask Firebase to send particular
    channel notifications, then we need to subscribe to a channel that is called topic.
    Add the following code in `ChatActivity` and inside the method:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 毕竟，我们现在有一个用于监听 `pushNotification` 的服务，但我们需要监听我们发送的特定字符串。我们可以将字符串添加到一些常量中或 XML
    文件中，但是当我们要求 Firebase 发送特定频道的通知时，我们需要订阅一个称为主题的频道。在 `ChatActivity` 中添加以下代码，并在方法内部：
- en: '[PRE13]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'To make the earlier operation global, create a class that extends to the `Application`
    class. Inside the `oncreate` method, we can subscribe to the topic as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使之前的操作全局化，创建一个扩展 `Application` 类的类。在 `onCreate` 方法内部，我们可以按照以下方式订阅主题：
- en: '[PRE14]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, we need to register the application class in the manifest. The application
    class holds the control on the `onCreate` method of the application lifecycle
    and it will help in maintaining the application life state:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要在清单中注册应用程序类。应用程序类控制着应用程序生命周期的 `onCreate` 方法，这将有助于维护应用程序的生命状态：
- en: '[PRE15]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Congratulations! We have successfully configured push notification and are
    receiving it on our mobile phones:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！我们已经成功配置了推送通知，并在我们的手机上收到了通知：
- en: '![](img/00125.jpeg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00125.jpeg)'
- en: In the connected Wear device, we will be able to see the following notification
    when we receive it. By default, the `NotificationCompat.Builder` class will help
    Wear devices to receive notifications, and if we want to customize it, we can
    do so by following the coming section.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在已连接的 Wear 设备中，当我们收到通知时，我们将能够看到以下通知。默认情况下，`NotificationCompat.Builder` 类可以帮助
    Wear 设备接收通知，如果我们想要自定义它，可以通过以下部分进行操作。
- en: 'From the Wear notification component, we can receive the reply right from the
    Wear device to the mobile application. To be able to achieve this, we will use
    the `WearExtender` component from the `NotificationCompat` class. Using this setup,
    users will be able to access the voice input, **Input method framework** (**IMF**),
    and Emoji to reply to the notification:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Wear 通知组件，我们可以直接从 Wear 设备接收回复到移动应用程序。为了实现这一点，我们将使用 `NotificationCompat` 类中的
    `WearExtender` 组件。使用此设置，用户将能够使用语音输入、**输入法框架**（**IMF**）和表情符号回复通知：
- en: '[PRE16]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'There will be numerous use cases where we need to send a quick response with
    already stored replies and or quick typing facility. In that case, we can make
    use of `Action.WearableExtender`:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 将会有很多用例，我们需要发送带有已经存储的回复的快速响应，或者快速输入功能。在这种情况下，我们可以使用 `Action.WearableExtender`：
- en: '[PRE17]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Now, in the project, let's update our messaging service class, where we are
    firing the notification component when the background service receives a push
    notification.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在项目中，让我们更新我们的消息服务类，当后台服务接收到推送通知时，我们会触发通知组件。
- en: 'Add the following instances to global scope of the class:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下实例添加到类的全局作用域中：
- en: '[PRE18]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'When a reply is received from the Wear, we will keep that in reference and
    pass it to the notification handler:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们从 Wear 设备收到回复时，我们将保留该引用并将其传递给通知处理程序：
- en: '[PRE19]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Wear notification is evolving with every new Android release and, right within
    the `NotificationCompat.Builder`, we have all the features that can make your
    mobile app interact with the Wear device. When you have a mobile app and it has
    interactions, such as notifications and so on, from the Wear device, you can get
    textual replies even if you don't have a Wear companion application.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Wear 通知随着每个新的 Android 版本的发布而不断发展，在 `NotificationCompat.Builder` 中，我们有所有可以使您的移动应用程序与
    Wear 设备交互的功能。当您有一个移动应用程序，并且它有来自 Wear 设备的交互，如通知等，即使没有 Wear 伴侣应用程序，您也可以获得文本回复。
- en: Messaging service class
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 消息服务类
- en: 'In the `MessagingService` class, we have a method called `sendNotification`
    that fires a notification to Wear and mobile devices. Let''s update the method
    with the following code changes:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `MessagingService` 类中，我们有一个名为 `sendNotification` 的方法，该方法向 Wear 和移动设备发送通知。让我们用以下代码更改更新该方法：
- en: '[PRE20]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The previous methodwhich features in Wear device to have the IMF input, voice
    reply, and drawing emoji symbols. The complete class after modifying the code
    looks as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个方法在 Wear 设备上具有 IMF 输入、语音回复和绘制表情符号的功能。修改代码后完整的类如下所示：
- en: '[PRE21]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The notification received will look as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 收到的通知将如下所示：
- en: '![](img/00126.jpeg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00126.jpeg)'
- en: 'When the user clicks on the notification, he or she will be given three options,
    as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击通知时，他将或她将得到以下三个选项：
- en: '![](img/00127.jpeg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00127.jpeg)'
- en: 'After receiving the notification on the Wear device, the user will reply with
    his or her thoughts via text or voice input or with the help of emojis. To handle
    this scenario, we need to write one broadcast receiver. Let''s create a class
    called `MessageReplyReceiver`, extend it to the `BroadcastReceiver` class, and
    override the `onReceive` method. When you get the reply, just update the intent
    with the `conversationId. onReceive` method as follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Wear 设备上收到通知后，用户可以通过文本或语音输入，或者借助表情符号来回复他们的想法。为了处理这种情况，我们需要编写一个广播接收器。让我们创建一个名为`MessageReplyReceiver`的类，继承自`BroadcastReceiver`类，并重写`onReceive`方法。当你收到回复时，只需按照以下方式使用`conversationId`更新意图：
- en: '[PRE22]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'From the `remoteIntent` object, to receive the data and convert the intent
    data to text, use the following method:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 从`remoteIntent`对象中，为了接收数据并将意图数据转换为文本，使用以下方法：
- en: '[PRE23]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The complete `MessageReplyReceiver` class is as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`MessageReplyReceiver`类的完整代码如下：'
- en: '[PRE24]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Afterward, register `broadcastreceiver` in the manifest as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，在清单文件中如下注册`broadcastreceiver`：
- en: '[PRE25]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Now, we are completely ready to receive data from the Wear notification component
    to the local application.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经完全准备好接收来自 Wear 通知组件到本地应用程序的数据。
- en: 'The voice input screen from the Wear notification component will look as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Wear 通知组件的语音输入屏幕将如下所示：
- en: '![](img/00128.jpeg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00128.jpeg)'
- en: 'Use the Draw emoji on this screen and Android will predict what you have drawn:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个屏幕上使用绘图表情，Android 会预测你绘制了什么：
- en: '![](img/00129.jpeg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00129.jpeg)'
- en: 'IMF can be used to reply by typing the input:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: IMF 可以用来通过键入输入进行回复：
- en: '![](img/00130.jpeg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00130.jpeg)'
- en: Summary
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you have learned how to use Firebase functions to send push
    notifications and to use the notification component from the Wear support library.
    Notifications are integral components in smart devices; they play a crucial role
    by reminding users. We have understood the `NotificationCompat.Builder` class
    and the `WearableExtender` class. We have also explored the input method framework
    and the easiest way to reply with multiple reply mechanisms, such as emojis, voice
    support, and so on.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你已经学习了如何使用 Firebase 函数发送推送通知，以及如何使用来自 Wear 支持库的通知组件。通知是智能设备中的核心组件；它们通过提醒用户发挥着至关重要的作用。我们已经理解了`NotificationCompat.Builder`类和`WearableExtender`类。我们还探索了输入方法框架以及使用多种回复机制（如表情符号、语音支持等）进行回复的最简单方式。
