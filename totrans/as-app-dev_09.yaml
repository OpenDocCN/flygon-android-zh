- en: Chapter 9. Preparing for Release
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter you've learned enough to test and debug your application.
    What do you need to prepare your application for release? How can you do this
    using Android Studio?
  prefs: []
  type: TYPE_NORMAL
- en: This chapter describes the necessary steps to prepare your application for release
    using Android Studio. First of all we will learn about the Application Packages
    files, a variation of the JAR files in which Android applications are packed.
    We will then learn how we need to change our application after fully testing it.
    Finally, we will sign our application APK (**Application Package**) file, leaving
    it ready to upload to any market such as Google Play.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the topics we''ll be covering in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Preparing for release
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: APK files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting a certificate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating a signed `APK`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is an APK file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Android applications are packed in a file with the `.APK` extension, which
    is a variation of a Java JAR (**Java Archive**) file. These files are just compressed
    ZIP files, so their content can be easily explored. An APK file usually contains:'
  prefs: []
  type: TYPE_NORMAL
- en: '`assets/`: A folder that contains the assets files of the application. This
    is the same `assets` folder existing in the project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`META-INF/`: A folder that contains our certificates.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lib/`: A folder that contains compiled code if necessary for a processor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`res/`: A folder that contains the application resources.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AndroidManifest.xml`: The application manifest file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`classes.dex`: A file that contains the application compiled code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`resources.arsc`: A file that contains some precompiled resources.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With the `APK` file, the application can be distributed and installed on the
    Android operating system. Android applications can be distributed as you prefer,
    through app markets such as Google Play, Amazon Appstore, or Opera Mobile Store;
    through your own website; or even through an e-mail to your users. If you choose
    any of the last two options, take into account that Android by default blocks
    installations from locations different from Google Play. You should inform your
    users that they need to disable this restriction in their devices to be able to
    install your application. They have to check the **Unknown sources** option from
    the **Settings** | **Security** menu of their Android devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'Applications have to be signed with a private key when they are built. An application
    can''t be installed in a device or even in the emulator if it is not signed. To
    build our application there are two modes, debug and release. Both `APK` versions
    contain the same folders and compiled files. The difference is the key used to
    sign them:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Debug**: When we run and tested our application in the previous chapters,
    we were in the debug mode, but we didn''t have any key nor did anything to sign
    our application. The Android SDK tools automatically create a debug key, an alias,
    and their passwords to sign the `APK`. This process occurs when we are running
    or debugging our application with Android Studio without us realizing that. We
    can''t publish an `APK` signed with the debug key created by the SDK tools.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Release**: We have to build a release version when we want to distribute
    our application in order to be able to install it in other Android devices. It
    is a requirement that the APK file is signed with a certificate for which the
    developer keeps the private key. In this case, we need our own private key, alias,
    and password and provide them to the build tools. The certificate identifies the
    developer of the application and can be a self-signed certificate. It is not necessary
    for a certificate authority to sign the certificate.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Keep the key store with your certificate in a secure place. To upgrade your
    application you have to use the same key in order to upload the new version. If
    you lose the key store, you won't be able to update your application. You will
    have to create a new application with a different package name.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Previous steps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we generate the APK file, it is necessary to prepare our application
    for building it in the release mode.
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, make sure you have completely tested your application. We recommend
    testing your application:'
  prefs: []
  type: TYPE_NORMAL
- en: On a device using the minimum required platform
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On a device using the target platform
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On a device using the latest available platform
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On a real device and not just in the emulator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On a variety of screen resolutions and sizes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On a tablet if your application supports them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Switching to the landscape mode if you allow it, both in a mobile device and
    in a tablet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On different network conditions, such as no Internet connectivity or low coverage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If your application uses the GPS or any location service, test it when they
    are not activated in the device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Behavior of the back button
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Secondly, we have to check the log messages that are printed from our application.
    Printing some log messages can be considered a security vulnerability. Logs generated
    by the Android system can be captured and analyzed, so we should avoid showing
    critical information about the application's internal working. You should also
    remove the `android:debuggable` property from the application manifest file. You
    can also set this property to `false`.
  prefs: []
  type: TYPE_NORMAL
- en: Thirdly, if your application communicates with a server, check that the configured
    URL is the production one. It is possible that during the debug phase, you referenced
    to a URL of a server in a pre-release environment.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, set the correct value for the `android:versionCode` and `android:versionName`
    properties from the application manifest file. The version code is a number (integer)
    that represents the application version. New versions should have greater version
    codes. This code is used to determine if an application installed in a device
    is the last version, or there is a newer one.
  prefs: []
  type: TYPE_NORMAL
- en: The version name is a string that represents the application version. Unlike
    the version code, the version name is visible to the user and appears in the public
    information about the application. It is just an informative version name to the
    user and is not used for any internal purpose.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specify a value of 1 for the version code and 1.0 for the version name. The
    manifest tag should look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A new version of our application will have a value of 2 for the version code
    and, for example, 1.1 for the version name.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Generating a signed APK
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To generate the signed `APK`, navigate on the menu **Build** | **Generate Signed
    APK**. In the dialog to generate the signed `APK`, we are asked for a certificate.
    The `APK` is signed by this certificate and it indicates that it belongs to us.
  prefs: []
  type: TYPE_NORMAL
- en: If it is our first application, probably we do not have any certificate. Click
    on the **Create new** button to open the dialog box to create a new key store.
    We have to fill in the following information.
  prefs: []
  type: TYPE_NORMAL
- en: '**Key store path**: Path in your system to create the key store. The key store
    is a file with a `.jks` extension. For example, name it as `release_keystore.jks`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Password**: Key store password. You have to confirm it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Alias**: Alias for your certificate and pair of public and private key. For
    example, name it as `releasekey`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Password**: Certificate password. You have to confirm it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Validity**: The certificate will be valid until the validity date. A value
    of 25 years or more is recommended.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Certificate**: Personal information contained in the certificate. Type your
    first and last name, organizational unit, organization, city or locality, state
    or province, and country code. For example, `AS example` as **Organizational Unit**,
    `packtpub` as **Organization**, and `ES` as **Country Code**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Click on **OK**. The dialog box to create the signed `APK` is now loaded with
    the key store data. The next time we create a signed `APK`, we already have a
    certificate and therefore we will click on the **Choose existing** button. Click
    on the **Next** button. In the next step, select the path to save the `APK` file
    and click **Finish**. When the APK is completely generated, we will be informed
    as can be seen from the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Generating a signed APK](img/5273OS_09_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We should have the APK file created in the selected path. Click on the **Show
    in Explorer** button to open the folder containing the generated package, or click
    on the **Close** button to just close the message.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the release APK file, it is recommended to test it again in
    a device before distributing it.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have learned how to make an `APK` file and how to modify our application
    to make it ready for release. We have also learned how to sign our application
    using our developer certificate. By the end of this chapter, the user should have
    generated a signed `APK` prepared for its release.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter we will learn about how to get help using Android Studio.
    We will access Android Studio online documentation and go through the help topics.
    Finally, we will learn about keeping our Android Studio instance updated using
    the built-in feature for it.
  prefs: []
  type: TYPE_NORMAL
