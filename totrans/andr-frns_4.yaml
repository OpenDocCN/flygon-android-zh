- en: Chapter 5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Android device, data, and app security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Information in this chapter
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: • [Data theft targets and attack vectors](#S0015)
  prefs: []
  type: TYPE_NORMAL
- en: • [Security considerations](#S0055)
  prefs: []
  type: TYPE_NORMAL
- en: • [Individual security strategies](#S0080)
  prefs: []
  type: TYPE_NORMAL
- en: • [Corporate security strategies](#S0085)
  prefs: []
  type: TYPE_NORMAL
- en: • [App development security strategies](#S0120)
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is a delicate balance in being both a forensic analyst and a privacy advocate.
    If a device were 100% secured, then forensic investigation of the device would
    fail to return any information. On the other hand, if a device’s security measures
    were completely absent, forensic expertise would hardly be necessary to extract
    meaningful data from the device.
  prefs: []
  type: TYPE_NORMAL
- en: The primary consumers of mobile forensics are law enforcement and government
    agencies. They use and secure many types of sensitive data on mobile devices,
    and they have the mandate and authority to investigate crimes. They rely not only
    on digital forensic analysis, but can also exercise their authority through search
    warrants and subpoenas and compel most organizations to produce needed information
    such as financial records, e-mail, Internet service provider logs, and more.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, corporations need to protect their sensitive data, and at times launch
    internal investigations to ensure security. While their authority does not reach
    beyond their company, in the United States, corporations can exercise wide authority
    pertaining to searches on devices they own.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, individuals have the right to access their own data. Whether they exercise
    this in the pursuit of civil litigation or for other matters, they have the authority
    to do so on devices they own.
  prefs: []
  type: TYPE_NORMAL
- en: In the cases of individuals and corporations, the parties generally have no
    need to recover sensitive information such as credit cards, banking information,
    or passwords on the device they have authority to investigate. Corporations would
    not seek an individual’s credit card data in an internal investigation, and they
    have the means to access corporate e-mail systems and change passwords. In the
    case of individuals, they already have access to their own financial records,
    e-mail, and other such sensitive data. In the case of law enforcement and government
    agencies, they can use their subpoena and search warrant powers to acquire the
    data they seek.
  prefs: []
  type: TYPE_NORMAL
- en: So, in the end, the only people likely to benefit from highly sensitive data
    being stored insecurely on mobile devices are cyber criminals. In the course of
    many individual, corporate, and criminal investigations of mobile devices, we
    have encountered highly sensitive personal information that was not central to
    the case. However, if cyber criminals had access to that device—whether in their
    physical possession or through remote exploits—the data they could gather would
    represent a significant risk to the consumer.
  prefs: []
  type: TYPE_NORMAL
- en: Likewise, corporations are targets for commercial espionage, financial theft,
    intellectual property theft, and a wide variety of other attacks. As many corporations
    move to employee-owned devices, even more control and oversight of the device
    is lost, placing corporate data at great risk.
  prefs: []
  type: TYPE_NORMAL
- en: And finally, law enforcement and government agencies are negatively affected
    by mobile security issues. The agencies are comprised of individuals who share
    the same risk of data exposure as consumers. Like corporations, the agencies themselves
    may be the target of attacks, which seek not only sensitive data that could jeopardize
    investigations or embarrass the agency but also attacks with motives as serious
    as international espionage. And a challenge unique to law enforcement and government
    agencies is that many, many crimes involving mobile devices must be investigated,
    straining already overloaded criminal investigation units and digital forensic
    laboratories.
  prefs: []
  type: TYPE_NORMAL
- en: For these reasons, mobile device security is a rising concern for individuals,
    corporations, and law enforcement and government agencies.
  prefs: []
  type: TYPE_NORMAL
- en: Data theft targets and attack vectors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At this point anyone still reading is quite aware that smartphones, and Android
    devices in particular, contain an enormous amount of information, often blending
    both personal and corporate data. Android devices can be a target of data theft
    as well as a means by which theft can occur (attack vector). Understanding the
    various threats and scenarios will allow security engineers and developers to
    design appropriate controls to mitigate risk. While this chapter cannot possibly
    provide exhaustive coverage of such a broad topic, specific threats and mitigation
    strategies will be covered and should serve as a strong starting point for security
    professionals.
  prefs: []
  type: TYPE_NORMAL
- en: Android Devices as a Target
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Primary focus of mobile security research, exploits, and articles has been on
    smartphones as a target of data theft—and rightfully so. The risks to consumers,
    corporations, and agencies are very real, and most security experts agree that
    malicious software targeting mobile devices is on the rise and will remain a focus
    of cyber criminals.
  prefs: []
  type: TYPE_NORMAL
- en: Mobile devices contain a wealth of personal and corporate data in a highly concentrated
    and portable form. Criminals are generally pragmatic and cyber criminals are no
    exception. If they can exploit one device that contains not only user names, passwords,
    and sensitive data about an individual, but also the same types of information
    about their employers, they will clearly target that opportunity. Furthermore,
    while the data from one mobile app may not provide sufficient information for
    the criminal to achieve their goal, combining the information found from the numerous
    installed applications typically yields an alarmingly complete profile of the
    owner.
  prefs: []
  type: TYPE_NORMAL
- en: Mobile devices are not only easy to lose and relatively easy to steal, but they
    also have a fairly short usage scenario before consumers want the latest model.
    Both of these situations result in a large number of smartphones available for
    purchase through venues such as eBay and Craigslist, and many of the devices are
    not properly wiped leaving personal data intact. Furthermore, malicious code,
    malware, and remote exploits increasingly target mobile devices, and history indicates
    they will result in significant data theft. The extent of their effectiveness
    will only be determined over time; but given the urgent pace of development of
    the operating systems (Android in this case), and the rapid proliferation of mobile
    apps, it is certainly reasonable to expect that many of these attacks will succeed.
  prefs: []
  type: TYPE_NORMAL
- en: Data at Rest
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Data at rest is a term used to describe data that are stored in nonvolatile
    memory and thus are neither located in RAM nor in transit through networks (cellular,
    data, or other networks). The term data at rest is often used in laws and regulations
    and defines one key state where data must be secured.
  prefs: []
  type: TYPE_NORMAL
- en: 'Throughout this book, we highlight different examples of data that an Android
    device contains. Here, let’s consider two fictitious scenarios: one focusing on
    corporate customers and one focusing on an individual.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For the individual, the Android device is used for personal communications,
    personal finance, entertainment, and general information surfing. Examining the
    phone might recover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '• SMS/MMS: All allocated (undeleted) SMS and MMS will be recoverable as well
    as much of the unallocated (deleted but still on the NAND flash). The information
    recovered will include not only the messages themselves, but any attachments including
    pictures, videos, audio files, phone contacts (.vcf file), calendar items, and
    more. There are also many third-party SMS/MMS apps that may include additional
    features.'
  prefs: []
  type: TYPE_NORMAL
- en: '• Call logs: While also available from the wireless carrier, the full call
    logs are recoverable. These could include call attempts that failed to make it
    to the carrier as well as other metadata that we can correlate, such as location
    (this can also be generally estimated based on cell towers) and other activities
    happening on the device prior to the call being placed.'
  prefs: []
  type: TYPE_NORMAL
- en: '• Voice mail: In the case of installed voice-mail applications, such as Verizon’s
    visual voice mail, allocated voice-mail messages are usually recoverable as audio
    files (.OGG). Some unallocated voice-mail messages may be recoverable as well.'
  prefs: []
  type: TYPE_NORMAL
- en: '• Financial apps: While they vary widely, most installed financial apps store
    some data locally or cache web pages. In some cases, the information recoverable
    can include user login, password, account numbers, and transaction details. In
    our testing, for example, the [Mint.com](http://Mint.com) app stored a user name,
    PIN for accessing the local app, and some bank account transaction information.'
  prefs: []
  type: TYPE_NORMAL
- en: '• Personal e-mail: Most installed e-mail apps store the contents of e-mail
    messages in plain text, including e-mail headers (To/From e-mail addresses). In
    some cases, the user credentials including user login and password are also recoverable.
    The standard Android mail app, for example, when used to connect to Hotmail via
    POP3, was found to store the password in plain text.'
  prefs: []
  type: TYPE_NORMAL
- en: '• Web history: Allocated web history including URLs visited, cookies, and cached
    pages are recoverable. Unallocated space may include additional web history information.'
  prefs: []
  type: TYPE_NORMAL
- en: '• Google search history: URLs from Google including search terms.'
  prefs: []
  type: TYPE_NORMAL
- en: '• YouTube: URLs of videos watched.'
  prefs: []
  type: TYPE_NORMAL
- en: '• Pictures and videos: Photos and videos taken by the user, stored on the device,
    related to applications, and others.'
  prefs: []
  type: TYPE_NORMAL
- en: '• Geo-location: GPS coordinates in pictures, other artifacts.'
  prefs: []
  type: TYPE_NORMAL
- en: • Game history and interactions.
  prefs: []
  type: TYPE_NORMAL
- en: In this fictitious situation, a skilled forensic examiner can recover extensive
    information about an individual.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our corporate example, it simply builds on the individual since most devices
    blend the individual’s information with their corporate information. Here are
    some additional items typically recoverable from a corporate device:'
  prefs: []
  type: TYPE_NORMAL
- en: • Corporate e-mail and attachments
  prefs: []
  type: TYPE_NORMAL
- en: • Voice mail and faxes sent via e-mail
  prefs: []
  type: TYPE_NORMAL
- en: • User names, passwords, and domain information
  prefs: []
  type: TYPE_NORMAL
- en: • Wi-Fi access points, information, and passwords
  prefs: []
  type: TYPE_NORMAL
- en: • Calendar items
  prefs: []
  type: TYPE_NORMAL
- en: • Instant Messenger or other communications with employees
  prefs: []
  type: TYPE_NORMAL
- en: • Corporate files stored on the device for convenience
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, if an attacker was looking for an effective way to infiltrate
    a corporation, an employee’s device (or better yet, several employees’ devices)
    can provide many insights and avenues for an attack—not to mention recovering
    sensitive corporate information directly from the device.
  prefs: []
  type: TYPE_NORMAL
- en: 'One concrete example that may raise significant alarm with corporate security
    managers is how Android’s built-in e-mail application stores credentials for an
    e-mail account that uses Microsoft’s exchange ActiveSync (EAS) protocol. The credentials
    used to authenticate to EAS are a user’s active directory domain user name and
    password. Many corporations centralize their authentication, authorization, and
    accounting (AAA) services into an active directory that enables single sign-on
    and simplified management. Overall, the simplification leads to more effective
    security. In the Android mail application (com.android.mail), the user’s EAS is
    stored in plain text in a well-defined location. The database is stored in /data/data/com.android.email,
    Here is an overview of the folders and files:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100056u05-01-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The password is located in the EmailProvider.db in a table called HostAuth
    in a column conveniently named password:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100056u05-02-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In addition to the account’s user name, password, and domain, the full subject
    and body of e-mail are stored in the data directory, as well as attachments, preferences,
    and other information. All are stored in plain text (the term silver platter comes
    to mind).
  prefs: []
  type: TYPE_NORMAL
- en: There are two primary techniques attackers use to access data at rest. The first
    requires physical access to the device and will use a variety of techniques that
    are essentially the same techniques used by forensic examiners and which will
    be explored in [Chapter 6](CHP006.html). While physical access to a device is
    not necessarily easy to achieve, we mention plausible scenarios above, including
    lost or stolen phones as well as phones that are replaced with newer models but
    not securely wiped. In addition, people who travel internationally, especially
    executives at corporations, may find their phones are temporarily confiscated
    and examined by customs officials as they enter a country. In this scenario, the
    officials have unfettered physical access to the device.
  prefs: []
  type: TYPE_NORMAL
- en: The other primary techniques attackers use to access data at rest are remote
    exploits and malicious software. In these scenarios, the attackers are able to
    gain additional privileges by using programmatic and social engineering techniques.
    The techniques may include exploiting vulnerabilities found in the Linux kernel
    and core Android libraries, phishing attacks, or exploiting vulnerabilities in
    apps. In addition, users may inadvertently install apps and grant permissions
    beyond the access needed, thereby allowing malicious software access to data at
    rest. Finally, social engineering remains a highly effective way to compromise
    systems, and mobile devices are not immune from this. Users are accustomed to
    installing a variety of apps, often knowing little about the app provider and
    often trust and freely follow links presented to them in e-mail and SMS, opening
    avenues to social engineering-based attacks.
  prefs: []
  type: TYPE_NORMAL
- en: Data in Transit
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Data in transit (sometimes called data in motion) is a term used to describe
    data that is in transit through networks (cellular, Wi-Fi, or other networks)
    or is located in RAM. The term data in transit is often used in laws and regulations
    and defines another key state where data must be secured.
  prefs: []
  type: TYPE_NORMAL
- en: 'In general, most of the information stored on a device (and described above)
    will, at some point, have traveled through the network. Beyond the data itself,
    quite a bit of information never persisted to the device is transmitted and must
    be protected. Some examples include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '• Passwords: Many applications do not store passwords on the device and require
    the user to authenticate each time the app is opened. The password is therefore
    only transmitted, not stored.'
  prefs: []
  type: TYPE_NORMAL
- en: • Two-factor authentication
  prefs: []
  type: TYPE_NORMAL
- en: • Password reset security responses
  prefs: []
  type: TYPE_NORMAL
- en: • Data displayed in an application but not saved or cached to nonvolatile storage
    (e.g., account numbers and balances)
  prefs: []
  type: TYPE_NORMAL
- en: A good way to demonstrate the data traveling through the network is with an
    example. In this case, a computer running BackTrack 4 (a Linux-based penetration
    testing suite), was connected to a network hub, which also has a Wi-Fi access
    point connected to it. The network interface on the computer is set to promiscuous
    mode, which allows the device to see all traffic on the network hub, even if the
    traffic was not destined for the interface. The urlsnarf program is run which
    intercepts the traffic on the network interface (eth0) and inspects it for URLs.
    If a URL is found, it is printed to screen. Bear in mind, all network traffic
    is intercepted so any unencrypted data such as user names or passwords could be
    similarly captured and viewed.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100056u05-03a-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![image](img/F100056u05-03b-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'There are several well-known techniques that attackers use to compromise data
    in transit, along with new techniques that security researchers either discover
    themselves or practitioners uncover “in the wild.” Some of the well-known techniques
    include:'
  prefs: []
  type: TYPE_NORMAL
- en: • Man-in-the-middle (MITM) attacks
  prefs: []
  type: TYPE_NORMAL
- en: • MITM Secure Sockets Layer (SSL) attacks
  prefs: []
  type: TYPE_NORMAL
- en: • DNS spoofing attacks (including /etc/hosts)
  prefs: []
  type: TYPE_NORMAL
- en: • TMSI overflow baseband attacks
  prefs: []
  type: TYPE_NORMAL
- en: The baseband attacks are a very new technique focusing on the cellular modem
    (baseband) firmware. According to Ralf-Philipp Weinmann who presented his exploit
    at the DeepSec 2010 conference, the baseband firmware is code written in the 1990s.
    Until recently, the technologies behind the GSM networks were poorly understood.
    However, over time researchers have unraveled the protocols and hardware and today
    it is possible to create a rogue GSM station with readily available hardware powered
    by open source software. With control over the GSM network, an attacker can execute
    a TMSI overflow attack that causes a heap overflow in the GSM baseband stack of
    Apple iOS devices prior to 4.2\. This attack can lead to remote code execution
    on the baseband processor ([Ralf-Philipp Weinmann, n.d.](#BIB13)).
  prefs: []
  type: TYPE_NORMAL
- en: While the baseband attack is cutting edge security work, the MITM attacks have
    been around much longer and are well understood and fairly easily executed. Generally,
    these techniques require the attacker to fully control a computer that is between
    the mobile device and the ultimate destination the device is trying to communicate
    with. In addition, the attacker may control key network services or devices such
    as a network switch, Wi-Fi access point, or DNS server, facilitating the attack.
  prefs: []
  type: TYPE_NORMAL
- en: Once the attacker is able to position their computer between the Android device
    and the ultimate destination, they can launch the attack. For this scenario, let
    us assume an Android device connects to a Wi-Fi network unaware that a malicious
    attacker controls the network. The user begins to surf the Internet and ultimately
    decides to check their Twitter account. To keep the example simple, let us assume
    the Twitter app they use does not implement SSL—most do not, although recently
    the official app began to move in this direction.
  prefs: []
  type: TYPE_NORMAL
- en: When they launch the app, it will connect to Twitter’s web site, authenticate,
    and take the user to their account. Of course, in the interim, the attacker was
    capturing the web traffic and now has the Twitter user name and password. If the
    app did use SSL, but did not properly verify the SSL certificate, they would be
    susceptible to an MITM SSL attack, illustrated in [Fig. 5.1](#F0010).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100056f05-01-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 5.1 Man-in-the-middle SSL.
  prefs: []
  type: TYPE_NORMAL
- en: Although such an attack may only capture one password, most users reuse user
    names and passwords for many different sites. Once the attacker has one user name
    and password, they can begin to research more about the consumer and generally
    will be able to find additional systems they can access.
  prefs: []
  type: TYPE_NORMAL
- en: Another very well-known attack leverages interception of HTTP session cookies
    to hijack another user’s authenticated session on a web site and begin acting
    as that user. Eric Butler’s Firesheep extension for the Firefox browser ([http://codebutler.com/firesheep](http://codebutler.com/firesheep))
    demonstrates how easy this type of attack can be. Although using strong encryption
    such as WPA on Wi-Fi and other local measures can make things more difficult,
    as long as web sites do not require HTTPS end-to-end this type of attack remains
    possible.
  prefs: []
  type: TYPE_NORMAL
- en: Android Devices as an Attack Vector
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While the press and many security researchers largely focus on attacks directed
    at mobile devices, a growing concern is use of the Android device as an attack
    vector, particularly in environments where sensitive data are stored. The most
    common scenarios are found in corporations with trade secrets, intellectual property,
    or other data requiring protection. Corporations often implement sophisticated
    systems designed to prevent, or at least detect, the theft of data. These systems
    are not only expensive to purchase, but they generally require skilled staff to
    maintain, monitor, and then act on the information they provide.
  prefs: []
  type: TYPE_NORMAL
- en: Until recently, most data protection systems focused on securing the perimeter
    of the enterprise to keep attackers outside the protected areas. Over time, systems
    designed to protect against internal threats were also developed. The most recent
    systems delve even deeper into the network and infrastructure in an attempt to
    thwart attacks. These systems focus on areas such as data loss prevention (DLP),
    network access control (NAC), and network forensics. However, currently available
    solutions do not yet fully address the threat presented by mobile devices.
  prefs: []
  type: TYPE_NORMAL
- en: Smartphones are obviously popular, and most people use them as intended. Often,
    they are personally owned and heavily used devices, so asking someone to forfeit
    their device is an intrusive request. For these reasons, Android devices and other
    smartphones end up in locations which house sensitive information, and yet no
    one shows concern. If instead someone brought a digital camera, voice recording
    device, camcorder, external hard drive, or their own networking equipment, it
    might raise some eyebrows. Of course, an Android device essentially contains all
    of these features and more in a compact and innocent looking device.
  prefs: []
  type: TYPE_NORMAL
- en: Data Storage
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Perhaps the simplest example of how an Android device can be used to steal information
    is to use it as a USB mass storage device. Until recently, smartphones had very
    little data storage. However, as NAND flash matured, manufacturers realized they
    could cost-effectively create devices that stored many gigabytes of data. Android
    devices today can easily store eight to 16 GB of data on the NAND flash, and many
    devices include an external SD card, which can store an additional 16 GB or more.
  prefs: []
  type: TYPE_NORMAL
- en: Recording Devices
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Android devices are also well equipped to record nearly anything around them.
    They can easily take photographs of sensitive equipment or documents. They can
    also record video that captures a path through a building, including the sounds,
    security stations, windows, stairwells, and other items of interest along the
    way. Finally, Android devices can also passively record audio. All of this can
    be done without drawing any attention.
  prefs: []
  type: TYPE_NORMAL
- en: Circumventing Network Controls
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Perhaps an even more dangerous feature is the ability of an Android device to
    provide a separate network connection for a computer or devices with wireless
    capabilities. There are several ways to achieve this. In one scenario, an attacker
    (perhaps a disgruntled employee) could connect their Android device to their workstation.
    Casual observation may not raise any alarm since many people do this to charge
    their phones while at work. However, by installing a small program on both the
    Android device and the computer, a new network connection is provided to the computer.
    In this case, the traffic routed from the computer and out the Android device
    is completely outside the control of the environment. This connection completely
    circumvents the firewall, network access control, data loss prevention, and other
    security controls in place at the company.
  prefs: []
  type: TYPE_NORMAL
- en: The newest Android devices do away with the USB cables and software packages
    needed in the above scenario. Instead, the Android device becomes a fully functional
    wireless access point through which the computer can connect. This scenario just
    as effectively circumvents the network security controls in place and can be performed
    with the device in a briefcase or pocket.
  prefs: []
  type: TYPE_NORMAL
- en: Really sneaky techniques
  prefs: []
  type: TYPE_NORMAL
- en: If anyone believes cyber criminals or other attackers are not intelligent and
    creative, they are showing a serious lapse in judgment. So, let’s think outside
    the box using some of the techniques described above.
  prefs: []
  type: TYPE_NORMAL
- en: For this scenario, the attacker is an employee who works at a company, which
    has significant trade secrets and intellectual property. (The attacker would not
    necessarily need to work there; however, it keeps the example simple.) Many of
    the executives who have access to this information also have laptops and smartphones.
    Many of these same executives drink coffee at a popular cafe, which offers free
    Wi-Fi. The wireless access point at the coffee shop is called “indigo” and since
    they do not want to require a password, the access point is open and unencrypted.
    While the executives are drinking, eating, or meeting at the cafe, they connect
    their smartphones and laptops to the Wi-Fi.
  prefs: []
  type: TYPE_NORMAL
- en: When they return to the office, they leave the wireless active on their smartphones
    and laptops. The disgruntled employee, of course, knows about the cafe’s wireless
    access point and decides to enable the access point feature on his Android device.
    Naturally, he has root access on his device, so he also installs and runs software
    that allows him to capture the network traffic. When one of the executives gets
    close to his Android device, the smartphone or laptop associates with his access
    point. He is then able to intercept traffic and either capture sensitive files
    and communications or perhaps capture credentials he could then use to access
    key network resources.
  prefs: []
  type: TYPE_NORMAL
- en: While there are obstacles the attacker would have to overcome to implement this
    scenario, it is highly plausible and illustrates the unique risks Android devices
    present when used as an attack vector.
  prefs: []
  type: TYPE_NORMAL
- en: Security considerations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Security, like development, is an art. There might be some who do not agree
    with that statement but very few of those individuals are going to read a forensics
    and security book. Security is an artistic process in the sense that art is “the
    products of human creativity” and “a superior skill that you can learn by study
    and practice and observation” ([WordNet Search, n.d.](#BIB19)). So why is all
    of this relevant? Successful security strategies require the right mix and balance
    of experience, judgment, risk assessment, creativity, observation, skill, and
    maybe even a little bit of luck. This section aims to cover a few broad concepts
    related to Android and security.
  prefs: []
  type: TYPE_NORMAL
- en: Security Philosophy
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Security is nearly always a compromise, weighing the risk of an attack against
    the costs (financial or other costs) of mitigating that risk. While in theory
    an entirely secure system is possible, in practice it is nearly impossible to
    achieve, especially when social engineering attacks are available. The task of
    securing a system is very difficult even when the security professional controls
    access to the device including physical and remote access.
  prefs: []
  type: TYPE_NORMAL
- en: Mobile devices are even more difficult to secure than traditional systems. Most
    of the control that a corporate security engineer would have over a computer system
    is not possible on an Android device. First, the device is comprised of hardware
    and software assembled and maintained by a large, complex, and diverse group of
    participants including the core Android team, software and hardware from the manufacturer,
    and software and hardware from the wireless carrier. Furthermore, the device owner
    has the ability to install custom apps and even modify the device significantly
    if they have sufficient privileges. Finally, the device travels through many networks,
    none of which can be fully trusted. Yes, securing mobile devices is a major challenge.
  prefs: []
  type: TYPE_NORMAL
- en: 'In spite of these challenges, certain security controls could be engineered
    into the device. To summarize an overall strategy and philosophy, the following
    meme is useful:'
  prefs: []
  type: TYPE_NORMAL
- en: '*If you secure it, they won’t come.*'
  prefs: []
  type: TYPE_NORMAL
- en: The concept—adapted from Universal Studio’s 1989 film “Field of Dreams,” where
    a voice is heard encouraging the lead character to build a baseball field on his
    Iowa farm—is simple. In the movie, the voice repeatedly says, “If you build it,
    he will come” ([Ten, n.d.](#BIB16)). Eventually, the lead character does build
    the field and, in fact, mysterious guests do show up. But you’ll have to watch
    the movie for the complete story.
  prefs: []
  type: TYPE_NORMAL
- en: So, how does this apply to mobile security? There is a wide margin between the
    ideal cryptographically secure system and a system that stores all information
    in plain text in a well-organized and known structure as described in the previous
    com.android.email example. Since the mobile device is a risk from many different
    vectors, even encrypted data can be compromised. However, providing some level
    of obfuscation or encryption will complicate the process required for an attacker
    to compromise the data. While this approach is not 100% secure, attackers are
    pragmatic and tend to target the easily accessible data.
  prefs: []
  type: TYPE_NORMAL
- en: One argument against this approach is that obfuscation or encryption that can
    be compromised provides a false sense of security causing the user to act more
    carelessly with the device in the belief that the security of their data is impenetrable.
    Whereas if the data are stored as plain text and the users are aware of the risk,
    they will use significant caution with the device.
  prefs: []
  type: TYPE_NORMAL
- en: Ultimately, the individual and corporate consumers of mobile devices will steer
    the mobile security ecosystem in the direction they value through their purchasing
    decisions. This necessarily depends on education. Consumers must be sufficiently
    aware of the data security risks and possible solutions available.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a number of potential solutions which, while not providing a cryptographically
    secure system, do improve the security of the data by increasing the complexity
    of a successful attack. The list below illustrates several concepts:'
  prefs: []
  type: TYPE_NORMAL
- en: 1. Require the user to enter the password the first time an app is run after
    a reboot, and only store the password in memory. In this case, the password is
    not stored on the device in plain text. However, it is in memory and an attacker
    with sufficient privileges on the device could recover the password.
  prefs: []
  type: TYPE_NORMAL
- en: 2. Further, secure the concept above by encrypting the password stored in memory
    with a key based on time, pseudo-random data, etc. In this fashion, the attacker
    now must have root on the device and instead of just dumping the processes’ memory,
    they must locate the encryption key, the encrypted password, and the algorithm
    used to comprise the password.
  prefs: []
  type: TYPE_NORMAL
- en: 3. Building further, the memory password could expire in time or the encryption
    key used in memory could be changed.
  prefs: []
  type: TYPE_NORMAL
- en: 4. If the password is stored on the NAND flash, encrypt it with a pass phrase,
    which is entered after the device reboots.
  prefs: []
  type: TYPE_NORMAL
- en: Although none of the ideas provide a completely secure system, the level of
    effort and privilege needed to compromise the data are orders of magnitude higher
    than compromising sensitive data stored in plain text, and thus deters most attackers.
  prefs: []
  type: TYPE_NORMAL
- en: US Federal Computer Crime Laws and Regulations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are a number of federal laws in the US that relate to the security of
    data at rest and in transit. The goal of this section is to simply enumerate several
    of the more relevant laws and provide a brief background on them. In total, more
    than 40 federal statues exist which can be used in the prosecution of computer-related
    crimes ([Country, n.d.](#BIB2)). In addition, each State typically has laws and
    regulations addressing computer crimes.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the Federal level, the US Department of Justice (DoJ) divides computer crime
    into three distinct areas, two of which have broad application to the types of
    crimes involved when compromising a mobile device. The two areas are ([Country,
    n.d.](#BIB2)):'
  prefs: []
  type: TYPE_NORMAL
- en: 1. Crimes that target a computer network or device directly including hacking,
    viruses, worms, malware, sniffers, and others.
  prefs: []
  type: TYPE_NORMAL
- en: 2. Crimes committed using computer networks or devices such as fraud, identity
    theft, corporate espionage, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: The Computer Fraud and Abuse Act (CFAA) focuses on attacks against government
    and financial institution computers or computers involved in interstate or foreign
    commerce. The Act covers narrow areas, such as accessing computers without proper
    authorization to gain data related to national security issues, as well as more
    broad sections, such as accessing a computer without proper authorization in order
    to commit fraud or to gain something of value. The CFAA was amended by the National
    Information Infrastructure Protection Act to cover new abuses and to include those
    intending to commit the crime.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Electronic Communications Privacy Act (ECPA) is another law covering computer
    crimes, which makes it illegal to intercept stored or transmitted electronic communication
    without authorization. The ECPA contains several key areas:'
  prefs: []
  type: TYPE_NORMAL
- en: • Communication in transit including oral, wire, or electronic communications
    (Wiretap).
  prefs: []
  type: TYPE_NORMAL
- en: • Data at rest (Stored Communication Act) that protects data stored on nonvolatile
    memory.
  prefs: []
  type: TYPE_NORMAL
- en: • Collecting communication metadata such as phone numbers, IP addresses, and
    other data used to route communication (but not the message itself). This is called
    the “pen registers and trap and trace devices,” which refers to the actual devices
    and techniques used to capture the information.
  prefs: []
  type: TYPE_NORMAL
- en: One final law worth pointing out is the Economic Espionage Act, which passed
    in 1996 and focused on the theft of trade secrets. Prior to the law’s enactment,
    it was difficult to prosecute economic or corporate espionage. However, by defining
    trade secrets and requiring the owner of the information to have taken reasonable
    measures to protect the secret, it was now possible to criminalize the theft of
    intellectual property.
  prefs: []
  type: TYPE_NORMAL
- en: This section barely addresses the significant body of legal work which can be
    used to prosecute computer crimes. However, it should be clear that there are
    laws designed to protect data both in transit and at rest.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to Federal and State laws that criminalize computer crimes, a host
    of regulatory bodies govern corporations who operate in industries which involve
    sensitive data. Many of the regulations provide not only specific guidelines and
    requirements the firms must follow, but also civil and criminal statues with both
    financial penalties and, in the most serious cases, may even involve incarceration.
    A list of the better known regulations include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: • Payment card industry data security standard (PCI)
  prefs: []
  type: TYPE_NORMAL
- en: • Health Insurance Portability and Accountability Act (HIPAA)
  prefs: []
  type: TYPE_NORMAL
- en: • HITECH Act Enforcement Interim Final Rule (additions to HIPAA)
  prefs: []
  type: TYPE_NORMAL
- en: • Federal Information Security Management Act (FISMA)
  prefs: []
  type: TYPE_NORMAL
- en: • Family Education Rights and Privacy Act of 1974 (FERPA)
  prefs: []
  type: TYPE_NORMAL
- en: • Gramm-Leach-Bliley Financial Services Modernization Act of 1999 (GLBA)
  prefs: []
  type: TYPE_NORMAL
- en: • Sarbanes Oxley (SOX)
  prefs: []
  type: TYPE_NORMAL
- en: Clearly the US Congress recognizes the importance of data and computer security
    and provides a wide array of laws, regulations, and other resources to compel
    and enforce the security measures necessary to successfully operate the systems
    critical to commerce.
  prefs: []
  type: TYPE_NORMAL
- en: Open Source Versus Closed Source
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is active debate discussed often on the Internet about whether open source
    software is more secure than closed source software. As with many long-standing
    debates, the main proponents of each side are committed to their conclusions and
    the debate continues on.
  prefs: []
  type: TYPE_NORMAL
- en: 'The basic reason behind the belief that open source software is more secure
    is that the code can be examined for flaws and quickly fixed. Implicit in this
    belief are two assumptions:'
  prefs: []
  type: TYPE_NORMAL
- en: 1. Developers will perform security code reviews on open source projects.
  prefs: []
  type: TYPE_NORMAL
- en: 2. The software’s maintainer will quickly patch the security flaws.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, if both the steps are not taken, then clearly the open source software
    will contain security flaws and without the patch, attackers will have precisely
    the information they need to exploit the bug. However, if both of these steps
    are taken, then the security of the code will evolve with the benefit of many
    people examining the code and the resulting patches.
  prefs: []
  type: TYPE_NORMAL
- en: In contrast, the closed source model relies on a company developing secure code,
    scouring their code for security flaws, patching the flaws, and then distributing
    the updates in a timely manner to subscribers. For anyone tasked with securing
    desktops running Microsoft’s Windows platforms, they are well aware of the continuous
    stream of patches released on the second Tuesday of each month, which has been
    dubbed “Patch Tuesday.” Microsoft also releases patches for serious exploits outside
    of the scheduled Patch Tuesdays.
  prefs: []
  type: TYPE_NORMAL
- en: In a fairly high profile finding, Microsoft acknowledged ([Microsoft Security
    Advisory, n.d.](#BIB12)) that security researcher Tavis Ormandy discovered a 17-year-old
    security flaw in every 32-bit version of Microsoft Windows since 1993 (Windows
    NT through Windows 7) ([Johnston, n.d.](#BIB11)). Ormandy posted the full details
    of the exploit to the Full Disclosure mailing list nearly seven months after notifying
    Microsoft of the vulnerability on June 12, 2009 ([[Full-disclosure] Microsoft,
    n.d.](#BIB9)). It is noteworthy that the official advisory to Microsoft’s clients
    only happened after Ormandy posted the disclosure and after that point, Microsoft
    acknowledged the security flaw within one day.
  prefs: []
  type: TYPE_NORMAL
- en: 'In another recent example, security firm Matta Consulting discovered numerous
    critical security flaws in Cisco System’s Unified Videoconferencing platform.
    The flaws enable a malicious third party to gain full control of the device, harvest
    user passwords, and possibly launch an attack against other parts of the target
    infrastructure ([Cisco Unified Video, n.d.](#BIB3)). Cisco acknowledged the flaws
    in their advisory with the hard-coded passwords representing the most alarming
    flaw:'
  prefs: []
  type: TYPE_NORMAL
- en: The Linux shadow password file contains three hard-coded user names and passwords.
    The passwords cannot be changed, and the accounts cannot be deleted. Attackers
    could leverage these accounts to obtain remote access to a device by using permitted
    remote access protocols.
  prefs: []
  type: TYPE_NORMAL
- en: ([Cisco Security Advisory, n.d.](#BIB4))
  prefs: []
  type: TYPE_NORMAL
- en: 'In the end, software development is a creative endeavor which, despite all
    best efforts and intention, will likely contain flaws. The overall security of
    the software or system is directly related to how quickly the flaws are discovered
    and resolved. Although over eight years old (an eternity from a security standpoint),
    David A. Wheeler’s “Secure Programming for Linux and Unix HOWTO” provides an excellent
    overview of the debate and represents both the sides. He quotes Elias Levy (also
    known as Aleph One and moderator of the Bugtraq full disclose list in addition
    to CTO and co-founder of SecurityFocus) as saying:'
  prefs: []
  type: TYPE_NORMAL
- en: So does all this mean Open Source Software is no better than closed source software
    when it comes to security vulnerabilities? No. Open Source Software certainly
    does have the potential to be more secure than its closed source counterpart.
    But make no mistake, simply being open source is no guarantee of security.
  prefs: []
  type: TYPE_NORMAL
- en: ([Secure Programming, n.d.](#BIB15))
  prefs: []
  type: TYPE_NORMAL
- en: 'At the end of his HOWTO, Wheeler concludes that open source software can be
    more secure if the following happens:'
  prefs: []
  type: TYPE_NORMAL
- en: • If the code is first closed source and then opened, it will start as less
    secure but over time will improve.
  prefs: []
  type: TYPE_NORMAL
- en: • People must review the code.
  prefs: []
  type: TYPE_NORMAL
- en: • The reviewers and developers must know how to write secure code.
  prefs: []
  type: TYPE_NORMAL
- en: • Once flaws are found, they must be quickly fixed and distributed.
  prefs: []
  type: TYPE_NORMAL
- en: Ultimately, each individual will have to decide if they believe open source
    or closed source software is more secure. Since large parts of Android system
    are indeed open source, it is likely the software will initially have a number
    of flaws discovered, but over time they will be addressed resulting in a more
    secure system.
  prefs: []
  type: TYPE_NORMAL
- en: Encrypted NAND Flash
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The techniques and strategies for secure data in transmission are, generally
    speaking, more mature, vetted, and secure than the technologies used to securely
    store data at rest. The reason data in transmission are easier to secure is because
    the duration of time in which the information must be protected is short and well
    defined. After the transmission of data in transit is complete, the keys protecting
    the data can be discarded. In contrast, data at rest are nonvolatile and must,
    at any time, be accessible to the user. That means that the keys for decryption
    must be available on the device (or the user must type them every time, which
    is impractical) and thus they are accessible to an attacker.
  prefs: []
  type: TYPE_NORMAL
- en: 'Bruce Schneier, a respected security technologist, cryptographer, and author,
    summarizes the difficulties of using encryption to protect data at rest:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Cryptography was invented to protect communications: data in motion. This is
    how cryptography was used throughout most of history, and this is how the militaries
    of the world developed the science. Alice was the sender, Bob the receiver, and
    Eve the eavesdropper. Even when cryptography was used to protect stored data—data
    at rest—it was viewed as a form of communication. In “Applied Cryptography,” I
    described encrypting stored data in this way: “a stored message is a way for someone
    to communicate with himself through time.” Data storage was just a subset of data
    communication.'
  prefs: []
  type: TYPE_NORMAL
- en: In modern networks, the difference is much more profound. Communications are
    immediate and instantaneous. Encryption keys can be ephemeral, and systems like
    the STU-III telephone can be designed such that encryption keys are created at
    the beginning of a call and destroyed as soon as the call is completed. Data storage,
    on the other hand, occurs over time. Any encryption keys must exist as long as
    the encrypted data exists. And storing those keys becomes as important as storing
    the unencrypted data was. In a way, encryption doesn’t reduce the number of secrets
    that must be stored securely; it just makes them much smaller.
  prefs: []
  type: TYPE_NORMAL
- en: 'Historically, the reason key management worked for stored data was that the
    key could be stored in a secure location: the human brain. People would remember
    keys and, barring physical and emotional attacks on the people themselves, would
    not divulge them. In a sense, the keys were stored in a “computer” that was not
    attached to any network. And there they were safe.'
  prefs: []
  type: TYPE_NORMAL
- en: This whole model falls apart on the Internet. Much of the data stored on the
    Internet is only peripherally intended for use by people; it’s primarily intended
    for use by other computers. And therein lies the problem. Keys can no longer be
    stored in people’s brains. They need to be stored on the same computer, or at
    least the network, that the data resides on. And that is much riskier.
  prefs: []
  type: TYPE_NORMAL
- en: ([Schneier on, n.d.](#BIB14))
  prefs: []
  type: TYPE_NORMAL
- en: Several other platforms, notably later models of Apple’s iPhones, implement
    encryption on the user portions of the NAND flash. However, in the case of the
    3.x versions of Apple’s iOS, the encryption was quickly defeated for the reasons
    highlighted previously. As of March 2011, the encryption of iOS 4.x has not yet
    been broken. However, it is likely that over time this will happen.
  prefs: []
  type: TYPE_NORMAL
- en: The forensic strategies for dealing with encrypted NAND flash differ from unencrypted
    ones. If the NAND flash is not encrypted, the memory could be physically read
    via a chip-off or JTAG process and then decoded. However, with an encrypted NAND
    flash, this technique will no longer work. Instead, to extract the unencrypted
    data, the process executes on the device while it is running. In forensics, this
    is referred to as a live acquisition and is used in other scenarios such as a
    workstation or server that encrypts the contents of the hard drive or other storage
    device.
  prefs: []
  type: TYPE_NORMAL
- en: Encryption will play a growing role in securing both data in transit and data
    at rest. However, the data at rest will nearly always be vulnerable to attack.
    In this instance, the security designers must find the balance between a cryptographically
    secure system and one that offers little protection. The compromise will result
    in a system that provides reasonable protection of the data at rest and in transit
    without encumbering the user to the point where device is no longer useful.
  prefs: []
  type: TYPE_NORMAL
- en: Individual security strategies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While the large part of this chapter has focused on issues with mobile devices
    and data security, there are user practices that can minimize the risk of compromise.
    As before, this list is not intended to be comprehensive. Rather, it provides
    a solid basis for securing the device.
  prefs: []
  type: TYPE_NORMAL
- en: 1. Always use a data network you trust. For mobile devices, this may include
    your wireless carrier’s data network or Wi-Fi access point at work, home, or other
    trusted locations. This ensures that the networks used to transmit sensitive data
    are not malicious or used by an attacker to compromise your sensitive data. Although
    a carrier’s network can be compromised, there is far greater security in place
    at a large company than on a smaller data network. Furthermore, while it is easy
    to acquire, setup, and manage a rogue Wi-Fi access point, it is far more difficult
    to implement rogue cellular data connections. So, in general, the cellular data
    connections provided by the wireless carriers reduce the risk of attack.
  prefs: []
  type: TYPE_NORMAL
- en: 2. Always place a pass code on the Android device to thwart a casual attacker
    from gaining access to your sensitive data. Ideally, the Android device should
    perform a full wipe of the user data if the pass code is input incorrectly more
    than a set number of attempts. That way an attacker cannot compromise your pass
    code through brute force. Also, if possible use the option for an alphanumeric
    password over a four-digit numeric PIN or pattern lock. The alphanumeric codes
    provide far greater security by allowing more complex pass codes. Think of the
    pass code on your device as similar to a password on your computer. It is hard
    to imagine (perhaps just for security researchers) that anyone would have a computer
    that did not have a password.
  prefs: []
  type: TYPE_NORMAL
- en: 3. Check the free appWatchdog service at [http://viaforensics.com/appwatchdog/](http://viaforensics.com/appwatchdog/)
    to determine if the applications you use pass a basic security test. appWatchdog
    audits mobile apps to determine if they securely store your user name, password,
    and sensitive app data. The web site provides a result of pass, warn, or fail
    for each area tested and details of what information was recovered. Currently,
    a mobile app version of appWatchdog is being developed that will allow the user
    to install directly on an Android (or iPhone) device and determine the audit status
    of installed apps. It will also allow the user to directly contact the app developer
    to request resolution to an audit issue as well as other notification options.
  prefs: []
  type: TYPE_NORMAL
- en: 4. Never click on links in SMS messages and ideally avoid links in e-mail messages,
    especially shortened links like bit.ly or goo.gl. Smartphone and computer tablet
    users are three times more susceptible to e-mail phishing scams than traditional
    PC and laptop users, according to research by security firm Trusteer ([Donohue,
    n.d.](#BIB7)). The research determined that it is more difficult to identify fraudulent
    web sites from a smartphone due to reduced screen sizes and lack of software protecting
    the user from phishing scams. The best way to ensure that you are visiting the
    valid web site is to either type it in manually, or (perhaps a better approach)
    allow a trusted search engine to locate the web site on your behalf. This allows
    the user to type (or mistype) the name of the company and allows the search engine
    to find the appropriate sites. Some search engines, such as Google, are now attempting
    to deter malicious or compromised web sites and this provides an additional layer
    of protection for smartphone users.
  prefs: []
  type: TYPE_NORMAL
- en: 5. Consider using an alternate web browser on your Android device. As mentioned
    previously, cyber criminals are pragmatic, which is why for many years they focused
    on attacking Microsoft Windows and largely ignored operating systems such as Linux
    and Mac. In the mobile environment, many of the bundled browsers are based on
    the open source WebKit project. As such, it is likely that initial web attacks
    against Android and other smartphone devices will focus on browsers utilizing
    WebKit. By using an alternative browser, you may find far fewer attacks targeting
    your platform. However, this may only provide a nominal and temporary increase
    in security.
  prefs: []
  type: TYPE_NORMAL
- en: 6. When installing apps from the Android Market, ensure that the app is only
    granted permissions necessary to operate. If you are installing an enhanced alarm
    clock application and it requests access to your SMS and web history data, you
    should not grant it permission. Although this will not protect you from all malicious
    apps, it is an important layer of Android’s security and one the user must take
    responsibility for.
  prefs: []
  type: TYPE_NORMAL
- en: Over time, not only will this list grow and evolve but hopefully new security
    controls will be introduced, which will help secure the mobile device and sensitive
    data.
  prefs: []
  type: TYPE_NORMAL
- en: Corporate security strategies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Corporations typically have more complex security requirements than individuals
    because they are responsible for protecting the entire corporation from both internal
    and external attacks. In addition, they may belong to a regulated industry required
    to operate under some of the guidelines listed earlier in this chapter. For these
    reasons, more fine grained control over assets, including mobile devices, is required.
  prefs: []
  type: TYPE_NORMAL
- en: Policies
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'One important aspect of mobile device management in corporations is a close
    evaluation of current policies making sure to update them for the new situations
    presented by mobile devices. Most policies do not account for smartphone and tablet
    devices and the situations that might arise through their use. Although a complete
    review of corporate policies is warranted, there are at least a few which will
    certainly require attention. They include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: • Acceptable Use (for company resources, now including mobile devices)
  prefs: []
  type: TYPE_NORMAL
- en: • Data Security (obviously want to place policies around mobile devices)
  prefs: []
  type: TYPE_NORMAL
- en: • Backups and Data Retention (will likely be impacted, especially from an electronic
    discovery standpoint)
  prefs: []
  type: TYPE_NORMAL
- en: Although updating policies does not directly improve security through information
    technology, it provides critical direction not only to the employees but also
    to the security architects and those involved in internal investigations and disciplines.
    If you have an outdated policy in place, it can be used against you. For example,
    if your Acceptable Use policy simply adds mobile devices into the description
    of covered resources, then all of the policies in place that allow a corporation
    to investigate a device they own are now explicitly defined. Otherwise in a contentious
    legal battle, it is quite possible opposing counsel would make the case that the
    mobile devices were not covered by policy and thus the evidence found on the device
    (e.g., company confidential documents) is not admissible. While your legal team
    may refute the argument, it is far less expensive and more effective to simply
    update the policy to include mobile devices.
  prefs: []
  type: TYPE_NORMAL
- en: Password/Pattern/PIN Lock
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Passwords, pattern, and PIN locks are neither consistently nor effectively implemented
    on Android devices. However, they do offer some protection. These features have
    improved since they first appeared and will likely continue to improve over time.
    With the exponential increase in processing power and a simultaneous reduction
    in cost, using brute force techniques to crack protection mechanisms is affordable
    and more common each year. However, if the device is lost or stolen, it provides
    a basic level of protection that would be effective against nontechnical criminals.
  prefs: []
  type: TYPE_NORMAL
- en: All pass codes are not created equal. The most effective pass code is the one
    that allows or requires an alphanumeric password. While entering these codes is
    far more cumbersome for the users, it greatly increases the effort needed to crack
    the password. The next most effective pass code is the pattern lock found in the
    first Android device and many since then. The pattern technique introduced a new
    way to approach locking the device and as such required the user to learn the
    new technique resulting in a more effective lock. Instead of reusing old approaches
    (such as the PIN), the user had to come up with a new pattern and thus it would
    be hard for an attacker to use information about the person to guess the pattern
    lock. Perhaps for familiarity, the venerable PIN was also included in many Android
    devices. While it would be better to use a PIN than leave the phone unlocked,
    the PIN is probably the easiest lock to defeat. They typically have a finite number
    of digits (four is the common number), which dangerously constrains the number
    of overall combinations. Furthermore, the PIN has been used to secure many other
    system, most well known are Automated Teller Machine (ATM) cards. People tend
    to reuse PINs and to base them on easily discoverable facts about them.
  prefs: []
  type: TYPE_NORMAL
- en: As suggested in the individual strategies in the previous section, the pass
    code lock should have a maximum number of attempts allowed after which the device
    should perform a factory reset and full wipe of the user data partitions. This
    will prevent a brute force attack against the easier-to-defeat pass codes (i.e.,
    the four-digit PIN) and provide an additional layer of security.
  prefs: []
  type: TYPE_NORMAL
- en: Remote Wipe of Device
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One of the most sought after security features for smartphones by corporate
    security managers is the ability to remotely wipe the device. The feature is,
    without a doubt, extremely important and powerful. However, it is a very fragile
    feature, and the confidence it instills in security managers might be too high.
  prefs: []
  type: TYPE_NORMAL
- en: The basic premise behind the remote wipe is that the company can issue a command
    to the device causing it to wipe all data and perform a factory reset. Many of
    the smartphone platforms are building hooks into their system to allow this control.
    However, the features were not designed from the beginning and do not yet provide
    enough reliability to ensure high security.
  prefs: []
  type: TYPE_NORMAL
- en: Even provided the remote wipe hooks are present and working effectively, it
    is quite easy to prevent the remote wipe command by simply not placing the device
    on the network using airplane mode, removing the SIM card, or other such techniques.
    In fact, some corporation might first disable a terminated employee’s cellular
    account and then send the remote wipe command. In most cases, they will have inadvertently
    removed their ability to remotely wipe the device. While the device is no longer
    connected to the network, it will still have full access to the data. Savvy device
    owners who have root access on their device could also look into filtering such
    requests to simply ignore them. However, the largest issue is simply that the
    remote wipe feature is not sufficiently mature.
  prefs: []
  type: TYPE_NORMAL
- en: In Android 2.1 on the Motorola Droid, the remote wipe feature triggered using
    Microsoft’s Exchange ActiveSync did not cause the device to wipe data. However,
    when the same feature was tested on Android 2.2 on the Motorola Droid, the remote
    wipe did occur. If you are relying on the remote wipe feature for data security,
    you need to ensure that the remote wipe ability works on each of the Android hardware
    platforms for each Android version installed. This, unfortunately, is a difficult
    undertaking for most IT departments because the devices are widely distributed
    and do not have a good central administrative tool (more on that later).
  prefs: []
  type: TYPE_NORMAL
- en: One fairly simple technique to overcome the limitations of remote wipe is to
    install an application on the device that will automatically wipe the device if
    it is unable to check in with the enterprise system after a specific amount of
    time. Using such a technique (often called a watchdog or countdown app), provides
    a significant improvement in data security because the device will automatically
    erase if unable to connect to the corporate system after a certain number of attempts.
    So, even if a device is offline, security managers can ensure all corporate data
    will be wiped within a specific time frame. Of course, if a user disconnects his
    or her phone from the network for a long time for legitimate reasons, it will
    result in an erased phone, so user education on this feature is important. At
    this time, very few (if any) applications exist that support this feature.
  prefs: []
  type: TYPE_NORMAL
- en: There is another technique that addresses data residing on the NAND flash. It
    is possible to develop an app (and a few do exist) that would routinely erase
    the unused (unallocated) space on the device’s user data storage partition. The
    benefit of this being that (most) deleted data would no longer be recoverable,
    even with a physical image. This erasing can be accomplished by having the app
    simply write a file with 0xFF until the partition fills up. At that point, the
    file is deleted and thus the allocated space has been overwritten. Of course,
    there can be many repercussions to such a program, including shortening the life
    of the NAND flash, causing the device to become unresponsive while writing the
    file, wearing down the battery, or causing other apps to crash or lose data if
    they try to access the partition when it is completely full.
  prefs: []
  type: TYPE_NORMAL
- en: Upgrade to Latest Software
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Although the smartphone market is innovating quickly, it is far more difficult
    for enterprises to upgrade core infrastructure such as their Microsoft Exchange
    environment. However, the last two versions of Microsoft Exchange offer enhanced
    mobile management and security mechanisms. When Exchange is upgraded to the latest
    version (currently Exchange 2010), additional options to securely manage your
    device are available. Ensuring that the corporate infrastructure is up-to-date
    will improve not only the manageability but the overall security of connected
    mobile devices.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, the mobile devices themselves should apply updates as they become
    available. While in some cases a new bug or security flaw could be introduced,
    in general the updated software will not only patch previously discovered flaws
    but also add additional management and security features. The example from the
    remote wipe section above illustrates this well as Android 2.1 on the Motorola
    Droid did not properly execute the remote wipe command whereas Android 2.2 did.
  prefs: []
  type: TYPE_NORMAL
- en: Remote Device Management Features
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Corporate customers have a growing need to manage the mobile devices connected
    to their infrastructure. Although the list of features will vary between companies,
    a general list of requirements might include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: • remotely provision devices
  prefs: []
  type: TYPE_NORMAL
- en: • remotely wipe devices
  prefs: []
  type: TYPE_NORMAL
- en: • enforce IT policies such as pass code, encryption, minimum OS versions, upgrade
    policies, allowed/denied applications, and more
  prefs: []
  type: TYPE_NORMAL
- en: • remotely install/upgrade apps
  prefs: []
  type: TYPE_NORMAL
- en: As of Android 2.2, new device administration application programming interfaces
    (APIs) were introduced. They include the ability for apps to incorporate the types
    of policy management listed earlier. Specifically, they support ([Device Administration,
    n.d.](#BIB6)) the following abilities.
  prefs: []
  type: TYPE_NORMAL
- en: '• Password enabled: Requires that devices ask for PIN or passwords.'
  prefs: []
  type: TYPE_NORMAL
- en: '• Minimum password length: Sets the required number of characters for the password.
    For example, you can require PIN or passwords to have at least six characters.'
  prefs: []
  type: TYPE_NORMAL
- en: '• Alphanumeric password required: Requires that passwords have a combination
    of letters and numbers. They may include symbolic characters.'
  prefs: []
  type: TYPE_NORMAL
- en: '• Maximum failed password attempts: Specifies how many times a user can enter
    the wrong password before the device wipes its data. The Device Administration
    API also allows administrators to remotely reset the device to factory defaults.
    This secures data in case the device is lost or stolen.'
  prefs: []
  type: TYPE_NORMAL
- en: '• Maximum inactivity time lock: Sets the length of time since the user last
    touched the screen or pressed a button before the device locks the screen. When
    this happens, users need to enter their PIN or passwords again before they can
    use their devices and access data. The value can be between 1 and 60 min.'
  prefs: []
  type: TYPE_NORMAL
- en: • Prompt user to set a new password.
  prefs: []
  type: TYPE_NORMAL
- en: • Lock device immediately.
  prefs: []
  type: TYPE_NORMAL
- en: • Wipe the device’s data (i.e., restore the device to its factory defaults).
  prefs: []
  type: TYPE_NORMAL
- en: On the Device Administration page on [developer.android.com](http://developer.android.com)
    ([Device Administration, n.d.](#BIB6)), several examples of this API are demonstrated,
    as illustrated in [Fig. 5.2](#F0015).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100056f05-02-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 5.2 Device administration API sample.
  prefs: []
  type: TYPE_NORMAL
- en: When a user installs an app that uses the new administration APIs, they are
    presented with an Enable Device Admin screen, shown in [Fig. 5.3](#F0020).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100056f05-03-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 5.3 Enable device admin.
  prefs: []
  type: TYPE_NORMAL
- en: Although this is an improvement over no device management, it falls well short
    of the needs and requirements of corporate customers. Also, though the APIs exist,
    developers must incorporate them into their apps.
  prefs: []
  type: TYPE_NORMAL
- en: Several companies are trying to fill the void in full feature device management.
    However, the solutions for smartphones are also still quite immature. Investing
    in a third-party solution may address a short-term need. However, over time, Android,
    the manufacturers, and device developers will develop more sophisticated management
    features and tools. Similarly, many corporate devices synchronize with the e-mail
    system using Microsoft’s Exchange ActiveSync (EAS) protocol and management features
    continue to mature in this platform. So if immediate security concerns necessitate
    better remote management of devices, a corporation might consider implementing
    third-party tools for an incremental improvement in security. However, there is
    a risk that these tools will not meet or exceed the manufacturers’ tools and thus
    the technology and personnel investment will not prove worthwhile.
  prefs: []
  type: TYPE_NORMAL
- en: As much of the corporate data found on mobile devices centers around e-mail,
    focusing security efforts in this area can yield good results. Several companies
    have recognized this need and have developed their own e-mail clients, which implement
    a variety of additional security mechanisms including two-factor authentication,
    encrypted data stores, and additional management interfaces. However, security-conscious
    entities should audit the software to ensure they actually deliver on the functionality
    they claim to implement.
  prefs: []
  type: TYPE_NORMAL
- en: Clearly, remote device administration is important to corporate clients and
    while support for these features are still immature, expect significant improvements
    over the next few releases of Android.
  prefs: []
  type: TYPE_NORMAL
- en: Application and Device Audit
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is difficult to secure mobile devices and their data if you do not have a
    full understanding of what information is at risk. Corporations can initiate a
    mobile security and risk mitigation audit to evaluate the data exposed on mobile
    devices. By analyzing the actual devices and operating systems in use at their
    company, it is possible to determine what data are stored, where it might be at
    risk (on the device, in transit, in backups, etc.), and create specific policies,
    procedures, or even software implementation to minimize the risk.
  prefs: []
  type: TYPE_NORMAL
- en: A typical audit can include evaluation of many criteria including
  prefs: []
  type: TYPE_NORMAL
- en: • What type of corporate data might be stored on the device
  prefs: []
  type: TYPE_NORMAL
- en: • Where that data are stored
  prefs: []
  type: TYPE_NORMAL
- en: • What other applications can be installed, and access corporate data
  prefs: []
  type: TYPE_NORMAL
- en: • Effectiveness/capability of remote wiping and device administration
  prefs: []
  type: TYPE_NORMAL
- en: • Ability to implement corporate security policies
  prefs: []
  type: TYPE_NORMAL
- en: • Secure storage and transmission of passwords, authentication information,
    and other sensitive data
  prefs: []
  type: TYPE_NORMAL
- en: • Effectiveness of encryption
  prefs: []
  type: TYPE_NORMAL
- en: Once the supported devices are well understood, the task of securing the data
    at rest and in transit is less overwhelming, and specific strategies to minimize
    unacceptable risk can be developed.
  prefs: []
  type: TYPE_NORMAL
- en: As with other areas of information security, a strategy and ongoing process
    is necessary to maintain appropriate security measures and evaluate risk.
  prefs: []
  type: TYPE_NORMAL
- en: App development security strategies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One final area extremely important to mobile security is the apps that are developed
    and installed. This includes not only third-party apps, but also apps distributed
    by the operating system developer (Android in this case), device manufacturers,
    and the wireless carriers. The apps are the primary mechanism by which users interact
    with their mobile device to access the information they are interested in. Often
    the information is sensitive and provides private details about the user.
  prefs: []
  type: TYPE_NORMAL
- en: Mobile App Security Testing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: After discovering numerous mobile application security vulnerabilities in the
    course of performing forensic work, this author and colleagues at viaForensics
    began auditing the security of data in popular applications and disclosed their
    findings publicly on our web site. The goal of the free public service, called
    appWatchdog, is to improve mobile app data security and protect consumers. As
    consumer awareness of the data security risks rises, developers will be encouraged
    to thoroughly review their apps prior to release and achieve a higher level of
    security. The findings can be viewed at [http://viaforensics.com/appwatchdog/](http://viaforensics.com/appwatchdog/).
    viaForensics plans to release a mobile app that will check the installed apps
    on an Android device and provide appWatchdog results for those already audited.
    It will also allow the consumer to suggest an app for review as well as contact
    the app developer if they have any concerns.
  prefs: []
  type: TYPE_NORMAL
- en: The appWatchdog service uses forensic and security assessment techniques to
    determine whether user names, passwords, credit card numbers, or other application
    data are being insecurely stored. The process involves installing the application
    and running it in the manner in which a consumer uses the app. The device is then
    forensically imaged and analyzed for personal information and application data.
    The findings are first communicated to the app developer and then publicly disclosed
    in order to provide this information directly to consumers. Users can then make
    an informed decision on whether or not they wish to continue use of that app,
    or perhaps wait for the developer to release a more secure version.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each app is reviewed based on certain criteria that depend on the specific
    uses for the app. For example, with a mobile payment app, the app would be analyzed
    for user name, password, application data, and credit card numbers. However, for
    other applications, credit card numbers may not be relevant. The following criteria
    are explained in further detail, with the top three being the most applicable
    to most applications:'
  prefs: []
  type: TYPE_NORMAL
- en: • *Securely stores passwords?* If any type of password is being stored unencrypted
    on the device, the application would get a “Fail.”
  prefs: []
  type: TYPE_NORMAL
- en: • *Securely stores user names?* Application data are examined to determine whether
    user names are being stored unencrypted on the device.
  prefs: []
  type: TYPE_NORMAL
- en: • *Securely stores application data?* Each application is analyzed for app-related
    data. For example, financial apps are searched for account numbers, balances,
    and transfer information. Other applications might store additional personal user
    data, such as e-mail address, phone number, or address.
  prefs: []
  type: TYPE_NORMAL
- en: • *Securely stores credit card information?* For applications handling credit
    card information, data are examined to determine whether the full credit card
    number is stored unencrypted on the device as well as any supporting data associated
    with it, such as expiration date or security number on the back of the card.
  prefs: []
  type: TYPE_NORMAL
- en: • *Additional security tests:* These tests can include capturing wireless data
    sent from the mobile device and examining that traffic for user names, passwords,
    PINs, and any other relevant application data. Additional security tests are typically
    more time consuming and therefore only performed for an in-depth application security
    review.
  prefs: []
  type: TYPE_NORMAL
- en: The appWatchdog service only provides a basic indication of whether a mobile
    app implements security. By combining advanced mobile forensic and security techniques,
    a far deeper analysis of a mobile app is possible. The items listed below are
    some of the criteria that should be evaluated in order to determine whether a
    mobile application is secure.
  prefs: []
  type: TYPE_NORMAL
- en: • How does the application handle web history and caching?
  prefs: []
  type: TYPE_NORMAL
- en: • Does the application securely transmit login data?
  prefs: []
  type: TYPE_NORMAL
- en: • Does the application avoid MITM attacks?
  prefs: []
  type: TYPE_NORMAL
- en: • Does the application securely transmit sensitive data?
  prefs: []
  type: TYPE_NORMAL
- en: • Is the application protected from session hijacking?
  prefs: []
  type: TYPE_NORMAL
- en: • Is the application able to permanently delete data and prevent storage on
    the device?
  prefs: []
  type: TYPE_NORMAL
- en: • Does the application securely handle interruptions?
  prefs: []
  type: TYPE_NORMAL
- en: • Does the application properly secure data in backups?
  prefs: []
  type: TYPE_NORMAL
- en: A thorough application security audit leverages both advanced forensics and
    security tests to uncover security flaws, protecting both developers and users.
    viaForensics provides these testing services and a certification, called appSecure.
    A similar testing methodology can be effectively applied by internal forensic
    and security teams provided they have the tools and expertise, as well as the
    budget and time, to execute the tests.
  prefs: []
  type: TYPE_NORMAL
- en: App Security Strategies
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The results of appWatchdog and appSecure have led to some general guidelines
    that mobile app developers should consider as they design, develop, and test their
    apps. This list, as with others, is not necessarily exhaustive but provides some
    noteworthy concepts for consideration.
  prefs: []
  type: TYPE_NORMAL
- en: User Names
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Avoid storing user names in plain text on the device. For obvious usability
    issues, you may decide to cache the user name on the device so the consumer does
    not have to type it in every time. However, consider masking a portion of the
    user name that would provide enough information for the consumer to identify their
    user name but not enough for an attacker to have the entire user name. The user
    name is one component needed to log into an account and the less an attacker knows,
    the less effective they will be.
  prefs: []
  type: TYPE_NORMAL
- en: For example, let us assume an application which accesses sensitive health information
    requires a user name. The consumer creates one called “andrewhoog.” However, after
    the initial login, if the application only stores “andr∗∗∗∗” and then displays
    that back to the user, it would be clear that they are logging into the correct
    account. However, an attacker might only get the first four characters. Furthermore,
    if the mask (using “∗” in this case but could be presented in other ways) does
    not give away the overall length of the user name, it makes it even more difficult
    for the attacker to guess.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, more online services are requiring more complex user names that must
    be of a certain length and be alphanumeric. So, whereas a user name “andrewhoog”
    might be fairly easy to guess, AndrewHoog6712 would be far more difficult. Some
    sites may even place further restrictions on the user name where it cannot contain
    any portion of your basic profile information such as your name.
  prefs: []
  type: TYPE_NORMAL
- en: Passwords
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Perhaps far more concerning are applications that store the password in plain
    text. There are several strategies to avoid this serious problem. First, as discussed
    in the “Security philosophy” section, you could simply force the users to type
    their password in each time they run the app. If you think about logging into
    a banking web site from your home computer, you must log in every time. While
    you stay logged in for your current session, once a certain period of inactivity
    has passed (or you log out), you can no longer access the protected web site without
    re-entering your user name and password.
  prefs: []
  type: TYPE_NORMAL
- en: Another approach to consider is the use of security tokens to avoid storing
    the real password on the mobile device. If a user securely authenticates to a
    protected resource on the Internet, a security token can be generated, which not
    only expires after a certain period of time but is also unique to that device.
    While someone with physical access to the phone could access the protected resource,
    it would only last until the token expired, at which point they would need the
    user name and password again. Furthermore, if the security token was specific
    to the device and was compromised remotely, the token would not provide access
    to the restricted resource. Methodologies that use the security token approach
    also would not place any other protected resource on the Internet at risk, even
    if the account holder used the same user name and password (which is quite common).
  prefs: []
  type: TYPE_NORMAL
- en: 'Implementing a token-based authentication scheme is more complicated than a
    simple user name and password and is a methodology that is not as widely used
    or understood by developers. However, a number of APIs that provide this functionality
    are available and are maturing. One framework is called OAuth and is supported
    by many of Google’s services. There are other APIs, but they tend to focus on
    a particular service. There are similarities and the OAuth web site describes
    the connection to other services this way:'
  prefs: []
  type: TYPE_NORMAL
- en: OAuth is the standardization and combined wisdom of many well established industry
    protocols. It is similar to other protocols currently in use (Google AuthSub,
    AOL OpenAuth, Yahoo BBAuth, Upcoming API, Flickr API, Amazon Web Services API,
    etc). Each protocol provides a proprietary method for exchanging user credentials
    for an access token or ticker. OAuth was created by carefully studying each of
    these protocols and extracting the best practices and commonality that will allow
    new implementations as well as a smooth transition for existing services to support
    OAuth.
  prefs: []
  type: TYPE_NORMAL
- en: An area where OAuth is more evolved than some of the other protocols and services
    is its direct handling of non-website services. OAuth has built in support for
    desktop applications, mobile devices, set-top boxes, and of course websites. Many
    of the protocols today use a shared secret hardcoded into your software to communicate,
    something which poses an issue when the service trying to access your private
    data is open source.
  prefs: []
  type: TYPE_NORMAL
- en: ([Introduction—OAuthn, n.d.](#BIB10))
  prefs: []
  type: TYPE_NORMAL
- en: 'Since Google is moving toward OAuth, they provide detailed information about
    the APIs and how to use them. On the Google Code web site, they provide the following
    basic overview of the OAuth process ([Default, n.d.](#BIB5)):'
  prefs: []
  type: TYPE_NORMAL
- en: 1. Your application requests access and gets an unauthorized request token from
    Google’s authorization server.
  prefs: []
  type: TYPE_NORMAL
- en: 2. Google asks the user to grant you access to the required data.
  prefs: []
  type: TYPE_NORMAL
- en: 3. Your application gets an authorized request token from the authorization
    server.
  prefs: []
  type: TYPE_NORMAL
- en: 4. You exchange the authorized request token for an access token.
  prefs: []
  type: TYPE_NORMAL
- en: 5. You use the access token to request data from Google’s service access servers.
  prefs: []
  type: TYPE_NORMAL
- en: As you can tell from the steps, the actual user name and password are only sent
    to the authorization service (Google in this case) and are not stored nor shared
    with the requesting app. The requesting app is provided the various tokens used
    through the negotiation of the process and they will need to store the final access
    token, but the time and scope are both limited.
  prefs: []
  type: TYPE_NORMAL
- en: Although the typical scenario for OAuth allows a third-party service (i.e.,
    a social media we bsite) time and scope limited, token-based authentication to
    the protected information (i.e., your Gmail contact list), it is interesting to
    point out that an app developer can use the OAuth service to authenticate to themselves.
    Using this approach, the app developers not only provide secure, token-based access
    to their service in a standardized fashion but they now have the infrastructure
    in place to allow approved third-party apps’ access to the data, provided the
    account owner authorizes the access.
  prefs: []
  type: TYPE_NORMAL
- en: There are many different schemes and techniques that can be used to securely
    authenticate users who would not require a mobile app to store the user name and
    password in plain text on the mobile device. App developers must move to these
    more secure methodologies to better protect their customers.
  prefs: []
  type: TYPE_NORMAL
- en: Credit Card Data
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Most people in the security industry are familiar with the Payment Card Industry
    (PCI) Data Security Standard (DSS), which provides standards for protecting credit
    card data. Prior to the formation of the PCI Security Standards Council (SSC),
    the major credit card vendors had their own standards for protecting credit card
    data. In 2006, the PCI SSC was launched by the following payment brands:'
  prefs: []
  type: TYPE_NORMAL
- en: • American Express
  prefs: []
  type: TYPE_NORMAL
- en: • Discover Financial Services
  prefs: []
  type: TYPE_NORMAL
- en: • JCB International
  prefs: []
  type: TYPE_NORMAL
- en: • MasterCard Worldwide
  prefs: []
  type: TYPE_NORMAL
- en: • Visa Inc
  prefs: []
  type: TYPE_NORMAL
- en: These brands have a vested interested in reducing fraud in the payment card
    industry. In the version 2.0 document “Requirements and Security Assessment Procedures”
    published in October 2010, the specific requirements of the PCI DSS are listed.
    The following is a small sample of requirements that would cover situations where
    credit card data are used in a mobile app ([Documents Library, n.d.](#BIB8)).
  prefs: []
  type: TYPE_NORMAL
- en: • 3.2 Do not store sensitive authentication data after authorization (even if
    encrypted). Sensitive authentication data include the data as cited in Requirements
    3.2.1 through 3.2.3
  prefs: []
  type: TYPE_NORMAL
- en: • 3.2.1 Do not store the full contents of any track (from the magnetic stripe
    located on the back of a card, equivalent data contained on a chip, or elsewhere).
    These data are alternatively called full track, track, track 1, track 2, and magnetic-stripe
    data.
  prefs: []
  type: TYPE_NORMAL
- en: • 3.2.2 Do not store the card verification code or value (three-digit or four-digit
    number printed on the front or back of a payment card) used to verify card-not
    present transactions.
  prefs: []
  type: TYPE_NORMAL
- en: • 3.2.3 Do not store the personal identification number (PIN) or the encrypted
    PIN block.
  prefs: []
  type: TYPE_NORMAL
- en: • 3.3 Mask PAN when displayed (the first six and last four digits are the maximum
    number of digits to be displayed).
  prefs: []
  type: TYPE_NORMAL
- en: • 3.4.1 If disk encryption is used (rather than file- or column-level database
    encryption), logical access must be managed independently of native operating
    system access control mechanisms (e.g., by not using local user account databases).
    Decryption keys must not be tied to user accounts.
  prefs: []
  type: TYPE_NORMAL
- en: The PCI DSS, while not without criticism, is a fairly mature standard with a
    goal of protecting a staggering volume of financial transactions. It is interesting
    to compare some of the standards the PCI DSS has developed over time such as requiring
    encryption, limiting the storage of sensitive information, and masking sensitive
    information when displayed to screen.
  prefs: []
  type: TYPE_NORMAL
- en: It should really go without saying that storing the credit card in plain text
    on a mobile device would not only violate the PCI DSS standard but would also
    place the card owner at great risk if the device was compromised. Perhaps not
    surprisingly, the appWatchdog service described above checks for credit card data
    stored in plain text and, unfortunately, uncovers this information in some applications.
  prefs: []
  type: TYPE_NORMAL
- en: If an app requires payment processing, it would be advisable to integrate with
    mature online services such as PayPal and Google Checkout, or work with a payment
    provider to implement a secure payment application. Be advised, this is a significant
    undertaking, not only from a development and testing perspective, but also requiring
    an ongoing security audit process.
  prefs: []
  type: TYPE_NORMAL
- en: Sensitive App Data
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Many mobile apps contain sensitive data that the consumer would not want out
    of their control. There are various levels to the data. Here is a simplistic list
    designed to illustrate the levels:'
  prefs: []
  type: TYPE_NORMAL
- en: 1. No sensitive user data—for example, a calculator app would not contain any
    sensitive user data.
  prefs: []
  type: TYPE_NORMAL
- en: 2. No sensitive user data but some potential metadata—for example, a weather
    application would not contain any sensitive user data; however, it might contain
    the GPS coordinates and date/time stamp when it was run.
  prefs: []
  type: TYPE_NORMAL
- en: 3. Contains user data but not sensitive—some applications are intended for public
    consumption such as messages people share on Twitter. If a user was informed that
    all of his or her Twitter messages were readable by the world, most (except those
    which protect to their messages) would not be concerned.
  prefs: []
  type: TYPE_NORMAL
- en: 4. Contains sensitive user data—many applications fall into this category and
    contain sensitive user data such as your full e-mail messages, SMS and MMS messages,
    voice mail, call logs, and more.
  prefs: []
  type: TYPE_NORMAL
- en: 5. Highly sensitive user data—this is a special level that covers apps that
    contain financial information, health care information, password vaults, and other
    apps which place the consumers at great risk if their security is compromised.
  prefs: []
  type: TYPE_NORMAL
- en: It is helpful to differentiate the sensitivity of data an app contains in order
    to provide appropriate levels of security. If a calculator app required two-factor
    authentication and AES-256 encryption, users would obviously be annoyed and might
    try to calculate the 15% tip on paper (which once written down would place it
    at risk for a number of physical and social engineering attacks, but we digress).
  prefs: []
  type: TYPE_NORMAL
- en: However, the appWatchdog service regularly uncovers apps containing sensitive
    data of levels 4 and 5 which are stored in plain text on the NAND flash. If you
    develop an application with sensitive data at this level, you should protect the
    data with some level of security. There are a number of options including
  prefs: []
  type: TYPE_NORMAL
- en: 1. Don’t store the data—this is the simplest approach and mitigates any attack
    which grants access to the NAND flash. As discussed previously, the cryptographic
    algorithms used to protect data in transit are far more effective than any approach
    to securing data at rest (at least on a mobile device). Most mobile devices are
    highly connected to the Internet and thus caching the data is not necessary. Of
    course, there are advantages to caching the data, which include providing access
    even if the device is offline as well as improving app responsiveness.
  prefs: []
  type: TYPE_NORMAL
- en: 2. Encrypt the data—as discussed previously, encrypting data at rest on a mobile
    device requires that the keys are also stored on the device and as such it cannot
    provide perfect security. However, if the keys are sufficiently difficult to locate,
    it provides a much higher level of protection than plain text. Also, as remote
    attacks against mobile devices increase, they may gain access to the NAND flash
    but not other areas where the encryption keys are stored, such as memory. If the
    data were in plain text, they would be at risk; whereas if the data were encrypted,
    the consumer would be protected in this instance.
  prefs: []
  type: TYPE_NORMAL
- en: Securing sensitive data is critical to protecting consumers and the industry
    must mature and consider this as a requirement for apps.
  prefs: []
  type: TYPE_NORMAL
- en: SSL/TLS
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: One final area to discuss is the implementation of Secure Sockets Layer (SSL)
    and Transport Layer Security (TLS) that protects data in transit. It is critical
    that app developers properly implement SSL/TLS, including a full validation of
    the digital certificates to prevent MITM attacks. Although SSL/TLS is effective
    in protecting data in transit, without proper implementation it leaves the users
    highly vulnerable to attack. While testing apps for the appWatchdog service, a
    test-attacking machine would regularly display the user name and password for
    apps not in scope as it would automatically execute (i.e., some apps log in on
    a schedule to check to new messages) and fall victim to the compromise.
  prefs: []
  type: TYPE_NORMAL
- en: Beyond ensuring SSL/TLS is properly implemented and validated in the mobile
    app, SSL/TLS must also be securely configured on the server. SSL has been available
    since the 1990s to secure data transmission on untrusted networks. Earlier implementation
    of SSL contained security flaws that had to be addressed to ensure secure transmission.
    And over time, the algorithms were improved to reduce the risk of a brute force
    attack. The latest versions of the technology are known as TLS and generally work
    in the same way as SSL, so much so that many still simply use the term SSL for
    both.
  prefs: []
  type: TYPE_NORMAL
- en: 'A common problem is that the people responsible for implementing SSL/TLS on
    the server are not necessarily security engineers and hence tend to focus on server
    infrastructure. They might implement and test SSL/TLS and it would appear to be
    secure; but, there can be vulnerabilities. For example, MD5 is a common encryption
    algorithm that has been in wide use for more than 10 years. Although still considered
    useful for applications such as file integrity checking, authorities have designated
    it for retirement from use in securing communications. The US Department of Homeland
    Security CERT group states in Vulnerability Note #836068 “Software developers,
    Certification Authorities, web site owners, and users should avoid using the MD5
    algorithm in any capacity. As previous research has demonstrated, it should be
    considered cryptographically broken and unsuitable for further use” ([US-CERT
    Vulnerability Note VU#836068, n.d.](#BIB17)). Real-time cracking of this encryption
    remains impractical, but stronger encryption is supported by all major Web browsers
    and mobile devices.'
  prefs: []
  type: TYPE_NORMAL
- en: An even greater problem is the acceptance of the NULL cipher (no encryption)
    or weaker export-grade encryption in the server SSL/TLS settings. For a number
    of years the United States restricted the export of devices and software with
    cryptography technology, and so weaker encryption algorithms were implemented
    for use in exported software. The export ciphers use a short key length of only
    40 bits and can be compromised much more easily than modern ciphers with longer
    keys of 128 or 256 bits.
  prefs: []
  type: TYPE_NORMAL
- en: Another issue in SSL/TLS use is the implemented version. TLSv1 is more than
    10 years old and was found vulnerable to a “renegotiation attack” in 2009\. In
    this attack, the server treats the client’s initial TLS handshake as a renegotiation
    and thus believes that the initial data transmitted by the attacker are from the
    same entity as the subsequent client data ([US-CERT Vulnerability Note VU#120541,
    n.d.](#BIB18)). [Thierry Zoller (November 2009)](#BIB20), a security consultant,
    provided a well-written summary with visual depictions of the steps involved.
    Although many different attacks are explained, [Fig. 5.4](#F0025) is the first
    example provided in this summary that helps illustrate the attack.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100056f05-04-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: FIGURE 5.4 Generic TLS renegotiation prefix injection vulnerability.
  prefs: []
  type: TYPE_NORMAL
- en: Most servers using TLSv1 have been patched to close this vulnerability. However,
    the TLSv1 protocol has been updated and a more current TLSv1.2 offers the latest
    technology and strongest encryption ciphers. Older specifications including SSLv2
    and SSLv3 are still widely in use and can be reasonably secure with adequate ciphers
    and key lengths, but they are not as secure as TLS.
  prefs: []
  type: TYPE_NORMAL
- en: Securing the transmission of sensitive data from a mobile device requires coordination,
    diligence, and a thorough understanding of SSL/TLS from not only the app developer
    but also from the team that maintains the server participating in the secure communication.
    Although SSL/TLS has been available for some time and may be taken for granted,
    it is important that a correct implementation and thorough security testing of
    the system be undertaken.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Android devices can be both a target of malicious attacks and a tool used to
    carry out such attacks. Personal users as well as corporations must be aware of
    the risks and should take certain measures to protect against malicious misuse.
    Application developers must also increase their attention on security concerns
    and take responsibility for protecting user data. Implementing basic security
    measures discussed in this chapter, though not providing full protection, can
    at least serve as a deterrent against most attacks.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 1\. *Country.* (n.d.). Computer crime law—guide to computer crimes law. Retrieved
    February 10, 2011, from [http://www.hg.org/computer-crime.html](http://www.hg.org/computer-crime.html).
  prefs: []
  type: TYPE_NORMAL
- en: 2\. *Cisco unified video conferencing multiple vulnerabilities.* (n.d.). Matta
    Consulting. Retrieved February 11, 2011, from [www.trustmatta.com/advisories/MATTA-2010-001.txt](http://www.trustmatta.com/advisories/MATTA-2010-001.txt).
  prefs: []
  type: TYPE_NORMAL
- en: '3\. *Cisco Security advisory: multiple vulnerabilities in Cisco unified video
    conferencing products—Cisco Systems.* (n.d.). Retrieved February 10, 2011, from
    [http://www.cisco.com/en/US/products/products_security_advisory09186a0080](http://www.cisco.com/en/US/products/products_security_advisory09186a0080).'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. *default.* (n.d.). OAuth for installed applications—authentication and authorization
    for Google APIs—Google Code. Retrieved February 12, 2011, from [http://code.google.com/apis/accounts/docs/OAuthForInstalledApps.htm](http://code.google.com/apis/accounts/docs/OAuthForInstalledApps.htm).
  prefs: []
  type: TYPE_NORMAL
- en: 5\. *Device administration.* (n.d.). Android Developers. Retrieved February
    11, 2011, from [http://developer.android.com/guide/topics/admin/device-admin.html](http://developer.android.com/guide/topics/admin/device-admin.html).
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Donohue, B. (n.d.). Mobile device users more susceptible to phishing scams.
    Retrieved February 10, 2011, from [http://threatpost.com/en_us/blogs/mobile-device-users-more-susceptible-phishing-scams-010511](http://threatpost.com/en_us/blogs/mobile-device-users-more-susceptible-phishing-scams-010511).
  prefs: []
  type: TYPE_NORMAL
- en: '7\. *Documents Library.* (n.d.). PCI security standards documents: PCI DSS,
    PA-DSS, PED standards, compliance guidelines and more. Retrieved February 12,
    2011, from [https://www.pcisecuritystandards.org/security_standards/documents.php?agreements=pcidss&assocation=PCI%20DSS](https://www.pcisecuritystandards.org/security_standards/documents.php?agreements=pcidss&assocation=PCI%20DSS).'
  prefs: []
  type: TYPE_NORMAL
- en: '8\. *[Full-disclosure] Microsoft Windows NT #GP trap handler allows users to
    switch kernel stack.* (n.d.). Retrieved February 10, 2011, from [http://lists.grok.org.uk/pipermail/full-disclosure/2010-January/072549.html](http://lists.grok.org.uk/pipermail/full-disclosure/2010-January/072549.html).'
  prefs: []
  type: TYPE_NORMAL
- en: 9\. *Introduction—OAuthn.* (n.d.). OAuth Community Site. Retrieved February
    12, 2011, from [http://oauth.net/about/](http://oauth.net/about/).
  prefs: []
  type: TYPE_NORMAL
- en: 10\. Johnston, S. J. (n.d.). Microsoft warns about 17-year-old windows bug.
    Retrieved February 10, 2011, from [http://www.esecurityplanet.com/features/article.php/3860131/article.htm](http://www.esecurityplanet.com/features/article.php/3860131/article.htm).
  prefs: []
  type: TYPE_NORMAL
- en: 11\. *Microsoft security advisory (979682) vulnerability in Windows kernel could
    allow elevation of privilege.* (n.d.). Retrieved February 10, 2011, from [http://www.microsoft.com/technet/security/advisory/979682.mspx](http://www.microsoft.com/technet/security/advisory/979682.mspx).
  prefs: []
  type: TYPE_NORMAL
- en: 12\. Ralf-Philipp Weinmann. (n.d.). CryptoLUX. Retrieved February 10, 2011,
    from [https://cryptolux.org/Ralf-Philipp_Weinmann](https://cryptolux.org/Ralf-Philipp_Weinmann).
  prefs: []
  type: TYPE_NORMAL
- en: '13\. *Schneier on security: data at rest vs. data in motion.* (n.d.). Retrieved
    February 9, 2011, from [http://www.schneier.com/blog/archives/2010/06/data_at_rest_vs.html](http://www.schneier.com/blog/archives/2010/06/data_at_rest_vs.html).'
  prefs: []
  type: TYPE_NORMAL
- en: 14\. *Secure programming for Linux and Unix HOWTO.* (n.d.). David A. Wheeler’s
    personal home page. Retrieved February 10, 2011, from [http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/open-source-security.html](http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/open-source-security.html).
  prefs: []
  type: TYPE_NORMAL
- en: 15\. Ten, T. T. (n.d.). Field of dreams (1989)—Memorable quotes. The Internet
    movie database (IMDb). Retrieved February 10, 2011, from [http://www.imdb.com/title/tt0097351/quotes?qt0314964](http://www.imdb.com/title/tt0097351/quotes?qt0314964).
  prefs: []
  type: TYPE_NORMAL
- en: 16\. *US-CERT Vulnerability Note VU#836068.* (n.d.). CERT Knowledgebase. Retrieved
    February 13, 2011, from [http://www.kb.cert.org/vuls/id/836068](http://www.kb.cert.org/vuls/id/836068).
  prefs: []
  type: TYPE_NORMAL
- en: 17\. *US-CERT Vulnerability Note VU#120541.* (n.d.). CERT Knowledgebase. Retrieved
    February 13, 2011, from [http://www.kb.cert.org/vuls/id/120541](http://www.kb.cert.org/vuls/id/120541).
  prefs: []
  type: TYPE_NORMAL
- en: 18\. *WordNet search*—3.0\. (n.d.). Retrieved February 10, 2011, from [wordnetweb.princeton.edu/perl/webwn?s=art](http://wordnetweb.princeton.edu/perl/webwn?s=art).
  prefs: []
  type: TYPE_NORMAL
- en: 19\. Zoller T. *TLS & SSLv3 renegotiation vulnerability explained SANS Internet
    Storm Center; Cooperative Network Security Community—Internet Security*. 2009;
    Retrieved February 13, 2011, from *[http://isc.sans.edu/diary.html?storyid=7582](http://isc.sans.edu/diary.html?storyid=7582)*;
    2009.
  prefs: []
  type: TYPE_NORMAL
