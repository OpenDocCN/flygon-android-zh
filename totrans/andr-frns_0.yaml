- en: Chapter 1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Android and mobile forensics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Information in this chapter
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: • [Android platform](#S0015)
  prefs: []
  type: TYPE_NORMAL
- en: • [Linux, Open source software and forensics](#S0055)
  prefs: []
  type: TYPE_NORMAL
- en: • [Android Open Source Project](#S0170)
  prefs: []
  type: TYPE_NORMAL
- en: • [Internationalization](#S0195)
  prefs: []
  type: TYPE_NORMAL
- en: • [Android Market](#S0230)
  prefs: []
  type: TYPE_NORMAL
- en: • [Android forensics](#S0245)
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Digital forensics is an exciting, fast-paced field that can have a powerful
    impact on a variety of situations including internal corporate investigations,
    civil litigation, criminal investigations, intelligence gathering, and matters
    involving national security. Mobile forensics, arguably the fastest growing and
    evolving digital forensic discipline, offers significant opportunities as well
    as many challenges. While the interesting part of Android forensics involves the
    acquisition and analysis of data from devices, it is important to have a broad
    understanding of both the platform and the tools that will be used throughout
    the investigation. A thorough understanding will assist a forensic examiner or
    security engineer through the successful investigation and analysis of an Android
    device.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Book corrections, updates, and software
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'All corrections, updates, and even software samples for this book will be maintained
    online at the following web page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://viaforensics.com/education/android-forensics-mobile-security-book/](http://viaforensics.com/education/android-forensics-mobile-security-book/)'
  prefs: []
  type: TYPE_NORMAL
- en: Please check the web site as over time it will evolve and provide significant
    and increasing value to the reader. Beyond corrections and updates, some of the
    software referenced in the book will be available for download.
  prefs: []
  type: TYPE_NORMAL
- en: Android platform
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Android is an open source mobile device platform based on the Linux 2.6 kernel
    and managed by the Open Handset Alliance, a group of carriers, mobile device and
    component manufacturers, and software vendors.
  prefs: []
  type: TYPE_NORMAL
- en: Android has made a significant impact on the smartphone market and, consequently,
    in the area of forensics. Two years and one month after the first Android device
    was introduced (October 2008), Android became the second largest smartphone platform
    capturing 26.0% of the 61.5 million US smartphone subscribers ([comScore reports,
    n.d.](#BIB12)). [Table 1.1](#T0010) shows the top smartphone platforms as of November
    2010, according to comScore, Inc.
  prefs: []
  type: TYPE_NORMAL
- en: Table 1.1 Total US Smartphone Subscribers, Ages 13+, November 2010
  prefs: []
  type: TYPE_NORMAL
- en: '| Platform | Share (%) of Smartphone Subscribers |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| RIM | 33.5 |'
  prefs: []
  type: TYPE_TB
- en: '| Google | 26.0 |'
  prefs: []
  type: TYPE_TB
- en: '| Apple | 25.0 |'
  prefs: []
  type: TYPE_TB
- en: '| Microsoft | 9.0 |'
  prefs: []
  type: TYPE_TB
- en: '| Palm | 3.9 |'
  prefs: []
  type: TYPE_TB
- en: But Android’s influence extends well beyond the US market. According to Gartner,
    Inc., the Android operating system (OS) was the second most popular during the
    third quarter of 2010 and accounted for 25.5% of worldwide smartphone sales ([Gartner
    says, n.d.](#BIB14)), as shown in [Table 1.2](#T0015).
  prefs: []
  type: TYPE_NORMAL
- en: Table 1.2 Worldwide Smartphone Sales to End Users by Operating System in Third
    Quarter of 2009–2010 (in Thousands of Units)
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/T100019tabT0015.jpg)'
  prefs: []
  type: TYPE_IMG
- en: According to the web site Google Investor, Google CEO Eric Schmidt reported
    that over 350,000 Android devices were being activated each day as of February
    2011 ([Google investor, n.d.](#BIB16)). These statistics focus on the smartphone
    market, which is only one of the many types of Android devices available in the
    market.
  prefs: []
  type: TYPE_NORMAL
- en: The open source nature of Android has not only established a new direction for
    the industry, but also has enabled developers, code savvy forensic analysts, and
    (unfortunately) sophisticated criminals to understand the device at the most fundamental
    level. As the core platform quickly matures and continues to be provided free
    of charge, carriers and hardware vendors alike can focus their efforts on customizations
    intended to retain their customers.
  prefs: []
  type: TYPE_NORMAL
- en: History of Android
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For over three decades, companies have invested significant resources into research
    and development of handheld computing devices in the hopes that they would open
    new markets. As with traditional computers, the hardware components central to
    building such devices have advanced significantly and now provide a small, though
    powerful, mobile platform for handheld computers.
  prefs: []
  type: TYPE_NORMAL
- en: A central figure in the development of Android is Andy Rubin whose past employers
    include robotics firms, Apple, WebTV, and Danger Inc. His previous company, Danger
    Inc., developed a smartphone and support OS most recognized from the T-Mobile
    Sidekick. This mobile operating system, DangerOS, was built using Java. It provided
    a software development kit and had some of the features found in current smartphones.
    In 2004, Rubin left Danger and tinkered with several new ideas. He again returned
    to smartphone development and teamed with several engineers from past companies.
    The company Rubin formed in 2003 was called Android, Inc.
  prefs: []
  type: TYPE_NORMAL
- en: While the team began development, Rubin was actively marketing Android to both
    potential investors and wireless carriers. One of the companies he spoke with
    was Google, who subsequently acquired Android in July 2005\. The acquisition,
    combined with new patents and services involving mobile and a large bid for wireless
    spectrum, fueled significant speculation that Google was developing their own
    smartphone and perhaps was aiming to be a full wireless carrier.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, on November 5, 2007, Andy Rubin announced a more ambitious plan on
    the official Google blog ([Official Google blog, n.d.](#BIB22)):'
  prefs: []
  type: TYPE_NORMAL
- en: Android is the first truly open and comprehensive platform for mobile devices.
    It includes an operating system, user-interface and applications—all of the software
    to run a mobile phone, but without the proprietary obstacles that have hindered
    mobile innovation. We have developed Android in cooperation with the Open Handset
    Alliance, which consists of more than 30 technology and mobile leaders including
    Motorola, Qualcomm, HTC and T-Mobile. Through deep partnerships with carriers,
    device manufacturers, developers, and others, we hope to enable an open ecosystem
    for the mobile world by creating a standard, open mobile software platform. We
    think the result will ultimately be a better and faster pace for innovation that
    will give mobile customers unforeseen applications and capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: One week later, Google released an early look at the Android software development
    kit (SDK) to developers. This allowed Google to create the first Android Developer
    Challenge, which ran from January 2008 through April 2008\. Google set aside $1,000,000
    to reward the most innovative Android apps. The top 50 apps are available for
    review at [http://code.google.com/android/adc/adc_gallery/](http://code.google.com/android/adc/adc_gallery/).
  prefs: []
  type: TYPE_NORMAL
- en: In August 2008, Google announced the availability of the Android Market where
    developers could upload their apps for mobile device owners to browse and install.
    The initial release did not support paid apps. However, that feature was added
    in early 2009\. Finally, October 2008 marked both the official release of the
    Android Open Source Project (AOSP) ([Bort, n.d.](#BIB9)) and the first publicly
    available Android smartphone, the T-Mobile G1.
  prefs: []
  type: TYPE_NORMAL
- en: Since inception, the Android ecosystem has grown significantly and is comprised
    of diverse groups of contributors. [Table 1.3](#T0020) summarizes significant
    milestones for the Android platform.
  prefs: []
  type: TYPE_NORMAL
- en: Table 1.3 Android Milestones
  prefs: []
  type: TYPE_NORMAL
- en: '| Date | Event |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| July 1, 2005 | Google acquires Android, Inc. |'
  prefs: []
  type: TYPE_TB
- en: '| November 12, 2007 | Android launched |'
  prefs: []
  type: TYPE_TB
- en: '| August 28, 2008 | Android Market announced |'
  prefs: []
  type: TYPE_TB
- en: '| September 23, 2008 | Android 1.0 platform released |'
  prefs: []
  type: TYPE_TB
- en: '| October 21, 2008 | Android released as open source software |'
  prefs: []
  type: TYPE_TB
- en: '| February 13, 2009 | Android Market: USA takes paid apps |'
  prefs: []
  type: TYPE_TB
- en: '| March 12, 2009 | Android Market: UK takes paid apps |'
  prefs: []
  type: TYPE_TB
- en: '| April 15, 2009 | Android 1.5 (Cupcake) platform released |'
  prefs: []
  type: TYPE_TB
- en: '| September 16, 2009 | Android 1.6 (Donut) platform released |'
  prefs: []
  type: TYPE_TB
- en: '| October 5, 2009 | Android 2.0/2.1 (Eclair) platform released |'
  prefs: []
  type: TYPE_TB
- en: '| May 20, 2010 | Android 2.2 (Froyo) platform released |'
  prefs: []
  type: TYPE_TB
- en: '| May 23, 2010 | Android 2.2\. for Nexus One phones released |'
  prefs: []
  type: TYPE_TB
- en: '| December 6, 2010 | Android 2.3 (Gingerbread) platform released |'
  prefs: []
  type: TYPE_TB
- en: '| February 2, 2011 | Android 3.0 (Honeycomb) preview released |'
  prefs: []
  type: TYPE_TB
- en: Open Handset Alliance
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The Open Handset Alliance (OHA) is a collaboration among mobile technology companies
    including wireless carriers, handset and component manufacturers, software developers,
    and other support and integration companies. The alliance, established on November
    5, 2007, originally had 34 members. However, by January 2011 there were nearly
    80 members.
  prefs: []
  type: TYPE_NORMAL
- en: The OHA is committed “to accelerate innovation in mobile and offer consumers
    a richer, less expensive, and better mobile experience” ([Alliance FAQ, n.d.](#BIB1))
    with the primary focus on the coordination, development, and release of Android
    devices. Google is the driving force behind both the OHA and AOSP. Some have complained
    that the alliance is simply a marketing technique that offers little value to
    the members or consumers. However, new members have joined throughout 2010 and
    the OHA will undoubtedly continue well into the future. The members, as of February
    3, 2011, listed in [Table 1.4](#T0025), are grouped by mobile operators, handset
    manufacturers, semiconductor companies, software companies, and commercialization
    companies ([Alliance members, n.d.](#BIB2)).
  prefs: []
  type: TYPE_NORMAL
- en: Table 1.4 Open Handset Alliance Members
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/T100019tabT0025.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![Image](img/T100019tabT0025a.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Android Features
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: While we explore the various Android device types more in the next chapter,
    there are several features common to most Android devices that we can discuss
    here.
  prefs: []
  type: TYPE_NORMAL
- en: First, Android was engineered from the beginning to be online, whether using
    cellular networks such as Global System for Mobile Communications and Code Division
    Multiple Access (GSM/CDMA) or wireless networks (Wi-Fi). Regardless of the venue,
    the ability to be online is a core feature of any Android device. Many of the
    devices are indeed smartphones and thus support sending and receiving phone calls,
    text messages, and other services found on cellular networks. Interacting with
    the device is typically via a touch screen, but many devices also allow for keyboards
    or other buttons, which support user interaction.
  prefs: []
  type: TYPE_NORMAL
- en: A second core feature of Android devices is the ability to download and install
    applications (apps) from the Android Market. This is a primary feature to many
    users because it allows them to extend the functionality of the device. These
    apps also typically happen to be a rich source of information for forensic analysts.
  prefs: []
  type: TYPE_NORMAL
- en: The final core feature is the ability for users to store their data on the devices.
    This, of course, is the basis for the forensics work covered in detail in this
    book. Most Android devices come with some on-device storage using flash (NAND)
    memory as well as an external SD card that is portable and intended to store larger
    amounts of data. Some recent HTC devices are now shipping with an emulated SD
    card which is a separate USB device ID mapped to the NAND and presented as an
    SD card. The emulated SD cards are typically formatted with Microsoft’s FAT32
    file system.
  prefs: []
  type: TYPE_NORMAL
- en: Supported Cellular Networks
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: As smartphones are the largest category of Android devices, it is important
    to understand the various cellular technologies Android currently supports.
  prefs: []
  type: TYPE_NORMAL
- en: The first Android device, the HTC DREA100 or T-Mobile G1, was a Global System
    for Mobile Communications (GSM) phone. GSM is the most widely used and supported
    cellular system with excellent support throughout the world. Major wireless providers
    in the United States that support GSM include AT&T and T-Mobile. The GSM system
    leverages a subscriber identity module (SIM) or universal subscriber identity
    module (USIM) to identify the user to the cellular network.
  prefs: []
  type: TYPE_NORMAL
- en: The next cellular system supported by Android is the Code Division Multiple
    Access, often referred to as CDMA. CDMA is the technique used to encode and send
    the voice, data, and control signals used by a CDMA phone. It is popular in the
    United States, but less so around the world. In the United States, the primary
    technology standard used is called CDMA2000\. Major carriers include Verizon Wireless,
    Sprint, U.S. Cellular, and Cricket Communications.
  prefs: []
  type: TYPE_NORMAL
- en: The final cellular system supported by Android is the Integrated Digital Enhanced
    Network, or iDEN, whose primary attraction is its support of the popular push-to-talk
    (PTT) feature. In the United States, the only large carrier supporting iDEN is
    Sprint Nextel (who also owns Boost Mobile). Motorola, the developer of iDEN, also
    developed the Motorola i1, the first Android phone supporting iDEN.
  prefs: []
  type: TYPE_NORMAL
- en: Google’s Strategy
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Android is clearly a powerful mobile device platform which costs an enormous
    amount in development. So why did Google give Android away for free?
  prefs: []
  type: TYPE_NORMAL
- en: 'The answer starts with Google’s clearly defined mission ([Corporate information:
    about, n.d.](#BIB11)):'
  prefs: []
  type: TYPE_NORMAL
- en: Google’s mission is to organize the world’s information and make it universally
    accessible and useful.
  prefs: []
  type: TYPE_NORMAL
- en: 'Cell phones are the most popular consumer device, numbering over 4 billion,
    so by providing an advanced mobile stack at no cost, Google believes they are
    fulfilling the universally accessible portion of their mission. But, obviously
    there must still be some benefit for Google. When more people are online, more
    people use search, which ultimately drives ad revenue—Google’s primary source
    of income. In a March 2009 interview, Andy Rubin explained:'
  prefs: []
  type: TYPE_NORMAL
- en: Google has a great business model around advertising, and there’s a natural
    connection between open source and the advertising business model. Open source
    is basically a distribution strategy, it’s completely eliminating the barrier
    to entry for adoption.
  prefs: []
  type: TYPE_NORMAL
- en: ([Krazit, n.d.](#BIB17))
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the criticisms of Android is that the market is now highly fragmented
    with different versions and variations of Android—a direct result of how Google
    releases Android to the manufacturers. This is in contrast to other devices, such
    as the iPhone where Apple has total control over the hardware and OS and significant
    influence over third-party application. Rubin defends this model, however. In
    the same interview, Rubin further commented on this aspect ([Krazit, n.d.](#BIB17)):'
  prefs: []
  type: TYPE_NORMAL
- en: Controlling the whole device is great, (but) we’re talking about 4 billion handsets.
    When you control the whole device the ability to innovate rapidly is pretty limited
    when it’s coming from a single vendor. You can have spurts of innovation. You
    can nail the enterprise, nail certain interface techniques, or you can nail the
    Web-in-the-handset business, but you can’t do everything. You’re always going
    to be in some niche. What we’re talking about is getting out of a niche and giving
    people access to the Internet in the way they expect the Internet to be accessed.
    I don’t want to create some derivative of the Internet, I don’t want to just take
    a slice of the Internet, I don’t want to be in the corner somewhere with some
    dumbed-down version of the Internet, I want to be on the Internet.
  prefs: []
  type: TYPE_NORMAL
- en: So by creating a mobile OS that meets the demands of the consumer as well as
    the needs of the manufacturers and wireless carriers, Google has an excellent
    distribution platform for their revenue-generating search and advertising business.
  prefs: []
  type: TYPE_NORMAL
- en: Apps
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: One important way by which Android supports innovation beyond the core mobile
    stack is by enabling the development and distribution of third-party apps on Android.
    As of January 2011, over 200,000 Android apps have been developed. This, of course,
    is similar to the strategy Apple developed. However, there are key differences
    in their approach. Apple maintains tight control over their App Store, requiring
    developers to submit to a sometimes lengthy review process and providing Apple
    with the final approval for an app. Apps can be denied based on a number of criteria,
    most notably if they contain any content Apple feels is objectionable. Google,
    on the other hand, requires very little review to publish an app in the Android
    Market. While Google has the ability to ban a developer, remove an app from the
    Android Market, and even remotely uninstall apps from Android devices, in general
    their approach to app management is hands off.
  prefs: []
  type: TYPE_NORMAL
- en: Nexus Phones
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In January 2010, Google released its own smartphone, the Nexus One (N1) shown
    in [Fig. 1.1](#F0010). The N1 was developed by HTC and, by all accounts, was an
    ideal model for how manufacturers should develop their phones. The processor was
    extremely fast (1 GHz), it was running the latest version of Android, and it had
    innovations such as three microphones which survey background noise and blend
    your voice to create the most clear conversation possible.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100019f01-01-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.1 Google Nexus One by HTC.
  prefs: []
  type: TYPE_NORMAL
- en: The N1 was sold directly by Google and was sold unlocked—a move many analysts
    saw as a direct challenge to the carrier lock-in model where customers must sign
    a two-year agreement to get a discount on the device. The N1 was also available
    through T-Mobile for a reduced price, provided the user signs an extended contract.
    In the end, the sales for the N1 were not overwhelming and there was speculation
    that Google failed in their implementation ([Fig. 1.1](#F0010)).
  prefs: []
  type: TYPE_NORMAL
- en: However, at the time, Google was also trying to demonstrate how they believed
    an Android phone should be released and maintained. To the surprise of many, one
    year later Google released the Nexus S manufactured by Samsung, shown in [Fig.
    1.2](#F0015). One interesting feature of the Nexus S was that it ran on Android
    2.3 that allowed the native ability to make Voice over IP (VoIP) phone calls.
    If a device has a data connection, whether it is [Wi-Fi.com](http://Wi-Fi.com)
    or some other network, then it can send and receive phone calls using any number
    of popular VoIP services. In the United States, the phone was sold only through
    Best Buy stores and service was available through T-Mobile ([Fig. 1.2](#F0015)).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100019f01-02-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.2 Google Nexus S by Samsung.
  prefs: []
  type: TYPE_NORMAL
- en: It is unclear what Google’s overall goals are with the Nexus line of smartphones.
    However, it is clear they intend to release Google phones and eventually may offer
    consumers a new flexibility in how they purchase and use smartphones.
  prefs: []
  type: TYPE_NORMAL
- en: Linux, Open source software, and forensics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open source software has had a tremendous impact on the digital forensics discipline.
    Forensic tools that are released as free open source software have tremendous
    advantages over closed source solutions including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: • The ability to review source code and understand exact steps taken
  prefs: []
  type: TYPE_NORMAL
- en: • The ability to improve the software and share enhancements with entire community
  prefs: []
  type: TYPE_NORMAL
- en: • The price
  prefs: []
  type: TYPE_NORMAL
- en: While many of the free, open source software packages do not offer a commercial
    support model, some companies specialize in providing support. For example, Red
    Hat has built a significant business providing support and services for the Linux
    OS. In addition, the maintainers of many free, open source software packages are
    generally very accessible and responsive to inquiries and can often provide far
    superior support as they directly maintain the software.
  prefs: []
  type: TYPE_NORMAL
- en: The most significant and important example of free, open source software is
    the Linux OS. Linux is not only a critical component of Android but can also be
    used as a powerful forensic tool.
  prefs: []
  type: TYPE_NORMAL
- en: Brief History of Linux
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There have been many books written about Linux and dedicating only one section
    to such an important OS is difficult. There are also many fantastic online resources
    for Linux some of which focus on Linux as a forensic tool.
  prefs: []
  type: TYPE_NORMAL
- en: 'In 1991, Linus Torvalds was a University of Helsinki student when he decided
    to develop a terminal emulator that he could use to connect to the University’s
    systems. The code was developed specifically for his computer, which had an Intel
    386 processor. After he completed the initial development, he realized that code
    could actually form the basis of an OS and he posted the following famous messages
    on the Usenet newsgroup comp.os.minix ([Torvalds, 1991](#BIB25)):'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100019u01-01-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Reading this post, the mentality of many avid Linux users is captured in the
    desire to understand, modify, create, and otherwise tinker with complex systems
    (often referred to as a hacker mentality). The newsgroup Linus posted on was for
    the Minix OS, which at the time was the OS of choice for many people wanting to
    test and develop a Unix-like OS. However, there were licensing restrictions as
    well as technical limitations of Minix that Linus wanted to overcome.
  prefs: []
  type: TYPE_NORMAL
- en: Over nearly 20 years, Linux has matured significantly and is used on many PCs,
    servers, and now mobile devices. There are literally thousands of powerful tools
    available as well as complete development environments for many programming languages.
    The are many distributions that focus on different needs including servers, workstations,
    laptops, embedded devices, security suites, and many more.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Linux in VirtualBox
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Linux is a truly amazing OS and we will use its power throughout this book in
    examples intended for the reader to follow along and complete. All examples in
    this book are performed on an Ubuntu 10.10 64-bit desktop install running as a
    virtual machine (VM). While the virtual machine software from several vendors
    is compatible (including VMWare Fusion running on Mac OS X), this book is focused
    on options that are free, open, or both. In this instance, VirtualBox is both
    open source software and freely available.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This Ubuntu VM will be used extensively through the book for all examples. Subsequent
    chapters will build upon this base install by adding more tools and scripts. Readers
    are encouraged to create this Ubuntu VM and follow along with all examples to
    maximize knowledge. The Ubuntu VM can be used directly for Android forensic cases.
  prefs: []
  type: TYPE_NORMAL
- en: VirtualBox is now owned by Oracle and is distributed under the GPLv2 license.
    There is a section on Oracle’s web site that addresses frequently asked questions
    about licensing.
  prefs: []
  type: TYPE_NORMAL
- en: You can download VirtualBox for many operating systems including Microsoft Windows,
    Mac OS X, and Linux (2.4 and 2.6) from [http://www.virtualbox.org/](http://www.virtualbox.org/).
    After you install VirtualBox, you will see the Oracle VM VirtualBox Manager, shown
    in [Fig. 1.3](#F0020), where you create and manage new VMs.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100019f01-03-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.3 Oracle VM VirtualBox Manager for OS X.
  prefs: []
  type: TYPE_NORMAL
- en: When you create the new VM, make sure you have enough hard drive space (at least
    20 GB is recommended) and as much RAM as you can spare. For the Android build,
    Google recommends at least 1536 MB (1.5 GB) ([Get Android source code, n.d.](#BIB15)).
  prefs: []
  type: TYPE_NORMAL
- en: Using the VirtualBox Manager graphical user interface (GUI) to set the new virtual
    machine is straightforward. However, if you have access an Ubuntu Linux 64-bit
    workstation or server, but do not have the ability to run desktop applications,
    here are the steps you can follow to setup, configure, and run the new VM (VirtualBox
    3.2.10).
  prefs: []
  type: TYPE_NORMAL
- en: 'From an ssh session, it is best to use the program “screen” so that if you
    lose connection to the server, your VM remains active. Then, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100019u01-02a-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![image](img/F100019u01-02b-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: At this point, the VM will start up and you can access the install using any
    Remote Desktop Protocol (RDP) viewer such as Remote Desktop Connection on Windows,
    rdesktop on Linux, or Microsoft’s Remote Desktop Connection Client for Mac. To
    access the above session, you would connect to <host server’s IP:3392>. From there,
    follow the install until it is time to reboot.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you shutdown or reboot the VBoxHeadless session ends; you can simply issue
    the command again to start the server backup. Then, RDP back into the machine
    and install openssh server so that we can use ssh instead of the less efficient
    RDP:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100019u01-03-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now you can find the virtual machine’s IP address by running ifconfig and looking
    at the “inet addr” for eth0\. You can use your favorite ssh program (if on Windows,
    try Putty for a great, free client) and ssh into the virtual machine.
  prefs: []
  type: TYPE_NORMAL
- en: The Sleuth Kit (TSK)
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'Brian Carrier has an excellent open source forensic toolkit called The Sleuth
    Kit (TSK), which will be discussed in this section. Examples throughout this book
    will leverage TSK extensively. Brian developed and continues to maintain TSK and
    provides an enormous service to our industry. If you are not familiar with TSK,
    visit the web site at [http://sleuthkit.org/](http://sleuthkit.org/) and consider
    using the programs. There is quite a bit of information on TSK’s web site as well
    as many forensic blogs and books. If you are going to follow the examples in this
    book, you should install TSK on the Linux workstation with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100019u01-04-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Hopefully others can follow in Brian’s footsteps and provide such important
    toolkits and service to the forensic community.
  prefs: []
  type: TYPE_NORMAL
- en: Disable Automount
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It is critical that forensic workstations do not have automount enabled which,
    as the name infers, will automatically mount a file system when one is found on
    a device connected. The option to disable automount in Ubuntu is done per user,
    so if the workstation will have more than one user account, please make sure you
    change each of them:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100019u01-05-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Then navigate to apps > nautilus > preferences and ensure the “media_automount”
    and “media_automount_open” options are unchecked as illustrated in [Fig. 1.4](#F0025).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100019f01-04-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.4 Disable automount on Ubuntu.
  prefs: []
  type: TYPE_NORMAL
- en: You can then close the Gnome Configuration editor. Now, automount is disabled.
    For typical users, this is more work. However, for a forensic analyst, it is an
    absolute necessity (as is the use of hardware write blockers).
  prefs: []
  type: TYPE_NORMAL
- en: Linux and Forensics—Basic Commands
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Before we setup and configure a Linux forensic workstation, it is helpful to
    provide an overview of Linux’s relevance to forensics. A Linux workstation is
    a powerful tool for forensic investigation due to the wide support for many file
    systems, the advanced tools available, and the ability to develop and compile
    source code. However, since many examiners are not familiar with Linux, the following
    sections provide a breakdown of some of the more common Linux commands including
    a description of the command, its general usage, and one or more examples of how
    the command can be applied.
  prefs: []
  type: TYPE_NORMAL
- en: man
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The “man” command pulls up online manuals for the requested command in the terminal
    window. The manual will provide a detailed description of the command as well
    as its usage (including all the options or “flags” for that command).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100019u01-06-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the following examples, the first command lists the beginning of the manual
    page for the “mount” command, while the second searches all manuals containing
    the characters “grep”, a powerful searching tool.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100019u01-07-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: help
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The “help” command displays information on the requested command, including
    usage and examples, similar to “man.” Some commands use the --help notation while
    others simply use -h or -help.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100019u01-08-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: cd
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This command is used to change into another directory. In Linux, the special
    character ~ is used to represent the current user’s home directory. For example,
    the user ahoog has a home directory on a Linux system at /home/ahoog. From anywhere
    in the file system, you can use ~ to refer to /home/ahoog. This works well for
    documentation so throughout this book we refer to ~ and, even if you have setup
    a different user name, the command will still function as expected.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100019u01-09-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: mkdir
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The “mkdir” command creates a directory in the current location, unless otherwise
    specified.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100019u01-10-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: rmdir/rm
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This command removes existing directories or files based on the flags specified.
    The “rmdir” command will only remove empty folders. If there are files within
    the directory, these will first need to be removed prior to running the “rmdir”
    command. The “rm” command can be used to remove both files and folders, and will
    prompt the user prior to removing. You can override the prompt with the -f option
    but use with caution, hence the phrase “rm minus rf ” or rm -rf.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100019u01-11-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: nano
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The “nano” is a terminal based editor that allows the creation and modification
    of text files. To create a file, simply type the command.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100019u01-12-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Typing “nano” will open the text editor within the terminal window or ssh session,
    allowing the user to enter the contents they wish as shown in [Fig. 1.5](#F0030).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100019f01-05-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.5 Create file using “nano.”
  prefs: []
  type: TYPE_NORMAL
- en: When the text has been entered, pressing Control X will exit the text editor
    and prompt you to save the file. In this case, we set the file name to newfile.txt.
  prefs: []
  type: TYPE_NORMAL
- en: 'To modify an existing file, simply follow the nano command with the file name
    or full path and file name if the file is in a different directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100019u01-13-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: ls
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This command lists files and folders. The “ls” command without any options specified
    will list the file/folder names only in the current directory. Adding the “-lh”
    option will provide a long list with more details including permissions, ownership,
    size, and date and time stamps.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100019u01-14-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: tree
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The “tree” command shows the hierarchy of folders for the directory specified.
    If no parameters are specified, the current directory will be used. In Linux,
    the current directory is referred to as a single “.” while one directory up is
    a double period “..”. In the following output, the current directory is used,
    which happens to be the current user’s home directory. The user can specify how
    many directory levels they wish to view with the “-L” flag. In the first example,
    one level is shown. Whereas in the second example, two levels of the source directory
    and files are displayed. Don’t forget: you can learn all the details of a command
    by examining the man page (man tree) or specifying the command’s help parameter
    (tree --help).'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100019u01-15-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: less
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The “less” command displays specified files one page at a time. This command
    is commonly used in conjunction with other commands to show output one page at
    a time. The following command will display the contents of the sanitize-csv.sh
    file one screen at a time within the terminal window. Once you are in the less
    utility, there are a few key commands to remember:'
  prefs: []
  type: TYPE_NORMAL
- en: '• h: access help menu'
  prefs: []
  type: TYPE_NORMAL
- en: '• q: quit help menu'
  prefs: []
  type: TYPE_NORMAL
- en: '• spacebar: display one screen/page down'
  prefs: []
  type: TYPE_NORMAL
- en: '• b: display one screen/page up'
  prefs: []
  type: TYPE_NORMAL
- en: '• /: search for a pattern'
  prefs: []
  type: TYPE_NORMAL
- en: '• Enter: move one line down'
  prefs: []
  type: TYPE_NORMAL
- en: '• y: move one line up'
  prefs: []
  type: TYPE_NORMAL
- en: There are many more commands and tricks to this powerful utility so read the
    help screens, the man page, or simply search the Internet for more helpful tips.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100019u01-16-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: cat
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The “cat” command outputs the contents of a file to the screen or to a new file
    if specified (without retaining the format of the file).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100019u01-17-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This command can also be used to combine multiple files into one (i.e., often
    referred to as concatenating files).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100019u01-18-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: find
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The “find” command is used to search for files in a directory hierarchy. The
    following command will list all of the files, including the full path, contained
    on the specified user’s home directory.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100019u01-19-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The output of the find command can also be used in another command. For example,
    the following will run the “md5sum” command on the files from the “find” command.
    Several parameters are specified:'
  prefs: []
  type: TYPE_NORMAL
- en: '• find: the command'
  prefs: []
  type: TYPE_NORMAL
- en: '• ∼: find files in the current user’s home directory'
  prefs: []
  type: TYPE_NORMAL
- en: '• -type f: only list regular files (do not list directories)'
  prefs: []
  type: TYPE_NORMAL
- en: '• -exec: run the following command'
  prefs: []
  type: TYPE_NORMAL
- en: '• sha256sum : the utility that calculates a file’s sha256 hash'
  prefs: []
  type: TYPE_NORMAL
- en: '• {} \;: crazy shell escapes and notations!'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100019u01-20-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If you run a command against the results of a large number of files, you can
    run into issues. In those cases, you should research piping the output of the
    file command to a utility called xargs.
  prefs: []
  type: TYPE_NORMAL
- en: 'With most Linux commands, you can also save the output of a command into a
    file. For example, the output from the same command above can be saved in the
    user’s home directory in a file called md5.txt:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100019u01-21-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The output of the find command run against the sha256sum utility is redirected
    to the sha256sum.txt file in the user’s home directory.
  prefs: []
  type: TYPE_NORMAL
- en: chmod
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Short for “change mode,” this command changes file or folder permissions. Many
    examples are provided in the following list. Note that these commands must either
    be run in the directory in which “textfile.txt” is stored, or the full path to
    the file must be provided.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100019u01-22-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The “chmod” command can also be run on a group of files or a folder.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100019u01-23-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: chown
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The “chown” command changes the owner or group of a specified file or directory.
    In the following example, the original owner and group of “textfile.txt” was ahoog.
    The chown command changed the owner to “root.” This command required “sudo.”
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100019u01-24-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: sudo
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Preceding any command with “sudo” gives the user elevated permissions, allowing
    them to run a command as a super user or another user. Sudo is required to run
    certain commands such as apt-get (to install software), chown (to change ownership
    if you are not the owner), mount, accessing raw disk devices, and many other commands
    depending on the files it must access. To use sudo, simply precede the command
    with “sudo,” which will then prompt you for your password. Then log the command
    in the sudo logs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100019u01-25-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: apt-get
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The “apt” part of the apt-get command stands for Advanced Packaging Tool and
    allows the user to install and uninstall software, upgrade existing software,
    or even perform system updates. To run this command, sudo permissions are required.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100019u01-26-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: grep
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The “grep” command searches through a file, or list of files and folders, for
    a specified phrase. It is equivalent to opening a document and doing a “find”
    for a certain phrase. The search is case sensitive, so if you are unsure if a
    letter is capitalized or lower case, then you should specify the “-i” (case insensitive)
    flag. This option will take longer, depending on the size of the file that is
    being searched.
  prefs: []
  type: TYPE_NORMAL
- en: 'General usage is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100019u01-27-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The following contains several examples of the usage of “grep.”
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100019u01-28-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The next command searches the contents of all files on the user’s desktop for
    the word “unnecessary.” The results show that this word was found in “textfile.txt,”
    and there are also matches for this word in “WXP-PRO-OEM.iso.” Because this is
    a binary file, further techniques will need to be performed to make the content
    viewable.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100019u01-29-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you use Linux more extensively for forensic investigations, grep will become
    an indispensable utility.
  prefs: []
  type: TYPE_NORMAL
- en: Piping and Redirecting Files (| and >)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The pipe character “|” (located above the “Enter” key on most keyboards) allows
    the output of one command to be sent to another for further processing. Output
    can also be redirected into another file using “>”.
  prefs: []
  type: TYPE_NORMAL
- en: The following command takes the results of “cat file.txt” and pipes it to the
    “less” command, allowing the user to view the contents one page at a time.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100019u01-30-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The next command searches for “android” in “ch1.xml” using the grep command
    and then takes the results of that search and performs another search, case insensitive,
    for “forensics.” The final results are then piped through “less” to be displayed
    one page at a time.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100019u01-31-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Redirecting output from a command can also be helpful. The following command
    takes the output of “book.txt” (using the “cat” command) and copies the output
    into a file on the user’s desktop called “newdocument.txt.”
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100019u01-32-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Redirection can be very helpful while running the “strings” command on a particular
    file or even an entire disk image, which will be explored further in [Chapter
    7](CHP007.html).
  prefs: []
  type: TYPE_NORMAL
- en: Android Open Source Project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The open strategy behind Android naturally led to the release of the Android
    source code through the AOSP on October 21, 2008\. The site states ([Get Android
    source code, n.d.](#BIB15)):'
  prefs: []
  type: TYPE_NORMAL
- en: We created Android in response to our own experiences launching mobile apps.
    We wanted to make sure that there would always be an open platform available for
    carriers, OEMs [original equipment manufacturers], and developers to use to make
    their innovative ideas a reality. We wanted to make sure that there was no central
    point of failure, where one industry player could restrict or control the innovations
    of any other. The solution we chose was an open and open-source platform.
  prefs: []
  type: TYPE_NORMAL
- en: The development strategy focuses on flagship devices (for instance, the Nexus
    series), which allows Google to absorb much of the risk with a new platform. The
    manufacturers can then use the latest release of Android on their devices while
    the AOSP develops the next major release.
  prefs: []
  type: TYPE_NORMAL
- en: AOSP Licenses
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The AOSP is governed by two primary software licenses, the Apache Software License
    2.0 (Apache 2.0 or ASL2.0) and the GNU Public License v2 (GPLv2). The GPLv2 is
    a far more restrictive license that forces contributors to distribute all of their
    source code under the same license. Google felt this would limit the commercial
    backing of Android, so the GPLv2 primarily covers the use of the Linux kernel
    core to Android only.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Apache 2.0 license, however, is more accepted by commercial entities because
    it is less restrictive and does not force companies to open source all of their
    related software. The AOSP addresses the question of why they chose the Apache
    2.0 license ([Licenses, n.d.](#BIB18)):'
  prefs: []
  type: TYPE_NORMAL
- en: We are sometimes asked why Apache Software License 2.0 is the preferred license
    for Android. For userspace (that is, non-kernel) software, we do in fact prefer
    ASL2.0 (and similar licenses like BSD, MIT, etc.) over other licenses such as
    LGPL.
  prefs: []
  type: TYPE_NORMAL
- en: Android is about freedom and choice. The purpose of Android is to promote openness
    in the mobile world, but we don’t believe it’s possible to predict or dictate
    all the uses to which people will want to put our software. So, while we encourage
    everyone to make devices that are open and modifiable, we don’t believe it is
    our place to force them to do so. Using LGPL libraries would often force them
    to do so.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some of our specific concerns:'
  prefs: []
  type: TYPE_NORMAL
- en: '1. LGPL (in simplified terms) requires either: shipping of source to the application;
    a written offer for source; or linking the LGPL-ed library dynamically and allowing
    users to manually upgrade or replace the library. Since Android software is typically
    shipped in the form of a static system image, complying with these requirements
    ends up restricting OEMs’ designs. (For instance, it’s difficult for a user to
    replace a library on read-only flash storage.)'
  prefs: []
  type: TYPE_NORMAL
- en: 2. LGPL requires allowance of customer modification and reverse engineering
    for debugging those modifications. Most device makers do not want to have to be
    bound by these terms, so to minimize the burden on these companies we minimize
    usage of LGPL software in userspace.
  prefs: []
  type: TYPE_NORMAL
- en: 3. Historically, LGPL libraries have been the source of a large number of compliance
    problems for downstream device makers and application developers. Educating engineers
    on these issues is difficult and slow-going, unfortunately. It’s critical to Android’s
    success that it be as easy as possible for device makers to comply with the licenses.
    Given the difficulties with complying with LGPL in the past, it is most prudent
    to simply not use LGPL libraries if we can avoid it.
  prefs: []
  type: TYPE_NORMAL
- en: The issues discussed above are our reasons for preferring ASL2.0 for our own
    code. They aren’t criticisms of LGPL or other licenses. We do feel strongly on
    this topic, even to the point where we’ve gone out of our way to make sure as
    much code as possible is ASL2.0\. However, we love all free and open source licenses,
    and respect others’ opinions and preferences. We’ve simply decided that ASL2.0
    is the right license for our goals.
  prefs: []
  type: TYPE_NORMAL
- en: Development Process
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The AOSP is a very sophisticated and complex open source project, requiring
    the coordination of many developers across the world. As such, the AOSP has a
    defined set of roles and processes that must be followed to contribute to the
    project. The roles include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '• Contributor/developers: individuals and corporations who contribute code
    to the project'
  prefs: []
  type: TYPE_NORMAL
- en: '• Verifiers: individuals who test code changes'
  prefs: []
  type: TYPE_NORMAL
- en: '• Approvers: individuals who are experienced developers and decide whether
    a change will be included or excluded'
  prefs: []
  type: TYPE_NORMAL
- en: '• Project leads: typically Google employees who are responsible for the overall
    management of the AOSP project'
  prefs: []
  type: TYPE_NORMAL
- en: Anyone can download, compile, and enhance the AOSP project. [Figure 1.6](#F0035)
    illustrates the development process.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100019f01-06-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.6 AOSP development process.
  prefs: []
  type: TYPE_NORMAL
- en: Value of Open Source in Forensics
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Not many forensic examiners will, or need to, contribute directly to the AOSP.
    However, there is tremendous value in downloading the software. For example, when
    examining a Yet Another Flash File System2 (YAFFS2) physical image from an Android
    1.5 device, the phrase “silly old name” frequently appears when using strings
    to extract ASCII text. For most file systems, the examiner would have to simply
    conjecture as to the relevance of “silly old name.” However, by downloading the
    source code, an examiner can quickly search for the phrase, identify the code,
    and examine it for additional information. In this case, when the object header
    for a YAFFS2 object (e.g., a file) is updated, the name field is set to “silly
    old name” under certain circumstances.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the AOSP in file kernel/fs/yaffs2/yaffs_guts.c, there is a function called
    yaffs_UpdateObjectHeader. The comment in the code and function header reads:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100019u01-33-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'A variable called “oldName” is created with the contents “silly old name”:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100019u01-34-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'And the name field of the object header being updated is set to “oldName” when
    the previous “ChunkId” is greater than 0:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100019u01-35-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The code also checks to see if the original call to the function passed in
    a new name for the object. If a new name value was not provided to the function,
    the value of oldName (which is still “silly old name”) is used:'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100019u01-36-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: While not every examiner is comfortable interpreting a programmer’s code (C
    in this case), clearly this information could be useful in a forensic examination.
    And, of course, there are many other situations, such as how SMS messages are
    time stamped or how geo-tagging is implemented, which could bring tremendous value
    to an examination.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading and Compiling AOSP
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Hopefully the value of referring to the Android source code was demonstrated
    in the previous YAFFS2 example. The following section highlights the steps you
    should follow to download and compile the latest release from the AOSP. While
    Android 2.2 and earlier versions would compile on 32-bit machines, the latest
    version of the AOSP (Android 2.3) and forward require a 64-bit computer.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Ubuntu VM we previously built, we can now start updating the stock
    Ubuntu install and then build Android from source code.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100019u01-37a-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![image](img/F100019u01-37b-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Congratulations, you have built Android from source (or started the build—it
    takes a while).
  prefs: []
  type: TYPE_NORMAL
- en: Now, if you come across an aspect of Android you need to understand better,
    you can search the source code and learn more about it. [Table 1.5](#T0030) charts
    the core Android project, which you will find maps roughly to the directories
    in the Android source tree. The project information can be found on the AOSP site
    at [https://sites.google.com/a/android.com/opensource/projects](https://sites.google.com/a/android.com/opensource/projects),
    which provides a brief description of each project function.
  prefs: []
  type: TYPE_NORMAL
- en: Table 1.5 Core Android Projects
  prefs: []
  type: TYPE_NORMAL
- en: '| Project | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| bionic | C runtime: libc, libm, libdl, dynamic linker |'
  prefs: []
  type: TYPE_TB
- en: '| bootloader/legacy | Bootloader reference code |'
  prefs: []
  type: TYPE_TB
- en: '| build | Build system |'
  prefs: []
  type: TYPE_TB
- en: '| dalvik | Dalvik virtual machine |'
  prefs: []
  type: TYPE_TB
- en: '| development | High-level development and debugging tools |'
  prefs: []
  type: TYPE_TB
- en: '| frameworks/base | Core Android app framework libraries |'
  prefs: []
  type: TYPE_TB
- en: '| frameworks/policies/base | Framework configuration policies |'
  prefs: []
  type: TYPE_TB
- en: '| hardware/libhardware | Hardware abstraction library |'
  prefs: []
  type: TYPE_TB
- en: '| hardware/ril | Radio interface layer |'
  prefs: []
  type: TYPE_TB
- en: '| kernel | Linux kernel |'
  prefs: []
  type: TYPE_TB
- en: '| prebuilt | Binaries to support Linux and Mac OS builds |'
  prefs: []
  type: TYPE_TB
- en: '| recovery | System recovery environment |'
  prefs: []
  type: TYPE_TB
- en: '| system/bluetooth | Bluetooth tools |'
  prefs: []
  type: TYPE_TB
- en: '| system/core | Minimal bootable environment |'
  prefs: []
  type: TYPE_TB
- en: '| system/extras | Low-level debugging/inspection tools |'
  prefs: []
  type: TYPE_TB
- en: '| system/wlan/ti | TI 1251 WLAN driver and tools |'
  prefs: []
  type: TYPE_TB
- en: Internationalization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Android has broad support for international languages and locales throughout
    the platform. This not only allows the phone to display menus, web sites, and
    other aspects of the graphical user interface in many languages, but there is
    also support for input in a variety of international keyboard formats.
  prefs: []
  type: TYPE_NORMAL
- en: Unicode
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The key to Android’s ability to support a multitude of languages is the ability
    to encode and decode characters in Unicode, the industry standard encoding scheme
    that supports over 600 languages ([Languages and scripts, n.d.](#BIB19)).
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Cuneiform support
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For those curious and adventurous readers, Unicode does support Cuneiform, although
    we are still waiting for someone to implement the Android user interface in Sumero-Akkadian
    Cuneiform. The full list of Unicode supported languages and scripts can be viewed
    at [http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/languages_and_scripts.html](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/languages_and_scripts.html)
  prefs: []
  type: TYPE_NORMAL
- en: Keyboards
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Android supports many different types of keyboards, sometimes referred to as
    the input method. For example, when running an Android virtual device (AVD), the
    emulator allows you to change the language of the keyboard input as shown in [Fig.
    1.7](#F0040).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100019f01-07-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.7 Android virtual device with Chinese number pad.
  prefs: []
  type: TYPE_NORMAL
- en: The ability to handle various languages is simply built into the AVD system.
    This has important implications in a forensic investigation where analysts must
    remain vigilant and consider that some data could be encoded in an unexpected
    language.
  prefs: []
  type: TYPE_NORMAL
- en: 'The same feature of the ADV is available on the physical Android devices as
    well. For example, on the HTC Incredible distributed in the United States by Verizon
    Wireless, there is a setting called Language and Keyboard. You can select from
    two languages for the phone user interface: English and Español. Then, under the
    Text settings, you can choose your Touch Input settings. From here, you can specify
    the keyboard type (QWERTY, Phone Keypad, or Compact QWERTY), select from over
    20 international keyboards, specific options for Chinese Text input (Traditional
    or Simplified Chinese), and a number of other options. The latest version of Android
    (Gingerbread, 2.3) now supports 57 languages ([Android 2.3 platform, n.d.](#BIB8)).'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, Android supports third-party keyboards that the user can install. An
    alternative keyboard that is gaining popularity is called Swype that allows the
    user to drag their finger across the keyboard to each letter in one continuous
    motion. The software is then able to determine, with high probability, what word
    you were typing. The software supports multiple languages and is a good example
    of a pluggable keyboard input.
  prefs: []
  type: TYPE_NORMAL
- en: Custom Branches
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As Android was released as open source, anyone (including you after following
    the steps above!) can download and then customize the Android source code. While
    many people who undertake this ultimately release their changes back to Google
    for inclusion into Android, some people fully branch the code and release their
    own version of Android.
  prefs: []
  type: TYPE_NORMAL
- en: Aftermarket Firmware
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Perhaps the most prolific example of custom Android branches (also called Mods,
    firmware, and ROMs) comes from the Android hacking and enthusiast community. The
    community is a very large and diverse group of individuals who are motivated to
    develop, experiment, and otherwise hack Android. Some of their work may involve
    gaining root permissions on an Android device, enabling new features, or simply
    bragging about their latest customization. The community is passionate, prolific,
    and a terrific source of information (as well as misinformation) and they respond
    to many requests for help. Serious Android researchers would be remiss if they
    ignored this community. However, the sheer volume of information makes it a very
    time-consuming endeavor.
  prefs: []
  type: TYPE_NORMAL
- en: One of the most popular communities is called XDA Developers, self-described
    as “the largest Internet community of smartphone enthusiasts and developers for
    the Android and Windows Mobile platforms” ([xda-developers, n.d.](#BIB26)). Their
    web site has over 3.2 million registered users and runs a truly impressive forum.
  prefs: []
  type: TYPE_NORMAL
- en: 'Many of the custom Mods are released on XDA and often the developers themselves
    are active in the community. Perhaps the most popular aftermarket firmware is
    CyanogenMod. This firmware is based on the AOSP. It adds new features and attempts
    to increase the performance and reliability of the device over Android-based ROMs
    released by the vendors and carriers directly ([CyanogenMod, n.d.](#BIB13)). Currently
    CyanogenMod supports 17 different smartphone and tablet devices from six manufacturers:
    Commitva, Dell, HTC, Motorola, Samsung, and Viewsonic. These aftermarket firmwares
    have root access enabled on the device which, as we will discuss in [Chapter 6](CHP006.html),
    is key to obtaining a physical acquisition of the device.'
  prefs: []
  type: TYPE_NORMAL
- en: OPhone OS
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The Open Mobile Phone OS (OPhone OS) is based on Android and developed by Borqs,
    a Chinese software developer. OPhone OS was designed for Chinese government-owned
    China Mobile, the largest mobile carrier in the world with over 500 million subscribers.
    In June 2010, OPhone OS 2.0 was released in Beijing, and while Borqs/OPhone OS
    is relatively unknown outside of China, they clearly play an important and growing
    role in the Android ecosystem. Inside China, Borqs CEO stated they only work with
    one carrier, China Mobile, because “you cannot serve two masters” in that country
    ([China’s OPhone, n.d.](#BIB10)).
  prefs: []
  type: TYPE_NORMAL
- en: So, they reserve the name OPhone OS for their China Mobile software. However,
    according to their web site, they also develop another branch of Android software
    that they call Android+ ([China’s OPhone, n.d.](#BIB10)). In their press release,
    Borqs explains the Dell Aero is outfitted with their Android+ software, which
    includes an Apple-esque user interface, and that their software is also being
    distributed by Dell in Brazil and Mexico.
  prefs: []
  type: TYPE_NORMAL
- en: Android on iPhone (and Other non-Android Devices)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Perhaps one of the most controversial aftermarket firmwares is the one that
    enables Android to run on an iPhone. Since many mobile devices are based on the
    ARM processor, the porting process is achievable. This allows Android to run on
    devices designed to run other OSs like Windows Mobile, Symbian, iOS, and others.
    There’s nothing quite like showing an Apple fanboy your beautiful iPhone running
    Android!
  prefs: []
  type: TYPE_NORMAL
- en: Android Market
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Android Market is an avenue for third-party developers to release their
    applications to anyone who owns an Android device. The Android Market was first
    announced on August 28, 2008 on the Google Developer blog as “an open content
    distribution system that will help end users find, purchase, download and install
    various types of content on their Android-powered devices” ([Android developers
    blog, n.d.](#BIB3)). When the market was first released in October 2008, it did
    not support paid apps. However, by early 2009 the Android Market supported paid
    applications in both the United States and United Kingdom. By January 2011, the
    Android Market supported paid apps in 29 countries ([Supported locations, n.d.](#BIB24)).
    Several other countries, most notably India, can use the Android Market but currently
    cannot install paid apps.
  prefs: []
  type: TYPE_NORMAL
- en: Google’s light-handed approach to managing the Android Market is in stark contrast
    to Apple’s tight management of their App Store. While the Android Market does
    have Terms of Service for users ([Android Market terms, n.d.](#BIB6)) and an Android
    Market Developer Distribution Agreement ([Android Market developer, n.d.](#BIB5))
    for developers, apps are released to the market without an approval process. Instead,
    Google believes that the app ratings will weed out apps that are buggy or show
    little merit.
  prefs: []
  type: TYPE_NORMAL
- en: To release an app into the Android Market, developers must be registered, pay
    a $25 fee, and sign their app with a private key which will uniquely identify
    them to the market. When a user purchases an app, the developer receives 70% of
    the purchase price with the remaining 30% going to Google (and, at times, the
    carrier involved). Initially, users had a 48 h window of time where they could
    return the apps. However, in December 2010, Google shortened that window to 15 min.
  prefs: []
  type: TYPE_NORMAL
- en: 'Google has the ability to remotely remove an app not only from the Android
    Market, but also directly from an Android device. The Remote Application Removal
    Feature is a security control Android possesses where a dangerous application
    could be removed from active circulation in a rapid and scalable manner to prevent
    further exposure to users ([Android developers blog: exercising, n.d.](#BIB4)).
    The security control was first exercised in June 2010 when a security researcher
    distributed a proof of concept app which could allow it to download and install
    another app on the device ([Mills, n.d.](#BIB21)).'
  prefs: []
  type: TYPE_NORMAL
- en: In the open spirit of Android, Google also does not preclude users from directly
    installing apps on their phone from the developers’ web site, nor does it preclude
    the development of a competing app marketplace. There are several alternatives
    to the Android Market, most of which are small in comparison. Also, several large
    companies have either announced or indicated their intentions to create an alternative
    app store, including Amazon, Best Buy, and Verizon.
  prefs: []
  type: TYPE_NORMAL
- en: Installing an app
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To install an app from the Android Market, shown in [Fig. 1.8](#F0045), a user
    must first run the Market app and sign in with a Gmail account. This account allows
    the user to purchase paid apps through a Google Checkout account with address
    and credit card information. Recently, Google has partnered with some carriers
    so an app can be purchased and placed on the subscribers’ monthly wireless carrier
    bill instead of the Google Checkout credit card.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100019f01-08-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.8 Android Market on HTC Incredible running Android 2.2.
  prefs: []
  type: TYPE_NORMAL
- en: The Market app allows the user to search for apps and to browse by topic or
    popularity. Once an app is selected, a dedicated app page is displayed from which
    the user may install the app. The dedicated page also provides general information
    such as description, number of downloads, average rating, detailed reviews, related
    apps, developer info and, finally, an opportunity to provide feedback or flag
    the app as inappropriate.
  prefs: []
  type: TYPE_NORMAL
- en: As we will discuss, permissions are a central component to Android security.
    Once a user decides to install an app, they are presented with the screen that
    displays all of the permissions an app is requesting, as seen in [Fig. 1.9](#F0050).
    At this point, the user can accept the permissions and proceed with the install
    or go back to the previous screen.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100019f01-09-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.9 Android app permissions.
  prefs: []
  type: TYPE_NORMAL
- en: The app is then downloaded and installed and the results are displayed in the
    notification bar at the top of the device. From there, the user can run the application
    or access it anytime from the list of applications.
  prefs: []
  type: TYPE_NORMAL
- en: To remove an application, the user can access the device’s Settings and choose
    the Application setting. From there, they can Manage applications (see [Fig. 1.10](#F0055)),
    which displays a list of apps with various characteristics such as downloaded,
    running, and on SD card.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100019f01-10-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.10 Manage applications.
  prefs: []
  type: TYPE_NORMAL
- en: By selecting an app, the user can then see the Application info screen which
    shows various information about the apps and allows the user options to Force
    stop, Clear data, Clear cache, and Uninstall as shown in [Fig. 1.11](#F0060).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](img/F100019f01-11-9781597496513.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.11 Application information, including uninstall.
  prefs: []
  type: TYPE_NORMAL
- en: Application Statistics
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Android Market is growing quickly. Six months after its release, T-Mobile’s
    Chief Technology Officer, Cole Brodman, commented that users needed more filters
    to successfully locate apps from the nearly 2300 apps on the Market ([Lawson,
    n.d.](#BIB20)). By January 2011, over 200,000 apps were on the Market with 27,227
    added in November 2010 alone ([Android Market statistics, n.d.](#BIB7)). Estimates
    place the number of downloaded apps at over 2.5 billion.
  prefs: []
  type: TYPE_NORMAL
- en: Obviously, apps are a key area of focus for both security and forensics. In
    [Chapter 4](CHP004.html), we will explore in great detail how apps persist data
    to an Android device, what types of information are stored, and how data can be
    recovered and analyzed.
  prefs: []
  type: TYPE_NORMAL
- en: Android forensics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Clearly there is a need for Android forensics. Smartphones in general are perhaps
    the one electronic device that knows the most about an individual. For most people,
    their smartphone is rarely more than a few feet from them at any point of time—including
    while sleeping. The device blends both personal and corporate information and
    has the ability to store vast amounts of data including text messages, e-mails,
    GPS locations, picture, videos, and more. And people tend to be more honest with
    their smartphone than any other person or device. Why? Because people feel the
    device is secure and can provide them with answers to questions they may choose
    not to share with anyone else. More than one forensic examiner has quipped, “You
    are what you Google,” clearly a byproduct of seeing firsthand the honesty with
    which people use their smartphones.
  prefs: []
  type: TYPE_NORMAL
- en: Challenges
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Of course, nothing worth doing is easy and both mobile forensics and Android
    forensics in particular have a host of challenges that must be overcome.
  prefs: []
  type: TYPE_NORMAL
- en: A fundamental goal in digital forensics is to prevent any modification of the
    target device by the examiner. However, mobile phones lack traditional hard drives
    that can be shutdown, connected to a write blocker, and imaged in a forensically
    sound way. Any interaction with the smartphone will change the device in some
    way. As such, the examiners must use their judgment when examining a mobile device
    and if the device is modified, they must explain how it was modified and—as importantly—why
    that choice was made.
  prefs: []
  type: TYPE_NORMAL
- en: Some forensic examiners take exception to this approach and debates have ensued.
    However, techniques that may alter a computer targeted for forensic examination
    have been used for some time. For example, often a live memory analysis is necessary
    in an investigation of a malware attack. Similarly, if a hard drive is encrypted,
    an examiner must image the device while it is still running or they run the risk
    of never having the ability to access the data on the drive. Other good examples
    are systems that must remain online due to complex environments, typically found
    in cases involving larger corporate servers. While every examiner should strive
    to not change the device they are investigating, it is rarely possible in the
    mobile world. So, if the device cannot be modified, then the only other choice
    would be to not examine the device. Clearly this option is not acceptable as evidence
    from mobile forensics is a critical component in many investigations and has even
    solved many crimes.
  prefs: []
  type: TYPE_NORMAL
- en: Further complicating Android forensics is the sheer variety of devices, Android
    versions, and applications. The permutations of devices and Android versions alone
    are in the thousands and each device plus platform has unique characteristics.
    While a logical analysis of every Android phone is achievable, the vast combinations
    make the full physical acquisition of *every* Android device likely unachievable.
    Even a minor difference in the Android version may require extensive testing and
    validation in high-stakes cases.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Android is a fast growing, feature-rich, and exciting mobile platform. The combination
    of features, connectivity, and popularity naturally lead to a growing need for
    Android forensics. While the difficulty of mobile forensics is increasing, the
    value is increasing as well. The open source aspect of Android greatly assists
    in the fundamental understanding a forensic analyst requires, making Android an
    ideal platform to work on.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 1\. Alliance, F. A. Q. (n.d.). *Open Handset Alliance*. Retrieved January 3,
    2011, from [http://www.openhandsetalliance.com/oha_faq.html](http://www.openhandsetalliance.com/oha_faq.html).
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Alliance Members. (n.d.). *Open Handset Alliance*. Retrieved March 9, 2011,
    from [http://www.openhandsetalliance.com/oha_members.html](http://www.openhandsetalliance.com/oha_members.html).
  prefs: []
  type: TYPE_NORMAL
- en: '3\. *Android developers blog: Android Market: a user-driven content distribution
    system*. (n.d.). Retrieved January 9, 2011, from [http://android-developers.blogspot.com/2008/08/android-market-user-driven-content.html](http://android-developers.blogspot.com/2008/08/android-market-user-driven-content.html).'
  prefs: []
  type: TYPE_NORMAL
- en: '4\. *Android developers blog: Exercising our remote application removal feature*.
    (n.d.). Retrieved January 9, 2011, from [http://android-developers.blogspot.com/2010/06/exercising-our-remote-application.html](http://android-developers.blogspot.com/2010/06/exercising-our-remote-application.html).'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. *Android Market developer distribution agreement*. (n.d.). Retrieved January
    9, 2011, from [http://www.android.com/us/developer-distribution-agreement.html](http://www.android.com/us/developer-distribution-agreement.html).
  prefs: []
  type: TYPE_NORMAL
- en: 6\. *Android Market terms of service*. (n.d.). Retrieved January 9, 2011, from
    [http://www.google.com/mobile/android/market-tos.html](http://www.google.com/mobile/android/market-tos.html).
  prefs: []
  type: TYPE_NORMAL
- en: 7\. *Android Market statistics from AndroLib, Androlib, Android applications
    and games directory*. (n.d.). Retrieved January 9, 2011, from [http://www.androlib.com/appstats.aspx](http://www.androlib.com/appstats.aspx).
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Android 2.3 platform, & Android developers. (n.d.). Retrieved January 8,
    2011, from [http://developer.android.com/sdk/android-2.3.html#locs](http://developer.android.com/sdk/android-2.3.html%23locs).
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Bort, D. (n.d.). *Android is now available as open source*. Android Open
    Source Project. Retrieved January 3, 2011, from [https://sites.google.com/a/android.com/opensource/posts/opensource](https://sites.google.com/a/android.com/opensource/posts/opensource).
  prefs: []
  type: TYPE_NORMAL
- en: 10\. *China’s OPhone to find its way to US as Android*+. (n.d.). Retrieved January
    8, 2011, from [http://www.borqs.com/news.jsp](http://www.borqs.com/news.jsp).
  prefs: []
  type: TYPE_NORMAL
- en: '11\. *Corporate information: About*. (n.d.). Google. Retrieved January 4, 2011,
    from [http://www.google.com/corporate/](http://www.google.com/corporate/).'
  prefs: []
  type: TYPE_NORMAL
- en: 12\. *comScore reports November 2010 U.S. mobile subscriber market share*. (n.d.).
    comScore.Inc. Retrieved January 9, 2011, from [http://www.comscore.com/Press_Events/Press_Releases/2011/1/comScore_Reports_November](http://www.comscore.com/Press_Events/Press_Releases/2011/1/comScore_Reports_November).
  prefs: []
  type: TYPE_NORMAL
- en: 13\. *CyanogenMod, About the Rom, CyanogenMod*. (n.d.). Retrieved January 8,
    2011, from [http://www.cyanogenmod.com/about](http://www.cyanogenmod.com/about).
  prefs: []
  type: TYPE_NORMAL
- en: 14\. *Gartner says worldwide mobile phone sales grew 35 percent in third quarter
    2010; smartphone sales increased 96 percent*. (n.d.) Technology Research & Business
    Leader Insight. Gartner Inc. Retrieved March 9, 2011, from [http://www.gartner.com/it/page.jsp?
    id = 1466313](http://http://www.gartner.com/it/page.jsp?id = 1466313).
  prefs: []
  type: TYPE_NORMAL
- en: 15\. *Get Android source code, Android open source*. (n.d.). Retrieved March
    9, 2011, from [http://source.android.com/source/download.html](http://source.android.com/source/download.html).
  prefs: []
  type: TYPE_NORMAL
- en: '16\. *Google Investor: Google android activating 350,000 devices daily (data
    visualization video) “Top global smartphone platform.”* (n.d.). Retrieved March
    9, 2011, from [http://googinvestor.blogspot.com/2011/03/google-android-activations-350k-daily.html](http://googinvestor.blogspot.com/2011/03/google-android-activations-350k-daily.html).'
  prefs: []
  type: TYPE_NORMAL
- en: '17\. Krazit, T. (n.d.). *Google’s Rubin: Android “a revolution.” Digital MediadCNET
    News. Technology News—CNET News*. Retrieved January 5, 2011, from [http://news.cnet.com/8301-1023_3-10245994-93.html](http://news.cnet.com/8301-1023_3-10245994-93.html).'
  prefs: []
  type: TYPE_NORMAL
- en: 18\. Licenses. (n.d.). *Android open source*. Retrieved January 5, 2011, from
    [http://source.android.com/source/licenses.html](http://source.android.com/source/licenses.html).
  prefs: []
  type: TYPE_NORMAL
- en: 19\. Languages and scripts. (n.d.). *Unicode Consortium*. [http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/languages_and_scripts.html](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/languages_and_scripts.html).
  prefs: []
  type: TYPE_NORMAL
- en: 20\. Lawson, S. (n.d.). *Android Market needs more filters, T-Mobile says*.
    ITworld, IT news, technology analysis and how-to resources. Retrieved January
    9, 2011, from [http://www.itworld.com/personal-tech/64481/android-market-needs-more-filters-t-mobile-says](http://www.itworld.com/personal-tech/64481/android-market-needs-more-filters-t-mobile-says).
  prefs: []
  type: TYPE_NORMAL
- en: 21\. Mills, E. (n.d.). *Google remotely wipes apps off Android phones*. InSecurity
    Complex—CNET News. Technology News—CNET News. Retrieved January 9, 2011, from
    [http://news.cnet.com/8301-27080_3-20008922-245.html](http://news.cnet.com/8301-27080_3-20008922-245.html).
  prefs: []
  type: TYPE_NORMAL
- en: '22\. *Official Google Blog: Where’s my Gphone?* (n.d.). Retrieved January 2,
    2011, from [http://googleblog.blogspot.com/2007/11/wheres-my-gphone.html](http://googleblog.blogspot.com/2007/11/wheres-my-gphone.html).'
  prefs: []
  type: TYPE_NORMAL
- en: 23\. *Supported locations for merchants–Android Market help*. (n.d.). Retrieved
    January 9, 2011, from [http://www.google.com/support/androidmarket/bin/answer.py?hl](http://www.google.com/support/androidmarket/bin/answer.py%3Fhl) = en&answer = 150324.
  prefs: []
  type: TYPE_NORMAL
- en: 24\. Torvalds, L. (1991, October 5). *Free minix-like kernel sources for 386-AT–comp.os.minix*.
    Google Groups. Retrieved March 3, 2011, from [http://groups.google.com/group/comp.os.minix/msg/2194d253268b0a1b](http://groups.google.com/group/comp.os.minix/msg/2194d253268b0a1b).
  prefs: []
  type: TYPE_NORMAL
- en: 25\. xda-developers. (n.d.). Retrieved January 8, 2011, from [www.xda-developers.com/](http://www.xda-developers.com/).
  prefs: []
  type: TYPE_NORMAL
