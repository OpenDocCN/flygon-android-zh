["```java\nprivate float distanceRemaining;\nprivate long timeTaken;\nprivate long timeStarted;\nprivate long fastestTime;\n```", "```java\n// Draw the hud\npaint.setTextAlign(Paint.Align.LEFT);\npaint.setColor(Color.argb(255, 255, 255, 255));\npaint.setTextSize(25);\ncanvas.drawText(\"Fastest:\"+ fastestTime + \"s\", 10, 20, paint);\ncanvas.drawText(\"Time:\" + timeTaken + \"s\", screenX / 2, 20, paint);\ncanvas.drawText(\"Distance:\" + \n distanceRemaining / 1000 + \n \" KM\", screenX / 3, screenY - 20, paint);\n\ncanvas.drawText(\"Shield:\" + \n player.getShieldStrength(), 10, screenY - 20, paint);\n\ncanvas.drawText(\"Speed:\" + \n player.getSpeed() * 60 + \n \" MPS\", (screenX /3 ) * 2, screenY - 20, paint);\n\n// Unlock and draw the scene\nourHolder.unlockCanvasAndPost(canvas);\n```", "```java\nprivate int shieldStrength;\n```", "```java\n shieldStrength = 2;\n```", "```java\npublic int getShieldStrength() {\n  return shieldStrength;\n}\n```", "```java\nprivate int screenX;\nprivate int screenY;\n```", "```java\nscreenX = x;\nscreenY = y;\n```", "```java\nprivate Context context;\n```", "```java\nsuper(context);\nthis.context  = context;\n\n```", "```java\nprivate void startGame(){\n    //Initialize game objects\n        player = new PlayerShip(context, screenX, screenY);\n        enemy1 = new EnemyShip(context, screenX, screenY);\n        enemy2 = new EnemyShip(context, screenX, screenY);\n        enemy3 = new EnemyShip(context, screenX, screenY);\n\n        int numSpecs = 40;\n        for (int i = 0; i < numSpecs; i++) {\n            // Where will the dust spawn?\n            SpaceDust spec = new SpaceDust(screenX, screenY);\n            dustList.add(spec);\n        }\n\n        // Reset time and distance\n        distanceRemaining = 10000;// 10 km\n        timeTaken = 0;\n\n        // Get start time\n        timeStarted = System.currentTimeMillis();\n}\n```", "```java\n// Initialize our player ship\n//player = new PlayerShip(context, x, y);\n//enemy1 = new EnemyShip(context, x, y);\n//enemy2 = new EnemyShip(context, x, y);\n//enemy3 = new EnemyShip(context, x, y);\n\n//int numSpecs = 40;\n\n//for (int i = 0; i < numSpecs; i++) {\n      // Where will the dust spawn?\n      //SpaceDust spec = new SpaceDust(x, y);\n      //dustList.add(spec);\n//}\n\nstartGame();\n\n```", "```java\npublic void reduceShieldStrength(){\n  shieldStrength --;\n}\n```", "```java\n// Collision detection on new positions\n// Before move because we are testing last frames\n// position which has just been drawn\nboolean hitDetected = false;\nif(Rect.intersects(player.getHitbox(), enemy1.getHitbox())){\n hitDetected = true;\n    enemy1.setX(-100);\n}\n\nif(Rect.intersects(player.getHitbox(), enemy2.getHitbox())){\n hitDetected = true;\n    enemy2.setX(-100);\n}\n\nif(Rect.intersects(player.getHitbox(), enemy3.getHitbox())){\n hitDetected = true;\n    enemy3.setX(-100);\n}\n\nif(hitDetected) {\n player.reduceShieldStrength();\n if (player.getShieldStrength() < 0) {\n //game over so do something\n }\n}\n\n```", "```java\nprivate boolean gameEnded;\n```", "```java\ngameEnded = false;\n```", "```java\nif(!gameEnded) {\n            //subtract distance to home planet based on current speed\n            distanceRemaining -= player.getSpeed();\n\n            //How long has the player been flying\n            timeTaken = System.currentTimeMillis() - timeStarted;\n}\n```", "```java\n//Completed the game!\nif(distanceRemaining < 0){\n  //check for new fastest time\n  if(timeTaken < fastestTime) {\n    fastestTime = timeTaken;\n  }\n\n  // avoid ugly negative numbers\n  // in the HUD\n  distanceRemaining = 0;\n\n  // Now end the game\n  gameEnded = true;\n}\n```", "```java\nif(hitDetected) {\n  player.reduceShieldStrength();\n  if (player.getShieldStrength() < 0) {\n gameEnded = true;\n }\n}\n```", "```java\n// Draw the HUD\npaint.setTextAlign(Paint.Align.LEFT);\npaint.setColor(Color.argb(255, 255, 255, 255));\npaint.setTextSize(25);\ncanvas.drawText(\"Fastest:\"+ fastestTime + \"s\", 10, 20, paint);\ncanvas.drawText(\"Time:\" + timeTaken + \"s\", screenX / 2, 20, paint);\n\ncanvas.drawText(\"Distance:\" + \n  distanceRemaining / 1000 + \n  \" KM\", screenX / 3, screenY - 20, paint);\n\ncanvas.drawText(\"Shield:\" + \n  player.getShieldStrength(), 10, screenY - 20, paint);\n\ncanvas.drawText(\"Speed:\" + \n  player.getSpeed() * 60 +\n  \" MPS\", (screenX /3 ) * 2, screenY - 20, paint);\n```", "```java\nif(!gameEnded){\n  // Draw the hud\n  paint.setTextAlign(Paint.Align.LEFT);\n  paint.setColor(Color.argb(255, 255, 255, 255));\n  paint.setTextSize(25);\n  canvas.drawText(\"Fastest:\"+ fastestTime + \"s\", 10, 20, paint);\n\n  canvas.drawText(\"Time:\" + \n    timeTaken + \n    \"s\", screenX / 2, 20,   paint);\n\n  canvas.drawText(\"Distance:\" + \n    distanceRemaining / 1000 + \n    \" KM\", screenX / 3, screenY - 20, paint);\n\n  canvas.drawText(\"Shield:\" + \n    player.getShieldStrength(), 10, screenY - 20, paint);\n\n  canvas.drawText(\"Speed:\" + \n    player.getSpeed() * 60 +\n    \" MPS\", (screenX /3 ) * 2, screenY - 20, paint);\n\n}else{\n //this happens when the game is ended\n}\n\n```", "```java\n// Show pause screen\npaint.setTextSize(80);\npaint.setTextAlign(Paint.Align.CENTER);\ncanvas.drawText(\"Game Over\", screenX/2, 100, paint);\npaint.setTextSize(25);\ncanvas.drawText(\"Fastest:\"+ \n  fastestTime + \"s\", screenX/2, 160, paint);\n\ncanvas.drawText(\"Time:\" + timeTaken + \n  \"s\", screenX / 2, 200, paint);\n\ncanvas.drawText(\"Distance remaining:\" + \n  distanceRemaining/1000 + \" KM\",screenX/2, 240, paint);\n\npaint.setTextSize(80);\ncanvas.drawText(\"Tap to replay!\", screenX/2, 350, paint);\n```", "```java\n// Has the player touched the screen?\ncase MotionEvent.ACTION_DOWN:\n    player.setBoosting();\n // If we are currently on the pause screen, start a new game\n if(gameEnded){\n startGame();\n }\n   break;\n```", "```java\nprivate SoundPool soundPool;\n    int start = -1;\n    int bump = -1;\n    int destroyed = -1;\n    int win = -1;\n```", "```java\nTDView(Context context, int x, int y) {\n  super(context);\n  this.context  = context;\n\n // This SoundPool is deprecated but don't worry\n soundPool = new SoundPool(10, AudioManager.STREAM_MUSIC,0);\n try{\n //Create objects of the 2 required classes\n AssetManager assetManager = context.getAssets();\n AssetFileDescriptor descriptor;\n\n //create our three fx in memory ready for use\n descriptor = assetManager.openFd(\"start.ogg\");\n start = soundPool.load(descriptor, 0);\n\n descriptor = assetManager.openFd(\"win.ogg\");\n win = soundPool.load(descriptor, 0);\n\n descriptor = assetManager.openFd(\"bump.ogg\");\n bump = soundPool.load(descriptor, 0);\n\n descriptor = assetManager.openFd(\"destroyed.ogg\");\n destroyed = soundPool.load(descriptor, 0);\n\n }catch(IOException e){\n //Print an error message to the console\n Log.e(\"error\", \"failed to load sound files\");\n }\n\n```", "```java\nsoundPool.play(start, 1, 1, 0, 0, 1);\n```", "```java\nif(hitDetected) {\n soundPool.play(bump, 1, 1, 0, 0, 1);\n  player.reduceShieldStrength();\n  if (player.getShieldStrength() < 0) {\n soundPool.play(destroyed, 1, 1, 0, 0, 1);\n      paused = true;\n  }\n}\n```", "```java\n//Completed the game!\nif(distanceRemaining < 0){\n soundPool.play(win, 1, 1, 0, 0, 1);\n     //check for new fastest time\n     if(timeTaken < fastestTime) {\n         fastestTime = timeTaken;\n     }\n\n     // avoid ugly negative numbers\n     // in the HUD\n     distanceRemaining = 0;\n\n     // Now end the game\n     gameEnded = true;\n}\n```", "```java\nprivate SharedPreferences prefs;\nprivate SharedPreferences.Editor editor;\n```", "```java\n// Get a reference to a file called HiScores. \n// If id doesn't exist one is created\nprefs = context.getSharedPreferences(\"HiScores\", \n  context.MODE_PRIVATE);\n\n// Initialize the editor ready\neditor = prefs.edit();\n\n// Load fastest time from a entry in the file\n//  labeled \"fastestTime\"\n// if not available highscore = 1000000\nfastestTime = prefs.getLong(\"fastestTime\", 1000000);\n```", "```java\n//Completed the game!\nif(distanceRemaining < 0){\n soundPool.play(win, 1, 1, 0, 0, 1);\n     //check for new fastest time\n     if(timeTaken < fastestTime) {\n         // Save high score\n         editor.putLong(\"fastestTime\", timeTaken);\n         editor.commit();\n         fastestTime = timeTaken;\n     }\n\n     // avoid ugly negative numbers\n     // in the HUD\n     distanceRemaining = 0;\n\n     // Now end the game\n     gameEnded = true;\n}\n```", "```java\n// This is the entry point to our game\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n  super.onCreate(savedInstanceState);\n\n  //Here we set our UI layout as the view\n  setContentView(R.layout.activity_main);\n\n // Prepare to load fastest time\n SharedPreferences prefs;\n SharedPreferences.Editor editor;\n prefs = getSharedPreferences(\"HiScores\", MODE_PRIVATE);\n\n  // Get a reference to the button in our layout\n  final Button buttonPlay =\n    (Button)findViewById(R.id.buttonPlay);\n\n // Get a reference to the TextView in our layout\n final TextView textFastestTime = \n (TextView)findViewById(R.id.textHighScore);\n\n  // Listen for clicks\n  buttonPlay.setOnClickListener(this);\n\n // Load fastest time\n // if not available our high score = 1000000\n long fastestTime = prefs.getLong(\"fastestTime\", 1000000);\n\n // Put the high score in our TextView\n textFastestTime.setText(\"Fastest Time:\" + fastestTime);\n\n}\n```", "```java\n// Constructor\npublic EnemyShip(Context context, int screenX, int screenY){\n Random generator = new Random();\n int whichBitmap = generator.nextInt(3);\n switch (whichBitmap){\n case 0:\n bitmap = BitmapFactory.decodeResource\n (context.getResources(), R.drawable.enemy3);\n break;\n\n case 1:\n bitmap = BitmapFactory.decodeResource\n (context.getResources(), R.drawable.enemy2);\n break;\n\n case 2:\n bitmap = BitmapFactory.decodeResource\n (context.getResources(), R.drawable.enemy);\n break;\n }\n\n    maxX = screenX;\n    maxY = screenY;\n    minX = 0;\n    minY = 0;\n\n    speed = generator.nextInt(6)+10;\n    x = screenX;\n    y = generator.nextInt(maxY) - bitmap.getHeight();\n\n    // Initialize the hit box\n    hitBox = new Rect(x, y, bitmap.getWidth(),  bitmap.getHeight());\n\n}\n```", "```java\nswitch (whichBitmap){\n    case 0:\n          bitmap = BitmapFactory.decodeResource(context.getResources(),           \n          R.drawable.enemy3);\n          break;\n\n    case 1:\n          bitmap = BitmapFactory.decodeResource(context.getResources(),           \n          R.drawable.enemy2);\n          break;\n\n   case 2:\n          bitmap = BitmapFactory.decodeResource(context.getResources(),           \n          R.drawable.enemy);\n          break;\n}\n\nscaleBitmap(screenX);\n\n```", "```java\npublic void scaleBitmap(int x){\n\n  if(x < 1000) {\n       bitmap = Bitmap.createScaledBitmap(bitmap,\n       bitmap.getWidth() / 3,\n       bitmap.getHeight() / 3,\n       false);\n  }else if(x < 1200){\n       bitmap = Bitmap.createScaledBitmap(bitmap,\n       bitmap.getWidth() / 2,\n       bitmap.getHeight() / 2,\n       false);\n   }\n}\n```", "```java\n// Game objects\nprivate PlayerShip player;\npublic EnemyShip enemy1;\npublic EnemyShip enemy2;\npublic EnemyShip enemy3;\npublic EnemyShip enemy4;\npublic EnemyShip enemy5;\n\n```", "```java\nenemy1 = new EnemyShip(context, screenX, screenY);\nenemy2 = new EnemyShip(context, screenX, screenY);\nenemy3 = new EnemyShip(context, screenX, screenY);\n\nif(screenX > 1000){\n enemy4 = new EnemyShip(context, screenX, screenY);\n}\n\nif(screenX > 1200){\n enemy5 = new EnemyShip(context, screenX, screenY);\n}\n\n```", "```java\n// Collision detection on new positions\n// Before move because we are testing last frames\n// position which has just been drawn\nboolean hitDetected = false;\nif(Rect.intersects(player.getHitbox(), enemy1.getHitbox())){\n  hitDetected = true;\n  enemy1.setX(-100);\n}\n\nif(Rect.intersects(player.getHitbox(), enemy2.getHitbox())){\n  hitDetected = true;\n  enemy2.setX(-100);        \n}\n\nif(Rect.intersects(player.getHitbox(), enemy3.getHitbox())){\n  hitDetected = true;\n  enemy3.setX(-100);       \n}\n\nif(screenX > 1000){\n if(Rect.intersects(player.getHitbox(), enemy4.getHitbox())){\n hitDetected = true;\n enemy4.setX(-100); \n }\n}\n\nif(screenX > 1200){\n if(Rect.intersects(player.getHitbox(), enemy5.getHitbox())){\n hitDetected = true;\n enemy5.setX(-100);\n }\n}\n\nif(hitDetected) {\nsoundPool.play(bump, 1, 1, 0, 0, 1);\n            player.reduceShieldStrength();\n            if (player.getShieldStrength() < 0) {\n                soundPool.play(destroyed, 1, 1, 0, 0, 1);\n                gameEnded = true;\n            }\n}\n\n// Update the player\nplayer.update();\n// Update the enemies\nenemy1.update(player.getSpeed());\nenemy2.update(player.getSpeed());\nenemy3.update(player.getSpeed());\n\nif(screenX > 1000) {\n enemy4.update(player.getSpeed());\n}\nif(screenX > 1200) {\n enemy5.update(player.getSpeed());\n}\n\n```", "```java\n// Draw the player\ncanvas.drawBitmap(player.getBitmap(), player.getX(), player.getY(), paint);\ncanvas.drawBitmap(enemy1.getBitmap(),\n  enemy1.getX(), enemy1.getY(), paint);\ncanvas.drawBitmap(enemy2.getBitmap(),\n  enemy2.getX(), enemy2.getY(), paint);\ncanvas.drawBitmap(enemy3.getBitmap(),\n  enemy3.getX(), enemy3.getY(), paint);\n\nif(screenX > 1000) {\n canvas.drawBitmap(enemy4.getBitmap(),\n enemy4.getX(), enemy4.getY(), paint);\n}\nif(screenX > 1200) {\n canvas.drawBitmap(enemy5.getBitmap(),\n enemy5.getX(), enemy5.getY(), paint);\n}\n\n```", "```java\nprivate String formatTime(long time){\n    long seconds = (time) / 1000;\n    long thousandths = (time) - (seconds * 1000);\n    String strThousandths = \"\" + thousandths;\n    if (thousandths < 100){strThousandths = \"0\" + thousandths;}\n    if (thousandths < 10){strThousandths = \"0\" + strThousandths;}\n    String stringTime = \"\" + seconds + \".\" + strThousandths;\n    return stringTime;\n}\n```", "```java\n//canvas.drawText(\"Time:\" + timeTaken + \"s\", screenX / 2, 20, paint);\ncanvas.drawText(\"Time:\" + \n formatTime(timeTaken) + \n \"s\", screenX / 2, 20, paint);\n\n```", "```java\n//canvas.drawText(\"Fastest:\" + fastestTime + \"s\", 10, 20, paint);\ncanvas.drawText(\"Fastest:\" + \n formatTime(fastestTime) + \n \"s\", 10, 20, paint);\n\n```", "```java\n// Show pause screen\npaint.setTextSize(80);\npaint.setTextAlign(Paint.Align.CENTER);\ncanvas.drawText(\"Game Over\", screenX/2, 100, paint);\npaint.setTextSize(25);\n\n// canvas.drawText(\"Fastest:\"\n  + fastestTime + \"s\", screenX/2, 160, paint);\ncanvas.drawText(\"Fastest:\"+ \n formatTime(fastestTime) + \"s\", screenX/2, 160, paint);\n\n// canvas.drawText(\"Time:\" + \n  timeTaken + \"s\", screenX / 2, 200, paint);\ncanvas.drawText(\"Time:\" \n + formatTime(timeTaken) + \"s\", screenX / 2, 200, paint);\n\ncanvas.drawText(\"Distance remaining:\" +\n  distanceRemaining/1000 + \" KM\",screenX/2, 240, paint);\npaint.setTextSize(80);\ncanvas.drawText(\"Tap to replay!\", screenX/2, 350, paint);\n```", "```java\n// If the player hits the back button, quit the app\npublic boolean onKeyDown(int keyCode, KeyEvent event) {\n  if (keyCode == KeyEvent.KEYCODE_BACK) {\n       finish();\n       return true;\n  }\n  return false;\n}\n```"]