- en: Chapter 5. Handling Text and Fonts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is very common in our games to add text for displaying information to the
    player. This could be done by using either the TrueType fonts or bitmap fonts,
    which will allow us more flexibility, and is, indeed, the most used type of font
    in professional games because it allows us to give a custom look to our games.
    The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating TrueType font labels
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding label effects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating system fonts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating bitmap font labels
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating TrueType font labels
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Adding text by using the TrueType font is really straightforward. Open the `PauseScene.cpp`
    implementation file that we have created in [Chapter 2](ch02.html "Chapter 2. Graphics"),
    *Graphics*. In the `init` method, you will see that we have created an instance
    of the `Label` class by calling the static method, `createWithTTF`. This method
    receives three parameters, the first one is the string that we want to draw, the
    second one is another string representing the font file that you want to use,
    including the path within the `Resources` folder where it is located, and the
    third one represents the font size.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `Label` class was introduced in the Cocos2d-x Version 3.x. It combines the
    TrueType font and the bitmap font handling in a single class. However, although
    deprecated, the former label handling classes are still available in API for compatibility
    reasons.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let us change the third parameter value from 24 to 96 in the `createWithTTF`
    method to make the font bigger:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Marker Felt font is included in the template Cocos2d-x project generated
    by the `cocos new` command.
  prefs: []
  type: TYPE_NORMAL
- en: Creating our GameOverScene
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is now time to create a game over scene, this will be displayed as soon as
    a bomb crashes into our `bunny` sprite.
  prefs: []
  type: TYPE_NORMAL
- en: We are going to do this by copying our `PauseScene.cpp` and `PauseScene.h` files
    in our `Classes` directory and renaming them as `GameOverScene.cpp` and `GameOverScene.h`
    respectively.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember that each time you add a new source file to your Cocos2d-x folder you
    need to add the class to the `Android.mk` file contained in the `jni` folder,
    so that this new source file is compiled during the next build.
  prefs: []
  type: TYPE_NORMAL
- en: Now in the `GameOverScene.h` and `GameOverScene.cpp` files, perform a find and
    replace on both of the files and replace the word `Pause` with the word `GameOver`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, substitute the first lines of the code for the `GameOverScene.cpp`
    implementation file for these:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Within the body of the `exitPause` method of the `GameOverScene.cpp` implementation
    file, we are going to substitute the only line that this method has with this
    one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Calling our GameOverScene when a player loses
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have created our game over scene; now let us show it as soon as the bomb
    collides with our `player` sprite. In order to achieve this, we will add the following
    line of code to the `onCollision` method contained in the `HelloWorld` class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, include the game over scene header file to our `gameplay` class by adding
    the following line to the beginning of the `HelloWorldScene.h` header file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Customizing the GameOverScene
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, we don''t want the black background color, so we are going to add the
    same background that we were using in our gameplay exactly as we had done in [Chapter
    2](ch02.html "Chapter 2. Graphics"), *Graphics*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Now we are going to change the TrueType font label, which we have copied from
    `PauseScene`, it will now read as `Game Over`. In the next section, we will add
    some effects to this label.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Adding label effects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now we are going to add the effects that are only available for the TrueType
    fonts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us enable an outline for our font. The `enableOutline` method from the
    `Label` class receives two parameters, a `Color4B` instance and an integer, which
    represents the outline size—the greater the number the thicker the outline:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let us add some glow effect to our font:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Finally, let us add the shadow effect, which is currently supported by all of
    the three label types, to our label.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'As you will notice from the following screenshot, the effects overlap each
    other, so decide which one looks better to you:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding label effects](img/B04193_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The `Color4B` constructor method receives four parameters. The first three are
    the **red, green and blue** (**RGB**) components, and the fourth one is the `alpha`
    component. This will allow us to add some transparency effect and it can range
    from 0 to 255\. The label instances don't support the customized effects, such
    as giving different colors to each word of the text, using different fonts for
    a single text, or embedding an image in a label.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are interested in adding any of these font effects to your game, then
    you could use the `CCRichLabelTTF` class created by Luma Stubma. This is available
    at [https://github.com/stubma/cocos2dx-better](https://github.com/stubma/cocos2dx-better).
  prefs: []
  type: TYPE_NORMAL
- en: Creating system fonts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can create the labels that use the fonts of the host operating system; therefore,
    you would not be required to provide a font file. It is recommended that you use
    this kind of label only for testing purposes, since it would decrease the framework's
    flexibility because the selected font may not be available on the user's Android
    operating system version.
  prefs: []
  type: TYPE_NORMAL
- en: 'Just for the sake of testing, below our current text, we will add the following
    label in the `init` method of the `GameOverScene.cpp` implementation file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This code yields the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating system fonts](img/B04193_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating bitmap font labels
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far we have seen how easy it is to create labels by using TrueType and system
    fonts, now we will perform some extra steps in order to achieve a more professional
    style for our labels. As mentioned before, bitmap fonts are the most common kinds
    of labels used in professional games.
  prefs: []
  type: TYPE_NORMAL
- en: As its name suggests, bitmap fonts are generated by the images that represent
    each character, which will allow us to draw any font that we want, but it will
    have all the disadvantages of bitmap, such as the risk of our label getting pixelated,
    the lack of flexibility when handling the different sizes, and extra space on
    the disk and RAM for handling these kinds of fonts.
  prefs: []
  type: TYPE_NORMAL
- en: There are several applications that you can use for creating bitmap fonts. The
    most common one is **Glyph Designer**, which you can acquire from the URL [https://71squared.com](https://71squared.com).
    This application was originally released for the Mac OS, but in early 2015 **Glyph
    Designer X** was released for Windows as well. You can also create your own bitmap
    fonts by using **Littera**, the free online application. It is available at [http://kvazars.com/littera](http://kvazars.com/littera).
    For the purposes of this book, we have included the code for a bitmap font in
    our chapters. We are going to use this bitmap font code for displaying the total
    score of the player in the game over scene.
  prefs: []
  type: TYPE_NORMAL
- en: Adding more bombs to our game
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Taking in to consideration that now we have a game over scene, let us make
    this game a little more difficult by adding more bombs to it. We are going to
    use the Cocos2d-x scheduler mechanism, which will allow us to call a method during
    every given period of time. We are going to add the `addBombs` method to the `HelloWorldScene`
    class and within the `init` method of the aforementioned class we are going to
    schedule it so that it gets called every eight seconds:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We are going to add three bombs that are in a random position to our scene,
    and it will happen each time the `addBombs` method is called:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This code yields the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding more bombs to our game](img/B04193_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By using the `CC_SCHEDULE_SELECTOR` macro, we are creating a custom selector,
    which in this case is called a **custom time interval**. The selected function
    should receive the `float` parameter that represents the amount of time that has
    elapsed between the last call and the current call, so that you can calculate
    a uniform game pace independently of the hardware processing speed. If you don't
    pass the second `float` parameter to the schedule function, then it will execute
    the selected function in each frame.
  prefs: []
  type: TYPE_NORMAL
- en: In the scene we are going to add another method to the scheduler, which is going
    to be called every three seconds, and it is going to add 10 points to the player's
    score. So the longer the player can avoid being hit by a bomb, the greater his
    or her score will be.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we have more than two physics bodies, this means that we have to modify
    our `onCollision` method so that it only changes to `gameOverScene` if the `player`
    sprite is involved in a collision. For this, we are going to add the following
    lines of code at the beginning of the method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'If the method does not return, it means that the player sprite was indeed involved
    in a collision. So, we are going to write the score of our player that is stored
    in the member variable `_score` by using the Cocos2d-x built-in storage mechanism:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `UserDefault` class grants us access to the Cocos2d-x data storage mechanism.
    It can store `bool`, `int`, `float`, `double`, and `string` values. The data stored
    by using this class may be persisted by calling the `flush` method, which stores
    the data in an XML file.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can create our bitmap fonts in a similar way to how we created our TrueType
    font and system font. We will add the following lines of code in the `init` method
    of the `GameOverScene.cpp` implementation file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code will produce the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding more bombs to our game](img/B04193_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Putting everything together
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After all our modifications, this is how our `HelloWorldScene.h` header file
    will look:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The inclusion of `GameOverScene.h` is the only change that we have made to
    this header file during this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, our `HelloWorldScene.cpp` implementation file looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'We will now add the code for events and physics:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Our `GameOverScene.h` header file now looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'And finally, our `GameOverScene.cpp` implementation file will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'In the following lines of code, we have created the three types of fonts that
    we have covered during this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have seen how to add text to our games by using the TrueType
    fonts, system fonts and bitmap fonts, as well as how to add effects to those.
    Label creation is very straightforward; you just need to call its creation static
    method, and after you have added those to the scene, you can position those on
    the screen, just like you positioned the sprites on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will cover the new audio engine that was written from
    scratch on the Version 3 for substituting the traditional `CocosDenshion` audio
    engine that was bundled with the engine since its predecessor `cocos2d` for iPhone.
  prefs: []
  type: TYPE_NORMAL
