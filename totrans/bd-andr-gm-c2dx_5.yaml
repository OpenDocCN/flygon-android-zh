- en: Chapter 5. Handling Text and Fonts
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is very common in our games to add text for displaying information to the
    player. This could be done by using either the TrueType fonts or bitmap fonts,
    which will allow us more flexibility, and is, indeed, the most used type of font
    in professional games because it allows us to give a custom look to our games.
    The following topics will be covered in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Creating TrueType font labels
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding label effects
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating system fonts
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating bitmap font labels
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating TrueType font labels
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Adding text by using the TrueType font is really straightforward. Open the `PauseScene.cpp`
    implementation file that we have created in [Chapter 2](ch02.html "Chapter 2. Graphics"),
    *Graphics*. In the `init` method, you will see that we have created an instance
    of the `Label` class by calling the static method, `createWithTTF`. This method
    receives three parameters, the first one is the string that we want to draw, the
    second one is another string representing the font file that you want to use,
    including the path within the `Resources` folder where it is located, and the
    third one represents the font size.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `Label` class was introduced in the Cocos2d-x Version 3.x. It combines the
    TrueType font and the bitmap font handling in a single class. However, although
    deprecated, the former label handling classes are still available in API for compatibility
    reasons.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let us change the third parameter value from 24 to 96 in the `createWithTTF`
    method to make the font bigger:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Marker Felt font is included in the template Cocos2d-x project generated
    by the `cocos new` command.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Creating our GameOverScene
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is now time to create a game over scene, this will be displayed as soon as
    a bomb crashes into our `bunny` sprite.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: We are going to do this by copying our `PauseScene.cpp` and `PauseScene.h` files
    in our `Classes` directory and renaming them as `GameOverScene.cpp` and `GameOverScene.h`
    respectively.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember that each time you add a new source file to your Cocos2d-x folder you
    need to add the class to the `Android.mk` file contained in the `jni` folder,
    so that this new source file is compiled during the next build.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: Now in the `GameOverScene.h` and `GameOverScene.cpp` files, perform a find and
    replace on both of the files and replace the word `Pause` with the word `GameOver`.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, substitute the first lines of the code for the `GameOverScene.cpp`
    implementation file for these:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Within the body of the `exitPause` method of the `GameOverScene.cpp` implementation
    file, we are going to substitute the only line that this method has with this
    one:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Calling our GameOverScene when a player loses
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have created our game over scene; now let us show it as soon as the bomb
    collides with our `player` sprite. In order to achieve this, we will add the following
    line of code to the `onCollision` method contained in the `HelloWorld` class.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, include the game over scene header file to our `gameplay` class by adding
    the following line to the beginning of the `HelloWorldScene.h` header file:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Customizing the GameOverScene
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, we don''t want the black background color, so we are going to add the
    same background that we were using in our gameplay exactly as we had done in [Chapter
    2](ch02.html "Chapter 2. Graphics"), *Graphics*:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now we are going to change the TrueType font label, which we have copied from
    `PauseScene`, it will now read as `Game Over`. In the next section, we will add
    some effects to this label.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Adding label effects
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now we are going to add the effects that are only available for the TrueType
    fonts.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us enable an outline for our font. The `enableOutline` method from the
    `Label` class receives two parameters, a `Color4B` instance and an integer, which
    represents the outline size—the greater the number the thicker the outline:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, let us add some glow effect to our font:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Finally, let us add the shadow effect, which is currently supported by all of
    the three label types, to our label.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'As you will notice from the following screenshot, the effects overlap each
    other, so decide which one looks better to you:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding label effects](img/B04193_05_01.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
- en: The `Color4B` constructor method receives four parameters. The first three are
    the **red, green and blue** (**RGB**) components, and the fourth one is the `alpha`
    component. This will allow us to add some transparency effect and it can range
    from 0 to 255\. The label instances don't support the customized effects, such
    as giving different colors to each word of the text, using different fonts for
    a single text, or embedding an image in a label.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are interested in adding any of these font effects to your game, then
    you could use the `CCRichLabelTTF` class created by Luma Stubma. This is available
    at [https://github.com/stubma/cocos2dx-better](https://github.com/stubma/cocos2dx-better).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: Creating system fonts
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can create the labels that use the fonts of the host operating system; therefore,
    you would not be required to provide a font file. It is recommended that you use
    this kind of label only for testing purposes, since it would decrease the framework's
    flexibility because the selected font may not be available on the user's Android
    operating system version.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: 'Just for the sake of testing, below our current text, we will add the following
    label in the `init` method of the `GameOverScene.cpp` implementation file:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This code yields the following result:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating system fonts](img/B04193_05_02.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
- en: Creating bitmap font labels
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far we have seen how easy it is to create labels by using TrueType and system
    fonts, now we will perform some extra steps in order to achieve a more professional
    style for our labels. As mentioned before, bitmap fonts are the most common kinds
    of labels used in professional games.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: As its name suggests, bitmap fonts are generated by the images that represent
    each character, which will allow us to draw any font that we want, but it will
    have all the disadvantages of bitmap, such as the risk of our label getting pixelated,
    the lack of flexibility when handling the different sizes, and extra space on
    the disk and RAM for handling these kinds of fonts.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如其名称所示，位图字体是由代表每个字符的图像生成的，这将允许我们绘制任何我们想要的字体，但它将具有位图的所有缺点，例如标签可能被像素化的风险，处理不同尺寸时的灵活性不足，以及处理这类字体所需的磁盘和RAM额外空间。
- en: There are several applications that you can use for creating bitmap fonts. The
    most common one is **Glyph Designer**, which you can acquire from the URL [https://71squared.com](https://71squared.com).
    This application was originally released for the Mac OS, but in early 2015 **Glyph
    Designer X** was released for Windows as well. You can also create your own bitmap
    fonts by using **Littera**, the free online application. It is available at [http://kvazars.com/littera](http://kvazars.com/littera).
    For the purposes of this book, we have included the code for a bitmap font in
    our chapters. We are going to use this bitmap font code for displaying the total
    score of the player in the game over scene.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 有多种应用程序可用于创建位图字体。最常见的是**Glyph Designer**，你可以在[https://71squared.com](https://71squared.com)获取它。这个应用程序最初是为Mac
    OS发布的，但在2015年初，也为Windows发布了**Glyph Designer X**。你还可以使用免费的在线应用程序**Littera**来创建自己的位图字体。它可以在[http://kvazars.com/littera](http://kvazars.com/littera)找到。为了本书的需要，我们在章节中包含了位图字体的代码。我们将使用这个位图字体代码在游戏结束场景中显示玩家的总分。
- en: Adding more bombs to our game
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向我们的游戏中添加更多炸弹
- en: 'Taking in to consideration that now we have a game over scene, let us make
    this game a little more difficult by adding more bombs to it. We are going to
    use the Cocos2d-x scheduler mechanism, which will allow us to call a method during
    every given period of time. We are going to add the `addBombs` method to the `HelloWorldScene`
    class and within the `init` method of the aforementioned class we are going to
    schedule it so that it gets called every eight seconds:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到现在我们有一个游戏结束场景，让我们通过添加更多炸弹使这个游戏变得稍微困难一些。我们将使用Cocos2d-x调度器机制，它将允许我们在每个给定的时间段内调用一个方法。我们将`addBombs`方法添加到`HelloWorldScene`类中，并在前述类的`init`方法内调度它，使其每八秒被调用一次：
- en: '[PRE11]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We are going to add three bombs that are in a random position to our scene,
    and it will happen each time the `addBombs` method is called:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将向场景中添加三个随机位置的炸弹，每次调用`addBombs`方法时都会发生这种情况：
- en: '[PRE12]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This code yields the following result:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码产生了以下结果：
- en: '![Adding more bombs to our game](img/B04193_05_03.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![向我们的游戏中添加更多炸弹](img/B04193_05_03.jpg)'
- en: Note
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: By using the `CC_SCHEDULE_SELECTOR` macro, we are creating a custom selector,
    which in this case is called a **custom time interval**. The selected function
    should receive the `float` parameter that represents the amount of time that has
    elapsed between the last call and the current call, so that you can calculate
    a uniform game pace independently of the hardware processing speed. If you don't
    pass the second `float` parameter to the schedule function, then it will execute
    the selected function in each frame.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`CC_SCHEDULE_SELECTOR`宏，我们创建了一个自定义选择器，在这种情况下称为**自定义时间间隔**。所选函数应该接收一个`float`参数，代表自上次调用和当前调用之间经过的时间，以便你可以独立于硬件处理速度计算统一的游戏节奏。如果你没有将第二个`float`参数传递给调度函数，那么它将在每个帧中执行所选函数。
- en: In the scene we are going to add another method to the scheduler, which is going
    to be called every three seconds, and it is going to add 10 points to the player's
    score. So the longer the player can avoid being hit by a bomb, the greater his
    or her score will be.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在场景中，我们还将向调度器添加另一个方法，该方法每三秒调用一次，并将为玩家的分数增加10分。因此，玩家能够避免被炸弹击中的时间越长，他的得分就越高。
- en: 'Now we have more than two physics bodies, this means that we have to modify
    our `onCollision` method so that it only changes to `gameOverScene` if the `player`
    sprite is involved in a collision. For this, we are going to add the following
    lines of code at the beginning of the method:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有超过两个物理体，这意味着我们必须修改我们的`onCollision`方法，使其只有在`player`精灵参与碰撞时才切换到`gameOverScene`。为此，我们将在方法开始处添加以下代码行：
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'If the method does not return, it means that the player sprite was indeed involved
    in a collision. So, we are going to write the score of our player that is stored
    in the member variable `_score` by using the Cocos2d-x built-in storage mechanism:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果该方法没有返回，这意味着玩家精灵确实参与了碰撞。因此，我们将使用Cocos2d-x内置的存储机制来写入存储在成员变量`_score`中的玩家分数：
- en: '[PRE14]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Note
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `UserDefault` class grants us access to the Cocos2d-x data storage mechanism.
    It can store `bool`, `int`, `float`, `double`, and `string` values. The data stored
    by using this class may be persisted by calling the `flush` method, which stores
    the data in an XML file.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`UserDefault`类使我们能够访问Cocos2d-x的数据存储机制。它可以存储`bool`、`int`、`float`、`double`和`string`类型的值。通过使用此类存储的数据可以通过调用`flush`方法来持久化，该方法将数据存储在XML文件中。'
- en: 'We can create our bitmap fonts in a similar way to how we created our TrueType
    font and system font. We will add the following lines of code in the `init` method
    of the `GameOverScene.cpp` implementation file:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以像创建TrueType字体和系统字体那样创建我们的位图字体。我们将在`GameOverScene.cpp`实现文件的`init`方法中添加以下代码行：
- en: '[PRE15]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The preceding code will produce the following result:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将产生以下结果：
- en: '![Adding more bombs to our game](img/B04193_05_04.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![向我们的游戏中添加更多炸弹](img/B04193_05_04.jpg)'
- en: Putting everything together
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 把所有内容放在一起
- en: 'After all our modifications, this is how our `HelloWorldScene.h` header file
    will look:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们所有的修改之后，这就是我们的`HelloWorldScene.h`头文件的样子：
- en: '[PRE16]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The inclusion of `GameOverScene.h` is the only change that we have made to
    this header file during this chapter:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们对这个头文件唯一做的更改是包含了`GameOverScene.h`：
- en: '[PRE17]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now, our `HelloWorldScene.cpp` implementation file looks like this:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的`HelloWorldScene.cpp`实现文件看起来像这样：
- en: '[PRE18]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We will now add the code for events and physics:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将添加事件和物理的代码：
- en: '[PRE19]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Our `GameOverScene.h` header file now looks like this:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`GameOverScene.h`头文件现在看起来像这样：
- en: '[PRE20]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'And finally, our `GameOverScene.cpp` implementation file will look like this:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们的`GameOverScene.cpp`实现文件将看起来像这样：
- en: '[PRE21]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In the following lines of code, we have created the three types of fonts that
    we have covered during this chapter:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码行中，我们创建了在本章中介绍的三种字体类型：
- en: '[PRE22]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Summary
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have seen how to add text to our games by using the TrueType
    fonts, system fonts and bitmap fonts, as well as how to add effects to those.
    Label creation is very straightforward; you just need to call its creation static
    method, and after you have added those to the scene, you can position those on
    the screen, just like you positioned the sprites on the screen.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了如何使用TrueType字体、系统字体和位图字体向游戏中添加文本，以及如何为这些文本添加效果。标签创建非常简单；您只需要调用其创建的静态方法，并将其添加到场景中后，就可以像在屏幕上定位精灵一样在屏幕上定位它们。
- en: In the next chapter, we will cover the new audio engine that was written from
    scratch on the Version 3 for substituting the traditional `CocosDenshion` audio
    engine that was bundled with the engine since its predecessor `cocos2d` for iPhone.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍在版本3中从头开始编写的新音频引擎，以替代自其前身`cocos2d` for iPhone以来与引擎捆绑的传统`CocosDenshion`音频引擎。
