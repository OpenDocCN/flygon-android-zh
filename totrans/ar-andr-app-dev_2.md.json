["```java\n<uses-permission android:name=\"android.permission.CAMERA\" />\n```", "```java\n<uses-feature android:name=\"android.hardware.camera\" />\n```", "```java\nandroid:theme=\"@android:style/Theme.NoTitleBar.Fullscreen\"\n```", "```java\npublic class CameraAccessAndroidActivity extends Activity {\nprivate Camera mCamera;\n\n}\n```", "```java\npublic static Camera getCameraInstance() {\n  Camera c = null;\n  try {\n    c = Camera.open(0);\n  } catch (Exception e) { ...  }\n  return c;\n}\n```", "```java\npublic void onResume() {\n  super.onResume();  \n  stopPreview = false;\n  mCamera = getCameraInstance();\n  ...\n}\n```", "```java\nprivate void releaseCamera() {\n  if (mCamera != null) {\n\n    mCamera.release();\n    mCamera = null;\n  }\n}\n```", "```java\nprivate void initializeCameraParameters() {\n  Camera.Parameters parameters = mCamera.getParameters();\n  List<Camera.Size> sizes = parameters.getSupportedPreviewSizes();\n  int currentWidth = 0;\n  int currentHeight = 0;\n  boolean foundDesiredWidth = false;\n  for(Camera.Size s: sizes) {\n    if (s.width == mDesiredCameraPreviewWidth)  {             \n      currentWidth = s.width;\n      currentHeight = s.height;\n      foundDesiredWidth = true;\n      break;\n    }\n  }\n  if(foundDesiredWidth) \n    parameters.setPreviewSize( currentWidth, currentHeight );\n\n  mCamera.setParameters(parameters);\n}     \n```", "```java\npublic class CameraPreview extends SurfaceView implements SurfaceHolder.Callback {\n  private static final String TAG = \"CameraPreview\";\n  private SurfaceHolder mHolder;\n  private Camera mCamera;\n  public CameraPreview(Context context, Camera camera) {\n    super(context);\n    mCamera = camera;\n    mHolder = getHolder();\n    mHolder.addCallback(this);\n    mHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);\n  }\n```", "```java\npublic void surfaceChanged(SurfaceHolder holder, int format, int w, int h) {\n  if (mHolder.getSurface() == null){\n    return;\n  }\n  try {\n    mCamera.stopPreview();\n  } catch (Exception e){ ...}\n  try {       \n    mCamera.setPreviewDisplay(mHolder);\n    mCamera.startPreview();\n  } catch (Exception e){ ... }\n}\n```", "```java\nprivate CameraPreview mPreview;\n```", "```java\nmPreview = new CameraPreview(this, mCamera);\nsetContentView(mPreview);\n```", "```java\npublic CameraAccessJMEActivity() {    \n  appClass = \"com.ar4android.CameraAccessJME\";\n}\n```", "```java\nList<Integer> pixelFormats = parameters.getSupportedPreviewFormats();\n  for (Integer format : pixelFormats) {\n    if (format == ImageFormat.RGB_565) {    \n      pixelFormatConversionNeeded = false;\n      parameters.setPreviewFormat(format);\n      break;\n  }\n}\n```", "```java\npublic void preparePreviewCallbackBuffer() {    \n\n  mPreviewWidth = mCamera.getParameters().getPreviewSize().width;\n  mPreviewHeight = mCamera.getParameters().getPreviewSize().height;\n  int bufferSizeRGB565 = mPreviewWidth * mPreviewHeight * 2 + 4096;\n  mPreviewBufferRGB565 = null;\n  mPreviewBufferRGB565 = new byte[bufferSizeRGB565];\n  mPreviewByteBufferRGB565 = ByteBuffer.allocateDirect(mPreviewBufferRGB565.length);\n  cameraJMEImageRGB565 = new Image(Image.Format.RGB565, mPreviewWidth, mPreviewHeight, mPreviewByteBufferRGB565);\n}\n```", "```java\nprivate final Camera.PreviewCallback mCameraCallback = new Camera.PreviewCallback() {\n    public void onPreviewFrame(byte[] data, Camera c) {\n\n      mPreviewByteBufferRGB565.clear();\n      if(pixelFormatConversionNeeded) {\n        yCbCrToRGB565(data, mPreviewWidth, mPreviewHeight, mPreviewBufferRGB565);\n        mPreviewByteBufferRGB565.put(mPreviewBufferRGB565);\n      }\n\n      cameraJMEImageRGB565.setData(mPreviewByteBufferRGB565);\n      if ((com.ar4android.CameraAccessJME) app != null) {\n        ((com.ar4android.CameraAccessJME) app).setTexture(cameraJMEImageRGB565);\n      }\n\n    }\n  }\n```", "```java\nmCamera.setPreviewCallback(mCameraPreviewCallback);\n```", "```java\npublic void initVideoBackground(int screenWidth, int screenHeight){\n  Quad videoBGQuad = new Quad(1, 1, true);\n  mVideoBGGeom = new Geometry(\"quad\", videoBGQuad);\n  float newWidth = 1.f * screenWidth / screenHeight;\n  mVideoBGGeom.setLocalTranslation(-0.5f * newWidth, -0.5f, 0.f);mVideoBGGeom.setLocalScale(1.f * newWidth, 1.f, 1);\n  mvideoBGMat = new Material(assetManager, \"Common/MatDefs/Misc/Unshaded.j3md\");\n  mVideoBGGeom.setMaterial(mvideoBGMat);\n  mCameraTexture = new Texture2D();\n\n  Camera videoBGCam = cam.clone();\n  videoBGCam.setParallelProjection(true);\n  ViewPort videoBGVP = renderManager.createMainView(\"VideoBGView\",\n    videoBGCam);\n  videoBGVP.attachScene(mVideoBGGeom);\n  mSceneInitialized = true;\n}\n```", "```java\npublic void simpleUpdate(float tpf) {\nif(mNewCameraFrameAvailable) {\n  mCameraTexture.setImage(mCameraImage);\n  mvideoBGMat.setTexture(\"ColorMap\", mCameraTexture)\n}\n\n} \n```"]