- en: Chapter 3. Navigating a Project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You just created your first Android Studio project and now you want to understand
    what is going on. You want to start programming, but before this you need to get
    familiar with the navigation of the project. How is everything structured? What
    settings can you change on the project? How can you change these settings and
    what do they mean?
  prefs: []
  type: TYPE_NORMAL
- en: This chapter is designed to introduce the structure of a project in Android
    Studio. We will start by understanding the project navigation panel. We will go
    through the most important folders in our project, `build`, `gen`, `libs,` and
    the folders under `src/main`, and we will learn how to change the project settings.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the topics we''ll be covering in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigation panel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Project structure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing project properties
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The project navigation panel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Initially in the main view of Android Studio, no project or file is displayed
    as you can see in the next screenshot. As Android Studio suggests, press *Alt*
    + *1* to open the project view. You can also open it by clicking on the **Project**
    button from the left edge.
  prefs: []
  type: TYPE_NORMAL
- en: '![The project navigation panel](img/5273OS_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The project view shows the list of the open projects. The projects are displayed
    using a hierarchical view.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the upper-left corner of the project explorer we can change the type of
    view: **Project** or **Packages**. The first one shows the directory structure
    of the project, while the second one shows only the package structure.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the upper-right corner there are some actions and a drop-down menu to configure
    the project view. These actions are highlighted in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The project navigation panel](img/5273OS_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the project name with the right mouse button to open the context menu,
    or click on any element of the project. From this menu we can:'
  prefs: []
  type: TYPE_NORMAL
- en: Create and add new elements to the project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cut, copy, paste, or rename files in the project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Find elements in the project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyze and reformat the code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build the project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compare files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Open files in Explorer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Project structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the project navigation pane, we can examine the project structure. Inside
    the project structure is a folder with the name of our application. This folder
    contains the application structure and files. The most important elements of the
    application structure are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`build/`: A folder that contains the compiled resources after building the
    application and the classes generated by the Android tools such as the `R.java`
    file, which contains the references to the application resources.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`libs/`: A folder that contains the libraries referenced from our code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`src/main/`: A folder that contains the sources of your application. All the
    files you will usually work with are in this folder. The main folder is subdivided
    as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`java/`: A folder that contains the Java classes organized as packages. Every
    class we create will be in our project package namespace (`com.example.myapplication`).
    When we created our first project, we also created its main activity, so the activity
    class should be in this package. The next screenshot shows this main activity
    class inside the project structure:![Project structure](img/5273OS_03_03.jpg)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`res/`: A folder that contains project resources such as the XML files that
    specify layouts and menus or the images files.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`drawable/`: A folder that contains the images used in our application. There
    are different drawable folders categorized into the different screen densities.
    When we created our first project, we also created our application icon, so this
    icon is already in these folders named as `ic_launcher.png`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`layout/`: A folder that contains the XML definitions of the views and their
    elements.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`menu/`: A folder that contains the XML definitions of the menus of the application.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`values/`: A folder that contains the XML files that define sets of name-value
    pairs. These values can be colors, strings, or styles. There are different values
    folders categorized into different screens options to adapt the interface to them.
    For example, to enlarge the components or the fonts when the application is running
    on a tablet.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AndroidManifest.xml`: This file is essential in an Android project and is
    generated automatically when we create the project. This file declares basic information
    needed by the Android system to run the application, package name, version, activities,
    permissions, intents, or required hardware.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`build.gradle`: This file is the script used to build our application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Project settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are two dialog boxes that contain project settings: **File** | **Settings**
    menu and **File** | **Project Structure**. Both are also available in the toolbar.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Project settings](img/5273OS_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Select your project from the project view and navigate to **File** | **Settings**
    menu. In the left menu of the settings dialog, there is a section named **Project
    Settings [MyApplication]**. Some important options are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Code Style**: Configures the default code style scheme.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Compiler**: Configures the Android DX compiler used when building our application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**File Encodings**: Changes the file''s encoding. The default encoding is UTF-8.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Gradle**: It gives the Gradle''s configuration. Gradle is a tool similar
    to Apache Ant and Apache Maven, based on Groovy to build and manage Java projects.
    Gradle is integrated in Android Studio.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Language Injections**: Adds or removes the available languages used in the
    editor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Maven**: It gives the Maven configuration. Maven is a tool similar to Apache
    Ant and Gradle, based on XML to build and manage Java projects. Maven is integrated
    in Android Studio.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Version Control**: Configures the version control options. Version control
    will be explained in more detail in [Chapter 7](ch07.html "Chapter 7. Tools"),
    *Tools*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In addition to these settings, there are more of them in the project structure
    dialog. Navigate to **File** | **Project Structure** menu. The **Project Settings**
    are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Project**: We can change the project name and the project SDK. Remember in
    [Chapter 1](ch01.html "Chapter 1. Installing and Configuring Android Studio"),
    *Installing and Configuring Android Studio*, when we selected a SDK as the default
    one. In this screen we can change this SDK just for the current project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Modules**: This screen shows a list of the existing modules with its facets.
    We can also remove them or create new ones. According to IntelliJ IDEA ([http://www.jetbrains.com/idea/webhelp/module.html](http://www.jetbrains.com/idea/webhelp/module.html)),'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A module is a discrete unit of functionality which you can compile, run, test
    and debug independently.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Libraries**: This screen shows a list of the libraries imported into the
    project. We can also remove them or add new ones. They will be added to the `libs/`
    folder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Facets**: This screen shows a list of the existing facets. We can also remove
    them or create new ones. These facets were also displayed in the **Modules** view.
    According to IntelliJ IDEA ([http://www.jetbrains.com/idea/webhelp/facet.html](http://www.jetbrains.com/idea/webhelp/facet.html)),'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Facets represent various frameworks, technologies and languages used in a module.
    They let IntelliJ IDEA know how to treat the module contents and thus ensure conformity
    with the corresponding frameworks and technologies.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have learned how the projects are presented in Android Studio and what folders
    are in it by default once it is created. Now we understand the reasons for each
    folder and what `AndroidManifest.xml` is for. We went through the project settings
    both in the **File** | **Settings** and the **File** | **Project Structure** dialogs.
    By now, you should know how to manipulate and navigate a project in Android Studio.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter we will learn how to use the text editor. A proper knowledge
    of the text editor is important in order to improve our programming efficiency.
    We will learn about the editor settings and how to auto-complete code, use pre-generated
    blocks of code, and navigating the code. We will also learn about some useful
    shortcuts.
  prefs: []
  type: TYPE_NORMAL
