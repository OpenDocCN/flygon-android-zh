- en: Chapter 6. Creating a Complete Interfacing Solution
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第六章. 创建完整的接口解决方案
- en: In the previous chapters of this book, you interfaced with devices using GPIOs,
    I2C, and SPI. You used `AsyncTask`s to perform hardware interfacing in background
    threads, and you explored how to structure an app to interact with those threads.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的前几章中，你使用GPIOs、I2C和SPI与设备进行接口。你使用`AsyncTask`在后台线程中执行硬件接口，并探讨了如何构建一个应用以与这些线程交互。
- en: In this chapter, you will bring all of these concepts together to create a circuit
    that uses all three interfacing methods, and you will explore an app that uses
    all the interfaces together to make a complex system.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将把这些概念结合起来，创建一个使用这三种接口方法的电路，并探索一个将所有接口结合在一起使用的应用，以构建一个复杂的系统。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主题：
- en: Building the complete interface circuit
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建完整的接口电路
- en: Exploring the final example app
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索最终的示例应用
- en: Building the complete interface circuit
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建完整的接口电路
- en: The interfacing circuit used in this chapter is a combination of each of the
    circuits described in chapters 3, 4, and 5\. If you have successfully constructed
    the circuits from the previous chapters, you already have a good understanding
    of how the circuit in this chapter will be put together. Leave any previously
    constructed circuits on the breadboard to save you some effort if you have constructed
    those circuits by closely following the instructions from earlier chapters.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章使用的接口电路是第3、4和5章描述的电路的组合。如果你已经成功构建了之前章节的电路，那么你已经很好地理解了本章电路的组成。如果你按照早期章节的说明紧密构建了这些电路，请将它们留在面包板上，以节省你的努力。
- en: The following diagram shows the connections between the sensor breakout board,
    FRAM breakout board, LED, pushbutton switch, resistor, and the BBB. Revisit chapters
    3, 4, and 5 for the exact details on how to construct the GPIO, FRAM, and SPI
    portions of the circuit, if you have not yet done so.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了传感器开发板、FRAM开发板、LED、按钮开关、电阻与BBB之间的连接。如果你还没有完成，请回顾第3、4和5章，详细了解如何构建电路的GPIO、FRAM和SPI部分。
- en: '![Building the complete interface circuit](img/00028.jpeg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![构建完整的接口电路](img/00028.jpeg)'
- en: The complete hardware interfacing circuit that uses components which interface
    with the BBB using the GPIOs, I2C, and SPI components
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 使用GPIOs、I2C和SPI组件与BBB进行接口的完整硬件接口电路
- en: Exploring the complete example app
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索完整的示例应用
- en: In this section, you will examine the example Android app that performs GPIO,
    I2C, and interfacing on BBB. The purpose of this application is to demonstrate
    how to use PacktHAL to perform a variety of hardware tasks from within an actual
    app using a set of interfacing functions. Unlike the previous example apps, which
    take input from the user, this app takes all of its input directly from the hardware
    itself. This requires a slightly more complex approach than that taken by the
    earlier apps.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将研究一个示例Android应用，该应用在BBB上执行GPIO、I2C和接口。该应用旨在演示如何使用PacktHAL从实际应用中的一组接口函数执行各种硬件任务。与之前的示例应用不同，它们从用户那里获取输入，而这个应用直接从硬件本身获取所有输入。这需要比早期应用更复杂的方法。
- en: Before digging through the app's code, you must install the code on your development
    system and install the app on your Android system. The source code for the app
    as well as the precompiled `.apk` package is located in the `chapter6.tgz` file,
    which is available for download from the Packt website. Follow the same process
    to download and add the app to your Eclipse ADT environment, which was described
    in [Chapter 3](part0024_split_000.html#page "Chapter 3. Handling Inputs and Outputs
    with GPIOs"), *Handling Inputs and Outputs with GPIOs*.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入探讨应用代码之前，你必须在你的开发系统上安装代码，并在你的Android系统上安装应用。该应用的源代码以及预编译的`.apk`包位于`chapter6.tgz`文件中，可以从Packt网站下载。按照第3章《使用GPIO处理输入和输出》中描述的过程，下载并将应用添加到你的Eclipse
    ADT环境中。
- en: The app's user interface
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用的用户界面
- en: Launch the `complete` app on the Android system to see the app's UI. If you
    are using a touchscreen cape, you can simply touch the `complete` app's icon on
    the screen to launch the app and interact with its UI. If you are using the HDMI
    for video, connect a USB mouse to the BBB's USB port and use the mouse to click
    on the sensor app icon to launch the app.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android系统上启动`complete`应用程序以查看应用程序的UI。如果你使用的是触摸屏保护盖，只需在屏幕上轻触`complete`应用程序的图标即可启动应用程序并与其UI交互。如果你使用HDMI进行视频输出，请将USB鼠标连接到BBB的USB端口，并使用鼠标点击传感器应用程序图标以启动应用程序。
- en: The app uses a very simple UI that displays two text views in a single activity,
    which is `MainActivity` by default.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序使用一个非常简单的UI，在单个活动中默认显示两个文本视图，这是`MainActivity`。
- en: '![The app''s user interface](img/00029.jpeg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![应用程序的用户界面](img/00029.jpeg)'
- en: The complete app screen prior to receiving its first set of samples from the
    sensor
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在从传感器接收到第一组样本之前，完整应用程序屏幕的外观。
- en: 'There are no buttons or other UI elements in this app because the only interaction
    the user has with the app is through the circuit''s GPIO pushbutton switch. When
    the user presses the switch, the app performs a series of hardware interfacing
    actions:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这个应用程序中没有按钮或其他UI元素，因为用户与应用程序的唯一交互是通过电路的GPIO按钮开关。当用户按下开关时，应用程序会执行一系列硬件接口操作：
- en: The LED will turn on to notify the user that the switch has been recognized
    as pressed. The LED will remain lit until all events on the list have occurred.
    While the LED is on, any further switch input is ignored.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LED灯将点亮以通知用户开关已被识别为按下状态。在列表上的所有事件发生之前，LED灯将保持亮起。当LED灯亮起时，任何进一步的开关输入都会被忽略。
- en: Temperature and pressure samples are fetched from the sensor and written into
    the FRAM.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从传感器获取温度和压力样本，并将其写入FRAM。
- en: The FRAM is read to retrieve the stored temperature and pressure sample values.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从FRAM读取以获取存储的温度和压力样本值。
- en: The values for the temperature and pressure samples are displayed in the app's
    UI.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 温度和压力样本的值显示在应用程序的UI中。
- en: A 1-second delay will occur.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将会发生1秒钟的延迟。
- en: The LED will turn off, and the switch can once again be pressed to trigger another
    sample-store-retrieve-display cycle.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LED灯将熄灭，此时可以再次按下开关以触发另一个样本-存储-检索-显示周期。
- en: The variety of actions performed by the app makes its interfacing behavior more
    complex than what you saw in the previous example apps in this book. Rather than
    focusing on interfacing with a single hardware component, this app interfaces
    with the GPIO, I2C, and SPI devices at the same time to provide a complete sensor
    solution with persistent storage. However, it is based on the same basic interfacing
    concepts that the other example apps in this book have demonstrated.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序执行的各种操作使其接口行为比本书中之前示例应用程序更为复杂。这个应用程序不仅与单个硬件组件接口，而是同时与GPIO、I2C和SPI设备接口，以提供具有持久存储的完整传感器解决方案。然而，它基于本书中其他示例应用程序所展示的相同的基本接口概念。
- en: Understanding hardware polling in an app
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 了解应用程序中的硬件轮询。
- en: The earlier apps either used the `onClick()` handler of a button to interface
    directly to the hardware (GPIOs) or triggered the instantiation and execution
    of `AsyncTask` (I2C and SPI) to interface with the hardware. In both of these
    cases, interfacing with the hardware is initiated by a software event, the `onClick()`
    handler's execution, within the app.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的程序要么直接使用按钮的`onClick()`处理程序与硬件（GPIOs）接口，要么触发`AsyncTask`（I2C和SPI）的实例化和执行以与硬件接口。在这两种情况下，与硬件的接口都是由应用程序中的软件事件，即`onClick()`处理程序的执行触发的。
- en: In this chapter's app, however, we want to trigger the hardware interfacing
    in response to the hardware event created by the switch being pressed. Listening
    for hardware events is an important part of interfacing because it allows the
    hardware to tell us when events of interest occur. We do not always have the luxury
    of telling the hardware to do something and expecting the hardware to do it. Sometimes,
    the hardware needs to notify us that an event has occurred.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在本章的应用程序中，我们希望响应开关被按下产生的硬件事件来触发硬件接口。监听硬件事件是接口的一个重要部分，因为它允许硬件在发生感兴趣的事件时通知我们。我们并不总是能够告诉硬件执行某项操作并期待硬件执行。有时，硬件需要通知我们发生了某个事件。
- en: When interfacing with hardware from a kernel driver, the driver can register
    to be notified of a hardware event of interest by registering for notification
    of the time a hardware interrupt occurs. A hardware interrupt tells the kernel
    immediately that something noteworthy has happened with the hardware, and the
    kernel will stop what it is doing to allow the appropriate kernel driver to handle
    the interrupt.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当从内核驱动程序与硬件接口时，驱动程序可以通过注册在硬件中断发生时通知其的机制来获知感兴趣的硬件事件。硬件中断会立即告诉内核硬件发生了值得注意的事情，并且内核将停止当前操作，以允许适当的内核驱动程序处理中断。
- en: Because our apps are performing their higher-level interfacing logic from user
    space, we are unable to register for an interrupt to notify us the time an event
    of interest occurs. This hardware event can happen asynchronously at any time,
    so the app must continually poll, or check, the state of the switch to determine
    whether it has been pressed or not. Apps typically do not poll for events because
    they rely on being notified by the Android framework when something interesting
    happens, but when an app is performing hardware interfacing without the assistance
    of a manager, polling becomes necessary.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的应用程序是在用户空间执行更高级的接口逻辑，因此我们无法注册中断来通知我们感兴趣的事件发生的时间。这种硬件事件可能随时异步发生，所以应用程序必须不断轮询（或检查）开关的状态，以确定它是否被按下。通常应用程序不会轮询事件，因为它们依赖于Android框架在发生有趣的事情时通知它们，但是当应用程序在没有管理器帮助的情况下执行硬件接口时，轮询变得必要。
- en: The faster an app polls the hardware, the lesser the chance that the app will
    miss the occurrence of the hardware event of interest. However, constantly polling
    in a tight loop is a bad idea because it will constantly consume CPU cycles (and
    battery life in mobile devices), which can be better spent elsewhere. If you include
    polling in your apps, you must find a good balance between performance and usage
    of resources.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序轮询硬件的速度越快，错过感兴趣硬件事件发生的几率就越小。然而，在紧密循环中不断轮询是一个糟糕的想法，因为它会不断消耗CPU周期（以及移动设备中的电池寿命），这些资源可以更好地用在其他地方。如果你的应用程序中包含轮询，你必须找到一个性能和资源使用之间的良好平衡。
- en: It is a bad idea to place a polling loop inside the context of the UI thread.
    Remember that spending too much time executing within a handler method in the
    UI thread context will cause Android to trigger the ANR dialog. To avoid this
    problem, an app must instantiate `AsyncTask`, which performs the hardware polling
    in a background thread. The earlier example apps in this book used an `AsyncTask`
    thread to perform communication with hardware devices, but the `AsyncTask` thread
    was short-lived. The `AsyncTask` thread's background thread was only active while
    it was interfacing with the hardware. Once the interfacing was completed, the
    thread terminated. If the app needed to communicate with the hardware once more,
    a new `AsyncTask` thread was instantiated and started via its `execute()` method.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在UI线程的上下文中放置一个轮询循环是一个糟糕的做法。请记住，在UI线程上下文中执行处理程序方法的时间过长将导致Android触发ANR对话框。为了避免这个问题，应用程序必须实例化`AsyncTask`，它在后台线程中执行硬件轮询。本书前面的示例应用程序使用了`AsyncTask`线程与硬件设备进行通信，但`AsyncTask`线程是短命的。`AsyncTask`线程的后台线程仅在它与硬件接口时活跃。一旦完成接口操作，线程就会终止。如果应用程序需要再次与硬件通信，会实例化一个新的`AsyncTask`线程并通过其`execute()`方法启动。
- en: Because our app must use `AsyncTask` to continually poll the switch to check
    for user input, the `AsyncTask` thread used in the app is a long-lived thread.
    Instead of instantiating and calling `execute()` for `AsyncTask` only at the moments
    when the app needs to communicate with the hardware, the app instantiates and
    executes `AsyncTask` whenever it transitions to the **resumed state**. The `AsyncTask`
    thread continues executing in the background until the app transitions to the
    **paused state**.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的应用程序必须使用`AsyncTask`不断轮询开关以检查用户输入，因此应用程序中使用的`AsyncTask`线程是一个长生命周期的线程。应用程序不是只在需要与硬件通信的时刻实例化并调用`execute()`方法，而是在每次进入**恢复状态**时实例化并执行`AsyncTask`。`AsyncTask`线程在后台继续执行，直到应用程序进入**暂停状态**。
- en: Note
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To learn the details of how Android app activities transition among the various
    lifecycle states, such as the resumed state and paused state, refer to the official
    Android developer documentation at [http://developer.android.com/training/basics/activity-lifecycle/index.html](http://developer.android.com/training/basics/activity-lifecycle/index.html).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解Android应用活动在各种生命周期状态之间转换的详细信息，例如恢复状态和暂停状态，请参考官方Android开发者文档：[http://developer.android.com/training/basics/activity-lifecycle/index.html](http://developer.android.com/training/basics/activity-lifecycle/index.html)。
- en: Using AsyncTask with long-lived threads
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用长生命期线程的AsyncTask
- en: 'We have already used four methods in the `AsyncTask` base class in our previous
    example apps. These methods are used in `AsyncTask`s to implement both short-lived
    and long-lived threads:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前的示例应用中，已经使用了`AsyncTask`基类中的四种方法。这些方法用于在`AsyncTask`中实现短生命期和长生命期的线程：
- en: '`onPreExecute()`'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onPreExecute()`'
- en: '`doInBackground()`'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`doInBackground()`'
- en: '`onPostExecute()`'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onPostExecute()`'
- en: '`execute()`'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`execute()`'
- en: 'In this chapter, you will use five additional methods of the `AsyncTask` class.
    These additional methods can be used for short-lived threads to make them more
    powerful, and they will almost always be used in long-lived background threads
    to communicate with the thread and receive feedback from it while it runs:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将使用`AsyncTask`类的五种附加方法。这些附加方法可用于增强短生命期线程的功能，几乎总是用于长生命期后台线程与线程通信，并在其运行时接收反馈：
- en: '`cancel()`'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cancel()`'
- en: '`onCancelled()`'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onCancelled()`'
- en: '`isCancelled()`'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isCancelled()`'
- en: '`publishProgress()`'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`publishProgress()`'
- en: '`doPublishProgress()`'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`doPublishProgress()`'
- en: The `cancel()`, `onCancelled()`, and `isCancelled()` methods are used to stop
    the currently executing `AsyncTask` method when the `MainActivity` class of our
    app leaves the resumed state. The `cancel()` method is called from within the
    UI thread context to notify the `AsyncTask` class that it has been canceled and
    should stop its execution. Calling `cancel()` triggers the calling of the `onCancelled()`
    method within the `AsyncTask` thread context. Then `onCancelled()` gives the `AsyncTask`
    class a chance to perform any necessary cleanup tasks. The `isCancelled()` method
    can be called at any time from within the `AsyncTask` thread context to determine
    whether `cancel()` and `onCancelled()` have been called. This method is usually
    called from within a loop inside of the `doInBackground()` method.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`cancel()`、`onCancelled()`和`isCancelled()`方法用于在应用的主活动`MainActivity`离开恢复状态时停止当前正在执行的`AsyncTask`方法。`cancel()`方法从UI线程上下文中调用，通知`AsyncTask`类已被取消并应停止执行。调用`cancel()`会触发在`AsyncTask`线程上下文中调用`onCancelled()`方法。然后`onCancelled()`给`AsyncTask`类一个执行任何必要清理任务的机会。`isCancelled()`方法可以在任何时候从`AsyncTask`线程上下文中调用，以确定是否已调用`cancel()`和`onCancelled()`。这个方法通常在`doInBackground()`方法内的循环中调用。'
- en: The `publishProgress()` and `doPublishProgress()` methods allow the `AsyncTask`
    thread to notify the UI thread of any information that should be displayed to
    the user via the app's UI. For example, if an `AsyncTask` thread is copying a
    large file from the network, these two methods notify the UI thread how much of
    the file has been copied and the estimated time remaining to transfer the remainder
    of the file. The UI thread can then update the UI with this information to keep
    the app's user informed of the `AsyncTask` thread's progress.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`publishProgress()`和`doPublishProgress()`方法允许`AsyncTask`线程通知UI线程应通过应用UI向用户显示的任何信息。例如，如果一个`AsyncTask`线程正在从网络复制一个大文件，这两个方法会通知UI线程已复制的文件部分和剩余文件传输的预计时间。UI线程然后可以更新UI以显示这些信息，让应用的用户了解`AsyncTask`线程的进度。'
- en: These five new `AsyncTask` methods were not used in the example apps in earlier
    chapters because those apps used `AsyncTask` methods that were short-lived threads
    and which updated the screen from the `onPostExecute()`method. The `onPostExecute()`
    method executed within the UI thread, so there was no need to use `publishProgress()`
    and `doPublishProgress()` in those apps. The `AsyncTask` threads in those apps
    also executed while the app was in a resumed state, and the threads were so short-lived
    that it was not necessary to use `cancel()` or `onCancelled()` to terminate the
    threads' execution. Because those apps did not use a loop within their `doInBackground()`
    methods, it was not necessary to use `isCancelled()`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 早前章节中的示例应用没有使用这五个新的`AsyncTask`方法，因为那些应用使用的`AsyncTask`方法是短生命周期的线程，并通过`onPostExecute()`方法更新屏幕。由于`onPostExecute()`方法在UI线程中执行，所以那些应用中没有使用`publishProgress()`和`doPublishProgress()`的必要。那些应用中的`AsyncTask`线程在应用处于恢复状态时执行，而且线程生命周期非常短，因此没有必要使用`cancel()`或`onCancelled()`来终止线程的执行。由于那些应用在它们的`doInBackground()`方法中没有使用循环，所以也没有必要使用`isCancelled()`。
- en: Using the HardwareTask class
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用HardwareTask类
- en: Similar to the example apps in previous chapters, the `complete` app uses a
    `HardwareTask` class that is derived from `AsyncTask`. All of the hardware interfacing
    is performed via the methods in `HardwareTask`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 与前面章节中的示例应用类似，`complete`应用使用了一个从`AsyncTask`派生的`HardwareTask`类。所有硬件接口都是通过`HardwareTask`中的方法完成的。
- en: '![Using the HardwareTask class](img/00030.jpeg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![使用HardwareTask类](img/00030.jpeg)'
- en: The thread contexts in which the HardwareTask methods and the PacktHAL functions
    are executed. The JNI functions in this image have had their function name prefixes
    shortened to HardwareTask.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在其中执行HardwareTask方法和PacktHAL函数的线程上下文。此图像中的JNI函数已经将它们的函数名前缀缩短为HardwareTask。
- en: 'The `HardwareTask` class for the sensor app provides seven `native` methods
    that are used to call the PacktHAL JNI functions related to GPIO, FRAM, and sensor
    hardware interfacing:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 传感器应用的`HardwareTask`类提供了七个`native`方法，用于调用与GPIO、FRAM和传感器硬件接口相关的PacktHAL JNI函数：
- en: '[PRE0]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Because most of the details of the hardware interfacing are encapsulated within
    the PacktHAL functions and hidden from the `complete` app, all but one of these
    methods accept no parameters at all. They simply call their PacktHAL counterparts
    via the PacktHAL JNI wrapper functions. The exception to this is the `changeLED()`
    method, which takes a single parameter to specify whether the LED should be turned
    on or off.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 由于大部分硬件接口的细节都被封装在PacktHAL函数中，并且对`complete`应用隐藏，除了一个方法之外，这些方法都不接受任何参数。它们只是通过PacktHAL
    JNI包装函数调用其对应的PacktHAL函数。这个例外是`changeLED()`方法，它接受一个参数来指定LED是打开还是关闭。
- en: 'In the `complete` app, the `onResume()` method of the `MainActivity` class
    instantiates a new `HardwareTask` class when `MainActivity` changes to the resumed
    state:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在`complete`应用中，当`MainActivity`类变为恢复状态时，`MainActivity`类的`onResume()`方法会实例化一个新的`HardwareTask`类：
- en: '[PRE1]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `pollHardware()` method begins the hardware interfacing process by calling
    the base `AsyncTask` class `execution()` method to create a new thread:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`pollHardware()`方法通过调用基`AsyncTask`类的`execution()`方法创建一个新线程，开始硬件接口过程。'
- en: '[PRE2]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The `onPause()` method of the `MainActivity` class halts the `AsyncTask` class''s
    execution when the `MainActivity` class changes to the paused state:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当`MainActivity`类变为暂停状态时，`MainActivity`类的`onPause()`方法会停止`AsyncTask`类的执行：
- en: '[PRE3]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The `cancel()` method of the `AyncTask` base class begins the process of canceling
    the executing `AsyncTask` thread by calling the `onCancelled()` method in `HardwareTask`.
    In addition to notifying the `AsyncTask` base class that the execution has been
    canceled, the `isDone` Boolean flag is set in the `HardwareTask` class:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`AyncTask`基类的`cancel()`方法通过调用`HardwareTask`中的`onCancelled()`方法开始取消正在执行的`AsyncTask`线程的过程。除了通知`AsyncTask`基类执行已被取消之外，在`HardwareTask`类中还设置了`isDone`布尔标志：'
- en: '[PRE4]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Once `MainActivity` has transitioned to the resumed state, the `pollHardware()`
    method of `HardwareTask` begins the `AsyncTask` thread''s execution. In `onPreExecute()`,
    the `isDone` flag is reset, and the GPIO, I2C, and SPI devices are all initialized
    via the `openHardware()` method. If the hardware is successfully initialized,
    the LED is then turned off via a `changeLED()` call:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦`MainActivity`转变为恢复状态，`HardwareTask`的`pollHardware()`方法就会开始执行`AsyncTask`线程。在`onPreExecute()`中，重置`isDone`标志，并通过`openHardware()`方法初始化GPIO、I2C和SPI设备。如果硬件初始化成功，接下来会通过`changeLED()`调用关闭LED：
- en: '[PRE5]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'After `onPreExecute()` has completed, the `AsyncTask` background thread begins
    running. The `doInBackground()` method begins its execution. Because this is a
    long-lived thread, there is a `while` loop inside `doInBackground()` that will
    continue to execute until the thread is canceled by the main UI thread:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`onPreExecute()` 完成后，`AsyncTask` 后台线程开始运行。`doInBackground()` 方法开始执行。由于这是一个长生命周期的线程，`doInBackground()`
    中有一个 `while` 循环，它会一直执行，直到被主 UI 线程取消：'
- en: '[PRE6]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The loop begins by polling the state of the pushbutton switch. If the switch
    is pressed, the hardware interfacing logic will begin communicating with the FRAM
    and sensor. If the switch is not pressed, then the interfacing logic is skipped.
    In both cases, a slight delay is added via a `Thread.sleep()` method call to give
    the background thread an opportunity to sleep and allow other threads to run.
    This limits the resource consumption of the background thread and gives other
    processes and threads an opportunity to run:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 循环开始时通过轮询推按按钮开关的状态。如果开关被按下，硬件接口逻辑将开始与 FRAM 和传感器通信。如果开关未被按下，则跳过接口逻辑。在这两种情况下，通过
    `Thread.sleep()` 方法调用添加了短暂的延迟，以使后台线程有机会休眠并允许其他线程运行。这限制了后台线程的资源消耗，并给其他进程和线程运行的机会：
- en: '[PRE7]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: If the `pollButton()` method states that the button is pressed, the hardware
    interfacing logic begins executing. This calls the various native methods that
    invoke the PacktHAL JNI functions.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `pollButton()` 方法表明按钮被按下，硬件接口逻辑开始执行。这会调用各种本地方法，从而调用 PacktHAL JNI 函数。
- en: 'First, `changeLED()` turns on the LED to let the user know that a sample is
    about to be taken:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，`changeLED()` 函数会点亮 LED，让用户知道即将进行采样：
- en: '[PRE8]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Next, the sensor sample is taken and the result is stored in the FRAM. The
    `readSensor()` native method interacts with the sensor to retrieve the sample
    data, and then stores the temperature and pressure samples in the first eight
    bytes of the memory of the FRAM:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，获取传感器样本并将结果存储在 FRAM 中。`readSensor()` 本地方法与传感器交互以获取样本数据，然后将温度和压力样本存储在 FRAM
    内存的前八个字节中：
- en: '[PRE9]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The temperature data is stored as a 4-byte float in the first four bytes of
    the FRAM, and the pressure data is stored as a 4-byte float in the second four
    bytes of the FRAM. If you are interested in the details of how this is implemented
    in the native code, take a look at the `Java_com_packt_complete_HardwareTask_readSensor()`
    function in the `jni/jni_wrapper.c` file in PacktHAL.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 温度数据以 4 字节的浮点数形式存储在 FRAM 的前四个字节中，压力数据以 4 字节的浮点数形式存储在 FRAM 的后四个字节中。如果你对在本地代码中如何实现这一点感兴趣，可以查看
    PacktHAL 中 `jni/jni_wrapper.c` 文件中的 `Java_com_packt_complete_HardwareTask_readSensor()`
    函数。
- en: 'After that, the FRAM is accessed to retrieve the temperature and pressure samples:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，访问 FRAM 以获取温度和压力样本：
- en: '[PRE10]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Finally, the main UI thread is updated with the new sample data via the `publishProgress()`
    method. The thread sleeps for 1 second, and then the LED turns off. At this point,
    the `pollButton()` check is complete and the `while` loop begins again:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，通过 `publishProgress()` 方法在主 UI 线程中更新新的样本数据。线程休眠 1 秒后，LED 熄灭。此时，`pollButton()`
    检查完成，`while` 循环再次开始：
- en: '[PRE11]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The `publishProgress()` method triggers the `onProgressUpdate()` method of
    `HardwareTask`, which executes in the UI thread. The `onProgressUpdate()` method
    calls the `MainActivity` class `updateSensorData()` method:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`publishProgress()` 方法触发 `HardwareTask` 的 `onProgressUpdate()` 方法，该方法在 UI 线程中执行。`onProgressUpdate()`
    方法调用 `MainActivity` 类的 `updateSensorData()` 方法：'
- en: '[PRE12]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This `updateSensorData()` method in the `MainActivity` class updates the app''s
    UI and provides a `Toast` message to the user:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`MainActivity` 类中的 `updateSensorData()` 方法会更新应用的 UI，并为用户提供 `Toast` 消息：'
- en: '[PRE13]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The main polling `while` loop in the `HardwareTask` class'' `doInBackground()`
    method will eventually exit as a result of either the hardware interfacing failing
    to initialize or the base `AsyncTask` method being canceled by `MainActivity`.
    Once the loop has finished, `doInBackground()` will exit and the `AsyncTask` background
    thread will terminate. The `onPostExecute()` method will then perform any cleanup
    of items required, such as shutting down the hardware interfacing:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`HardwareTask` 类的 `doInBackground()` 方法中的主要轮询 `while` 循环最终会因为硬件接口初始化失败或被 `MainActivity`
    取消的基础 `AsyncTask` 方法而退出。循环完成后，`doInBackground()` 将退出，`AsyncTask` 后台线程将终止。然后 `onPostExecute()`
    方法将执行任何必要的清理工作，例如关闭硬件接口：'
- en: '[PRE14]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The `HardwareTask` instance has now completed its background thread. If the
    `MainActivity` returns to the resumed state, a new `HardwareTask` instance will
    be instantiated. This `HardwareTask` instance will create another long-lived background
    thread, and the hardware interfacing process will repeat itself.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`HardwareTask` 实例现在已经完成了它的后台线程工作。如果 `MainActivity` 返回到恢复状态，将会实例化一个新的 `HardwareTask`
    实例。这个 `HardwareTask` 实例将创建另一个长期运行的后台线程，硬件接口过程将重复进行。'
- en: Tip
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Are you ready for a challenge?**'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**你准备好迎接挑战了吗？**'
- en: Now that you have seen all of the pieces of the complete app, why not change
    it to add some new functionality? For a challenge, try changing the app to continually
    take samples once the button has been pressed. Stop taking samples if the button
    is held down for a short period of time. We have provided one possible implementation
    of this in the `chapter6_challenge.tgz` file, which is available for download
    from the Packt website.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 既然你已经看到了完整应用程序的所有部分，为何不修改它以添加一些新的功能呢？作为一个挑战，尝试将应用程序修改为在按下按钮后持续采集样本。如果短时间按下按钮，停止采集样本。我们在
    `chapter6_challenge.tgz` 文件中提供了一个可能的实现，你可以在 Packt 网站上下载。
- en: Summary
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we introduced the concept of long-lived threads for hardware
    interfacing. You constructed a circuit that connected the GPIO pushbutton switch,
    GPIO LED, FRAM device, and temperature and pressure sensors to the BBB. Unlike
    the example apps in the previous chapters, the example app in this chapter used
    polling to continually monitor the state of the hardware. You also explored using
    five additional methods of the `AsyncTask` class for communication and control
    between the background thread and the main UI thread of your app.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了用于硬件接口的长生命周期线程的概念。你构建了一个电路，将 GPIO 按钮开关、GPIO LED、FRAM 设备以及温度和压力传感器连接到
    BBB。与之前章节中的示例应用程序不同，本章中的示例应用程序使用轮询来持续监控硬件的状态。你还探索了使用 `AsyncTask` 类的五种附加方法，用于后台线程和应用程序主
    UI 线程之间的通信和控制。
- en: Now that you have learned many of the basic concepts of hardware interfacing
    with Android using an app, it is time to look at the bigger picture and see how
    to turn your prototyped solution into a more permanent solution.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经使用应用程序学习了与 Android 硬件接口的许多基本概念，是时候关注更大的画面，了解如何将你的原型解决方案转变为更持久的解决方案。
- en: In the next chapter, you will learn about integrating your solution with the
    Android framework, combining your solution with other capes available for the
    BBB, and other interfaces that you can use for your future interfacing projects.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习如何将你的解决方案与 Android 框架集成，将你的解决方案与 BBB 可用的其他 cape 结合，以及你可以用于未来接口项目中的其他接口。
