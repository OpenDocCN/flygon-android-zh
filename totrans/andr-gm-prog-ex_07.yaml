- en: Chapter 7. Platformer – Guns, Life, Money, and the Enemy
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第七章。平台游戏 - 枪支、生命、金钱和敌人
- en: In this chapter, we will do many things. First, we will build a machine gun
    with a variable rate of fire and have it shoot bullets. Then, we will introduce
    pickups or collectibles. These give the player something to scavenge for while
    trying to escape into the next level.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将做很多事情。首先，我们将构建一个可变射速的机枪，让它射击子弹。然后，我们将引入拾取物或收藏品。这些给玩家在尝试逃到下一个关卡时提供了搜寻的目标。
- en: Then, just as Bob was beginning to think that his life was a blissful one of
    grass and collectibles, we will build two adversaries for him to outsmart or kill.
    A homing drone and a patrolling guard. We will easily be able to add all these
    things into our level designs.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，就在Bob开始认为他的生活是充满草丛和收藏品的幸福生活时，我们将为他构建两个对手，让他智取或消灭。一个追踪无人机和一个巡逻的守卫。我们可以轻松地将所有这些事物添加到我们的关卡设计中。
- en: Ready aim fire
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备，瞄准，开火。
- en: Now, we can give our hero a gun, and later, we can give him enemies to shoot
    at. We will create a `MachineGun` class to do all the work and a `Bullet` class
    to represent the projectiles that it fires. The `Player` class will control the
    `MachineGun` class, and the `MachineGun` class will control and keep track of
    all the `Bullet` objects that it fires.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以给我们的英雄一把枪，稍后，我们可以给他敌人射击。我们将创建一个`MachineGun`类来完成所有工作，以及一个`Bullet`类来表示它发射的炮弹。`Player`类将控制`MachineGun`类，而`MachineGun`类将控制和跟踪它发射的所有`Bullet`对象。
- en: Create a new Java class and call it `Bullet`. Bullets are not complicated. Ours
    will need a *x* and *y* location, a horizontal velocity, and a direction to help
    calculate the velocity.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的Java类，将其命名为`Bullet`。子弹并不复杂。我们的子弹需要有一个*x*和*y*的位置，一个水平速度和一个方向，以帮助计算速度。
- en: 'This implies the following simple class, constructor, and a bunch of getters
    and setters:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着以下简单的类、构造函数以及一堆的getter和setter：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now let's implement the `MachineGun` class.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们实现`MachineGun`类。
- en: Create a new Java class and call it `MachineGun`. First, we add some members.
    The `maxBullets` variable is not the amount of shots a player has, that is unlimited,
    it is the number of bullet objects the `MachineGun` class can have. Ten is sufficient
    for a very fast firing gun, as we will see. The members `numBullets` and `nextBullet`
    help the class to keep track of its 10 bullets. The `rateOfFire` variable controls
    how fast the player will be able to tap the fire button, and `lastShotTime` will
    help enforce the `rateOfFire` by keeping track of the system time that the last
    bullet was fired. It is the rate of fire that will be the upgradeable aspect of
    the weapon.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的Java类，将其命名为`MachineGun`。首先，我们添加一些成员。`maxBullets`变量不是玩家拥有的射击次数，那是无限的，它是`MachineGun`类可以拥有的子弹对象数量。对于非常快速射击的枪来说，10个就足够了，正如我们将看到的。成员`numBullets`和`nextBullet`帮助类跟踪其10个子弹。`rateOfFire`变量控制玩家能够多快地按下射击按钮，`lastShotTime`通过跟踪上次发射子弹的系统时间来帮助执行`rateOfFire`。射速将是武器可升级的方面。
- en: Enter the code that we discussed as follows.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 输入我们讨论过的代码如下。
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'For functional purposes, we can think of the `CopyOnWriteArrayList` `bullets`,
    which stores our bullets, as a plain old `ArrayList` object. We use this more
    complex and slightly slower class because it is thread safe and bullets can be
    accessed potentially simultaneously from the UI thread, when the player taps the
    fire button as well as from our own thread. This article explains `CopyOnWriteArrayList`,
    if you want to know more, visit:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对于功能性目的，我们可以将存储我们子弹的`CopyOnWriteArrayList` `bullets`视为一个普通的`ArrayList`对象。我们使用这个更复杂且稍慢的类，因为它线程安全，当玩家点击射击按钮时，子弹可能会同时从UI线程以及我们自己的线程中被访问。这篇文章解释了`CopyOnWriteArrayList`，如果你想知道更多，请访问：
- en: '[http://examples.javacodegeeks.com/java-basics/exceptions/java-util-concurrentmodificationexception-how-to-handle-concurrent-modification-exception/](http://examples.javacodegeeks.com/java-basics/exceptions/java-util-concurrentmodificationexception-how-to-handle-concurrent-modification-exception/)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[如何处理并发修改异常](http://examples.javacodegeeks.com/java-basics/exceptions/java-util-concurrentmodificationexception-how-to-handle-concurrent-modification-exception/)'
- en: 'We have the constructor that just initializes bullets, `lastShotTime`, and
    `nextBullet`:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个构造函数，它只是初始化子弹，`lastShotTime`和`nextBullet`：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here, we update all the `Bullet` objects controlled by the gun by calling the
    `bullet.update` method for each bullet.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们通过调用每个子弹的`bullet.update`方法，更新枪支控制的所有`Bullet`对象。
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Next, we have some getters that will let us find out things about our gun and
    its bullets, to do things like collision detection, and drawing bullets.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们有一些getter，它们将让我们了解有关我们的枪及其子弹的信息，以便进行像碰撞检测和绘制子弹等操作。
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We also have a quick helper method for when we want to stop drawing a bullet.
    We hide it away until it is ready to be reassigned in our `shoot` method shortly.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有一个快速帮助方法，当我们想要停止绘制子弹时使用。我们在`shoot`方法中将其隐藏，直到准备好重新分配。
- en: '[PRE5]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'A getter that returns the direction of travel:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 一个返回旅行方向的getter：
- en: '[PRE6]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now, we add a more comprehensive method that actually shoots a bullet. The method
    compares the time of the last fired shot against the current `rateOfFire`. It
    then proceeds to increment `nextBullet` and create a new `Bullet` object if permitted.
    The bullet is sent speeding off in the same direction as Bob is facing. Note that
    the method returns `true` if a bullet was successfully fired. This is so that
    the `InputController` class can play a sound effect to correspond with the player's
    button press.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们添加一个更全面的方法，该方法实际射出一颗子弹。该方法将上一次射击的时间与当前的`rateOfFire`进行比较。然后继续增加`nextBullet`并在允许的情况下创建一个新的`Bullet`对象。子弹以Bob面向的同一方向飞速射出。请注意，如果成功发射了子弹，该方法将返回`true`。这样，`InputController`类可以播放与玩家按钮按下相对应的声音效果。
- en: '[PRE7]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Finally, we have a method to call when the player finds a machine gun upgrade
    pickup. We will see more of them later in the chapter. Here, we simply increase
    `rateOfFire`, which enables the player to tap the fire button more furiously and
    still get results.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有一个方法，当玩家找到机枪升级包时调用。我们将在本章后面看到更多相关内容。在这里，我们只是增加了`rateOfFire`，这使得玩家可以更猛烈地敲击开火按钮，并且仍然能够得到效果。
- en: '[PRE8]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now, we will modify the `Player` class to carry a `MachineGun`. Give `Player`
    a member variable that is a `MachineGun`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将修改`Player`类以携带一把`MachineGun`。给`Player`一个类型为`MachineGun`的成员变量。
- en: '[PRE9]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Next in the `Player` constructor, add a line of code to initialize our new
    `MachineGun` object:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在`Player`构造函数中，添加一行代码来初始化我们的新`MachineGun`对象：
- en: '[PRE10]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In the `Player` class''s `update` method, add a call to the `MachineGun` class''s
    `update` method just before we call `move()` for the player. As highlighted next:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Player`类的`update`方法中，在我们为玩家调用`move()`之前，添加对`MachineGun`类的`update`方法的调用。如下所示突出：
- en: '[PRE11]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Add a method to the `Player` class, so our `InputController` can access the
    virtual trigger. As we saw, the method returns `true` if a shot was successful
    so that the `InputController` class knows whether to play a shot sound or not.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 向`Player`类添加一个方法，这样我们的`InputController`就可以访问虚拟触发器。正如我们所见，如果成功射击，该方法将返回`true`，这样`InputController`类就知道是否播放射击声音。
- en: '[PRE12]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now, we can make some minor additions to our `InputController` class so that
    the player can fire a shot. The code to add is shown highlighted amongst the existing
    code:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以在`InputController`类中做一些小的添加，让玩家能够开火。要添加的代码在现有代码中突出显示：
- en: '[PRE13]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Not forgetting the way that our new control system works, we also need to add
    the same piece of extra code further down the `InputController` class in the `MotionEvent.ACTION_POINTER_DOWN`
    case as well. As usual, here is the code highlighted and with plenty of context:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记我们新的控制系统的工作方式，我们还需要在`InputController`类的`MotionEvent.ACTION_POINTER_DOWN`情况下的更下方添加同样的额外代码。像往常一样，这里是有很多上下文背景的突出代码：
- en: '[PRE14]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Now we have a gun, it's loaded, and we know how to pull the trigger. We just
    need to draw the bullets.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一把枪，它已装填好，我们知道如何扣动扳机。我们只需要绘制子弹。
- en: 'Add the new code in the `draw` method, just before we draw the debugging text,
    as shown:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在`draw`方法中添加新代码，在我们绘制调试文本之前，如下所示：
- en: '[PRE15]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We will now fire some bullets. Note that the rate of fire is unsatisfying and
    slow. We will add some pickups, which the player can get to increase the rate
    of fire of his gun.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将发射一些子弹。请注意，开火速率令人不满意且缓慢。我们将添加一些收集品，玩家可以获得这些收集品以增加他的枪的开火速率。
- en: Pickups
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 收集品
- en: Pickups are game objects that can be collected by the player. They include things
    like upgrades, extra lives, money, and so on. We will now implement one of each
    of those collectibles. As our game engine is setup the way it is, this will be
    surprisingly easy.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 收集品是玩家可以收集的游戏对象。它们包括像升级包、额外生命、金钱等。我们现在将实现其中每一个收集品。由于我们的游戏引擎是这样设置的，这将出奇地简单。
- en: The first thing we will do is create a class to hold the state of the current
    player. We want to monitor the money collected, power of machine gun, and lives
    remaining. Let's call it `PlayerState`. Create a new Java class and name it `PlayerState`.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先要创建一个类来保存当前玩家的状态。我们想要监控收集到的金钱、机枪的火力以及剩余的生命。我们将其称为`PlayerState`。创建一个新的Java类，并将其命名为`PlayerState`。
- en: 'In addition to the variables, we have just talked about, we also want the `PlayerState`
    class to remember an *x* and *y* location to respawn at, when the player loses
    a life. Enter these member variables and the simple constructor:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 除了我们刚才讨论的那些变量之外，我们还希望`PlayerState`类记住一个*x*和*y*位置，以便在玩家失去生命时进行重生。输入这些成员变量和简单的构造函数：
- en: '[PRE16]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now, we need a method that we can call to initialize the respawn location.
    We will use this later when we call this method. Also, we need a method to reload
    the location. These are our next two methods for the `PlayerState` class:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要一个方法，我们可以调用它来初始化重生位置。我们稍后会用到这个方法。此外，我们还需要一个方法来重新加载位置。这是`PlayerState`类的接下来两个方法：
- en: '[PRE17]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We just need a whole bunch of getters and setters to give us access to the
    members of this class:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需要一堆getter和setter，以便访问这个类的成员：
- en: '[PRE18]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Next, declare an object of the `PlayerState` type as a member of the `PlatformView`
    class:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在`PlatformView`类中声明一个`PlayerState`类型的成员对象：
- en: '[PRE19]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Initialize it in the `PlatformView` constructor:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在`PlatformView`构造函数中初始化它：
- en: '[PRE20]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Now in the `loadLevel` method, create a `RectF` object, store the players starting
    location, and pass it in to the `PlayerState` object, `ps`, for safe keeping.
    Each time the player dies, he can be respawned using this location.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在`loadLevel`方法中，创建一个`RectF`对象，保存玩家的起始位置，并将其传递给`PlayerState`对象`ps`以便妥善保存。每次玩家死亡时，都可以使用这个位置进行重生。
- en: '[PRE21]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now we will create three classes, one for each of our pickups. These classes
    are very simple. They extend `GameObject`, set a bitmap, have a hitbox, and a
    location in the world. Also note that they all receive a type in the constructor
    and use `setType()` to store this value. We will soon see how to use their type
    to handle what happens when the player "picks them up". Create three new Java
    classes: `Coin`, `ExtraLife`, and `MachineGunUpgrade`. Note that the pickups are
    a little smaller than a platform, perhaps as we may expect. Enter the code for
    each of them in turn.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将创建三个类，分别对应我们的三种收集物。这些类非常简单。它们扩展了`GameObject`，设置了位图，具有碰撞箱和在世界中的位置。还要注意，它们在构造函数中都接收一个类型，并使用`setType()`存储这个值。我们很快就会看到如何使用它们的类型来处理玩家“收集它们”时会发生的事情。创建三个新的Java类：`Coin`，`ExtraLife`和`MachineGunUpgrade`。注意，收集物比平台稍小一些，这可能正如我们所预期的。依次输入它们的代码。
- en: 'The following is the code for `Coin`:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`Coin`的代码：
- en: '[PRE22]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now, for `ExtraLife`:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，对于`ExtraLife`：
- en: '[PRE23]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Finally, the `MachineGunUpgrade` class:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`MachineGunUpgrade`类：
- en: '[PRE24]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Now, update the `LevelManager` class to expect these three new objects in our
    level designs and add them to `ArrayList` of `GameObjects`. To do this, we need
    to update the `LevelManager` class in three places: `getBitmap()`, `getBitmapIndex()`,
    and `loadMapData()`. Here are each of these minor updates, with the new code highlighted
    amongst the existing code.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，更新`LevelManager`类，使其能够处理我们的关卡设计中这三个新对象，并将它们添加到`GameObjects`的`ArrayList`中。为此，我们需要在三个地方更新`LevelManager`类：`getBitmap()`，`getBitmapIndex()`和`loadMapData()`。以下是这些小更新的内容，新代码在现有代码中突出显示。
- en: 'Make the following additions to `getBitmap()`:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 对`getBitmap()`进行以下添加：
- en: '[PRE25]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Make identical additions, but this time to `getBitmapIndex()`:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 进行相同的添加，但这次是在`getBitmapIndex()`中：
- en: '[PRE26]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Make the final changes within `LevelManager` with the following additions to
    `loadMapData()`:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在`LevelManager`中进行最后的修改，对`loadMapData()`进行以下添加：
- en: '[PRE27]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Now, we can add the three appropriately named graphics to the drawable folder
    and start adding them to our `LevelCave` design. Go ahead and copy `clip.png`,
    `coin.png`, and `life.png` from the `Chapter7/drawables` folder in the download
    bundle to the `drawable` folder of your Android Studio project.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以将三个适当命名的图形添加到drawable文件夹中，并开始将它们添加到我们的`LevelCave`设计中。继续从下载捆绑包中的`Chapter7/drawables`文件夹复制`clip.png`，`coin.png`和`life.png`到你的Android
    Studio项目的`drawable`文件夹中。
- en: 'Add a handy list of comments that identify all the types of game object. We
    will add these over the course of this project and the alpha-numeric code that
    will represent them on our level designs. Add the following comments to the `LevelData`
    class:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 添加一系列注释，标识所有游戏对象类型。我们将在项目过程中添加这些注释，以及它们在关卡设计中的字母数字代码。将以下注释添加到`LevelData`类中：
- en: '[PRE28]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Before we enhance our `LevelCave` class to use our new objects, we want to
    detect when the player collects them or collides with them and take appropriate
    action. We will first add a quick helper method to the `Player` class. The reason
    for this is because when the player collides with another object, the default
    action in the `Player` class''s `checkCollisions` method is to stop the character
    moving. We don''t want this to happen for pickups because it will be irritating
    for the player. Therefore, we will quickly add a `restorePreviousVelocity` method
    to the `Player` class that we can call whenever we don''t want this default action
    to occur. Add this method to the `Player` class:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们增强`LevelCave`类以使用我们的新对象之前，我们想要检测玩家收集它们或与它们碰撞的时刻，并采取适当的行动。我们首先会在`Player`类中添加一个快速辅助方法。这样做的原因是，当玩家与另一个对象碰撞时，`Player`类中`checkCollisions`方法的默认动作是停止角色移动。我们不希望拾取物发生这种情况，因为这会让玩家感到烦恼。因此，我们将在`Player`类中快速添加一个`restorePreviousVelocity`方法，在我们不希望发生默认动作时调用它。将此方法添加到`Player`类中：
- en: '[PRE29]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now, we can handle the collisions for each of our pickups in turn. Add these
    cases to handle our three pickups within the switch block that handles our collisions
    in the `update` method of the `PlatformView` class:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以依次处理每个拾取物的碰撞。在`PlatformView`类的`update`方法中处理碰撞的switch块内，添加以下情况来处理我们的三个拾取物：
- en: '[PRE30]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Finally, add the new objects to our `LevelCave` class.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将新对象添加到我们的`LevelCave`类中。
- en: Tip
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The following code snippet, I suggest, is for a simple new layout that demonstrates
    our new objects, but your layout can be as big or elaborate as you like. We will
    do something more elaborate in the next chapter when we design and link some levels.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码片段，我建议是用于演示我们新对象的简单新布局，但你的布局可以尽可能大或者复杂。我们将在下一章设计并链接一些关卡时做一些更复杂的事情。
- en: 'Enter the following code into `LevelCave` or elaborate with your own design:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码输入到`LevelCave`中，或者用你自己的设计进行扩展：
- en: '[PRE31]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'This is what the simple layout will look like:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是简单布局的样子：
- en: '![Pickups](img/B04322_07_01.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![拾取物](img/B04322_07_01.jpg)'
- en: Try collecting the pickups, and you will hear the pleasing sound effects. In
    addition, each time we collect a pickup, the `PlayerState` class stores an update.
    This will be useful when we build a HUD in the next chapter. Most fun of all;
    if you collect the machine gun upgrades, then try shooting your gun, you will
    find it much more satisfying to wield.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试收集拾取物，你会听到愉悦的声音效果。此外，每次我们收集一个拾取物，`PlayerState`类就会存储一个更新。这将在我们下一章构建一个HUD时非常有用。最有趣的是；如果你收集了机枪升级，然后尝试射击，你会发现使用起来更加令人满意。
- en: We better make those bullets do something. However, before we do that, let's
    give the player a bit more cannon fodder in the form of a couple of enemies.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最好让这些子弹发挥作用。不过，在我们这样做之前，让我们给玩家提供一些炮灰，形式是几个敌人。
- en: The drone
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 无人机
- en: The drone is a simple but evil enemy. It will detect the player when it is within
    the viewport and fly straight at him. If the drone touches the player, death is
    immediate.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 无人机是一个简单但邪恶的敌人。它将在视口中检测到玩家并直接向玩家飞去。如果无人机接触到玩家，那么玩家将立即死亡。
- en: Let's build a `Drone` class. Create a new Java class and call it `Drone`. We
    need member variables to remember when we set the last waypoint. This will restrict
    the frequency with which the drone will get a navigation update of Bob's coordinates.
    This stops the drone from being too deadly accurate. It needs a waypoint/target
    coordinate and also needs to know the speed limit via `MAX_X_VELOCITY` and `MAX_Y_VELOCITY`.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们构建一个`Drone`类。创建一个新的Java类，将其命名为`Drone`。我们需要成员变量来记录我们设置最后一个航点的时刻。这将限制无人机获取Bob坐标导航更新的频率。这将阻止无人机过于精确地打击目标。它需要一个航点/目标坐标，还需要知道通过`MAX_X_VELOCITY`和`MAX_Y_VELOCITY`的速度限制。
- en: '[PRE32]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Now in the `Drone` constructor, initialize the usual `GameObject` members and
    specifically, the `Drone` class ones such as `currentWaypoint`. Not forgetting,
    that if we are going to shoot the drone, it will need a hitbox and we call `setRectHitBox()`
    after we have called `setWorldLocation()`.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在`Drone`构造函数中，初始化常规的`GameObject`成员，特别是`Drone`类的成员，如`currentWaypoint`。不要忘记，如果我们打算射击无人机，它将需要一个碰撞箱，我们在调用`setWorldLocation()`之后调用`setRectHitBox()`。
- en: '[PRE33]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Here is the implementation of the `update` method, which compares the drone's
    coordinates with its `currentWaypoint` variable and changes its velocity accordingly.
    Then, we end `update()` by calling `move()` then `setRectHitbox()`.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`update`方法的实现，它将比较无人机的坐标与其`currentWaypoint`变量，并据此改变其速度。然后，我们通过调用`move()`然后是`setRectHitbox()`来结束`update()`。
- en: '[PRE34]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: In our last method for the `Drone` class, update the `currentWaypoint` variable
    by passing in Bob's coordinates as a parameter. Note that we check if enough time
    has elapsed for an update to make sure our drone is not too accurate.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Drone`类的最后一个方法中，通过传入Bob的坐标作为参数来更新`currentWaypoint`变量。注意，我们会检查是否已经过了足够的时间来进行更新，以确保我们的无人机不会过于精确。
- en: '[PRE35]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Add the drone graphic `drone.png` from `Chapter7/drawable` into the `drawable`
    folder of your project.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 将`drone.png`图形文件从`Chapter7/drawable`文件夹添加到项目的`drawable`文件夹中。
- en: We then need to add drones to our `LevelManager` class in the usual three places,
    just as we did for each of our pickups. Now, add code to `getBitmap()`, `getBitmapIndex()`,
    and `loadMapData()`. These are the three minor code additions in order.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要在`LevelManager`类中添加无人机，就像我们对每个拾取物品所做的那样，在三个常规位置添加。现在，在`getBitmap()`、`getBitmapIndex()`和`loadMapData()`方法中添加代码。这是按顺序需要添加的三个小部分代码。
- en: 'Add the highlighted code in the `getBitmap` method:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在`getBitmap`方法中添加高亮显示的代码：
- en: '[PRE36]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Add the highlighted code in the `getBitmapIndex` method:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在`getBitmapIndex`方法中添加高亮显示的代码：
- en: '[PRE37]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Add the highlighted code in the `loadMapData` method:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在`loadMapData`方法中添加高亮显示的代码：
- en: '[PRE38]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The burning question is; how does the drone know where to go? In each frame,
    if there is a drone within the viewport, we can send the coordinates of the player.
    Do what is shown in this next code block within the `update` method of the `PlatformView`
    class.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 一个迫切的问题是：无人机如何知道要去哪里？在每一帧中，如果视口内有无人机，我们可以发送玩家的坐标。在`PlatformView`类的`update`方法中执行以下代码块所示的操作。
- en: As usual, the new code is shown highlighted and in the context of the existing
    code. If you remember the `setWaypoint()` code from the `Drone` class, it only
    accepts updates every 2 seconds. This stops the drone from being too accurate.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 与往常一样，新代码以高亮形式展示，并嵌入到现有代码的上下文中。如果你记得`Drone`类中的`setWaypoint()`代码，它只接受每2秒更新一次。这防止了无人机过于精确。
- en: '[PRE39]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Now, these evil drones can be strategically placed around the level, and they
    will home in on the player. The last thing we need to do to make the drones fully
    operational is to detect when they actually collide with the player. This is nice
    and easy. Just add a case for drones in our collision detection `switch` block
    in the `update` method of the `PlatformView` class:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这些邪恶的无人机可以策略性地放置在关卡周围，它们会锁定玩家。要使无人机完全运作，我们需要做的最后一件事是检测它们实际上是否与玩家发生了碰撞。这非常简单。只需在`PlatformView`类的`update`方法中的碰撞检测`switch`块中为无人机添加一个案例：
- en: '[PRE40]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Go ahead and add a whole bunch of drones to `LevelCave` and watch them fly at
    the player. Note that if a drone catches the player, he dies and respawns.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 继续在`LevelCave`中添加大量无人机，并观察它们向玩家飞去。注意，如果无人机捕捉到玩家，玩家会死亡并重新生成。
- en: '![The drone](img/B04322_07_02.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![无人机](img/B04322_07_02.jpg)'
- en: Now, as if the world wasn't a dangerous enough place with all those enemy drones,
    let's add another type of enemy.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，尽管世界上已经有足够多的敌方无人机使它变得危险，但让我们再添加一种类型的敌人。
- en: The guard
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 守卫
- en: The guard enemy will be an exercise in scripting. We will have our `LevelManager`
    class automatically generate a simple script, which generates a route for our
    guard to patrol.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 守卫敌人将是一个脚本练习。我们将让`LevelManager`类自动生成一个简单的脚本，为我们的守卫生成一个巡逻路线。
- en: The route will be the simplest one possible; it will be just two waypoints that
    the guard will walk between continuously. It will be much quicker and simpler
    to preprogram our guards with two predetermined waypoints. However, by taking
    the time to have it automatically generated, we can place guards wherever we like
    (within certain parameters) on any level we design, and the behavior will be taken
    care of for us.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 路线将尽可能简单；它只包括两个守卫会不断巡逻的点。预编程两个预定的航点会更快捷、更简单。然而，如果自动生成，我们可以根据需要（在一定的参数范围内）在任何设计的关卡上放置守卫，行为将由系统处理。
- en: Our guard will be animated, so we will be using a sprite sheet and configuring
    the animation details in the constructor; just as we did for the `Player` class.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的守卫将会有动画效果，因此我们将在构造函数中使用一个精灵表单并配置动画细节，就像我们对`Player`类所做的那样。
- en: 'Create a new class and call it `Guard`. First, handle the member variables.
    Our `Guard` class will not only need two waypoints, but also a variable to indicate
    which one the current waypoint is. Like other moving objects, it will need velocity.
    Here is the class declaration and member variables to start coding your class:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新类，并将其命名为`Guard`。首先，处理成员变量。我们的`Guard`类不仅需要两个航点，还需要一个变量来指示当前的航点是哪一个。像其他移动对象一样，它需要速度。以下是开始编写你的类的类声明和成员变量：
- en: '[PRE41]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: We need to set up our guards via the constructor. First, setup our animation
    variables, bitmap, and sizes. Then as usual, set the guard's position in the level,
    its hitbox, and the way that it is facing. However, in the last line of the constructor
    we set `currentWaypoint` to `1`; this is new. We will see how this informs our
    guard's behavior in this class's `update` method.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要通过构造函数设置我们的守卫。首先，设置我们的动画变量、位图和大小。然后像往常一样，设置守卫在关卡中的位置、它的碰撞箱以及它面向的方向。然而，在构造函数的最后一行，我们将`currentWaypoint`设置为`1`；这是新的。我们将在该类的`update`方法中看到这是如何影响守卫的行为的。
- en: '[PRE42]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Next, add a method that our `LevelManager` class will use to let the `Guard`
    class know what its two waypoints are:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 接着，添加一个方法，供我们的`LevelManager`类使用，以告知`Guard`类其两个航点是什么：
- en: '[PRE43]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Now, we will code the "brains" of our `Guard` class, that is, its `update` method.
    You can basically break this method into two main parts. First, `if(currentWaypoint
    == 1)` and secondly, `if(currentWaypoint == 2)`. Inside each of these `if` blocks,
    simply check if the guard has reached or passed the appropriate waypoint. If it
    has, switch waypoints, reverse the velocity, and make the guard face the other
    way.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将编写`Guard`类的“大脑”部分，也就是它的`update`方法。你基本上可以将这个方法分为两个主要部分。首先，`if(currentWaypoint
    == 1)`，其次，`if(currentWaypoint == 2)`。在这两个`if`块内部，只需检查守卫是否已经到达或通过了适当的航点。如果是，则切换航点，反转速度，并让守卫面向另一个方向。
- en: Finally, call `move()` then `setRectHitbox()` to update the hitbox to the new
    location of the guard. Add the code for the `update` method and then we will see
    how to put it to work.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，调用`move()`然后`setRectHitbox()`，以更新碰撞箱到守卫的新位置。添加`update`方法的代码，然后我们将看到如何让它工作。
- en: '[PRE44]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Remember to add `guard.png` from the `Chapter7/drawables` folder of the download
    bundle to the `drawable` folder of the project.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 记得从下载包的`Chapter7/drawables`文件夹中添加`guard.png`到项目的`drawable`文件夹中。
- en: Now, we can make the usual three additions to the `LevelManager` class to load
    any guards that may be found in our level designs.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以在`LevelManager`类中进行通常的三处添加，以加载可能在我们的关卡设计中找到的任何守卫。
- en: 'In `getBitmap()`, add the highlighted code:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在`getBitmap()`中，添加高亮显示的代码：
- en: '[PRE45]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'In `getBitmapIndex()`, add the highlighted code:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在`getBitmapIndex()`中，添加高亮显示的代码：
- en: '[PRE46]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'In `loadMapData()`, add the highlighted code:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在`loadMapData()`中，添加高亮显示的代码：
- en: '[PRE47]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: We will soon add something totally new to `LevelManager`. That is a method that
    will create the script (set two waypoints to patrol). For this new method to work,
    it needs to know if the tile is suitable for walking on. We will add a new property,
    a getter, and a setter to `GameObject` so that this is easily discoverable.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们很快将为`LevelManager`添加一个全新的功能。那就是一个将创建脚本（设置两个巡逻航点）的方法。为了让这个新方法工作，它需要知道瓦片是否适合行走。我们将为`GameObject`添加一个新属性、一个获取器和设置器，以便轻松发现这一点。
- en: 'Add this new member to the `GameObject` class right after the class declaration:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在`GameObject`类的类声明后直接添加这个新成员：
- en: '[PRE48]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Add these two methods to the `GameObject` class to get and set this variable:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 向`GameObject`类添加这两个方法，以获取和设置这个变量：
- en: '[PRE49]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Now in the `Grass` class constructor, add a call to `setTraversable()`. We
    must remember to do this for all future `GameObject` derived classes that we design,
    if we want our guards to be able to patrol on them. In `Grass`, add this line
    at the top of the constructor:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在`Grass`类的构造函数中，添加对`setTraversable()`的调用。如果我们希望守卫能够在上面巡逻，我们必须记得为所有未来设计的`GameObject`派生类做这一点。在`Grass`中，在构造函数顶部添加这一行：
- en: '[PRE50]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Next, we will look at the new `setWaypoints` method for our `LevelManager` class.
    It needs to examine the level design and calculate two waypoints for any `Guard`
    objects present in that level.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将查看为`LevelManager`类新增加的`setWaypoints`方法。它需要检查关卡设计，并为关卡中存在的任何`Guard`对象计算两个航点。
- en: We will break this method into a few parts, so we can see what's happening at
    each stage.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把这个方法分成几个部分，以便我们可以看到每个阶段的操作。
- en: First, we need to loop through all the `gameObjects` classes looking for the
    `Guard` objects.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要遍历所有的`gameObjects`类，寻找`Guard`对象。
- en: '[PRE51]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: If we reach this point in the code, it means we have found a guard who will
    need two waypoints to be set. First, we need to find the tile which the guard
    is "standing on". Then, we calculate the coordinate of the last traversable tile
    on either side, but with a maximum range of five tiles each way. These will be
    the two waypoints. Here, is the code to add to the `setWaypoints` method. It is
    heavily commented to make clear what is going on without interrupting the flow
    by stopping to talk about it.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们到达代码的这一部分，这意味着我们已经找到了一个需要设置两个航点的守卫。首先，我们需要找到守卫“站立”的瓷砖。然后，我们计算每侧最后一个可通行的瓷砖的坐标，但最大范围是每个方向五个瓷砖。这两个点将作为两个航点。以下是添加到`setWaypoints`方法中的代码。它包含大量注释，以清晰说明情况而不中断流程。
- en: '[PRE52]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Now, we can call our new `setWaypoints` method as the last thing to do in the
    `LevelManager` constructor. We need to call this method after the `GameObject`
    class''s `ArrayList` has been populated or there will be no guards in it. Add
    the call to `setWaypoints()` as highlighted:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以在`LevelManager`构造函数的最后调用我们新的`setWaypoints`方法。我们需要在`GameObject`类的`ArrayList`填充完毕后调用此方法，否则其中将没有守卫。像这样突出显示添加对`setWaypoints()`的调用：
- en: '[PRE53]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Next, add this code to the collision detection switch block in the `update`
    method of the `PlatformView` class, so we can bump into the guards.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将这段代码添加到`PlatformView`类的`update`方法中的碰撞检测开关块中，以便我们可以与守卫相撞。
- en: '[PRE54]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Finally, add some `g` letters to the `LevelCave` class. Make sure to place
    them with one space above the platform, because they are 2 meters high as in this
    pseudo code:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，向`LevelCave`类中添加一些`g`字母。确保将它们放置在平台上方一个空格的位置，因为它们的高度是2米，如下面的伪代码所示：
- en: '[PRE55]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '![The guard](img/B04322_07_03.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![守卫](img/B04322_07_03.jpg)'
- en: Summary
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We implemented guns, pickups, drones, and guards. This means we now have plenty
    of dangers, but have a machine gun that can't do any damage. We will change that
    first thing in the next chapter, by implementing collision detection for our bullets.
    However, we will go slightly further than merely having them hit our enemies.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 我们实现了枪支、拾取物、无人机和守卫。这意味着我们现在有很多危险，但拥有一把无法造成伤害的机枪。我们将在下一章首先解决这个问题，为我们的子弹实现碰撞检测。然而，我们的目标不仅仅是让子弹击中敌人。
