- en: Chapter 9. Implementing Game Logic
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第九章. 实现游戏逻辑
- en: 'The shortest description of this chapter contains only two words: state machines.
    Here, we will introduce a common approach to organize interactions between the
    gaming code and the user interface part of the application. We start with an implementation
    of the Boids algorithm and then proceed with the extension of our user interface
    implemented in the previous chapters.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 对本章最简短的描述只有两个字：状态机。在这里，我们将介绍一种常见的处理游戏代码与用户界面部分交互的方法。我们从Boids算法的实现开始，然后继续扩展我们在前几章中实现的用户界面。
- en: Boids
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 鸟群
- en: In many game applications, you can usually see moving objects that collide,
    shoot, chase each other, can be touched or avoided by other objects, or produce
    similar behaviors. The visible complex behavior of objects can usually be broken
    down into a few simple states interoperating together. For example, in an arcade
    game an enemy randomly *wanders around* until it sees a player controlled character.
    After the encounter, it switches to the *chase* state, probably switching to *shoot*
    or *attack* states when in close proximity to the target. If an enemy unit perceives
    some disadvantage, it may *flee* from the player. The *chase* state in turn might
    not only target the enemy towards the player, but also avoid collisions with the
    environment. Each object can be differently animated or have different material
    while being in different states. Let's implement the chasing and wandering algorithms
    using an established approach invented by Craig Reynolds called *Flocking behaviors*
    or *Boids* ([https://en.wikipedia.org/wiki/Boids](https://en.wikipedia.org/wiki/Boids)).
    This method is used to create an impression of a semi-conscious flock or an intelligent
    swarm of some creatures. We use the State pattern ([https://en.wikipedia.org/wiki/State_pattern](https://en.wikipedia.org/wiki/State_pattern))
    extensively throughout this chapter to define complex user interaction scenarios.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多游戏应用中，你通常会看到移动的对象相互碰撞、射击、相互追逐、可以被其他对象触摸或避开，或者产生类似的行为。对象的可见复杂行为通常可以分解为几个简单状态之间的相互操作。例如，在街机游戏中，敌人会随机*四处漫游*，直到它看到由玩家控制的角色。遭遇后，它会切换到*追逐*状态，在接近目标时可能会切换到*射击*或*攻击*状态。如果敌方单位感知到某些劣势，它可能会*逃离*玩家。*追逐*状态反过来不仅仅是将敌人指向玩家，同时也会避免与环境发生碰撞。每个对象在不同的状态下可能会有不同的动画或材质。让我们使用由Craig
    Reynolds发明的已确立的方法来实现追逐和漫游算法，这种方法被称为*群体行为*或*鸟群*（[https://en.wikipedia.org/wiki/Boids](https://en.wikipedia.org/wiki/Boids)）。这种方法用于创建半意识群体或某些生物智能群体的印象。在本章中，我们广泛使用状态模式（[https://en.wikipedia.org/wiki/State_pattern](https://en.wikipedia.org/wiki/State_pattern)）来定义复杂用户交互场景。
- en: 'We consider only a two-dimensional game world and approximate each object,
    or a flockmate, as a circle with a velocity. Velocity, being a vector, has both
    magnitude and direction. Each object obeys three simple rules to calculate its
    desired velocity ([http://www.red3d.com/cwr/boids](http://www.red3d.com/cwr/boids)):'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仅考虑一个二维游戏世界，并将每个对象（或群体成员）近似为一个带有速度的圆形。速度作为一个矢量，既有大小也有方向。每个对象遵循三条简单的规则来计算其期望速度（[http://www.red3d.com/cwr/boids](http://www.red3d.com/cwr/boids)）：
- en: '*Avoidance*: Steer away to avoid crowding local flockmates.'
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*避障*：为了避免拥挤局部群体成员而偏离。'
- en: '*Cohesion*: Steer towards the average heading of local flockmates.'
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*凝聚*：朝向局部群体成员的平均朝向。'
- en: '*Alignment*: Steer to move toward the average position of local flockmates.'
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*对齐*：朝向局部群体成员的平均位置移动。'
- en: Additional rules or behaviors that we implement are *ArriveTo* and *Wander*
    algorithms, which can be used as a basic debugging tool of our behavioral mechanics
    implementation.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们实施的附加规则或行为包括*到达*和*漫游*算法，这些可以作为我们行为机制实现的基本调试工具。
- en: 'The first rule, *Avoidance*, directs the velocity away from the obstacles as
    well as from the other flockmates, as shown in the following figure:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 第一条规则，*避障*，是指将速度从障碍物以及其他群体成员的方向偏离，如下图所示：
- en: '![Boids](img/image00228.jpeg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![鸟群](img/image00228.jpeg)'
- en: 'The second rule, *Cohesion*, steers towards the average heading of local flockmates,
    as shown in the following figure:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 第二条规则，*凝聚*，是指向局部群体成员的平均朝向，如下图所示：
- en: '![Boids](img/image00229.jpeg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![鸟群](img/image00229.jpeg)'
- en: 'The third rule, *Alignment*, tries to adjust the calculated average velocity
    of nearby objects. It affects a group of flockmates in such a way that their movement
    direction soon becomes collinear and codirectional, as shown in the following
    figure:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 第三条规则，*Alignment*，尝试调整附近物体的计算平均速度。它以这种方式影响一群同伴，使它们很快移动方向成为共线和同向的，如下图所示：
- en: '![Boids](img/image00230.jpeg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![鸟类](img/image00230.jpeg)'
- en: The rule, *ArriveTo*, sets the velocity direction to a predefined target point
    or region in space. By allowing the target to move in space, we can create some
    intricate behaviors.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '*ArriveTo*规则将速度方向设置为空间中预定义的目标点或区域。通过允许目标在空间中移动，我们可以创建一些复杂的行为。'
- en: Implementation of the flocking algorithms
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 群集算法的实现
- en: 'To implement the above mentioned behaviors, we will consider the following
    class hierarchy:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现上述行为，我们将考虑以下类层次结构：
- en: '![Implementation of the flocking algorithms](img/image00231.jpeg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![群集算法的实现](img/image00231.jpeg)'
- en: 'A single boid is represented by an instance of the `clBoid` class, which holds
    a pointer to an instance of `iBehaviour`. The `iBehavior` interface contains a
    single member function, `GetControl()`, which calculates the instant force acting
    on a boid. Since the force magnitude might depend on a boid''s state, we pass
    a raw non-owning pointer to `clBoid` into `GetControl()`:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 单个鸟类由`clBoid`类的实例表示，该实例保存了一个指向`iBehaviour`实例的指针。`iBehavior`接口包含一个单一的成员函数`GetControl()`，它计算作用在鸟类上的即时力。由于力的大小可能取决于鸟类的状态，我们将原始的非拥有指针传递给`clBoid`到`GetControl()`中：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Let''s consider the `clBoid` class itself. It contains `m_Pos` and `m_Vel`
    fields, which hold the current position and velocity of the boid, respectively.
    These values are two-dimensional vectors, but the whole structure can be extended
    to 3D logic using three-component vectors:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一下`clBoid`类本身。它包含`m_Pos`和`m_Vel`字段，分别保存了鸟类的当前位置和速度。这些值是二维向量，但整个结构可以使用三组件向量扩展到3D逻辑：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `m_Angle` field is the boid''s instant orientation, and it is calculated
    from the `m_Vel` value. The `m_MaxVel` field contains the maximum velocity of
    the boid:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`m_Angle`字段是鸟类的即时方向，它从`m_Vel`值计算而来。`m_MaxVel`字段包含鸟类的最大速度：'
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The `m_Behaviour` field holds a pointer to an `iBehaviour` instance, which
    calculates the control force of the desired behavior:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`m_Behaviour`字段保存了一个指向`iBehaviour`实例的指针，该实例计算所需行为的控制力：'
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Since a boid moves in a swarm and relies upon positions and velocities of the
    neighboring boids to adjust its velocity, we keep a non-owning pointer to the
    parent `clSwarm` object to avoid circular references between smart pointers:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 由于鸟类在群体中移动，并且依赖于邻近鸟类的位置和速度来调整其速度，我们保留一个非拥有的指向父`clSwarm`对象的指针，以避免智能指针之间的循环引用：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The constructor of the class initializes default values and sets an empty behavior:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 类的构造函数初始化默认值，并设置一个空的行为：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The only member function is `Update()`, which calculates a force acting on
    an object:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一的成员函数是`Update()`，它计算作用在物体上的力：
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'After the force is calculated, it modifies the velocity according to Newton''s
    law, *a = F/m*, and the Euler integration method ([https://en.wikipedia.org/wiki/Euler_method](https://en.wikipedia.org/wiki/Euler_method)).
    The mass of the boid is set to a constant value of `1.0`. Feel free to introduce
    a varying parameter and observe how it changes the visual behavior of the swarm:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 计算完力后，根据牛顿定律，*a = F/m*，以及欧拉积分方法（[https://en.wikipedia.org/wiki/Euler_method](https://en.wikipedia.org/wiki/Euler_method)）修改速度。鸟类的质量设置为常数`1.0`。可以自由引入可变参数，观察它如何改变群体的视觉行为：
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To keep things visually plausible, we restrict the maximum possible velocity
    to the `0…m_MaxVel` interval:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使视觉效果可信，我们将可能的最大速度限制在`0…m_MaxVel`区间内：
- en: '[PRE8]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'After the velocity is calculated, the position of the boid is updated:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 计算完速度后，更新鸟类的位置：
- en: '[PRE9]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Finally, the orientation of the boid should be evaluated as an angle between
    the `X` axis and the `m_Vel` vector. This value is used to render the boid on
    screen using a pointing arrow:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，鸟类的方向应该被评估为`X`轴与`m_Vel`向量之间的角度。这个值用于使用指向箭头在屏幕上渲染鸟类：
- en: '[PRE10]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The simplest possible non-static behavior is random movement under the influence
    of abrupt random impulses. This is called the *Wandering* behavior and implemented
    in the `clWanderBehaviour` class. The `GetControl()` method calculates a vector
    with two random components within the -1..+1 range:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的非静态行为是在突发随机脉冲影响下的随机移动。这称为*漫游*行为，在`clWanderBehaviour`类中实现。`GetControl()`方法计算一个在-1..+1范围内具有两个随机分量的向量：
- en: '[PRE11]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Another useful behavior of a boid is implemented in the `clGoToBehaviour` class.
    Given the target coordinates in the `m_Target` field, this behavior drives the
    controllable boid to that point. Once the boid is within the `m_TargetRadius`
    distance from `m_Target`, the movement is stopped:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`clGoToBehaviour`类实现了鸟群另一种有用的行为。给定`m_Target`字段中的目标坐标，这种行为驱动可控鸟群到那个点。一旦鸟位于距离`m_Target`的`m_TargetRadius`范围内，移动就会停止：'
- en: '[PRE12]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The `m_Target` and `m_TargetRadius` fields define the location and radius of
    the target point:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`m_Target`和`m_TargetRadius`字段定义了目标点的位置和半径：'
- en: '[PRE13]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The `m_VelGain` and `m_PosGain` members hold two values, that define how fast
    a boid should brake once the target is reached, and how fast the boid accelerates
    proportionally to the distance to the target:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`m_VelGain`和`m_PosGain`成员保存两个值，定义了当达到目标时鸟应该多快制动，以及鸟群与目标距离成比例加速的快慢：'
- en: '[PRE14]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The constructor sets default values and non-zero gains:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 构造函数设置默认值和非零增益：
- en: '[PRE15]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The `GetControl()` routine calculates the difference between the boid position
    and the target. This difference is multiplied by `m_PosGain` and is used as the
    control force:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`GetControl()`例程计算了鸟的位置与目标之间的差值。这个差值乘以`m_PosGain`，并用作控制力：'
- en: '[PRE16]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'If the boid is within the `m_TargetRadius` distance, we will return a zero
    as a value of the control force:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果鸟群中的鸟位于`m_TargetRadius`距离内，我们将返回零作为控制力的值：
- en: '[PRE17]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Note
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A visually interesting braking effect can be achieved by replacing the preceding
    line with the line `return -m_VelGain * Boid->m_Vel / dt;`. The braking impulse
    is applied, which decreases the velocity by some fraction which results in a smooth
    exponential decay of the velocity. Visually, the boid stops smoothly near the
    target center.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将前面的行替换为`return -m_VelGain * Boid->m_Vel / dt;`这行，可以实现一个视觉上有趣的制动效果。施加制动脉冲，通过减少一些分数来降低速度，从而实现速度的平滑指数衰减。在视觉上，鸟群在目标中心附近平滑地停止。
- en: 'The calculated impulse is returned at the end of the member function:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 计算出的脉冲在成员函数的末尾返回：
- en: '[PRE18]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Digression: helper routines'
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 偏题：辅助例程
- en: Here, we should describe a couple of functions used in control calculations.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们应该描述在控制计算中使用的几个函数。
- en: 'In the preceding code, we used the `ClampVec2()` routine, which calculates
    the length of a vector `V`, compares this length to `MaxValue`, and returns either
    the same vector `V` or its clamped coaxial version of the `MaxValue` length:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们使用了`ClampVec2()`例程，该例程计算向量`V`的长度，将这个长度与`MaxValue`进行比较，并返回相同的向量`V`或其长度为`MaxValue`的约束同轴版本：
- en: '[PRE19]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Another bunch of methods include random number generation routines. The `RandomFloat()`
    method uses the C++11 standard library to generate uniformly distributed floating-point
    values in the 0…1 interval:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 另一组方法包括随机数生成例程。`RandomFloat()`方法使用C++11标准库在0…1区间内生成均匀分布的浮点值：
- en: '[PRE20]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The `RandomVec2Range()` method uses the `RandomFloat()` function twice to return
    a vector with random components within a specified interval:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`RandomVec2Range()`方法使用`RandomFloat()`函数两次，以返回在指定区间内具有随机分量的向量：'
- en: '[PRE21]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Collective behaviors
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 群体行为
- en: 'By now, we have defined only the `clWanderBehaviour` class. To implement flocking
    algorithms, we need to store information about all the boids at once. Such a collection
    is called a *Swarm* here. The `clSwarm` class holds a vector of `clBoid` objects
    and implements a number of routines used in boid control calculations:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只定义了`clWanderBehaviour`类。为了实现群集算法，我们需要一次性存储所有鸟的信息。这样的集合在这里称为*群体*。`clSwarm`类保存一个`clBoid`对象的向量，并实现了一些在鸟群控制计算中使用的例程：
- en: '[PRE22]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'For debugging and visual demonstration purposes, the `GenerateRandom()` method
    allocates a number of `clBoid` objects with random positions and zero velocities:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 为了调试和视觉演示目的，`GenerateRandom()`方法分配了具有随机位置和零速度的`clBoid`对象的数量：
- en: '[PRE23]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'By default, each boid has a *Wandering* behavior:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，每只鸟都具有一种*漫游*行为：
- en: '[PRE24]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Positions are random and are also kept within the -1..+1 range for each coordinate:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 位置是随机的，并且每个坐标也在-1..+1范围内保持：
- en: '[PRE25]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The `Update()` method iterates the collection and updates every boid:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`Update()`方法遍历集合并更新每个鸟类：'
- en: '[PRE26]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The *Separation* or the *Avoidance* algorithm uses the sum of distances to
    other boids as the control force. The `clSwarm::CalculateSeparation()` method
    iterates the collection of boids and calculates the required sum:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '*分离*或*避障*算法使用与其他鸟类的距离总和作为控制力。`clSwarm::CalculateSeparation()`方法遍历鸟类集合并计算所需的和：'
- en: '[PRE27]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'For each boid, except the one passed as the parameter, we calculate the position
    delta:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个鸟类，除了作为参数传递的那个，我们计算位置差分：
- en: '[PRE28]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'If the distance is beyond the safety threshold, for example, if the boid is
    in close proximity with another boid, we add a negative delta to the control force:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果距离超过安全阈值，例如，如果鸟类与其他鸟类接近，我们向控制力中添加负的差分：
- en: '[PRE29]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'A similar routine is used in the *Cohesion* algorithm to calculate an average
    position of the neighboring boids:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '*凝聚力*算法中使用了类似的例程来计算邻近鸟类的平均位置：'
- en: '[PRE30]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'We only sum the positions if there is more than one boid:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不止一个鸟类，我们才累加位置：
- en: '[PRE31]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'A loop over the list of boids gives us the sum of the positions:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 对鸟类列表进行遍历，我们可以得到位置的总和：
- en: '[PRE32]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'In case of a single boid, we use its position. This way the control force in
    the *Cohesion* algorithm will be zero:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在单个鸟类的情况下，我们使用它的位置。这样，*凝聚力*算法中的控制力将为零：
- en: '[PRE33]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'A similar procedure is applied to the velocities:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 类似的过程也应用于速度：
- en: '[PRE34]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The utility method `SetSingleBehaviour()` sets the behavior of each and every
    boid in a swarm to the specified value:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 实用方法`SetSingleBehaviour()`将群体中每个鸟类的行为设置为指定值：
- en: '[PRE35]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Now that we have the `clSwarm` class, we can finally implement the flocking
    behavior. The `clFlockingBehaviour` uses information about neighboring boids and
    calculates the control force with the classic Boids algorithms:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了`clSwarm`类，我们终于可以实施群聚行为了。`clFlockingBehaviour`使用邻近鸟类的信息，并使用经典的Boids算法计算控制力：
- en: '[PRE36]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'As usual, the constructor sets default parameters:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 与往常一样，构造函数设置默认参数：
- en: '[PRE37]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The `m_SafeDistance` field defines a distance at which the collision avoidance
    algorithm does not act:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`m_SafeDistance`字段定义了一个距离，在该距离上避障算法不作用：'
- en: '[PRE38]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The next fields contain the weights for the influence of each flocking algorithm:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个字段包含每个群聚算法影响的权重：
- en: '[PRE39]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The first step is *Separation* and *Avoidance*:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是*分离*和*避障*：
- en: '[PRE40]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The second step is *Alignment*:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 第二步是*对齐*：
- en: '[PRE41]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The third step is *Cohesion*. Steer to the average position of the neighbors:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 第三步是*凝聚力*。转向邻居的平均位置：
- en: '[PRE42]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Finally, we sum up all three values and keep the force magnitude below `m_MaxValue`:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将这三个值相加，并保持力的大小在`m_MaxValue`以下：
- en: '[PRE43]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The finishing touch for our behavior system is a class that implements a mixture
    of behaviors. The `clMixedBehaviour` class contains a vector of behaviors and
    respective weight factors that show how much of a behavior''s control force is
    used in the resulting behavior:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们行为系统的最后润色是一个实现行为混合的类。`clMixedBehaviour`类包含行为和行为相应权重因子的向量，这些权重因子表示在结果行为中使用了多少行为的控制力：
- en: '[PRE44]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The `AddBehaviour()` member function adds a new weight factor and a behavior
    to the containers:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`AddBehaviour()`成员函数向容器中添加一个新的权重因子和行为：'
- en: '[PRE45]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'As the name of the class suggests, the `GetControl()` routine calculates the
    control for each of the contained behaviors and sums all these control vectors
    multiplied by appropriate weights:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如类名所示，`GetControl()`例程为包含的每个行为计算控制力，并将所有这些控制向量乘以适当的权重相加：
- en: '[PRE46]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: As we can easily see, the `clFlockingBehaviour` class can be split up into *Avoidance*,
    *Cohesion*, and *Separation* parts. We decided not to complicate the structure
    of the book and implemented the flocking behavior as a single class. Feel free
    to experiment and mix these sub behaviors on your own.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，`clFlockingBehaviour`类可以分解为*避障*、*凝聚力*和*分离*部分。我们决定不使书籍结构复杂化，并将群聚行为实现为单个类。请随意实验和混合这些子行为。
- en: Rendering the swarm
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 渲染群体模拟。
- en: 'To use the developed swarm simulation system, we need to render individual
    boids. Since we already have an OpenGL 3D scene graph rendering system, we represent
    each boid with a triangular mesh and create scene nodes for them. Let''s do this:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用开发好的群体模拟系统，我们需要渲染单个鸟类。由于我们已经有了OpenGL 3D场景图渲染系统，我们用三角形网格表示每个鸟类，并为它们创建场景节点。让我们这样做：
- en: '[PRE47]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'A single `clSceneNode` object in the `m_Root` field serves as the root scene
    node of the entire swarm:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`m_Root`字段中的单个`clSceneNode`对象作为整个群体的根场景节点：'
- en: '[PRE48]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'A pointer to the `clSwarm` object is kept to synchronize boid positions and
    angles with scene node transformations:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 保留指向 `clSwarm` 对象的指针，以将鸟群位置和角度与场景节点变换同步：
- en: '[PRE49]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Scene nodes for each boid are stored in the `m_Boids` vector:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 每个鸟群个体的场景节点存储在 `m_Boids` 向量中：
- en: '[PRE50]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'The constructor of the class creates a scene node for each boid in the swarm:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 类的构造函数为群体中的每个鸟群个体创建了一个场景节点：
- en: '[PRE51]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Visually, the boid is a triangle, so we call `clGeomServ::CreateTriangle()`
    to create a vertex array with a single triangle:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 从视觉上看，鸟群个体是一个三角形，因此我们调用 `clGeomServ::CreateTriangle()` 来创建一个包含单个三角形的顶点数组：
- en: '[PRE52]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Once a geometry node is initialized, we add it to `m_Root`:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦几何节点初始化，我们将其添加到 `m_Root`：
- en: '[PRE53]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'At each frame, we calculate the transformation for each `clSceneNode` attached
    to the boid root node. The transformation consists of a translation into the boid''s
    position followed by a rotation around the vertical `Z` axis:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在每一帧中，我们计算与鸟群根节点关联的每个 `clSceneNode` 的变换。变换包括鸟群位置的平移，然后绕垂直 `Z` 轴旋转：
- en: '[PRE54]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'All other scene management code is similar to that from the previous chapters:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 所有其他场景管理代码与之前章节的类似：
- en: Boids demonstration
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 鸟群演示
- en: The demo code in `1_Boids` uses a mixture of *GoTo* and *Flocking* behaviors
    to make a swarm of boids chase a user-specified target, and at the same time,
    create an illusion of the swarm-like movement.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '`1_Boids` 中的演示代码混合使用了 *GoTo* 和 *Flocking* 行为，使一群鸟群追逐用户指定的目标，同时创建类似群体移动的错觉。'
- en: 'We do not discuss the whole source of the application here and only underline
    the most important parts. The initialization of the demo starts with the creation
    of `clSwarm` filled with randomly positioned boids:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们不讨论应用程序的整个源代码，只强调最重要的部分。演示的初始化从创建填充有随机位置鸟群的 `clSwarm` 开始：
- en: '[PRE55]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'We set the same controller for all boids. The controller itself is a blend
    of `clFlockingBehaviour` and `clGoToBehavior` in the `g_Behaviour` object:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为所有鸟群个体设置相同的控制器。控制器本身是 `g_Behaviour` 对象中的 `clFlockingBehaviour` 和 `clGoToBehavior`
    的混合体：
- en: '[PRE56]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'The `g_Behaviour` instance holds coordinates of the target, which are initially
    set to `(1.0, 1.0)`:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`g_Behaviour` 实例保存目标的坐标，最初设置为 `(1.0, 1.0)`：'
- en: '[PRE57]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'The local `clSwarmRenderer` object is used at each frame of the rendering loop:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在渲染循环的每一帧中，都使用局部的 `clSwarmRenderer` 对象：
- en: '[PRE58]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'The demo uses touch input to change the coordinates of the target. When a touch
    occurs, we intersect the line passing through the touch point with the plane in
    which the boids reside. This intersection point is used as a new target point:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 该演示使用触摸输入来改变目标的坐标。当发生触摸时，我们将穿过触摸点的线与鸟群所在的平面相交。这个交点被用作新的目标点：
- en: '[PRE59]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Once we know the touch has ended, we unproject the 2D mouse coordinates into
    the world space using perspective and view matrices:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们知道触摸已经结束，我们使用透视和视图矩阵将2D鼠标坐标反投到世界空间中：
- en: '[PRE60]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Using the camera view matrix, we calculate rotation and translation and use
    these values to intersect a ray from the mouse position with the `Z=0` plane:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 使用摄像机视图矩阵，我们计算旋转和平移，并使用这些值将鼠标位置的射线与 `Z=0` 平面相交：
- en: '[PRE61]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Once a 3D intersection point is constructed, it can be used as a 2D target
    of the *GoTo* behavior:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦构建了一个3D交点，它就可以用作 *GoTo* 行为的2D目标：
- en: '[PRE62]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: At each iteration, we call the `Swarm::Update()` and `clSwarmRenderer::Update()`
    methods to update individual boid positions and velocities and to synchronize
    scene node transformations with the new data.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在每次迭代中，我们调用 `Swarm::Update()` 和 `clSwarmRenderer::Update()` 方法来更新单个鸟群个体的位置和速度，并将场景节点变换与新的数据同步。
- en: Now, go and run the `1_Boids` example to see for yourself.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，去运行 `1_Boids` 示例，亲自看看效果。
- en: The page-based user interface
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于页面的用户界面
- en: Most parts of the previous chapters have laid down a foundation of a portable
    C++ application. Now, it is time to show you how to join more parts together.
    In [Chapter 7](part0065.xhtml#aid-1TVKI2 "Chapter 7. Cross-platform UI and Input
    System"), *Cross-platform UI and Input System*, we discussed how to create a simple
    custom user interface in C++ and respond to user input. In both cases, we only
    implemented a single fixed behavior without explaining how to switch to another
    one without writing spaghetti code. The first paragraphs of this chapter introduced
    the concept of *Behavior*, which we now apply to our user interface.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 前几章的大部分内容已经为可移植的 C++ 应用程序奠定了基础。现在是时候向您展示如何将更多部分连接在一起了。[第7章](part0065.xhtml#aid-1TVKI2
    "第7章.跨平台 UI 和输入系统")中，我们讨论了如何在 C++ 中创建一个简单的自定义用户界面以及如何响应用户输入。在这两种情况下，我们只实现了一个固定的行为，而没有解释如何在不编写意大利面条代码的情况下切换到另一个行为。本章的第一段介绍了
    *行为* 的概念，我们现在将其应用于我们的用户界面。
- en: We call a single fullscreen state of the user interface as *Page*. Thus, every
    different screen of the application is represented by the `clGUIPage` class, which
    we annotate hereinafter.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将用户界面的单个全屏状态称为 *页面*。因此，应用程序的每个不同屏幕都由 `clGUIPage` 类表示，我们在此之后对其进行注释。
- en: Three main methods of `clUIPage` are `Render()`, `Update()`, and `OnTouch()`.
    The `Render()` method renders a complete page with all child views. `Update()`
    synchronizes the view with the application state. `OnTouch()` reacts to user input.
    The `clGUIPage` class is derived from `clUIView`, so there should not be any problems
    understanding this class.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`clUIPage` 的三个主要方法是 `Render()`、`Update()` 和 `OnTouch()`。`Render()` 方法渲染包含所有子视图的完整页面。`Update()`
    方法将视图与应用程序状态同步。`OnTouch()` 方法响应用户输入。`clGUIPage` 类是从 `clUIView` 派生的，因此理解这个类应该没有问题。'
- en: 'The class contains two fields. The `FFallbackPage` field holds a pointer to
    another page, which is used as a return page, for example, when the back key is
    pressed on Android:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 类包含两个字段。`FFallbackPage` 字段持有指向另一个页面的指针，该页面用作返回页面，例如，在 Android 上按下后退键时：
- en: '[PRE63]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'The page we return to when the back key is pressed:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 按下后退键时返回的页面：
- en: '[PRE64]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'The non-owning pointer to the GUI object on this page came from:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这个页面上的 GUI 对象的非拥有指针来自：
- en: '[PRE65]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'The `OnActivation()` and `OnDeactivation()` methods are called when the GUI
    manager switches pages:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 当 GUI 管理器切换页面时，会调用 `OnActivation()` 和 `OnDeactivation()` 方法：
- en: '[PRE66]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'A list of pages is stored in the `clGUI` class. The `FActivePage` field indicates
    which page is currently visible. Events from user input are redirected to the
    active page:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 页面列表存储在 `clGUI` 类中。`FActivePage` 字段指示当前可见的页面。用户输入的事件会被重定向到激活页面：
- en: '[PRE67]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'The `AddPage()` method sets a pointer to the parent GUI object and adds this
    page to the pages container:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '`AddPage()` 方法设置指向父 GUI 对象的指针，并将此页面添加到页面容器中：'
- en: '[PRE68]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'The `SetActivePage()` method invokes some callbacks aside from actually setting
    the page as active. If the new page matches the currently active page, no action
    is performed:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '`SetActivePage()` 方法除了实际设置页面为激活状态外，还会调用一些回调函数。如果新页面与当前激活的页面相同，则不会执行任何操作：'
- en: '[PRE69]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'If we have a previously active page, we inform that page of switching to another
    page:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们之前有一个激活的页面，我们会通知该页面切换到另一个页面：
- en: '[PRE70]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'If the new page is a non-null page, it is informed that it has been activated:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 如果新页面不是空页面，那么它会被通知已被激活：
- en: '[PRE71]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'As we have mentioned before, each event is redirected to an active page stored
    in `FActivePage`:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的，每个事件都会被重定向到存储在 `FActivePage` 中的激活页面：
- en: '[PRE72]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'The implementation of the `OnKey()` method is only used in Windows or OSX.
    However, a similar logic can be applied to Android if we treat the back key as
    an analogue of the Esc key:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '`OnKey()` 方法的实现只用于 Windows 或 OSX。然而，如果我们把后退键视为 Esc 键的类似物，同样的逻辑也可以应用于 Android：'
- en: '[PRE73]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'If we have a non-null fallback page, we set it as active:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们有一个非空的备用页面，我们会将其设置为激活状态：
- en: '[PRE74]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'The implementation of `SetActive()` is put outside of the class declaration
    because it uses the then-undeclared `clGUI` class. This is used to remove the
    dependency from the header file:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '`SetActive()` 的实现被放在类声明之外，因为它使用了当时未声明的 `clGUI` 类。这是为了从头文件中移除依赖：'
- en: '[PRE75]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: Now, our mini GUI page mechanism is complete and can be used to handle user
    interface logic in an actual application.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的小型 GUI 页面机制已经完整，可以用来在实际应用程序中处理用户界面逻辑。
- en: Summary
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how to implement different behaviors of objects
    and use state machines as well as the design pattern to implement swarm logic.
    Let's proceed to the last chapter, so that we can combine many previous examples
    into a larger application.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何实现对象的不同行为以及使用状态机和设计模式来实现群体逻辑。让我们继续最后一章，这样我们就可以将许多之前的示例整合到一个更大的应用程序中。
