["```java\n<string name=\"app_name\">Wear-note-2</string>\n\n```", "```java\nclasspath \"io.realm:realm-gradle-plugin:3.0.0\"\n\n```", "```java\n// Top-level build file where you can add configuration options common to all sub-projects/modules.\n\nbuildscript {\n    repositories {\n        jcenter()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:2.2.3'\n\n        //Realm plugin\n        classpath \"io.realm:realm-gradle-plugin:3.0.0\"\n        // NOTE: Do not place your application dependencies here; they \n        belong\n        // in the individual module build.gradle files\n    }\n}\n\nallprojects {\n    repositories {\n        jcenter()\n    }\n}\n\ntask clean(type: Delete) {\n    delete rootProject.buildDir\n}\n\n```", "```java\napply plugin: 'realm-android'\n\n```", "```java\npublic class Note extends RealmObject {\n\n    private String notes = \"\";\n    private String id = \"\";\n\n   //Empty constructor\n    public Note() {\n\n    }\n\n    public Note(String id, String notes) {\n        this.id = id;\n        this.notes = notes;\n    }\n\n    public String getNotes() {\n        return notes;\n    }\n\n    public void setNotes(String notes) {\n        this.notes = notes;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public void setId(String id) {\n        this.id = id;\n    }\n\n}\n\n```", "```java\n//MainActivity scope\n//Realm Upgrade\nprivate Realm realm;\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    ....\n    //Realm init\n    Realm.init(this);\n    realm = Realm.getDefaultInstance();\n}\n\n```", "```java\n RealmResults<Note> results = realm.where(Note.class).findAll();\n\n```", "```java\nprivate void updateAdapter() {\n    RealmResults<Note> results = realm.where(Note.class).findAll();\n    myDataSet.clear();\n    myDataSet.addAll(SharedPreferencesUtils.getAllNotes(this));\n    mAdapter.setListNote(myDataSet);\n    mAdapter.notifyDataSetChanged();\n}\n\n```", "```java\nprivate Note createNote(String id, String note) {\n    if (id == null) {\n        id = String.valueOf(System.currentTimeMillis());\n        realm.beginTransaction();\n        Note notes = realm.createObject(Note.class);\n        notes.setId(id);\n        notes.setNotes(note);\n        realm.commitTransaction();\n    }\n    return new Note(id, note);\n}\n\n```", "```java\npublic void deleteRecord(String id){\n    RealmResults<Note> results = realm.where(Note.class).equalTo(\"id\", \n    id).findAll();\n\n    realm.beginTransaction();\n\n    results.deleteAllFromRealm();\n\n    realm.commitTransaction();\n}\n\n```", "```java\nprivate void updateData(Note note, int action) {\n    if (action == Constants.ACTION_ADD) {\n        ConfirmationUtils.showMessage(getString(R.string.note_saved), \n        this);\n    } else if (action == Constants.ACTION_DELETE) {\n        deleteRecord(note.getId());\n        ConfirmationUtils.showMessage(getString(R.string.note_removed), \n        this);\n    }\n    updateAdapter();\n}\n\n```", "```java\npublic class MainActivity extends WearableActivity implements RecyclerViewAdapter.ItemSelectedListener {\n\n    private static final String TAG = \"MainActivity\";\n    private static final int REQUEST_CODE = 1001;\n    private RecyclerViewAdapter mAdapter;\n    private List<Note> myDataSet = new ArrayList<>();\n\n    //Realm Upgrade\n    private Realm realm;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        configLayoutComponents();\n\n        Realm.init(this);\n        realm = Realm.getDefaultInstance();\n\n    }\n\n    private void configLayoutComponents() {\n        WearableRecyclerView recyclerView = (WearableRecyclerView) \n        findViewById(R.id.wearable_recycler_view);\n        recyclerView.setHasFixedSize(true);\n        LinearLayoutManager mLayoutManager = new \n        LinearLayoutManager(this);\n        recyclerView.setLayoutManager(mLayoutManager);\n\n        mAdapter = new RecyclerViewAdapter();\n        mAdapter.setListNote(myDataSet);\n        mAdapter.setListener(this);\n        recyclerView.setAdapter(mAdapter);\n\n        EditText editText = (EditText) findViewById(R.id.edit_text);\n\n        editText.setOnEditorActionListener(new \n        TextView.OnEditorActionListener() {\n            @Override\n            public boolean onEditorAction(TextView textView, int \n            action, KeyEvent keyEvent) {\n                if (action == EditorInfo.IME_ACTION_SEND) {\n                    String text = textView.getText().toString();\n                    if (!TextUtils.isEmpty(text)) {\n                        Note note = createNote(null, text);\n                        SharedPreferencesUtils.saveNote(note, \n                        textView.getContext());\n                        updateData(note, Constants.ACTION_ADD);\n                        textView.setText(\"\");\n                        return true;\n                    }\n                }\n                return false;\n            }\n        });\n    }\n\n    private void updateAdapter() {\n        RealmResults<Note> results = realm.where(Note.class).findAll();\n        myDataSet.clear();\n        myDataSet.addAll(results);\n        mAdapter.setListNote(myDataSet);\n        mAdapter.notifyDataSetChanged();\n    }\n\n    @Override\n    protected void onResume() {\n        super.onResume();\n        updateAdapter();\n    }\n\n    @Override\n    public void onItemSelected(int position) {\n        Intent intent = new Intent(getApplicationContext(), \n        DeleteActivity.class);\n        intent.putExtra(Constants.ITEM_POSITION, position);\n        startActivityForResult(intent, REQUEST_CODE);\n    }\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, \n    Intent data) {\n        if (data != null && requestCode == REQUEST_CODE && resultCode \n        == RESULT_OK) {\n            if (data.hasExtra(Constants.ITEM_POSITION)) {\n                int position = \n                data.getIntExtra(Constants.ITEM_POSITION, -1);\n                if (position > -1) {\n                    Note note = myDataSet.get(position);\n                    updateData(note, Constants.ACTION_DELETE);\n                }\n            }\n        }\n    }\n\n    private void prepareUpdate(String id, String title, int action) {\n        if (!(TextUtils.isEmpty(id) && TextUtils.isEmpty(title))) {\n            Note note = createNote(id, title);\n            updateData(note, action);\n        }\n    }\n\n    private void updateData(Note note, int action) {\n        if (action == Constants.ACTION_ADD) {\n            ConfirmationUtils.showMessage\n            (getString(R.string.note_saved), this);\n\n        } else if (action == Constants.ACTION_DELETE) {\n            deleteRecord(note.getId());\n            ConfirmationUtils.showMessage(getString\n            (R.string.note_removed), this);\n        }\n        updateAdapter();\n    }\n\n    /**\n     * Notifica a Data Layer API que os dados foram modificados.\n     */\n\n    private Note createNote(String id, String note) {\n        if (id == null) {\n            id = String.valueOf(System.currentTimeMillis());\n            realm.beginTransaction();\n            Note notes = realm.createObject(Note.class);\n            notes.setId(id);\n            notes.setNotes(note);\n            realm.commitTransaction();\n        }\n        return new Note(id, note);\n    }\n\n    public void deleteRecord(String id){\n        RealmResults<Note> results = realm.where(Note.class)\n        .equalTo(\"id\", id).findAll();\n\n        realm.beginTransaction();\n\n        results.deleteAllFromRealm();\n\n        realm.commitTransaction();\n    }\n\n    @Override\n    protected void onDestroy() {\n        realm.close();\n        super.onDestroy();\n    }\n}\n\n```", "```java\n//Add this color value in the color.xml in res directory \n<color name=\"cobalt_blue\">#01579B</color>\n\n```", "```java\n<android.support.wearable.view.BoxInsetLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\" \n    android:layout_height=\"match_parent\"\n    android:id=\"@+id/container\"\n    tools:context=\"com.ashok.packt.wear_note_1.activity.MainActivity\"\n    tools:deviceIds=\"wear\"\n    android:background=\"@color/cobalt_blue\"\n    app:layout_box=\"all\"\n    android:padding=\"5dp\">\n\n```", "```java\n<EditText\n    android:id=\"@+id/edit_text\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"50dp\"\n    android:layout_gravity=\"center\"\n    android:gravity=\"center\"\n    android:hint=\"@string/add_a_note\"\n    android:imeOptions=\"actionSend\"\n    android:inputType=\"textCapSentences|textAutoCorrect\"\n android:textColor=\"@color/white\"\n    android:textColorHint=\"@color/white\"\n    android:layout_alignParentTop=\"true\"\n    android:layout_alignParentStart=\"true\" />\n\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:gravity=\"center\"\n    android:layout_gravity=\"center\"\n    android:clickable=\"true\"\n    android:background=\"?android:attr/selectableItemBackground\"\n    android:orientation=\"vertical\">\n\n    <TextView\n        android:id=\"@+id/note\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:gravity=\"center\"\n        android:layout_gravity=\"center\"\n        android:textColor=\"@color/white\"\n        tools:text=\"note\"/>\n\n</LinearLayout>\n\n```", "```java\n<android.support.wearable.view.DelayedConfirmationView\n    android:id=\"@+id/delayed_confirmation\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:src=\"img/ic_delete\"\n    app:circle_border_color=\"@color/white\"\n    app:circle_color=\"@color/white\"\n    app:circle_border_width=\"8dp\"\n    app:circle_radius=\"30dp\"/>\n\n```", "```java\npublic void init() {\n    Typeface tf = Typeface.createFromAsset(getContext().getAssets(), \n    \"fonts/Lora.ttf\");\n    setTypeface(tf ,1);\n\n}\n\n```", "```java\npublic class LoraWearTextView extends TextView {\n    public LoraWearTextView(Context context) {\n        super(context);\n        init();\n    }\n\n    public LoraWearTextView(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        init();\n    }\n\n    public LoraWearTextView(Context context, AttributeSet attrs, int \n    defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n        init();\n    }\n\n    public LoraWearTextView(Context context, AttributeSet attrs, int \n    defStyleAttr, int defStyleRes) {\n        super(context, attrs, defStyleAttr, defStyleRes);\n        init();\n    }\n\n    public void init() {\n        Typeface tf = Typeface.createFromAsset(getContext()\n        .getAssets(), \"fonts/Lora.ttf\");\n        setTypeface(tf ,1);\n\n    }\n}\n\n```", "```java\npublic class LoraWearEditTextView extends EditText {\n\npublic LoraWearEditTextView(Context context) {\n super(context);\n init();\n}\n\npublic LoraWearEditTextView(Context context, AttributeSet attrs) {\n super(context, attrs);\n init();\n}\n\npublic LoraWearEditTextView(Context context, AttributeSet attrs, int defStyleAttr) {\n super(context, attrs, defStyleAttr);\n init();\n}\n\npublic LoraWearEditTextView(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {\n super(context, attrs, defStyleAttr, defStyleRes);\n init();\n}\n\npublic void init() {\n Typeface tf = Typeface.createFromAsset(getContext().getAssets(), \n \"fonts/Lora.ttf\");\n setTypeface(tf ,1);\n}\n\n```", "```java\n<com.ashok.packt.wear_note_1.utils.LoraWearEditTextView\n    android:id=\"@+id/edit_text\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"50dp\"\n    android:layout_gravity=\"center\"\n    android:gravity=\"center\"\n    android:hint=\"@string/add_a_note\"\n    android:imeOptions=\"actionSend\"\n    android:inputType=\"textCapSentences|textAutoCorrect\"\n    android:textColor=\"@color/white\"\n    android:textColorHint=\"@color/white\"\n    android:layout_alignParentTop=\"true\"\n    android:layout_alignParentStart=\"true\" />\n\n<com.ashok.packt.wear_note_1.utils.LoraWearTextView\n    android:id=\"@+id/note\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:gravity=\"center\"\n    android:layout_gravity=\"center\"\n    android:textColor=\"@color/white\"\n    tools:text=\"note\"/>\n\n```", "```java\npublic class AnimatedLinearLayout extends LinearLayout {\n\n...\n\n}\n\n```", "```java\nAnimation animation;\nView currentChild;\n\n```", "```java\npublic AnimatedLinearLayout(Context context) {\n    super(context);\n}\n\npublic AnimatedLinearLayout(Context context, AttributeSet attrs) {\n    super(context, attrs);\n}\n\n@Override\npublic void onWindowFocusChanged(boolean hasWindowFocus) {\n    super.onWindowFocusChanged(hasWindowFocus);\n    ...\n}\n\n```", "```java\nif (hasWindowFocus) {\n    for (int index = 0; index < getChildCount(); index++) {\n        View child = getChildAt(index);\n        currentChild=child;\n}\n\n```", "```java\nif(!(child instanceof ViewGroup)) {\n   switch (child.getTag().toString()) {\n   case SLIDE_DOWN:\n     // write logic to slide down animation\n\n```", "```java\ncase SLIDE_DOWN:\n    animation = new TranslateAnimation(0, 0, -\n    ((child.getMeasuredHeight()/2) * (index + 1)), 0);\n    animation.setInterpolator(new DecelerateInterpolator());\n    animation.setFillAfter(true);\n    animation.setDuration(1000);\n    child.post(new AnimationRunnable(animation,child));\n    //child.startAnimation(animation);\n    break; \n\n```", "```java\n@Override\npublic void onWindowFocusChanged(boolean hasWindowFocus) {\n    super.onWindowFocusChanged(hasWindowFocus);\n    final String SLIDE_DOWN = \"SlideDown\";\n    final String SLIDE_DOWN_MORE = \"SlideDownMore\";\n    final String ROTATE_CLOCKWISE = \"RotateClockWise\";\n    final String ROTATE_ANTI_CLOCKWISE = \"RotateAntiClockWise\";\n    final String ZOOMIN_AND_ROTATE_CLOCKWISE = \n    \"ZoomInAndRotateClockWise\";\n    if (hasWindowFocus) {\n        for (int index = 0; index < getChildCount(); index++) {\n            View child = getChildAt(index);\n            currentChild=child;\n            if(!(child instanceof ViewGroup)) {\n                switch (child.getTag().toString()) {\n                    case SLIDE_DOWN:\n                        animation = new TranslateAnimation(0, 0, -\n                        ((child.getMeasuredHeight()/2) * \n                        (index + 1)), 0);\n                        animation.setInterpolator(new \n                        DecelerateInterpolator());\n                        animation.setFillAfter(true);\n                        animation.setDuration(1000);\n                        child.post(new \n                        AnimationRunnable(animation,child));\n                        //child.startAnimation(animation);\n                        break;\n                    case SLIDE_DOWN_MORE:\n                        animation = new TranslateAnimation(0, 0, -\n                        (child.getMeasuredHeight() * (index + 25)), 0);\n                        animation.setInterpolator(new \n                        DecelerateInterpolator());\n                        animation.setFillAfter(true);\n                        animation.setDuration(1000);\n                        child.post(new \n                        AnimationRunnable(animation,child));\n                        //child.startAnimation(animation);\n                        break;\n                    case ROTATE_CLOCKWISE:\n                        animation = new RotateAnimation(0, 360,            \n                        child.getMeasuredWidth() / 2, \n                        child.getMeasuredHeight() / 2);\n                        animation.setInterpolator(new \n                        DecelerateInterpolator());\n                        animation.setFillAfter(true);\n                        animation.setDuration(1000);\n                        child.post(new \n                        AnimationRunnable(animation,child));\n                        //child.startAnimation(animation);\n                        break;\n                    case ROTATE_ANTI_CLOCKWISE:\n                        animation = new RotateAnimation(0, -360,                 \n                        child.getMeasuredWidth() / 2, \n                        child.getMeasuredHeight() / 2);\n                        animation.setInterpolator(new \n                        DecelerateInterpolator());\n                        animation.setFillAfter(true);\n                        animation.setDuration(1000);\n                        child.post(new \n                        AnimationRunnable(animation,child));\n                        //child.startAnimation(animation);\n                        break;\n                    case ZOOMIN_AND_ROTATE_CLOCKWISE:\n                        AnimationSet animationSet = new \n                        AnimationSet(true);\n                        animationSet.setInterpolator(new \n                        DecelerateInterpolator());\n                        animation = new ScaleAnimation(0, 1, 0, 1, \n                        child.getMeasuredWidth() / 2, \n                        child.getMeasuredHeight() / 2);\n                        animation.setStartOffset(0);\n                        animation.setFillAfter(true);\n                        animation.setDuration(1000);\n                        animationSet.addAnimation(animation);\n                        animation = new RotateAnimation(0, 360, \n                        child.getMeasuredWidth() / 2, \n                        child.getMeasuredHeight() / 2);\n                        animation.setStartOffset(0);\n                        animation.setFillAfter(true);\n                        animation.setDuration(1000);\n                        animationSet.addAnimation(animation);\n                        child.post(new \n                        AnimationSetRunnable(animationSet,child));\n                        //child.startAnimation(animationSet);\n                        break;\n                }\n            }\n        }\n    }\n}\n\n```", "```java\nprivate class AnimationRunnable implements Runnable{\n    private Animation animation;\n    private View child;\n    AnimationRunnable(Animation animation, View child) {\n        this.animation=animation;\n        this.child=child;\n    }\n\n    @Override\n    public void run() {\n        child.startAnimation(animation);\n    }\n}\n\n```", "```java\nprivate class AnimationSetRunnable implements Runnable{\n    private AnimationSet animation;\n    private View child;\n    AnimationSetRunnable(AnimationSet animation, View child) {\n        this.animation=animation;\n        this.child=child;\n    }\n\n    @Override\n    public void run() {\n        child.startAnimation(animation);\n    }\n}\n\n```", "```java\npublic class AnimatedLinearLayout extends LinearLayout {\n    Animation animation;\n    View currentChild;\n\n    public AnimatedLinearLayout(Context context) {\n        super(context);\n    }\n\n    public AnimatedLinearLayout(Context context, AttributeSet attrs) {\n        super(context, attrs);\n    }\n\n    @Override\n    public void onWindowFocusChanged(boolean hasWindowFocus) {\n        super.onWindowFocusChanged(hasWindowFocus);\n        final String SLIDE_DOWN = \"SlideDown\";\n        final String SLIDE_DOWN_MORE = \"SlideDownMore\";\n        final String ROTATE_CLOCKWISE = \"RotateClockWise\";\n        final String ROTATE_ANTI_CLOCKWISE = \"RotateAntiClockWise\";\n        final String ZOOMIN_AND_ROTATE_CLOCKWISE = \n        \"ZoomInAndRotateClockWise\";\n        if (hasWindowFocus) {\n            for (int index = 0; index < getChildCount(); index++) {\n                View child = getChildAt(index);\n                currentChild=child;\n                if(!(child instanceof ViewGroup)) {\n                    switch (child.getTag().toString()) {\n                        case SLIDE_DOWN:\n                            animation = new TranslateAnimation(0, 0, -\n                            ((child.getMeasuredHeight()/2) * \n                             (index + 1)), 0);\n                            animation.setInterpolator(new \n                            DecelerateInterpolator());\n                            animation.setFillAfter(true);\n                            animation.setDuration(1000);\n                            child.post(new \n                            AnimationRunnable(animation,child));\n                            //child.startAnimation(animation);\n                            break;\n                        case SLIDE_DOWN_MORE:\n                            animation = new TranslateAnimation(0, 0, -\n                            (child.getMeasuredHeight() * \n                            (index + 25)), 0);\n                            animation.setInterpolator(new \n                            DecelerateInterpolator());\n                            animation.setFillAfter(true);\n                            animation.setDuration(1000);\n                            child.post(new \n                            AnimationRunnable(animation,child));\n                            //child.startAnimation(animation);\n                            break;\n                        case ROTATE_CLOCKWISE:\n                            animation = new RotateAnimation(0, 360, \n                            child.getMeasuredWidth() / 2, \n                            child.getMeasuredHeight() / 2);\n                            animation.setInterpolator(new \n                            DecelerateInterpolator());\n                            animation.setFillAfter(true);\n                            animation.setDuration(1000);\n                            child.post(new \n                            AnimationRunnable(animation,child));\n                            //child.startAnimation(animation);\n                            break;\n                        case ROTATE_ANTI_CLOCKWISE:\n                            animation = new RotateAnimation(0, -360, \n                            child.getMeasuredWidth() / 2, \n                            child.getMeasuredHeight() / 2);\n                            animation.setInterpolator(new \n                            DecelerateInterpolator());\n                            animation.setFillAfter(true);\n                            animation.setDuration(1000);\n                            child.post(new \n                            AnimationRunnable(animation,child));\n                            //child.startAnimation(animation);\n                            break;\n                        case ZOOMIN_AND_ROTATE_CLOCKWISE:\n                            AnimationSet animationSet = new \n                            AnimationSet(true);\n                            animationSet.setInterpolator(new \n                            DecelerateInterpolator());\n                            animation = new ScaleAnimation(0, 1, 0, 1, \n                            child.getMeasuredWidth() / 2, \n                            child.getMeasuredHeight() / 2);\n                            animation.setStartOffset(0);\n                            animation.setFillAfter(true);\n                            animation.setDuration(1000);\n                            animationSet.addAnimation(animation);\n                            animation = new RotateAnimation(0, 360, \n                            child.getMeasuredWidth() / 2, \n                            child.getMeasuredHeight() / 2);\n                            animation.setStartOffset(0);\n                            animation.setFillAfter(true);\n                            animation.setDuration(1000);\n                            animationSet.addAnimation(animation);\n                            child.post(new \n                            AnimationSetRunnable(animationSet,child));\n                            //child.startAnimation(animationSet);\n                            break;\n                    }\n                }\n            }\n        }\n    }\n\n    private class AnimationRunnable implements Runnable{\n        private Animation animation;\n        private View child;\n        AnimationRunnable(Animation animation, View child) {\n            this.animation=animation;\n            this.child=child;\n        }\n\n        @Override\n        public void run() {\n            child.startAnimation(animation);\n        }\n    }\n    private class AnimationSetRunnable implements Runnable{\n        private AnimationSet animation;\n        private View child;\n        AnimationSetRunnable(AnimationSet animation, View child) {\n            this.animation=animation;\n            this.child=child;\n        }\n\n        @Override\n        public void run() {\n            child.startAnimation(animation);\n        }\n    }\n}\n\n```", "```java\n<com.ashok.packt.wear_note_1.utils.AnimatedLinearLayout \n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:orientation=\"vertical\">\n\n</com.ashok.packt.wear_note_1.utils.AnimatedLinearLayout>\n\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<com.ashok.packt.wear_note_1.utils.AnimatedLinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:layout_gravity=\"center\"\n    android:background=\"?android:attr/selectableItemBackground\"\n    android:clickable=\"true\"\n    android:gravity=\"center\"\n    android:orientation=\"vertical\">\n\n    <com.ashok.packt.wear_note_1.utils.AnimatedLinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"10dp\"\n        android:gravity=\"center\"\n        android:orientation=\"horizontal\">\n\n        <com.ashok.packt.wear_note_1.utils.LoraWearTextView\n            android:id=\"@+id/note\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_gravity=\"center\"\n            android:gravity=\"center\"\n android:tag=\"ZoomInAndRotateClockWise\"            android:textColor=\"@color/white\"\n            tools:text=\"note\" />\n    </com.ashok.packt.wear_note_1.utils.AnimatedLinearLayout>\n\n</com.ashok.packt.wear_note_1.utils.AnimatedLinearLayout>\n\n```"]