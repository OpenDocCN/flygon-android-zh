- en: Chapter 1. Getting Started
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章 开始入手
- en: We will start the book with an overview of Material Design and Android 6 Marshmallow.
    The new Material Design concept from Google has been a revolution in the way apps
    look and feel.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将以 Material Design 和 Android 6 Marshmallow 的概述来开篇。谷歌推出的新的 Material Design
    概念，在应用的外观和感觉上带来了一场革命。
- en: During the course of the book, we will build an app called `MasteringAndroidApp`.
    In this chapter, we will explain what the app is about. In this app, we will put
    into practice all the concepts and theory explained in every chapter. At the end
    of the book, we should have a rich app, full of features, which can be easily
    modified to create your own version and uploaded to the Google Play Store.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的进行过程中，我们将构建一个名为 `MasteringAndroidApp` 的应用。在本章中，我们将解释这个应用的内容。在这个应用中，我们将实践所有章节中解释的概念和理论。在本书结束时，我们应该拥有一个丰富的应用，功能齐全，可以轻松修改以创建您自己的版本，并上传到
    Google Play 商店。
- en: We will ensure that we have all the necessary tools, downloading the latest
    version of Android and introducing **Genymotion**, the quickest emulator for Android,
    strongly recommended for this book.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将确保拥有所有必要的工具，下载最新版本的 Android 并介绍**Genymotion**，这是本书强烈推荐的最快的 Android 模拟器。
- en: Material Design
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Material Design
- en: Key points for Android 6 Marshmallow
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android 6 Marshmallow 的关键要点
- en: Overview of the App
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用概述
- en: Getting the tools ready
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备工具
- en: Android Studio
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android Studio
- en: SDK Manager
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: SDK 管理器
- en: Genymotion
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Genymotion
- en: Introducing Material Design
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 Material Design
- en: As mentioned earlier, Material Design was a revolution in the way apps look
    and feel. You have probably heard of this concept before, but what is it exactly?
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Material Design 在应用的外观和感觉上带来了一场革命。你可能之前听说过这个概念，但确切来说它是什么呢？
- en: Material Design is a new visual language created by Google, used on all the
    platforms, websites, and mobile devices that are based on materials, meaningful
    transitions, animations, and responsive interactions.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Material Design 是由谷歌创建的一种新的视觉语言，它被用在所有基于材料、有意义的过渡、动画和响应式交互的平台、网站和移动设备上。
- en: The material is a metaphor of an element that can be seen on the surface; it
    consists of layers that can have different heights and widths, but their thickness
    is always one unit, as with sheets of paper. We can place materials above each
    other, which introduces a depth element to the view, a *Z* coordinate. In the
    same way, we can have a sheet of paper on top of another, casting shadows and
    defining a visual priority.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 材料是一个可以在表面看到的元素的隐喻，它由可以具有不同高度和宽度的层组成，但它们的厚度始终是一个单位，就像纸张一样。我们可以将材料一个放在另一个上面，为视图引入深度元素，一个*Z*坐标。同样，我们可以在另一张纸上放置一张纸，投下阴影，定义视觉优先级。
- en: The content is displayed on the materials but they don't add thickness to it.
    The content can be displayed in any shape and color; it can be a plain background
    color, a text, a video, and many other things. It is limited within the bounds
    of the material.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 内容显示在材料上，但它们不会增加其厚度。内容可以以任何形状和颜色显示；它可以是一个纯背景色、文本、视频，还有许多其他东西。它被限制在材料的边界内。
- en: The material can expand and the content can expand with it, but the content
    can never expand more than the material. We can't have two materials at the same
    *Z* position. One of them always has to be below or on top of the other. If we
    interact with the materials, we always interact at the top layer level. For instance,
    a touch event will be performed in the top layer and won't go through to the layers
    below. You can change the size and shape of the materials and the two materials
    can be merged into one, but they can't bend or fold.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 材料可以扩展，内容也可以随之扩展，但内容永远不能超过材料的扩展范围。我们不能有两个处于同一*Z*位置的材质。其中一个总是要在另一个下面或者上面。如果我们与材料互动，我们总是在最顶层进行。例如，触摸事件将在最顶层执行，不会穿透到底层。你可以改变材料的尺寸和形状，两种材料可以合并成一个，但它们不能弯曲或折叠。
- en: '![Introducing Material Design](img/B04887_01_01.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![介绍 Material Design](img/B04887_01_01.jpg)'
- en: This is an example of an app using the Material Design style; we can see cards
    with shadows, different content, and an app bar with a navigation drawer. All
    these components will be explained in the course of this book, and we will aim
    to build an app using the same style.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个使用 Material Design 风格的应用示例；我们可以看到带有阴影的卡片、不同的内容和一个带有导航抽屉的应用栏。所有这些组件都将在本书中进行解释，我们将致力于使用相同风格构建一个应用。
- en: Material design also came with important UI elements, such as `RecyclerView`.
    This is a view that will replace `ListView`, which came earlier in Android, to
    create any kind of a scrollable list of elements. We'll work with these components
    in [Chapter 5](ch05.html "Chapter 5. Lists and Grids"), *Lists and Grids*, starting
    with the basic version of `ListView`, evolving it to understand how `RecyclerView`
    was born, and finishing with an example of it.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 材料设计也带来了重要的用户界面元素，如 `RecyclerView`。这是一个视图，将替代早期 Android 中的 `ListView`，以创建任何类型的可滚动元素列表。我们将在[第5章](ch05.html
    "第5章.列表和网格") *列表和网格*中处理这些组件，从 `ListView` 的基本版本开始，演进到理解 `RecyclerView` 是如何诞生的，并以一个示例结束。
- en: The `CardView` was another major UI element introduced. We can see one in the
    previous image; it's a component with a background and shadows that can be customized
    to fit all the content that we want. We will work with it in [Chapter 6](ch06.html
    "Chapter 6. CardView and Material Design"), *CardView and Material Design*, where
    we'll also introduce the next component—design support library.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`CardView` 是另一个引入的主要用户界面元素。我们可以在前面的图片中看到一个；这是一个带有背景和阴影的组件，可以自定义以适应我们想要的所有内容。我们将在[第6章](ch06.html
    "第6章.CardView和材料设计") *CardView和材料设计*中处理它，在那里我们还将介绍下一个组件——设计支持库。'
- en: Design support library is a *must have* library that includes animations, **FAB**
    (**Floating Action Button**), and the navigation drawer. You've probably already
    seen the sliding menu that comes from the left in other apps. Design support library
    offers support for these components in previous Android versions, allowing us
    to use Material Design features in older versions.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 设计支持库是一个包含动画、**FAB**（**浮动操作按钮**）和导航抽屉的*必备*库。你可能已经在其他应用中见过从左侧滑出的滑动菜单。设计支持库为旧版
    Android 提供了这些组件的支持，使我们能够在旧版本中使用材料设计特性。
- en: All of the above are features from a UI and programming perspective, but Material
    design also introduced different features for our phone, such as a new notification
    management system with different priority levels. For instance, we can say which
    notifications are important and establish a time frame when we don't want to be
    disturbed.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 所有上述内容都是从用户界面和编程的角度来看的特性，但材料设计还为我们的手机引入了不同的功能，例如带有不同优先级级别的新通知管理系统。例如，我们可以指定哪些通知是重要的，并建立一个时间段，在这个时间段内我们不想被打扰。
- en: '![Introducing Material Design](img/B04887_01_02.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![介绍材料设计](img/B04887_01_02.jpg)'
- en: Another thing that we can't miss is the battery consumption improvement in this
    version, which can save up to 90 minutes of battery compared to previous Android
    versions, and it is due to a new Android runtime called ART. To explain it in
    a nontechnical way, it translates the app to a language that can be understood
    by Android faster when the app is installed. The previous runtime, **Dalvik**,
    had to do this translation while executing our app rather than just once at the
    installation. This helps the app consume less battery and run faster.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个我们不能忽视的是这一版本在电池消耗方面的改进，与之前的 Android 版本相比，它可以节省高达 90 分钟的电池电量，这是由于一个新的 Android
    运行时 ART。用非技术性的方式来解释，它将应用程序翻译成一种语言，当应用程序安装时，Android 可以更快地理解这种语言。之前的运行时 **Dalvik**
    在执行我们的应用程序时必须进行这种翻译，而不是只在安装时翻译一次。这有助于应用程序消耗更少的电池并运行得更快。
- en: Introducing Android 6 Marshmallow
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 Android 6 Marshmallow
- en: One of the main changes in this version has to do with the permissions for apps.
    Before Android M, we were used to accepting the permissions of an app when we
    were about to download it; the play store showed us a list of permissions that
    an app has, and we needed to accept them in order to download and install it.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这一版本的主要变化之一与应用程序的权限有关。在 Android M 之前，我们习惯于在下载应用程序之前接受应用程序的权限；播放商店向我们展示了应用程序具有的权限列表，我们需要接受它们才能下载和安装。
- en: '![Introducing Android 6 Marshmallow](img/B04887_01_03.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![介绍 Android 6 Marshmallow](img/B04887_01_03.jpg)'
- en: Runtime permissions
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行时权限
- en: This has changed with the introduction of runtime permissions. The idea here
    is to accept the permission only when you need it. For instance, WhatsApp might
    not need access to your microphone until your make a call or leave a voice message.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 随着运行时权限的引入，这一切都改变了。这里的理念是只在需要时接受权限。例如，当你拨打电话或留下语音信息之前，WhatsApp 可能不需要访问你的麦克风。
- en: '![Runtime permissions](img/B04887_01_04.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![运行时权限](img/B04887_01_04.jpg)'
- en: This is something we need to take into account when we develop an app; it is
    a change for the developer who now needs to control what is to be done if the
    user doesn't accept the permission. Previously, we didn't have to do any controlling
    because it was an all-or-none choice at installation time; now, we have to consider
    the decision of the user at runtime.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在我们开发应用时需要考虑的一件事；这对开发者来说是一个改变，现在需要控制如果用户不接受权限，应该做什么。以前，我们不需要进行任何控制，因为在安装时这是一个全有或全无的选择；现在，我们必须要考虑运行时用户的决定。
- en: Tip
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在[http://www.packtpub.com](http://www.packtpub.com)的账户下载您购买的所有Packt Publishing图书的示例代码文件。如果您在别处购买了这本书，可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)注册，我们会将文件直接通过电子邮件发送给您。
- en: Power-saving optimizations
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 节能优化
- en: 'There is another improvement regarding the battery life of our phones since
    Lollipop; this time, Google has introduced two new states: **doze mode** and **app
    standby**.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 自从Lollipop版本以来，我们的手机电池寿命有了另外一项改进；这次，谷歌引入了两种新的状态：**休眠模式**和**应用待机**。
- en: Doze mode improves the sleep efficiency of idle devices. If we turn off the
    screen and are not using the phone, we enter the idle state. Previously, applications
    could do network operations and continue working in the background; now, with
    the introduction of doze mode, the system periodically allows our apps to work
    in the background and perform other pending operations for a brief period of time.
    Again, this brings in some consideration while developing; for instance, in this
    mode, our apps can't access the network.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 休眠模式提高了空闲设备的睡眠效率。如果我们关闭屏幕且没有使用手机，我们将进入空闲状态。以前，应用可以在后台进行网络操作并继续工作；现在，随着休眠模式的引入，系统会定期允许我们的应用在后台工作一段时间，并执行其他挂起的操作。这同样在开发时带来了一些考虑；例如，在这种模式下，我们的应用无法访问网络。
- en: '![Power-saving optimizations](img/B04887_01_05.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![节能优化](img/B04887_01_05.jpg)'
- en: App standby is an induced idle mode for an app that has not been used for a
    while and doesn't have any processes running in the background. It is used for
    an app if it does not show any notifications and if the user has not explicitly
    asked it to be exempt from optimization. This idle mode prevents the app from
    accessing the network and executing pending jobs. When the power cable is connected,
    all apps in a standby state are released, and the idle restrictions are removed.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 应用待机是一种针对一段时间未被使用且后台没有运行任何进程的应用的诱导空闲模式。如果一个应用没有显示任何通知，且用户没有明确要求它免除优化，那么就会为这个应用启用待机模式。这种空闲模式防止应用访问网络和执行挂起的任务。当连接电源线时，所有处于待机状态的应用都会被释放，空闲限制也会被移除。
- en: Text selection
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文本选择
- en: 'In the previous versions, when a user selected text, a set of actions appeared
    on the action bar, such as copy, cut, and paste. With this version, we can show
    these actions and more, in a floating bar that will be presented above the selection:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的版本中，当用户选择文本时，动作栏上会出现一组操作，如复制、剪切和粘贴。在这个版本中，我们可以在一个浮动的栏中显示这些操作以及更多内容，该浮动栏将显示在选定内容的上方：
- en: '![Text selection](img/B04887_01_06.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![文本选择](img/B04887_01_06.jpg)'
- en: Fingerprint authentication
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 指纹验证
- en: In this version of Android, we can authenticate the use of our fingerprint.
    The authentication can be at a device level to unlock the phone, not just to unlock
    a specific app; so, we can authenticate users in our app based on how recently
    they unlocked their device.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个版本的Android中，我们可以验证指纹的使用。这种验证可以在设备级别进行，以解锁手机，而不仅仅是解锁某个特定的应用；因此，我们可以根据用户最近解锁设备的情况，在我们的应用中验证用户。
- en: We have a new object available, `FingerprintManager`, which will be in charge
    of the authentication and allow us to show a dialog requesting the fingerprint.
    We would need a device with a fingerprint sensor in order to use this feature.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个新的可用对象，`FingerprintManager`，它将负责身份验证，并允许我们显示一个请求指纹的对话框。我们需要一个带有指纹传感器的设备才能使用这个功能。
- en: '![Fingerprint authentication](img/B04887_01_07.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![指纹验证](img/B04887_01_07.jpg)'
- en: Direct share
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 直接分享
- en: 'Direct share is a new addition to simplify the content sharing process. Previously,
    if we were in the gallery and wanted to share a picture to a contact in WhatsApp,
    we had to click on **Share**, find WhatsApp in the list of apps, and then find
    a contact inside WhatsApp to share this content. This process will be simplified,
    showing a list of contacts with whom you can share the information directly:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 直接分享是一个新增加的功能，用以简化内容分享过程。以前，如果我们处于图库中，并希望将图片分享给WhatsApp中的联系人，我们必须点击**分享**，在应用列表中找到WhatsApp，然后在WhatsApp中找到联系人来分享内容。这个过程将被简化，直接显示一个你可以直接分享信息的联系人列表：
- en: '![Direct share](img/B04887_01_08.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![直接分享](img/B04887_01_08.jpg)'
- en: These are the main new features that have been released with Android 6 Marshmallow;
    the complete list can be seen at [http://developer.android.com/preview/index.html](http://developer.android.com/preview/index.html).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与Android 6 Marshmallow一起发布的主要新功能；完整列表可以在[http://developer.android.com/preview/index.html](http://developer.android.com/preview/index.html)查看。
- en: Creating MasteringAndroidApp
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建MasteringAndroidApp
- en: Now that we've seen the main features of the latest Android version, we can
    introduce the app that we are going to develop during the book. This app will
    include most of these features, but we will also spend time in the components
    widely used in previous Android versions.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经了解了最新Android版本的主要功能，我们可以介绍在本书中将要开发的应用程序了。这个应用程序将包括这些功能的大部分，但我们也会花时间在之前Android版本中广泛使用的组件上。
- en: To master Android, we should be prepared to understand legacy code; for instance,
    we might have to work on an app that still uses `ListView` instead of `RecyclerView`,
    which is new. We will not always create apps from scratch with the latest components,
    especially if we are professional Android developers. Also, looking at previous
    components will help us understand the natural evolution of these components to
    have a better idea of how they are now.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 要掌握Android，我们应该准备好理解遗留代码；例如，我们可能需要在仍然使用`ListView`而不是新出的`RecyclerView`的应用程序上工作。我们不会总是用最新的组件从零开始创建应用程序，特别是如果我们是专业的Android开发者。同时，查看之前的组件将帮助我们理解这些组件的自然演变，以便更好地了解它们现在的样子。
- en: We will start creating this app totally from scratch, starting with the initial
    design, having a look at the most used design and navigation patterns in Android,
    such as tabs at the top, a sliding menu on the left side, and so on.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从零开始创建这个应用程序，从最初的设计开始，看看在Android中最常用的设计和导航模式，比如顶部的标签，左侧的滑动菜单等等。
- en: The app that we will develop, `MasteringAndroidApp`, is one with server-side
    interaction. This app will show information that is stored in the cloud, and we
    will create the cloud component, making our app communicate with it. The topic
    we have chosen for the app is a job listing board, where we will create job offers
    on the server side, and the users of the app can read these offers and receive
    notifications.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要开发的`MasteringAndroidApp`应用程序，是一个与服务器端交互的应用程序。这个应用程序将展示存储在云中的信息，我们将创建云组件，使我们的应用程序能够与之通信。我们为应用程序选择的主题是职位公告板，我们将在服务器端创建职位邀请，应用程序的用户可以阅读这些邀请并接收通知。
- en: You can easily customize the topic; this will be an example where you can change
    the information and create your own app with the same structure. In fact, it's
    better if you think of your own idea because we will discuss how to publish the
    app in Play Store and how to monetize it; we will add adverts, which will generate
    revenue when the users click on it. So, if you apply what you learn using your
    idea, by the time you finish the book, you will have an app ready to be distributed.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以轻松地自定义主题；这将是一个示例，您可以更改信息并使用相同的结构创建自己的应用程序。实际上，如果你能想出自己的点子会更好，因为我们将讨论如何在Play商店发布应用程序以及如何实现盈利；我们将添加广告，当用户点击广告时会产生收入。所以，如果你使用自己的想法来应用所学内容，等到你读完这本书时，你将拥有一个准备发布的应用程序。
- en: We will develop the app explaining the programming patterns that are most used
    in Android as well as concurrency techniques and different methods to connect
    to rest APIs or servers.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将开发一个解释在Android中最常用的编程模式以及并发技术和连接到REST API或服务器不同方法的应用程序。
- en: We'll not only be focusing on the backend, but also on the UI; by displaying
    the information in an efficient way, using lists and grids, downloading images
    from the Internet, and customizing fonts and views with the latest material design
    features.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不仅关注后端，也关注UI；通过有效的方式展示信息，使用列表和网格，从互联网上下载图片，以及使用最新的材料设计特性来自定义字体和视图。
- en: We will learn the mechanism for debugging our apps, managing logs, and consider
    the memory usage while learning how to identify and prevent memory leaks.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将学习如何调试我们的应用，管理日志，并在学习如何识别和防止内存泄漏时考虑内存使用情况。
- en: Our app will have an offline mode based on a database, where we will store the
    content from the cloud. So, if the mobile loses connection, we can still show
    the information available when we were last online.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用将有一个基于数据库的离线模式，我们将把云中的内容存储在这里。这样，如果手机失去连接，我们仍然可以显示上次在线时可用信息。
- en: To complete our app, we will add extra features such as push notifications,
    crash reports, and analytics.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完善我们的应用，我们将添加额外的功能，如推送通知、崩溃报告和分析。
- en: To finish, we will see how the Android build system works, exporting our app
    in different versions as well as obfuscating the code to protect it and prevent
    decompiling.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将了解Android构建系统的工作原理，以不同版本导出我们的应用，同时混淆代码以保护它，防止被反编译。
- en: We have compressed a huge amount of information that will help you to master
    Android by the end of the book; however, before starting with our app, let's get
    the tools ready.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们压缩了大量信息，这将帮助您在本书结束时掌握Android；然而，在开始我们的应用之前，让我们先准备好工具。
- en: Getting the tools ready
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工具
- en: The tools that we will need during the book are the latest version of Android
    Studio, an Android SDK updated to Android M or later. It is also recommended that
    you have **Genymotion**, an emulator to test the app.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将需要的工具包括最新版本的Android Studio、更新至Android M或更高版本的Android SDK。还建议您使用**Genymotion**，这是一个用于测试应用的模拟器。
- en: Note
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: First, we need to download and install Android Studio, the official tool to
    develop in Android. It can be downloaded from [http://developer.android.com/sdk/index.html](http://developer.android.com/sdk/index.html).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要下载并安装Android Studio，这是在Android上进行开发的官方工具。可以从[http://developer.android.com/sdk/index.html](http://developer.android.com/sdk/index.html)下载。
- en: At the top of the website, you will have a link to download it depending on
    your OS version.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在网站顶部，您可以根据您的操作系统版本找到一个下载链接。
- en: '![Getting the tools ready](img/B04887_01_09.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![准备工具](img/B04887_01_09.jpg)'
- en: Once it's installed, we need to download an Android M SDK, which will provide
    all the classes and resources necessary to develop an app for a specific Android
    version. This is done through SDK Manager, a tool included inside Android Studio.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，我们需要下载一个Android M SDK，它将提供开发特定Android版本应用所需的全部类和资源。这是通过SDK管理器完成的，它是Android
    Studio内包含的一个工具。
- en: We can click on **Tools** | **Android** | **SDK Manager** or find a shortcut
    in the uppermost bar of Android Studio.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以点击**工具** | **Android** | **SDK管理器**，或者在Android Studio最上方的工具栏中找到快捷方式。
- en: '![Getting the tools ready](img/B04887_01_10.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![准备工具](img/B04887_01_10.jpg)'
- en: Once we open SDK manager, we will see a list of the available SDK platforms
    and SDK tools. We need to ensure that the latest version available is installed.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们打开SDK管理器，我们会看到可用SDK平台和SDK工具的列表。我们需要确保已安装最新版本。
- en: '![Getting the tools ready](img/B04887_01_11.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![准备工具](img/B04887_01_11.jpg)'
- en: With this, we have all that we need to develop our app. In order to test it,
    it would be ideal to have Genymotion, which is an Android emulator that will help
    us test our app on different devices.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们就有了我们开发应用所需的一切。为了测试它，理想情况下应该有Genymotion，这是一个Android模拟器，它将帮助我们测试应用在不同设备上的运行情况。
- en: The reason we use this emulator instead of the Android default one is primarily
    the speed. Deploying an app in Genymotion is even quicker than using a physical
    device. Apart from this, we benefit from other features, such as resizable windows,
    copying and pasting from our computer, and other smaller details that are time
    consuming with the default emulator. It can be downloaded from [https://www.genymotion.com](https://www.genymotion.com).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择使用这个模拟器而不是Android默认模拟器的主要原因在于速度。在Genymotion中部署应用甚至比使用物理设备还要快。除此之外，我们还受益于其他功能，比如可调整大小的窗口、从我们的电脑复制和粘贴内容，以及一些在使用默认模拟器时会消耗时间的小细节。可以从[https://www.genymotion.com](https://www.genymotion.com)下载。
- en: All we need to do is install it, and once opened, we can add emulators with
    the same features included with existing devices.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的就是安装它，一旦打开，我们就可以添加具有现有设备包含功能的模拟器。
- en: '![Getting the tools ready](img/B04887_01_12.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![准备工具](img/B04887_01_12.jpg)'
- en: Summary
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we went through the important changes in the latest versions
    of Android, highlighting Android Marshmallow and Material Design.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们回顾了最新Android版本中的重要变化，重点介绍了Android Marshmallow和Material Design。
- en: We explained what we will do in the app that we'll be building through the course
    of this book and the tools that we'll need to create it.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们解释了在本书的学习过程中将要构建的应用程序中的功能以及创建它所需的工具。
- en: In the next chapter, we will look at the existing design patterns in Android
    and start designing our app.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将研究 Android 中现有的设计模式并开始设计我们的应用程序。
