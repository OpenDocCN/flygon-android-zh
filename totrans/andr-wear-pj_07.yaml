- en: Ways to Get Around Anywhere - UI controls and More
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 任意地点的导航方式 - 用户界面控制及更多功能
- en: 'Now that you have learned how to bring life to Google Maps for Android Wear
    applications and explore SQLite integration, we need UI controls and more enhancement.
    In this chapter, let''s focus on making the map application more functional and
    intuitive by adding features, such as moving the marker on the map and changing
    the map types. You will learn the following topics in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经学会了如何为Android Wear应用程序带来Google Maps的生命，并探索SQLite集成，我们需要用户界面控制和更多增强功能。在本章中，让我们专注于通过添加功能，如移动地图上的标记和更改地图类型，使地图应用程序更具功能性和直观性。你将在本章中学习以下主题：
- en: Marker controls
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标记控制
- en: Map types
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 地图类型
- en: Map zoom controls
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 地图缩放控制
- en: Streetview on Wear devices
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在穿戴设备上的街景视图
- en: Best practices
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最佳实践
- en: The marker is not only a symbol that denotes the coordinates on the map. Markers
    are utilized to convey what sort of place it is by replacing the marker default
    symbol with significant pictorial portrayals; for instance, if it's a fuel station,
    the marker symbol can be a little like a fuel gun symbol or hospital.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 标记不仅仅是地图上表示坐标的符号。通过将标记的默认符号替换为有意义的图像描绘，标记被用来传达这是什么类型的地点；例如，如果是加油站，标记符号可以类似于加油枪符号或医院。
- en: Changing marker color and customizing
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更改标记颜色和自定义
- en: Using the `MarkerOptions` class, we can change the color and icon of the marker.
    The following code explains both changing the icon and color of the marker.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`MarkerOptions`类，我们可以更改标记的颜色和图标。以下代码解释了更改标记的图标和颜色。
- en: 'To change the color of the marker, please refer to the following code:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改标记的颜色，请参考以下代码：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We can now see that the marker color is changed from red to cyan with transparency.
    If you wish to remove the transparency, you can remove the `.alpha()` value passed
    to marker options:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以看到，标记的颜色已从红色变为带有透明度的青色。如果你希望移除透明度，可以移除传递给标记选项的`.alpha()`值：
- en: '![](img/00094.jpeg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00094.jpeg)'
- en: Changed marker color
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 改变了标记的颜色
- en: 'To change the marker to an icon inside the `drawable` directory, check the
    following code:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要将标记更改为`drawable`目录中的图标，请检查以下代码：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This replaces the default marker icon with the custom image that we are passing
    from a drawable directory. We need to ensure the icon size is not bloated and
    it has the optimal size of 72x72:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这将替换默认的标记图标，使用我们从drawable目录中传递的自定义图像。我们需要确保图标大小不过大，它具有最佳的大小72x72：
- en: '![](img/00095.jpeg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00095.jpeg)'
- en: Changed marker image with custom image
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 使用自定义图像更改标记图像
- en: The previous code snippet will help in changing the color or icon of the marker,
    but for more complex scenarios, we can dynamically build the marker visual asset
    and add it to the maps.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码片段将帮助更改标记的颜色或图标，但对于更复杂的情况，我们可以动态构建标记视觉资产并将其添加到地图中。
- en: 'How about having our own custom designed marker using simple Java code? We
    shall create a marker with simple text drawn on top of the image. The following
    code explains how can we use the `Bitmap` class and `Canvas` class to draw text
    on top of the image:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 使用简单的Java代码创建我们自己的自定义设计的标记怎么样？我们将创建一个在图像顶部绘制简单文本的标记。以下代码解释了如何使用`Bitmap`类和`Canvas`类在图像上绘制文本：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The following screenshot shows the marker with Notes drawn using bitmap and
    canvas:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图显示了使用位图和画布绘制的带有注释的标记：
- en: '![](img/00096.jpeg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00096.jpeg)'
- en: Dynamically adding the marker from realmdb information.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 动态添加来自realmdb信息的标记。
- en: Dragging the marker and updating the location
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 拖动标记并更新位置
- en: 'Implement the `GoogleMap.OnMarkerDragListener` interfaces in `MapActivity`
    and implement all the callback methods from the `OnMarkerDragListener` interface:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在`MapActivity`中实现`GoogleMap.OnMarkerDragListener`接口，并实现`OnMarkerDragListener`接口中的所有回调方法：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'After implementing these three methods from the interface, in the third callback
    `onMarkerDragEnd`, we can update the memory with the updated location details.
    We can also register `draglistner` in the `onMapReady` callback:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 实现了接口中的这三个方法后，在第三个回调`onMarkerDragEnd`中，我们可以用更新后的位置详情更新内存。我们还可以在`onMapReady`回调中注册`draglistner`：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then, update the `onMarkerDragEnd` method with the following code:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，用以下代码更新`onMarkerDragEnd`方法：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The previous code snippet updates the location when the marker is dragged.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码片段在标记被拖动时更新位置。
- en: InfoWindow click event
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: InfoWindow点击事件
- en: When a user clicks on `InfoWindow`, it allows him to delete the marker. To listen
    to the click events of `Infowindow`, we need to implement `GoogleMap.OnInfoWindowClickListener`
    and its callback method `onInfoWindowClick(..)`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击`InfoWindow`时，它允许用户删除标记。为了监听`Infowindow`的点击事件，我们需要实现`GoogleMap.OnInfoWindowClickListener`及其回调方法`onInfoWindowClick(..)`。
- en: 'Register `infoWindoClicklistner` in the `onMapready` callback as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在`onMapready`回调中注册`infoWindoClicklistner`，如下所示：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Inside the callback method, let''s design an alert dialog when a user clicks
    on it. It should allow the user to delete the marker:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在回调方法内部，当用户点击时，让我们设计一个警告对话框。它应该允许用户删除标记：
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![](img/00097.jpeg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00097.jpeg)'
- en: The UI controls
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户界面控件
- en: The UI controls such as zoom and location controls, are disabled for wearable
    devices. We can enable them using the `UISettings` class. The `UISettings` class
    extends to the object settings for the user interface of a Google Map. To obtain
    this interface, call `getUiSettings()`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 对于可穿戴设备，用户界面控件（如缩放和位置控件）是禁用的。我们可以使用`UISettings`类启用它们。`UISettings`类扩展了Google
    Map用户界面对象的设置。要获取此接口，请调用`getUiSettings()`。
- en: 'The following Boolean methods return the status of the component, whether it
    is enabled or disabled:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的布尔方法返回组件的启用或禁用状态：
- en: '`public boolean isCompassEnabled ()` : Gets whether the compass is enabled/disabled'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public boolean isCompassEnabled ()`：获取指南针是否启用/禁用'
- en: '`public boolean isMyLocationButtonEnabled ()` : Gets whether the my-location
    button is enabled/disabled'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public boolean isMyLocationButtonEnabled ()`：获取我的位置按钮是否启用/禁用'
- en: '`public boolean isZoomControlsEnabled ()` : Gets whether the zoom controls
    are enabled/disabled'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public boolean isZoomControlsEnabled ()`：获取缩放控件是否启用'
- en: '`public boolean isZoomGesturesEnabled ()` : Gets whether zoom gestures are
    enabled/disabled'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public boolean isZoomGesturesEnabled ()`：获取是否启用缩放手势'
- en: '`public boolean isTiltGesturesEnabled ()` : Gets whether tilt gestures are
    enabled/disabled'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public boolean isTiltGesturesEnabled ()`：获取是否启用倾斜手势'
- en: '`public boolean isRotateGesturesEnabled ()` : Gets whether rotate gestures
    are enabled/disabled'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public boolean isRotateGesturesEnabled ()`：获取是否启用旋转手势'
- en: '`public boolean isScrollGesturesEnabled ()` : Gets whether scroll gestures
    are enabled/disabled'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public boolean isScrollGesturesEnabled ()`：获取是否启用/禁用滚动手势'
- en: These methods will return the status of the components.
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些方法将返回组件的状态。
- en: 'To enable these components for the application, `getUiSettings()` will provide
    appropriate set methods as follows:'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了在应用程序中启用这些组件，`getUiSettings()`将提供适当的设置方法，如下所示：
- en: '`public void setCompassEnabled (boolean enabled)`: Enables or disables the
    compass'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public void setCompassEnabled (boolean enabled)`：启用或禁用指南针'
- en: '`public void setIndoorLevelPickerEnabled (boolean enabled)`: Sets whether the
    indoor level picker is enabled when the indoor mode is enabled'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public void setIndoorLevelPickerEnabled (boolean enabled)`：设置当启用室内模式时，室内楼层选择器是否启用'
- en: '`public void setMyLocationButtonEnabled (boolean enabled)`: Enables or disables
    the my-location button'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public void setMyLocationButtonEnabled (boolean enabled)`：启用或禁用我的位置按钮'
- en: '`public void setRotateGesturesEnabled (boolean enabled)`: Sets the preference
    for whether rotate gestures should be enabled or disabled'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public void setRotateGesturesEnabled (boolean enabled)`：设置是否启用旋转手势的偏好设置'
- en: '`public void setZoomControlsEnabled (boolean enabled)`: Enables or disables
    the zoom controls'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public void setZoomControlsEnabled (boolean enabled)`：启用或禁用缩放控件'
- en: 'Let''s see this in the `WearMapdiary` application. Let''s enable the zoom controls
    for the application. In the `OnMapready` method, add the following line of code
    for the `mMap` object:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过`WearMapdiary`应用程序来看看这个功能。我们将为应用程序启用缩放控件。在`OnMapready`方法中，为`mMap`对象添加以下代码行：
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![](img/00098.jpeg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00098.jpeg)'
- en: Similarly, we can set the other UI controls. There are certain limitations to
    all these controls on wearable devices, for example, `setIndoorLevelPickerEnabled`
    will not work on wearable devices.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们可以设置其他用户界面控件。可穿戴设备上的所有这些控件都有一定的限制，例如，`setIndoorLevelPickerEnabled`在可穿戴设备上不起作用。
- en: Types of Maps
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 地图类型
- en: 'A map type governs the overall representation of a map. For example, an atlas
    usually contains political maps that focus on showing boundaries, and road maps
    show all of the roads for a city or a region. The Google Maps Android API offers
    four types of maps, as well as an option to have no map at all. Let''s look at
    the options in more detail:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 地图类型决定了地图的整体表现形式。例如，地图集通常包含关注显示边界的政治地图，而道路地图显示一个城市或地区的所有道路。Google Maps Android
    API提供了四种类型的地图，以及一个不显示地图的选项。让我们更详细地看看这些选项：
- en: '**Normal**: Typical road map. Shows roads, some features built by humans, and
    important natural features like rivers. Road and feature labels are also visible.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**普通：** 典型的道路地图。显示道路、人类建造的一些特征和重要的自然特征，如河流。道路和特征标签也可见。'
- en: '**Hybrid:** Satellite photograph data with road maps added. Road and feature
    labels are also visible.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**混合型（Hybrid）**：卫星照片数据加上道路地图。道路和特征标签也可见。'
- en: '**Satellite:** Satellite photograph data. Road and feature labels are not visible.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**卫星：** 卫星照片数据。道路和特征标签不可见。'
- en: '**Terrain:** Topographic data. The map includes colors, contour lines and labels,
    and perspective shading. Some roads and labels are also visible.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**地形：** 地形数据。地图包括颜色、等高线、标签和透视阴影。一些道路和标签也可见。'
- en: '**None:** No tiles. The map will be rendered as an empty grid with no tiles
    loaded.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无（None）**：无瓦片。地图将被渲染为没有加载瓦片的空网格。'
- en: 'Let''s see this in the `WearMapdiary` application. Let''s change the map type
    for the application. In the `OnMapready` method, add the following line of code
    in the `mMap` object to change the map type to Hybrid:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看`WearMapdiary`应用程序中的这个功能。我们将更改应用程序的地图类型。在 `OnMapready` 方法中，在 `mMap` 对象内添加以下代码行，将地图类型更改为混合型（Hybrid）：
- en: '[PRE9]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![](img/00099.jpeg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00099.jpeg)'
- en: 'The Map is of a Hybrid type, which is a satellite image and labels. Now, to
    change the map type to Terrain, please insert the following code in `mMap`:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 地图是混合型，即卫星图像和标签。现在，若要将地图类型更改为地形，请在 `mMap` 中插入以下代码：
- en: '[PRE10]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![](img/00100.jpeg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00100.jpeg)'
- en: 'The Terrain type map looks as shown preceding figure. Now, to change the map
    type to `NONE`, please insert the following code in the `mMap` object:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 地形类型地图的外观如前图所示。现在，若要将地图类型更改为 `NONE`，请在 `mMap` 对象中插入以下代码：
- en: '[PRE11]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![](img/00101.jpeg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00101.jpeg)'
- en: 'When you choose to have no maps, it looks as shown in the previous screenshot.
    Now, to change the map type to Satellite, please insert the following code in
    the `mMap` object:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 当您选择没有地图时，它看起来如前一个屏幕截图所示。现在，若要将地图类型更改为卫星，请在 `mMap` 对象中插入以下代码：
- en: '[PRE12]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![](img/00102.jpeg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00102.jpeg)'
- en: Streetview in Wear application
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 穿戴应用中的Streetview
- en: Google Street View provides panoramic 360-degree views from designated roads
    throughout its coverage area. Streetview is a great way for visualizing a user's
    destination or any address. Adding Streetview adds real-world visual elements
    to the application and provides a meaningful context to the users. Users can interact
    with Streetview; users will like to pan and scan the location in Streetview.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Google Street View 提供了其覆盖区域内指定道路的全景360度视图。Streetview是可视化用户目的地或任何地址的好方法。添加Streetview为应用程序增添了现实世界的视觉元素，并为用户提供有意义的上下文。用户可以与Streetview互动；用户将喜欢在Streetview中平移和扫描位置。
- en: 'To create a street view map, we shall create a new fragment or activity and
    we can start the activity or attach the fragment. In this example, let''s create
    a new activity with the `SupportStreetViewPanoramaFragment` class and launch the
    activity `onMapLongclick` callback:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建街景地图，我们将创建一个新的片段或活动，并可以启动活动或附加片段。在这个例子中，让我们使用 `SupportStreetViewPanoramaFragment`
    类创建一个新活动，并在 `onMapLongclick` 回调中启动活动：
- en: '[PRE13]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Add the following code in the new layout resource and name the file as `activity_street_view`:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在新的布局资源中添加以下代码，并将文件命名为 `activity_street_view`：
- en: '[PRE14]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, start this activity `onMapLongclicklistner` in `MapActivity`. Before starting
    the activity, make sure you have changed the Application or Activity theme to
    `Theme.AppCompat.Light.NoActionBar`:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在 `MapActivity` 中启动此活动 `onMapLongclicklistner`。在启动活动之前，请确保您已将应用程序或活动主题更改为
    `Theme.AppCompat.Light.NoActionBar`：
- en: '[PRE15]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![](img/00103.jpeg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00103.jpeg)'
- en: Now, we have a complete, working, basic Streetview wear application, you can
    pan and rotate 360 degrees.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们拥有了一个完整、可运行的基本Streetview穿戴应用，你可以平移和旋转360度。
- en: '**Polylines**: Polylines extend to the object class. A polyline is a list of
    points, where line segments are drawn between consecutive points. Polylines have
    the following properties:'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多段线（Polylines）**：多段线扩展到对象类。多段线是一系列点的列表，在这些连续点之间绘制线段。多段线具有以下属性：'
- en: '**Points:** The vertices of the line. Line segments are drawn between consecutive
    points. The polyline needs start and end points for drawing the lines.'
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**点：** 线的顶点。在连续点之间绘制线段。多段线需要起点和终点来绘制线条。'
- en: '**Width:** Line segment width in screen pixels. Width is a constant, independent
    of camera zoom.'
  id: totrans-93
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**宽度：** 线段宽度以屏幕像素为单位。宽度是常数，与相机缩放无关。'
- en: '**Color:** Line segment color in ARGB format; the same format used by Color.'
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**颜色：** 线段颜色采用ARGB格式；与Color使用的格式相同。'
- en: '**Start/End Cap:** Defines the shape to be used at the start or end of a polyline.
    Supported cap types: **ButtCap, SquareCap, RoundCap** (applicable for solid stroke
    pattern), and **CustomCap** (applicable for any stroke pattern). Default for both
    start and end is **ButtCap.**'
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**起始/结束端帽：** 定义了在折线开始或结束时使用的形状。支持的端帽类型：**ButtCap, SquareCap, RoundCap**（适用于实线描边模式）和
    **CustomCap**（适用于任何描边模式）。默认情况下，起始和结束都是 **ButtCap**。'
- en: '**Joint type:** The joint type defines the shape to be used when joining adjacent
    line segments at all the vertices of the polyline except the start and end vertices.'
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**连接类型：** 连接类型定义了在折线除起始和结束顶点外的所有顶点处连接相邻线段时要使用的形状。'
- en: '**Stroke Pattern:** Solid or sequence of patternItem to be repeated along the
    line. Choices include the following:'
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**描边模式：** 沿着线条重复的实线或模式项序列。选择包括以下内容：'
- en: Gap
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 间隙
- en: Dash
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虚线
- en: Dot
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点
- en: '**Z-Index:** The order in which this tile overlay is drawn with respect to
    other overlays.'
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Z-Index：** 此图块覆盖与其他覆盖层相比的绘制顺序。'
- en: '**Visibility:** Indicates the line visibility, or tells whether the line is
    drawn or not.'
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可见性：** 指示线段的可见性，或者告诉线段是否被绘制。'
- en: '**Geodesic status:** Indicates whether the segments of the polyline should
    be drawn as geodesics, as opposed to straight lines on the Mercator projection.
    A geodesic is the shortest path between two points on the Earth''s surface. The
    geodesic curve is constructed assuming the Earth is a sphere.'
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测地线状态：** 指示折线的段是否应被绘制为测地线，而不是在墨卡托投影上的直线。测地线是地球上两点之间的最短路径。构建测地线曲线时假定地球是一个球体。'
- en: '**Clickability:** When you want to fire an event when a user clicks on the
    polyline. It works with `GoogleMap.OnPolylineClickListener` registered through
    `setOnPolylineClickListener(GoogleMap.OnPolylineClickListener)`.'
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可点击性：** 当你希望用户点击折线时触发一个事件。它与通过 `setOnPolylineClickListener(GoogleMap.OnPolylineClickListener)`
    注册的 `GoogleMap.OnPolylineClickListener` 一起工作。'
- en: '**Tag:** An object associated with the polyline. For example, the object can
    contain data about what the polyline represents. This is easier than storing a
    separate `Map<Polyline, Object>`. As another example, you can associate a String
    ID corresponding to the ID from a dataset.'
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标签：** 与折线关联的对象。例如，该对象可以包含关于折线表示内容的数据。这比存储一个分离的 `Map<Polyline, Object>` 要简单。另一个例子，你可以关联一个与数据集中的ID对应的字符串ID。'
- en: 'Add the following code in the `onMapready` callback and attach this to the
    map instance:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `onMapready` 回调中添加以下代码，并将其附加到地图实例上：
- en: '[PRE16]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![](img/00104.jpeg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00104.jpeg)'
- en: Best practices
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最佳实践
- en: Android Wear is very useful for quick and glanceable information. The most requested
    feature in wear is map in the latest Google Play services, updates for Google
    Maps came to Android Wear, which means you can develop the map application ideally,
    like how we develop for mobile applications there is no change in the process
    for developing wear map application. This means best-in-class development experience
    with just a few lines of code and configuration.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Android Wear对于快速和一目了然的信息非常有用。在最新的Google Play服务中，穿戴设备上最被请求的功能是地图，Google Maps的更新也来到了Android
    Wear，这意味着你可以理想地开发地图应用程序，就像我们为移动应用程序开发一样，开发穿戴地图应用程序的过程没有变化。这意味着只需几行代码和配置就能获得最佳的类开发体验。
- en: 'Let''s talk about some common use cases for Android Wear maps applications
    and how to implement the best map application experience:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论一下Android Wear地图应用程序的一些常见用例以及如何实现最佳的地图应用程序体验：
- en: One of the most common use cases is to simply display a map; since the wear
    has a small display, we might have to display the entire map in fullscreen.
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最常见的用例之一是简单地显示地图；由于穿戴设备显示较小，我们可能需要全屏显示整个地图。
- en: Your application might need to show a marker to denote the landmark. Needs to
    allow users to pan around the map and find places on the map.
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你的应用程序可能需要显示一个标记来指代地标。需要允许用户在地图上平移并找到地图上的地点。
- en: Android Wear reserves the gesture of swiping from left to right for dismissing
    the current application. If you do not need your map to pan around, this will
    continue to work. However, if you need your map application to move and pan around
    the map, we need to override this particular dismiss gesture to reduce confusion
    and let the user exit the application. To do this, we can implement the `dismissoverlay`
    view. And attach it to a long click event. The view will handle the dismiss action.
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安卓穿戴保留了从左向右滑动来关闭当前应用程序的手势。如果你不需要你的地图平移，这将继续有效。但是，如果你需要你的地图应用程序在地图上移动和平移，我们需要重写这个特定的关闭手势以减少混淆，并让用户退出应用程序。为此，我们可以实现`dismissoverlay`视图，并将其附加到长按事件上。该视图将处理关闭动作。
- en: Another common use case is to select the location on the map, so you can share
    the location with your friends. To implement this, we can place the marker in
    the middle of the screen and let the user pan around the map and select the recent
    pan `latlong` value, which indicates the selected location within the map fragment
    component. Then, use the map `oncamerachange` listner to detect if the user has
    panned around the map. We can access the new location through the `cameraposition.target.letlong`
    value.
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一个常见的用例是在地图上选择位置，这样你可以与朋友分享位置。为了实现这一点，我们可以将标记放置在屏幕中央，并让用户在地图上平移并选择最近的平移`latlong`值，这表示在地图片段组件内选择的位置。然后，使用地图`oncamerachange`监听器来检测用户是否在地图上进行了平移。我们可以通过`cameraposition.target.letlong`值访问新位置。
- en: It is a good practice to release components we are not using; for example, Google
    API clients when we initialize it. We shall release it in the activity lifecycle
    callbacks.
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 释放我们不使用的组件是一个好习惯；例如，当我们初始化它时，释放Google API客户端。我们应在活动生命周期回调中释放它。
- en: 'For more information on implementing the best wear map application, follow
    this link: [https://developers.google.com/maps/documentation/android-api/wear.](https://developers.google.com/maps/documentation/android-api/wear)'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 有关实现最佳穿戴地图应用程序的更多信息，请点击此链接：[https://developers.google.com/maps/documentation/android-api/wear.](https://developers.google.com/maps/documentation/android-api/wear)
- en: Summary
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you have learned how to add UI controls like zoom, map types,
    and so on.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何添加UI控件，如缩放、地图类型等。
- en: 'Using the Google Maps Android API, you have learned the way in which users
    can interact with the wear map application with the following key items:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Google Maps Android API，你了解了用户如何与以下关键项的穿戴地图应用程序互动：
- en: '**Adding the UI controls:** UI controls help users to control the map in a
    more personalized manner.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '**添加UI控件：** UI控件帮助用户以更个性化的方式控制地图。'
- en: '**Dragging the marker and updating location labels:** When a user wants to
    modify the marker placement on the map, dragging the same marker is a great way.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '**拖动标记并更新位置标签：** 当用户想要修改地图上的标记放置时，拖动同一标记是一个很好的方法。'
- en: '**Custom markers:** We know that a marker identifies a location on a map. Customizing
    markers can help users to figure out the location type. Custom markers convey
    more about the location; for example, a fuel icon at the location conveys that
    the location is a fuel station.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '**自定义标记：** 我们知道标记标识地图上的位置。自定义标记可以帮助用户了解位置类型。自定义标记传达更多关于位置的信息；例如，位置处的燃油图标表示该位置是加油站。'
- en: '**Different map types:** Different map types help users experience maps in
    a personalized manner.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '**不同的地图类型：** 不同的地图类型帮助用户以个性化的方式体验地图。'
- en: '**Info window click event:** An info window is a special kind of overlay for
    displaying content (normally, text or image) within a pop-up balloon at a given
    location on a map. `InfoWindow` click events help to do certain actions. For the
    scope of the WearMapDiary app, we are attaching `dialogfragment` for updating
    the text in the snippet area.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '**信息窗口点击事件：** 信息窗口是一种特殊的覆盖层，用于在地图上的给定位置显示内容（通常是文本或图像）的弹出气球。`InfoWindow`点击事件有助于执行某些操作。对于WearMapDiary应用程序的范围，我们正在附加`dialogfragment`以更新片段区域中的文本。'
- en: '****Polylines:**** A polyline specifies a series of coordinates as an array
    of LatLng objects. This represents a graphical path on the map.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '****多段线：**** 多段线指定一系列坐标作为LatLng对象的数组。这表示地图上的一个图形路径。'
- en: '**Streetview:** Google Street View provides panoramic 360-degree views from
    designated roads throughout its coverage area.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '**街景视图：** Google街景提供了从其覆盖区域内的指定道路上的全景360度视图。'
- en: Now, with all these map-related ideas apart from `wearmapdiary`, we can produce
    the best of wear application that helps users.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，除了`wearmapdiary`之外，我们还可以利用所有这些与地图相关的想法，打造出最能帮助用户的应用程序。
