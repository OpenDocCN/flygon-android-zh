- en: Ways to Get Around Anywhere - UI controls and More
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that you have learned how to bring life to Google Maps for Android Wear
    applications and explore SQLite integration, we need UI controls and more enhancement.
    In this chapter, let''s focus on making the map application more functional and
    intuitive by adding features, such as moving the marker on the map and changing
    the map types. You will learn the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Marker controls
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Map types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Map zoom controls
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Streetview on Wear devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Best practices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The marker is not only a symbol that denotes the coordinates on the map. Markers
    are utilized to convey what sort of place it is by replacing the marker default
    symbol with significant pictorial portrayals; for instance, if it's a fuel station,
    the marker symbol can be a little like a fuel gun symbol or hospital.
  prefs: []
  type: TYPE_NORMAL
- en: Changing marker color and customizing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using the `MarkerOptions` class, we can change the color and icon of the marker.
    The following code explains both changing the icon and color of the marker.
  prefs: []
  type: TYPE_NORMAL
- en: 'To change the color of the marker, please refer to the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now see that the marker color is changed from red to cyan with transparency.
    If you wish to remove the transparency, you can remove the `.alpha()` value passed
    to marker options:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00094.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Changed marker color
  prefs: []
  type: TYPE_NORMAL
- en: 'To change the marker to an icon inside the `drawable` directory, check the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This replaces the default marker icon with the custom image that we are passing
    from a drawable directory. We need to ensure the icon size is not bloated and
    it has the optimal size of 72x72:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00095.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Changed marker image with custom image
  prefs: []
  type: TYPE_NORMAL
- en: The previous code snippet will help in changing the color or icon of the marker,
    but for more complex scenarios, we can dynamically build the marker visual asset
    and add it to the maps.
  prefs: []
  type: TYPE_NORMAL
- en: 'How about having our own custom designed marker using simple Java code? We
    shall create a marker with simple text drawn on top of the image. The following
    code explains how can we use the `Bitmap` class and `Canvas` class to draw text
    on top of the image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the marker with Notes drawn using bitmap and
    canvas:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00096.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Dynamically adding the marker from realmdb information.
  prefs: []
  type: TYPE_NORMAL
- en: Dragging the marker and updating the location
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Implement the `GoogleMap.OnMarkerDragListener` interfaces in `MapActivity`
    and implement all the callback methods from the `OnMarkerDragListener` interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'After implementing these three methods from the interface, in the third callback
    `onMarkerDragEnd`, we can update the memory with the updated location details.
    We can also register `draglistner` in the `onMapReady` callback:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, update the `onMarkerDragEnd` method with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The previous code snippet updates the location when the marker is dragged.
  prefs: []
  type: TYPE_NORMAL
- en: InfoWindow click event
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When a user clicks on `InfoWindow`, it allows him to delete the marker. To listen
    to the click events of `Infowindow`, we need to implement `GoogleMap.OnInfoWindowClickListener`
    and its callback method `onInfoWindowClick(..)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Register `infoWindoClicklistner` in the `onMapready` callback as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the callback method, let''s design an alert dialog when a user clicks
    on it. It should allow the user to delete the marker:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00097.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The UI controls
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The UI controls such as zoom and location controls, are disabled for wearable
    devices. We can enable them using the `UISettings` class. The `UISettings` class
    extends to the object settings for the user interface of a Google Map. To obtain
    this interface, call `getUiSettings()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following Boolean methods return the status of the component, whether it
    is enabled or disabled:'
  prefs: []
  type: TYPE_NORMAL
- en: '`public boolean isCompassEnabled ()` : Gets whether the compass is enabled/disabled'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public boolean isMyLocationButtonEnabled ()` : Gets whether the my-location
    button is enabled/disabled'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public boolean isZoomControlsEnabled ()` : Gets whether the zoom controls
    are enabled/disabled'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public boolean isZoomGesturesEnabled ()` : Gets whether zoom gestures are
    enabled/disabled'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public boolean isTiltGesturesEnabled ()` : Gets whether tilt gestures are
    enabled/disabled'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public boolean isRotateGesturesEnabled ()` : Gets whether rotate gestures
    are enabled/disabled'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public boolean isScrollGesturesEnabled ()` : Gets whether scroll gestures
    are enabled/disabled'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These methods will return the status of the components.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To enable these components for the application, `getUiSettings()` will provide
    appropriate set methods as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`public void setCompassEnabled (boolean enabled)`: Enables or disables the
    compass'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public void setIndoorLevelPickerEnabled (boolean enabled)`: Sets whether the
    indoor level picker is enabled when the indoor mode is enabled'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public void setMyLocationButtonEnabled (boolean enabled)`: Enables or disables
    the my-location button'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public void setRotateGesturesEnabled (boolean enabled)`: Sets the preference
    for whether rotate gestures should be enabled or disabled'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public void setZoomControlsEnabled (boolean enabled)`: Enables or disables
    the zoom controls'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s see this in the `WearMapdiary` application. Let''s enable the zoom controls
    for the application. In the `OnMapready` method, add the following line of code
    for the `mMap` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00098.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Similarly, we can set the other UI controls. There are certain limitations to
    all these controls on wearable devices, for example, `setIndoorLevelPickerEnabled`
    will not work on wearable devices.
  prefs: []
  type: TYPE_NORMAL
- en: Types of Maps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A map type governs the overall representation of a map. For example, an atlas
    usually contains political maps that focus on showing boundaries, and road maps
    show all of the roads for a city or a region. The Google Maps Android API offers
    four types of maps, as well as an option to have no map at all. Let''s look at
    the options in more detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Normal**: Typical road map. Shows roads, some features built by humans, and
    important natural features like rivers. Road and feature labels are also visible.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hybrid:** Satellite photograph data with road maps added. Road and feature
    labels are also visible.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Satellite:** Satellite photograph data. Road and feature labels are not visible.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Terrain:** Topographic data. The map includes colors, contour lines and labels,
    and perspective shading. Some roads and labels are also visible.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**None:** No tiles. The map will be rendered as an empty grid with no tiles
    loaded.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s see this in the `WearMapdiary` application. Let''s change the map type
    for the application. In the `OnMapready` method, add the following line of code
    in the `mMap` object to change the map type to Hybrid:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00099.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The Map is of a Hybrid type, which is a satellite image and labels. Now, to
    change the map type to Terrain, please insert the following code in `mMap`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00100.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The Terrain type map looks as shown preceding figure. Now, to change the map
    type to `NONE`, please insert the following code in the `mMap` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00101.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'When you choose to have no maps, it looks as shown in the previous screenshot.
    Now, to change the map type to Satellite, please insert the following code in
    the `mMap` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00102.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Streetview in Wear application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Google Street View provides panoramic 360-degree views from designated roads
    throughout its coverage area. Streetview is a great way for visualizing a user's
    destination or any address. Adding Streetview adds real-world visual elements
    to the application and provides a meaningful context to the users. Users can interact
    with Streetview; users will like to pan and scan the location in Streetview.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a street view map, we shall create a new fragment or activity and
    we can start the activity or attach the fragment. In this example, let''s create
    a new activity with the `SupportStreetViewPanoramaFragment` class and launch the
    activity `onMapLongclick` callback:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code in the new layout resource and name the file as `activity_street_view`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, start this activity `onMapLongclicklistner` in `MapActivity`. Before starting
    the activity, make sure you have changed the Application or Activity theme to
    `Theme.AppCompat.Light.NoActionBar`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00103.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now, we have a complete, working, basic Streetview wear application, you can
    pan and rotate 360 degrees.
  prefs: []
  type: TYPE_NORMAL
- en: '**Polylines**: Polylines extend to the object class. A polyline is a list of
    points, where line segments are drawn between consecutive points. Polylines have
    the following properties:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Points:** The vertices of the line. Line segments are drawn between consecutive
    points. The polyline needs start and end points for drawing the lines.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Width:** Line segment width in screen pixels. Width is a constant, independent
    of camera zoom.'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Color:** Line segment color in ARGB format; the same format used by Color.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Start/End Cap:** Defines the shape to be used at the start or end of a polyline.
    Supported cap types: **ButtCap, SquareCap, RoundCap** (applicable for solid stroke
    pattern), and **CustomCap** (applicable for any stroke pattern). Default for both
    start and end is **ButtCap.**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Joint type:** The joint type defines the shape to be used when joining adjacent
    line segments at all the vertices of the polyline except the start and end vertices.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stroke Pattern:** Solid or sequence of patternItem to be repeated along the
    line. Choices include the following:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Gap
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Dash
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Dot
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Z-Index:** The order in which this tile overlay is drawn with respect to
    other overlays.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Visibility:** Indicates the line visibility, or tells whether the line is
    drawn or not.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Geodesic status:** Indicates whether the segments of the polyline should
    be drawn as geodesics, as opposed to straight lines on the Mercator projection.
    A geodesic is the shortest path between two points on the Earth''s surface. The
    geodesic curve is constructed assuming the Earth is a sphere.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Clickability:** When you want to fire an event when a user clicks on the
    polyline. It works with `GoogleMap.OnPolylineClickListener` registered through
    `setOnPolylineClickListener(GoogleMap.OnPolylineClickListener)`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tag:** An object associated with the polyline. For example, the object can
    contain data about what the polyline represents. This is easier than storing a
    separate `Map<Polyline, Object>`. As another example, you can associate a String
    ID corresponding to the ID from a dataset.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Add the following code in the `onMapready` callback and attach this to the
    map instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/00104.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Best practices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Android Wear is very useful for quick and glanceable information. The most requested
    feature in wear is map in the latest Google Play services, updates for Google
    Maps came to Android Wear, which means you can develop the map application ideally,
    like how we develop for mobile applications there is no change in the process
    for developing wear map application. This means best-in-class development experience
    with just a few lines of code and configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s talk about some common use cases for Android Wear maps applications
    and how to implement the best map application experience:'
  prefs: []
  type: TYPE_NORMAL
- en: One of the most common use cases is to simply display a map; since the wear
    has a small display, we might have to display the entire map in fullscreen.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your application might need to show a marker to denote the landmark. Needs to
    allow users to pan around the map and find places on the map.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Android Wear reserves the gesture of swiping from left to right for dismissing
    the current application. If you do not need your map to pan around, this will
    continue to work. However, if you need your map application to move and pan around
    the map, we need to override this particular dismiss gesture to reduce confusion
    and let the user exit the application. To do this, we can implement the `dismissoverlay`
    view. And attach it to a long click event. The view will handle the dismiss action.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Another common use case is to select the location on the map, so you can share
    the location with your friends. To implement this, we can place the marker in
    the middle of the screen and let the user pan around the map and select the recent
    pan `latlong` value, which indicates the selected location within the map fragment
    component. Then, use the map `oncamerachange` listner to detect if the user has
    panned around the map. We can access the new location through the `cameraposition.target.letlong`
    value.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is a good practice to release components we are not using; for example, Google
    API clients when we initialize it. We shall release it in the activity lifecycle
    callbacks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For more information on implementing the best wear map application, follow
    this link: [https://developers.google.com/maps/documentation/android-api/wear.](https://developers.google.com/maps/documentation/android-api/wear)'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you have learned how to add UI controls like zoom, map types,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the Google Maps Android API, you have learned the way in which users
    can interact with the wear map application with the following key items:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Adding the UI controls:** UI controls help users to control the map in a
    more personalized manner.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Dragging the marker and updating location labels:** When a user wants to
    modify the marker placement on the map, dragging the same marker is a great way.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Custom markers:** We know that a marker identifies a location on a map. Customizing
    markers can help users to figure out the location type. Custom markers convey
    more about the location; for example, a fuel icon at the location conveys that
    the location is a fuel station.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Different map types:** Different map types help users experience maps in
    a personalized manner.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Info window click event:** An info window is a special kind of overlay for
    displaying content (normally, text or image) within a pop-up balloon at a given
    location on a map. `InfoWindow` click events help to do certain actions. For the
    scope of the WearMapDiary app, we are attaching `dialogfragment` for updating
    the text in the snippet area.'
  prefs: []
  type: TYPE_NORMAL
- en: '****Polylines:**** A polyline specifies a series of coordinates as an array
    of LatLng objects. This represents a graphical path on the map.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Streetview:** Google Street View provides panoramic 360-degree views from
    designated roads throughout its coverage area.'
  prefs: []
  type: TYPE_NORMAL
- en: Now, with all these map-related ideas apart from `wearmapdiary`, we can produce
    the best of wear application that helps users.
  prefs: []
  type: TYPE_NORMAL
