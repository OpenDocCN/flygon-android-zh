["```java\nadb -d forward tcp:5601 tcp:5601\n\n```", "```java\nGoogleApiClient mGoogleApiClient = new GoogleApiClient.Builder(this)\n.addConnectionCallbacks(this)\n.addOnConnectionFailedListener(this)\n.addApi(LocationServices.API)\n.build();\n\n```", "```java\nprivate GoogleApiClient mGoogleApiClient;\n\n```", "```java\nprivate void addGoogleAPIClient(){\n    mGoogleApiClient = new GoogleApiClient.Builder(this)\n            .addConnectionCallbacks(this)\n            .addOnConnectionFailedListener(this)\n            .addApi(LocationServices.API)\n            .build();\n}\n\n```", "```java\n@Override\npublic void onConnected(@Nullable Bundle bundle) {\n\n    Location location =      LocationServices.FusedLocationApi\n    .getLastLocation(mGoogleApiClient);\n    double latitude = location.getLatitude();\n    double longitude = location.getLongitude();\n\n}\n\n```", "```java\n<uses-permission android:name=\"android.permission.INTERNET\"/>\n<uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\"/>\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"/>\n<!-- The following two permissions are not required to use\n     Google Maps Android API v2, but are recommended. -->\n<uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\"/>\n<uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\"/>\n\n```", "```java\nprivate boolean checkPermission(){\n    int result = ContextCompat.checkSelfPermission(MapsActivity.this, \n    Manifest.permission.ACCESS_FINE_LOCATION);\n    if (result == PackageManager.PERMISSION_GRANTED){\n\n        return true;\n\n    } else {\n\n        return false;\n\n    }\n}\n\n```", "```java\n@Override\npublic void onRequestPermissionsResult(int requestCode, String permissions[], int[] grantResults) {\n    switch (requestCode) {\n        case PERMISSION_REQUEST_CODE:\n            if (grantResults.length > 0 && grantResults[0] == \n            PackageManager.PERMISSION_GRANTED) {\n\n            } else {\n\n            }\n            break;\n    }\n}\n\n```", "```java\n@Override\npublic void onConnected(@Nullable Bundle bundle) {\n    if (checkPermission()) {\n        Location location = LocationServices.FusedLocationApi\n        .getLastLocation(mGoogleApiClient);\n        double latitude = location.getLatitude();\n        double longitude = location.getLongitude();\n    }else{\n\n    }\n\n}\n\n```", "```java\nprivate boolean hasGps() {\n    return getPackageManager().hasSystemFeature(\n      PackageManager.FEATURE_LOCATION_GPS);\n}\n\n```", "```java\nif (!hasGps()) {\n    Log.d(TAG, \"This hardware doesn't have GPS.\");\n    // Fall back to functionality that does not use location or\n    // warn the user that location function is not available.\n}\n\n```", "```java\nmMap.setOnMapClickListener(this);\n\n```", "```java\n@Override\npublic void onMapClick(LatLng latLng) {\n    Log.d(TAG, \"Latlng is \"+latLng);\n}\n\n```", "```java\n@Override\npublic void onMapClick(LatLng latLng) {\n    Log.d(TAG, \"Latlng is \"+latLng);\n    mMap.addMarker(new MarkerOptions()\n            .position(latLng)\n            .title(\"Packt wear 2.0\")\n            .snippet(\"Map is cool in wear device\"));\n}\n\n```", "```java\n@Override\npublic void onMapClick(LatLng latLng) {\n    Log.d(TAG, \"Latlng is \"+latLng);\n\n   //Fetching the best address match\n    Geocoder geocoder = new Geocoder(this);\n List<Address> matches = null;\n try {\n matches = geocoder.getFromLocation(latLng.latitude, \n        latLng.longitude, 1);\n } catch (IOException e) {\n e.printStackTrace();\n }\n Address bestAddress = (matches.isEmpty()) ? null : matches.get(0);\n int maxLine = bestAddress.getMaxAddressLineIndex(); \n    mMap.addMarker(new MarkerOptions()\n            .position(latLng)\n            .title(bestAddress.getAddressLine(maxLine - 1))\n            .snippet(bestAddress.getAddressLine(maxLine)));\n}\n\n```", "```java\n//XML latout for customising  infowindow \n<LinearLayout \n              android:orientation=\"horizontal\"\n              android:layout_width=\"match_parent\"\n              android:layout_height=\"match_parent\">\n    <TextView\n        android:id=\"@+id/title\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"/>\n    <TextView\n        android:id=\"@+id/snippet\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"/>\n</LinearLayout>\n\n```", "```java\npublic class WearInfoWindowAdapter implements GoogleMap.InfoWindowAdapter {\n    private LayoutInflater mLayoutInflater;\n    private View mView;\n    MarkerAdapter(LayoutInflater layoutInflater){\n        mLayoutInflater = layoutInflater;\n    }\n    @Override\n    public View getInfoWindow(Marker marker) {\n        return null;\n    }\n    @Override\n    public View getInfoContents(Marker marker) {\n        if (mView == null){\n            mView = mLayoutInflater.inflate(R.layout.marker, null);\n        }\n        TextView titleView = (TextView)mView.findViewById(R.id.title);\n        titleView.setText(marker.getTitle());\n        TextView snippetView = \n        (TextView)mView.findViewById(R.id.snippet);\n        snippetView.setText(marker.getSnippet());\n        return mView;\n    }\n}\n\n```", "```java\npublic class Memory {\n    double latitude;\n    double longitude;\n    String city; // City name\n    String country; // Country name\n    String notes; // saving notes on the location \n}\n\n```", "```java\nprivate HashMap<String, Memory> mMemories = new HashMap<>();\n\n```", "```java\npublic class WearInfoWindowAdapter implements GoogleMap.InfoWindowAdapter {\n\n    public LayoutInflater mLayoutInflater;\n    public View mView;\n    public HashMap<String, Memory> mMemories;\n\n    WearInfoWindowAdapter(LayoutInflater layoutInflater, \n    HashMap<String,Memory> memories){\n        mLayoutInflater = layoutInflater;\n        mMemories = memories;\n    }\n\n    @Override\n    public View getInfoWindow(Marker marker) {\n        return null;\n    }\n\n    @Override\n    public View getInfoContents(Marker marker) {\n        if (mView == null) {\n            mView = mLayoutInflater.inflate(R.layout.marker, null);\n        }\n        Memory memory = mMemories.get(marker.getId());\n\n        TextView titleView = (TextView)mView.findViewById(R.id.title);\n        titleView.setText(memory.city);\n        TextView snippetView = \n        (TextView)mView.findViewById(R.id.snippet);\n        snippetView.setText(memory.country);\n        TextView notesView = (TextView)mView.findViewById(R.id.notes);\n        notesView.setText(memory.notes);\n\n        return mView;\n    }\n}\n\n```", "```java\n@Override\npublic void onMapClick(LatLng latLng) {\n    Log.d(TAG, \"Latlng is \"+latLng);\n\n    Geocoder geocoder = new Geocoder(this);\n    List<Address> matches = null;\n    try {\n        matches = geocoder.getFromLocation(latLng.latitude, \n        latLng.longitude, 1);\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n\n    Address bestAddress = (matches.isEmpty()) ? null : matches.get(0);\n    int maxLine = bestAddress.getMaxAddressLineIndex();\n\n    Memory memory = new Memory();\n    memory.city = bestAddress.getAddressLine(maxLine - 1);\n    memory.country = bestAddress.getAddressLine(maxLine);\n    memory.latitude = latLng.latitude;\n    memory.longitude = latLng.longitude;\n    memory.notes = \"Packt and wear 2.0 notes...\";\n\n    Marker marker = mMap.addMarker(new MarkerOptions()\n            .position(latLng));\n\n    mMemories.put(marker.getId(), memory);\n}\n\n```", "```java\nmMap.setInfoWindowAdapter(new WearInfoWindowAdapter(getLayoutInflater(), mMemories));\n\n```", "```java\npublic class Memory implements Serializable {\n    public double latitude;\n    public double longitude;\n    public String city;\n    public String country;\n    public String notes;\n}\n\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.wearable.view.BoxInsetLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:id=\"@+id/container\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".MapsActivity\"\n    tools:deviceIds=\"wear\">\n\n    <LinearLayout\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"vertical\"\n        android:padding=\"5dp\"\n        app:layout_box=\"all\"\n        android:layout_gravity=\"center\"\n        android:gravity=\"center\">\n\n        <TextView\n            android:id=\"@+id/city\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\" />\n\n        <TextView\n            android:id=\"@+id/country\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\" />\n\n        <EditText\n            android:id=\"@+id/notes\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\" />\n\n    </LinearLayout>\n</android.support.wearable.view.BoxInsetLayout>\n\n```", "```java\npublic interface Listener{\n    public void OnSaveClicked(Memory memory);\n    public void OnCancelClicked(Memory memory);\n}\n\n```", "```java\nprivate static final String TAG = \"MemoryDialogFragment\";\nprivate static final String MEMORY_KEY = \"MEMORY\";\nprivate Memory mMemory;\nprivate Listener mListener;\nprivate View mView;\n\n```", "```java\n@Override\npublic Dialog onCreateDialog(Bundle savedInstanceState) {\n\n    mView = getActivity().getLayoutInflater()\n    .inflate(R.layout.memory_dialog_fragment, null);\n    TextView cityView = (TextView) mView.findViewById(R.id.city);\n    cityView.setText(mMemory.city);\n    TextView countryView = (TextView) mView.findViewById(R.id.country);\n    countryView.setText(mMemory.country);\n\n    AlertDialog.Builder builder = new \n    AlertDialog.Builder(getActivity());\n    builder.setView(mView)\n            .setTitle(getString(R.string.dialog_title))\n            .setPositiveButton(getString(R.string.DialogSaveButton), \n            new DialogInterface.OnClickListener() {\n                @Override\n                public void onClick(DialogInterface dialog, int which) \n                {\n                    EditText notesView = (EditText) \n                    mView.findViewById(R.id.notes);\n                    mMemory.notes = notesView.getText().toString();\n                    mListener.OnSaveClicked(mMemory);\n                }\n            })\n            .setNegativeButton(getString(R.string.DialogCancelButton), \n            new DialogInterface.OnClickListener() {\n                @Override\n                public void onClick(DialogInterface dialog, int which) \n                {\n                    mListener.OnCancelClicked(mMemory);\n                }\n            });\n\n    return builder.create();\n}\n\n```", "```java\n@Override\npublic void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    Bundle args = getArguments();\n    if (args != null){\n        mMemory = (Memory)args.getSerializable(MEMORY_KEY);\n    }\n}\n\n```", "```java\npublic class MemoryDialogFragment extends DialogFragment  {\n\n    private static final String TAG = \"MemoryDialogFragment\";\n    private static final String MEMORY_KEY = \"MEMORY\";\n\n    private Memory mMemory;\n    private Listener mListener;\n    private View mView;\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        Bundle args = getArguments();\n        if (args != null){\n            mMemory = (Memory)args.getSerializable(MEMORY_KEY);\n        }\n    }\n\n    @Override\n    public Dialog onCreateDialog(Bundle savedInstanceState) {\n\n        mView = getActivity().getLayoutInflater()\n        .inflate(R.layout.memory_dialog_fragment, null);\n        TextView cityView = (TextView) mView.findViewById(R.id.city);\n        cityView.setText(mMemory.city);\n        TextView countryView = (TextView) \n        mView.findViewById(R.id.country);\n        countryView.setText(mMemory.country);\n\n        AlertDialog.Builder builder = new \n        AlertDialog.Builder(getActivity());\n        builder.setView(mView)\n                .setTitle(getString(R.string.dialog_title))\n                .setPositiveButton(getString\n                (R.string.DialogSaveButton), \n                new DialogInterface.OnClickListener() {\n                    @Override\n                    public void onClick\n                    (DialogInterface dialog, int which) {\n                        EditText notesView = (EditText) \n                        mView.findViewById(R.id.notes);\n                        mMemory.notes = notesView.getText().toString();\n                        mListener.OnSaveClicked(mMemory);\n                    }\n                })\n                .setNegativeButton(getString\n                (R.string.DialogCancelButton), \n                new DialogInterface.OnClickListener() {\n                    @Override\n                    public void onClick\n                    (DialogInterface dialog, int which) {\n                        mListener.OnCancelClicked(mMemory);\n                    }\n                });\n\n        return builder.create();\n    }\n\n    public static MemoryDialogFragment newInstance(Memory memory){\n        MemoryDialogFragment fragment = new MemoryDialogFragment();\n        Bundle args = new Bundle();\n        args.putSerializable(MEMORY_KEY, memory);\n        fragment.setArguments(args);\n\n        return fragment;\n    }\n\n    @Override\n    public void onAttach(Activity activity) {\n        super.onAttach(activity);\n        try{\n            mListener = (Listener)getActivity();\n        }catch (ClassCastException e){\n            throw new IllegalStateException(\"Activity does not \n            implement contract\");\n        }\n\n    }\n\n    @Override\n    public void onDetach() {\n        super.onDetach();\n        mListener = null;\n    }\n\n    public interface Listener{\n        public void OnSaveClicked(Memory memory);\n        public void OnCancelClicked(Memory memory);\n    }\n}\n\n```", "```java\n@Override\npublic void onMapClick(LatLng latLng) {\n    Log.d(TAG, \"Latlng is \"+latLng);\n\n    Memory memory = new Memory();\n updateMemoryPosition(memory, latLng);\n    MemoryDialogFragment.newInstance(memory)\n    .show(getFragmentManager(),MEMORY_DIALOG_TAG);\n}\n\n```", "```java\npublic class DbHelper extends SQLiteOpenHelper {\n\n    private static final String DATABASE_NAME = \"traveltracker.db\";\n    private static final int DATABASE_VERSION = 3;\n    public static final String MEMORIES_TABLE = \"memories\";\n    public static final String COLUMN_LATITUDE = \"latitude\";\n    public static final String COLUMN_LONGITUDE = \"longitude\";\n    public static final String COLUMN_CITY = \"city\";\n    public static final String COLUMN_COUNTRY = \"country\";\n    public static final String COLUMN_NOTES = \"notes\";\n    public static final String COLUMN_ID = \"_id\";\n\n    private static DbHelper singleton = null;\n\n    public static DbHelper getInstance(Context context){\n        if (singleton == null){\n            singleton = new DbHelper(context.getApplicationContext());\n        }\n        return singleton;\n    }\n\n    private DbHelper(Context context) {\n        super(context, DATABASE_NAME, null, DATABASE_VERSION);\n    }\n\n    @Override\n    public void onCreate(SQLiteDatabase db) {\n        db.execSQL(\"CREATE TABLE \"+MEMORIES_TABLE+\" (\"\n                +COLUMN_ID+\" INTEGER PRIMARY KEY AUTOINCREMENT, \"\n                +COLUMN_LATITUDE +\" DOUBLE, \"\n                +COLUMN_LONGITUDE +\" DOUBLE, \"\n                +COLUMN_CITY +\" TEXT, \"\n                +COLUMN_COUNTRY +\" TEXT, \"\n                +COLUMN_NOTES +\" TEXT\"\n                +\")\");\n    }\n\n    @Override\n    public void onUpgrade(SQLiteDatabase db, int oldVersion, int \n    newVersion) {\n        db.execSQL(\"DROP TABLE IF EXISTS \"+MEMORIES_TABLE);\n        onCreate(db);\n    }\n}\n\n```", "```java\npublic class MemoriesDataSource {\n    private DbHelper mDbHelper;\n    private String[] allColumns = {\n            DbHelper.COLUMN_ID, DbHelper.COLUMN_CITY,\n            DbHelper.COLUMN_COUNTRY, DbHelper.COLUMN_LATITUDE,\n            DbHelper.COLUMN_LONGITUDE, DbHelper.COLUMN_NOTES\n    };\n\n    public MemoriesDataSource(Context context){\n        mDbHelper = DbHelper.getInstance(context);\n    }\n\n    public void createMemory(Memory memory){\n        ContentValues values = new ContentValues();\n        values.put(DbHelper.COLUMN_NOTES, memory.notes);\n        values.put(DbHelper.COLUMN_CITY, memory.city);\n        values.put(DbHelper.COLUMN_COUNTRY, memory.country);\n        values.put(DbHelper.COLUMN_LATITUDE, memory.latitude);\n        values.put(DbHelper.COLUMN_LONGITUDE, memory.longitude);\n        memory.id = mDbHelper.getWritableDatabase()\n        .insert(DbHelper.MEMORIES_TABLE, null, values);\n    }\n\n    public List<Memory> getAllMemories(){\n\n        Cursor cursor = allMemoriesCursor();\n        return cursorToMemories(cursor);\n    }\n\n    public Cursor allMemoriesCursor(){\n        return mDbHelper.getReadableDatabase()\n        .query(DbHelper.MEMORIES_TABLE, \n        allColumns,null, null, null, null, null);\n    }\n\n    public List<Memory> cursorToMemories(Cursor cursor){\n        List<Memory> memories =  new ArrayList<>();\n        cursor.moveToFirst();\n        while (!cursor.isAfterLast()){\n            Memory memory = cursorToMemory(cursor);\n            memories.add(memory);\n            cursor.moveToNext();\n        }\n        return memories;\n    }\n\n    public void updateMemory(Memory memory){\n        ContentValues values = new ContentValues();\n        values.put(DbHelper.COLUMN_NOTES, memory.notes);\n        values.put(DbHelper.COLUMN_CITY, memory.city);\n        values.put(DbHelper.COLUMN_COUNTRY, memory.country);\n        values.put(DbHelper.COLUMN_LATITUDE, memory.latitude);\n        values.put(DbHelper.COLUMN_LONGITUDE, memory.longitude);\n\n        String [] whereArgs = {String.valueOf(memory.id)};\n\n        mDbHelper.getWritableDatabase().update(\n                mDbHelper.MEMORIES_TABLE,\n                values,\n                mDbHelper.COLUMN_ID+\"=?\",\n                whereArgs\n        );\n    }\n\n    public void deleteMemory(Memory memory){\n        String [] whereArgs = {String.valueOf(memory.id)};\n\n        mDbHelper.getWritableDatabase().delete(\n                mDbHelper.MEMORIES_TABLE,\n                mDbHelper.COLUMN_ID+\"=?\",\n                whereArgs\n        );\n    }\n\n    private Memory cursorToMemory(Cursor cursor){\n        Memory memory = new Memory();\n        memory.id = cursor.getLong(0);\n        memory.city = cursor.getString(1);\n        memory.country = cursor.getString(2);\n        memory.latitude = cursor.getDouble(3);\n        memory.longitude = cursor.getDouble(4);\n        memory.notes = cursor.getString(5);\n        return memory;\n    }\n}\n\n```", "```java\npublic abstract class DbCursorLoader extends AsyncTaskLoader<Cursor> {\n\n    private Cursor mCursor;\n\n    public DbCursorLoader(Context context){\n        super(context);\n    }\n\n    protected abstract Cursor loadCursor();\n\n    @Override\n    public Cursor loadInBackground() {\n        Cursor cursor = loadCursor();\n        if (cursor != null){\n            cursor.getCount();\n        }\n\n        return cursor;\n    }\n\n    @Override\n    public void deliverResult(Cursor data) {\n        Cursor oldCursor = mCursor;\n        mCursor = data;\n\n        if (isStarted()){\n            super.deliverResult(data);\n        }\n\n        if (oldCursor != null && oldCursor != data){\n            onReleaseResources(oldCursor);\n        }\n    }\n\n    @Override\n    protected void onStartLoading() {\n        if (mCursor != null){\n            deliverResult(mCursor);\n        }\n        if (takeContentChanged() || mCursor == null){\n            forceLoad();\n        }\n    }\n\n    @Override\n    protected void onStopLoading() {\n        cancelLoad();\n    }\n\n    @Override\n    public void onCanceled(Cursor data) {\n        super.onCanceled(data);\n\n        if (data != null) {\n            onReleaseResources(data);\n        }\n    }\n\n    @Override\n    protected void onReset() {\n        super.onReset();\n\n        onStopLoading();\n\n        if (mCursor != null){\n            onReleaseResources(mCursor);\n        }\n        mCursor = null;\n    }\n\n    private void onReleaseResources(Cursor cursor){\n        if (!cursor.isClosed()){\n            cursor.close();\n        }\n    }\n}\n\n```", "```java\npublic class MemoriesLoader extends DbCursorLoader {\n\n    private MemoriesDataSource mDataSource;\n\n    public MemoriesLoader(Context context, MemoriesDataSource \n    memoriesDataSource){\n        super(context);\n        mDataSource = memoriesDataSource;\n    }\n\n    @Override\n    protected Cursor loadCursor() {\n        return mDataSource.allMemoriesCursor();\n    }\n}\n\n```", "```java\nmDataSource = new MemoriesDataSource(this);\ngetLoaderManager().initLoader(0,null,this);\n\n```", "```java\n@Override\npublic Loader<Cursor> onCreateLoader(int id, Bundle args) {\n    return null;\n}\n\n@Override\npublic void onLoadFinished(Loader<Cursor> loader, Cursor data) {\n\n}\n\n@Override\npublic void onLoaderReset(Loader<Cursor> loader) {\n\n}\n\n```", "```java\nprivate void addMarker(Memory memory) {\n    Marker marker = mMap.addMarker(new MarkerOptions()\n            .draggable(true)\n            .position(new LatLng(memory.latitude, memory.longitude)));\n\n    mMemories.put(marker.getId(), memory);\n}\n\n```", "```java\n@Override\npublic void onMapClick(LatLng latLng) {\n    Log.d(TAG, \"Latlng is \"+latLng);\n\n    Memory memory = new Memory();\n    updateMemoryPosition(memory, latLng);\n    MemoryDialogFragment.newInstance(memory)\n    .show(getFragmentManager(),MEMORY_DIALOG_TAG);\n}\n\n```", "```java\nprivate void updateMemoryPosition(Memory memory, LatLng latLng) {\n    Geocoder geocoder = new Geocoder(this);\n    List<Address> matches = null;\n    try {\n        matches = geocoder.getFromLocation(latLng.latitude, \n        latLng.longitude, 1);\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n\n    Address bestMatch = (matches.isEmpty()) ? null : matches.get(0);\n    int maxLine = bestMatch.getMaxAddressLineIndex();\n    memory.city = bestMatch.getAddressLine(maxLine - 1);\n    memory.country = bestMatch.getAddressLine(maxLine);\n    memory.latitude = latLng.latitude;\n    memory.longitude = latLng.longitude;\n}\n\n```", "```java\n@Override\npublic Loader<Cursor> onCreateLoader(int id, Bundle args) {\n    Log.d(TAG,\"onCreateLoader\");\n    return new MemoriesLoader(this, mDataSource);\n}\n\n```", "```java\n@Override\npublic void onLoadFinished(Loader<Cursor> loader, Cursor cursor) {\n    Log.d(TAG,\"onLoadFinished\");\n    onFetchedMemories(mDataSource.cursorToMemories(cursor));\n}\n\n```", "```java\nprivate void onFetchedMemories(List<Memory> memories) {\n    for(Memory memory: memories){\n        addMarker(memory);\n    }\n}\n\n```", "```java\n <meta-data\n    android:name=\"com.google.android.wearable.standalone\"\n    android:value=\"true\" />\n\n```", "```java\n<resources>\n    <string-array name=\"android_wear_capabilities\">\n        <item>verify_remote_example_phone_app</item>\n    </string-array>\n</resources>\n\n```", "```java\n//oncreate Method\nsetAmbientEnabled();\n\n```", "```java\n@Override\npublic void onEnterAmbient(Bundle ambientDetails) {\n    super.onEnterAmbient(ambientDetails);\n    mMapFragment.onEnterAmbient(ambientDetails);\n}\n\n```", "```java\n@Override\npublic void onEnterAmbient(Bundle ambientDetails) {\n    super.onEnterAmbient(ambientDetails);\n    mMapFragment.onEnterAmbient(ambientDetails);\n}\n\n```", "```java\n<uses-permission android:name=\"android.permission.WAKE_LOCK\" />\n\nWAKE_LOCK mechanism:\n```", "```java\n // Schedule a new alarm\n    if (isAmbient()) {\n        // Calculate the next trigger time\n        long delayMs = AMBIENT_INTERVAL_MS - (timeMs % \n        AMBIENT_INTERVAL_MS);\n        long triggerTimeMs = timeMs + delayMs;\n\n        mAmbientStateAlarmManager.setExact(\nAlarmManager.RTC_WAKEUP,\n            triggerTimeMs,\n            mAmbientStatePendingIntent);\n\n    } else {\n        // Calculate the next trigger time for interactive mode\n    }\n\n```", "```java\nprivate static final int SPEECH_REQUEST_CODE = 0;\n\n// Create an intent that can start the Speech Recognizer activity\nprivate void displaySpeechRecognizer() {\n    Intent intent = new \n    Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);\n    intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL,\n            RecognizerIntent.LANGUAGE_MODEL_FREE_FORM);\n// Start the activity, the intent will be populated with the speech text\n    startActivityForResult(intent, SPEECH_REQUEST_CODE);\n}\n\n// This callback is invoked when the Speech Recognizer returns.\n// This is where you process the intent and extract the speech text from the intent.\n@Override\nprotected void onActivityResult(int requestCode, int resultCode,\n        Intent data) {\n    if (requestCode == SPEECH_REQUEST_CODE && resultCode == RESULT_OK) \n    {\n        List<String> results = data.getStringArrayListExtra(\n                RecognizerIntent.EXTRA_RESULTS);\n        String spokenText = results.get(0);\n        // Do something with spokenText\n    }\n    super.onActivityResult(requestCode, resultCode, data);\n}\n\n```", "```java\n<fragment xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:map=\"http://schemas.android.com/apk/res-auto\"\n    android:name=\"com.google.android.gms.maps.MapFragment\"\n    android:id=\"@+id/map\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    map:cameraZoom=\"13\"\n    map:mapType=\"normal\"\n    map:liteMode=\"true\"/>\n\n```", "```java\nGoogleMapOptions options = new GoogleMapOptions().liteMode(true);\n\n```"]