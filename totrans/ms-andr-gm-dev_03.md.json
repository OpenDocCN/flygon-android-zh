["```java\n    dependencies {\n      compile 'com.parse.bolts:bolts-android:1.+'\n      compile fileTree(dir: 'libs', include: 'Parse-*.jar')\n    }\n    ```", "```java\nParse.initialize(this, \"yourKeyHere\", \"yourKeyHere\");\n```", "```java\n<application\n    android:name=\"MApplication \"\n    android:icon=\"@drawable/ic_launcher\"\n    android:label=\"@string/app_newname\"\n>\n```", "```java\nHttpClient httpclient = new DefaultHttpClient();\nHttpPost httppost = new HttpPost(\"URL TO SERVER\");\n\nMultipartEntity mpEntity = new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE);\nFile file = new File(filePath);\nmpEntity.addPart(\"imgField\", new FileBody(file, \"application/octet\"));\n\nhttppost.setEntity(mpEntity);\nHttpResponse response = httpclient.execute(httppost);\n```", "```java\nParseFile imgFile = new ParseFile (\"img.png\", ImgByteArray);\n\nParseObject myParseObject = new ParseObject (\"ParseClass\");    \n myParseObject.put(\"imageField\", imgFile);\n myParseObject.saveInBackground();\n```", "```java\nimageObj.saveInBackground(new SaveCallback() {\n  @Override\n  public void done(ParseException e) {\n    if (e == null) {\n      //Successful\n    } else {\n      //Error\n    }\n  }\n});\n```", "```java\nview.findViewById(R.id.addJobOffer).setOnClickListener(new View.OnClickListener() {\n  @Override\n  public void onClick(View view) {\n\n    ParseObject jobOffer = new ParseObject(\"JobOffer\");\n\n    jobOffer.put(\"title\", \"Android Contract\");\n    jobOffer.put(\"description\", \"6 months rolling    contract. /n The client\" +\n    \"is a worldwide known digital agency\");\n    jobOffer.put(\"type\", \"Contract\");\n    jobOffer.put(\"salary\", \"450 GBP/day\");\n    jobOffer.put(\"company\", \"Recruiters LTD\");\n    jobOffer.put(\"imageLink\", \"http://.....recruitersLTD_logo.png\");\n    jobOffer.put(\"location\",\"Reading, UK\");\n\n    jobOffer.saveInBackground();\n  }\n});\n```", "```java\nParseQuery<ParseObject> query = ParseQuery.getQuery(\"JobOffer\");\nquery.getInBackground(\"yourObjectID\", new GetCallback<ParseObject>() {\n  public void done(ParseObject object, ParseException e) {\n    if (e == null) {\n      // object will be our job offer\n    } else {\n      // something went wrong\n    }\n  }\n});\n```", "```java\nif (e == null) {\n  Log.d(\"PARSE_TEST\",object.getString(\"Title\"));\n} else {\n  // something went wrong\n}\n```", "```java\nJobOffer myJobOffer = new JobOffer(object.getString(\"title), object.getString(\"description\"), … );\n```", "```java\npublic void done(JobOffer jobOffer, ParseException e) \n```", "```java\npublic class MAApplication extends Application {\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n\n        // Enable Local Datastore.\n        Parse.enableLocalDatastore(this);\n\n        ParseObject.registerSubclass(JobOffer.class);\n\n        Parse.initialize(this, \"KEY\", \"KEY\");\n    }\n\n}\n\n@ParseClassName(\"JobOffer\")\npublic class JobOffer extends ParseObject {\n\n    public JobOffer() {\n        // A default constructor is required.\n    }\n\n    public String getTitle() {\n        return getString(\"title\");\n    }\n\n    public void setTitle(String title) {\n        put(\"title\", title);\n    }\n\n    public String getDescription() {\n        return getString(\"description\");\n    }\n\n    public void setDescription(String description) {\n        put(\"description\", description);\n    }\n\n    public String getType() {\n        return getString(\"type\");\n    }\n\n    public void setType(String type) {\n        put(\"type\", type);\n    }\n    //Continue with all the fields..\n\n}\n```", "```java\nParseQuery< JobOffer > query = ParseQuery.getQuery(\"JobOffer\");\nquery.whereEqualTo(\"type\", \"Permanent\");\nquery.findInBackground(new FindCallback<JobOffer>() {\n    public void done(List<JobOffer> jobsList, ParseException e) {\n        if (e == null) {\n            Log.d(\"score\", \"Retrieved \" + jobsList.size() + \" jobs\");\n        } else {\n            Log.d(\"score\", \"Error: \" + e.getMessage());\n        }\n    }\n});\n```", "```java\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout \n    android:orientation=\"vertical\" android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:padding=\"10dp\">\n\n    <TextView\n        android:id=\"@+id/rowJobOfferTitle\"\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Title\"\n        android:textColor=\"#555\"\n        android:textSize=\"18sp\"\n        />\n\n    <TextView\n        android:id=\"@+id/rowJobOfferDesc\"\n        android:layout_marginTop=\"5dp\"\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Description\"\n        android:textColor=\"#999\"\n        android:textSize=\"16sp\"\n        android:maxLines=\"1\"\n        android:ellipsize=\"marquee\"\n        />\n\n</LinearLayout>\n```", "```java\nObject object = new Object() {\n\n //Override methods here\n\n }\n```", "```java\nParseQueryAdapter<JobOffer> parseQueryAdapter = new ParseQueryAdapter<JobOffer>(getActivity(),\"JobOffer\") {\n\n  @Override\n  public View getItemView(JobOffer jobOffer, View v, ViewGroup parent) {\n\n    if (v == null) {\n      v = View.inflate(getContext(), R.layout.row_job_offer, null);\n    }\n\n    super.getItemView(jobOffer, v, parent);\n\n    TextView titleTextView = (TextView) v.findViewById(R.id.rowJobOfferTitle);\n    titleTextView.setText(jobOffer.getTitle());\n    TextView descTextView = (TextView) v.findViewById(R.id.rowJobOfferDesc);\n    descTextView.setText(jobOffer.getDescription());\n\n    return v;\n  }\n\n};\n```", "```java\n// Instantiate the RequestQueue.\nRequestQueue queue = Volley.newRequestQueue(this);\n```", "```java\n// If the device is running a version >= Gingerbread...\nif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD) {\n    // ...use HttpURLConnection for stack.\n} else {\n    // ...use AndroidHttpClient for stack.\n}\n```", "```java\nString url =\"https://www.google.com\";\n\n// Request a string response from the provided URL.\nStringRequest stringRequest = new StringRequest(Request.Method.GET, url,\n            new Response.Listener<String>() {\n    @Override\n    public void onResponse(String response) {\n        // Display the first 500 characters of the response string.\n        Log.d(\"Volley\",\"Response is: \"+ response.substring(0,500));\n    }\n}, new Response.ErrorListener() {\n    @Override\n    public void onErrorResponse(VolleyError error) {\n        Log.d(\"Volley\",\"That didn't work!\");\n    }\n});\n\n// Add the request to the RequestQueue.\nqueue.add(stringRequest);\n```", "```java\nOkHttpClient client = new OkHttpClient();\n\nString run(String url) throws IOException {\n\n  Request request = new Request.Builder()\n      .url(url)\n      .build();\n\n  Response response = client.newCall(request).execute();\n  return response.body().string();\n\n}\n```", "```java\nRequestQueue queue = Volley.newRequestQueue(this, new OkHttpStack());\n```", "```java\n/**\n * An HttpStack subclass\n * using OkHttp as transport layer.\n */\npublic class OkHttpStack extends HurlStack {\n\n    private final OkUrlFactory mFactory;\n\n    public OkHttpStack() {\n        this(new OkHttpClient());\n    }\n\n    public OkHttpStack(OkHttpClient client) {\n        if (client == null) {\n            throw new NullPointerException(\"Null client.\");\n        }\n        mFactory = new OkUrlFactory(client);\n    }\n}\n```", "```java\n{\n  \"firstName\": \"Antonio\",\n  \"lastName\": \"Smith\",\n  \"isDeveloper\": true,\n  \"age\": 25,\n  \"phoneNumbers\": [\n    {\n      \"type\": \"home\",\n      \"number\": \"212 555-1234\"\n    },\n    {\n      \"type\": \"office\",\n      \"number\": \"646 555-4567\"\n    }\n  ],\n  \"children\": [],\n  \"spouse\": null\n}\n```", "```java\n//With Volley\n\npublic void post(String param1, String param2, String url) {\n\n  Map<String, String> params = new HashMap<String, String>();\n  params.put(\"param1\",param1);\n  params.put(\"param2\",param2);\n\n  JsonObjectRequest stringRequest = new  JsonObjectRequest(Request.Method.POST, url, new JSONObject(params),  new Response.Listener<JSONObject>() {\n\n    @Override\n    public void onResponse(JSONObject responseJSON) {\n\n    }, new Response.ErrorListener() {\n\n      @Override\n      public void onErrorResponse(VolleyError error) {\n      }\n    });\n\n    // Add the request to the RequestQueue.\n    requestQueue.add(stringRequest);\n  }\n\n  //With OkHttp\n\n  public static final MediaType JSON\n  = MediaType.parse(\"application/json; charset=utf-8\");\n\n  String post(String url, String json) throws IOException {\n    RequestBody body = RequestBody.create(JSON, json);\n    Request request = new Request.Builder()\n    .url(url)\n    .post(body)\n    .build();\n    Response response = client.newCall(request).execute();\n    return response.body().string();\n\n  }\n\n  //To create a JSONObject from a string\n\n  JSONObject responseJSON = new JSONObject(String json);\n```", "```java\n{\n  \"title\": \"Senior Android developer\",\n  \"description\": \"A developer is needed for…\",\n  \"salary\": \"25.000 € per year\",\n  .\n  .\n  .\n}\n```", "```java\ndependencies {\ncompile 'com.google.code.gson:gson:2.2.4'\n}\n```", "```java\nGson gson = new Gson();\nJobOffer offer = gson.fromJson(JSONString, JobOffer.class);\n```", "```java\nGson gson = new Gson();\nType listType = new TypeToken<List<JobOffer>>(){}.getType();\nList<JobOffer> listOffers = gson.fromJson(JSONString, listType);\n```", "```java\nimport com.google.gson.annotations.SerializedName;\n\npublic class JobOffer extends ParseObject {\n\n    @SerializedName(\"title\")\n    private String title;\n\n    @SerializedName(\"description\")\n    private String desc;\n\n    @SerializedName(\"salary\")\n    private String salary;\n```"]