- en: Chapter 4. Using the Code Editor
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章 使用代码编辑器
- en: You have created your first project and you know how to navigate through the
    different folders, subfolders, and files. It's time to start programming! Have
    you ever wanted to be able to program more efficiently? How can you speed up your
    development process? Do you want to learn useful shortcuts to, for example, comment
    more than one line at once, find and replace strings, or move faster through different
    parameters in a method call?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经创建了你的第一个项目，并且知道如何浏览不同的文件夹、子文件夹和文件。是时候开始编程了！你有没有想过能够更高效地编程？如何加快你的开发过程？你想要学习有用的快捷键，例如一次性注释多行，查找和替换字符串，或者在方法调用中快速移动不同的参数吗？
- en: In this chapter we will learn how to use the code editor and how to customize
    it in order to feel more comfortable when programming. It is worth knowing the
    basic features of the code editor in order to increase the developer productivity.
    We will learn about code completion and code generation. Finally, we will learn
    some useful shortcuts and hotkeys to speed up our development process.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何使用代码编辑器以及如何自定义它，以便在编程时感觉更舒适。了解代码编辑器的基本特性是值得的，以提高开发人员的工作效率。我们将了解代码补全和代码生成。最后，我们将学习一些有用的快捷键和热键，以加快我们的开发过程。
- en: 'These are the topics we''ll be covering in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们将在本章中介绍的主题：
- en: Customizing the code editor
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义代码编辑器
- en: Code completion
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码补全
- en: Code generation
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码生成
- en: Find related content
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找相关内容
- en: Useful shortcuts
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有用的快捷键
- en: Editor settings
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编辑器设置
- en: 'To open the editor settings navigate to **File** | **Settings**, section **IDE
    Settings**, menu **Editor**. This screen displays the general settings of the
    editor. We recommend checking two options that are unchecked by default:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要打开编辑器设置，请导航至**文件** | **设置**，在**IDE 设置**部分，选择**编辑器**菜单。此屏幕显示编辑器的一般设置。我们建议检查默认未选中的两个选项：
- en: '**Change font size (Zoom) with Ctrl + Mouse Wheel**: This option allows us
    to change the font size of the editor using the mouse wheel, as we do in other
    programs such as web browsers.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用 Ctrl + 鼠标滚轮更改字体大小（缩放）**：此选项允许我们使用鼠标滚轮更改编辑器的字体大小，就像在其他程序（如网页浏览器）中所做的那样。'
- en: '**Show quick doc on mouse move**: If we check this option, when we move the
    mouse over a piece of code and wait 500 ms, a quick doc about that code will be
    displayed in a small dialog. When we move the mouse again, the dialog automatically
    disappears, but if we move the mouse into the dialog, then we can examine the
    doc in detail. This is very useful, for example, to read what a method does and
    its parameters without navigating to it.![Editor settings](img/5273OS_04_01.jpg)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**鼠标移动时显示快速文档**：如果我们选中此选项，当我们将鼠标悬停在一段代码上并等待500毫秒，一个小对话框将显示关于该代码的快速文档。当我们再次移动鼠标时，对话框会自动消失，但如果我们将鼠标移动到对话框内，就可以详细查看文档。这非常有用，例如，阅读一个方法的功能及其参数，而无需导航到该方法处。![编辑器设置](img/5273OS_04_01.jpg)'
- en: 'There are more settings distributed among seven categories:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 有更多设置分布在七个类别中：
- en: '**Smart Keys**: Configures actions to be done automatically when typing, such
    as adding closing brackets, quotes or tags; or indenting the line when we press
    the *Enter* key.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**智能键**：配置在打字时自动执行的操作，例如添加关闭括号、引号或标签；或者在我们按下*Enter*键时缩进行。'
- en: '**Appearance**: Configures the appearance of the editor. We recommend checking
    the next two options that are unchecked by default:'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**外观**：配置编辑器的外观。我们建议检查默认未选中的以下两个选项：'
- en: '**Show line numbers**: Shows the line numbers in the left edge of the editor.
    It can be very useful when we are debugging or examining the log.'
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**显示行号**：在编辑器的左侧边缘显示行号。当我们调试或检查日志时，这可能非常有用。'
- en: '**Show method separators**: Visually separates the methods of a class.'
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**显示方法分隔符**：在视觉上将类中的方法分隔开。'
- en: '**Colors & Fonts**: Changes the fonts and colors. There are a lot of options
    and elements to configure (keywords, numbers, warnings, errors, comments, strings,
    and so on). We can save the configurations as schemes.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**颜色与字体**：更改字体和颜色。有许多选项和元素需要配置（关键词、数字、警告、错误、注释、字符串等）。我们可以将配置保存为方案。'
- en: '**Editor Tabs**: Configuration of the editor tabs. We suggest you select the
    **Mark modified tabs with asterisk** option to easily detect the modified and
    not-saved files.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编辑器标签**：配置编辑器标签。我们建议选择**用星号标记修改过的标签**选项，以便轻松识别已修改但未保存的文件。'
- en: '**Code Folding**: The **code folding** option allows us to collapse or expand
    code blocks. It is very useful to hide code blocks that we are not editing, simplifying
    the code view. We can collapse or expand the blocks using the icons from the editor
    or using the **Code** | **Folding** menu.![Editor settings](img/5273OS_04_02.jpg)'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码折叠**：代码折叠选项允许我们折叠或展开代码块。它非常适用于隐藏我们未编辑的代码块，简化代码视图。我们可以通过编辑器中的图标或使用**代码**
    | **折叠**菜单来折叠或展开这些块。![编辑器设置](img/5273OS_04_02.jpg)'
- en: '**Code completion**: Configures the code completion options. Code completion
    is examined in detail in the next section.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码补全**：配置代码补全选项。下一节将详细探讨代码补全。'
- en: '**Auto Import**: Configures how the editor behaves when we paste code that
    uses classes that are not imported in the current class. By default when we do
    this, a pop up appears to add the import command. If we check the option **Add
    unambiguous imports on the fly**, the import command will be added automatically
    without our interaction.![Editor settings](img/5273OS_04_03.jpg)'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动导入**：配置当我们粘贴使用当前类中没有导入的类的代码时，编辑器的表现。默认情况下，这样做时会出现一个弹出窗口以添加导入命令。如果我们勾选了**即时添加明确的导入**选项，导入命令将会自动添加，无需我们干预。![编辑器设置](img/5273OS_04_03.jpg)'
- en: Code completion
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码补全
- en: Code completion helps us to write code quickly by suggestion lists and automatically
    completing the code.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 代码补全通过建议列表和自动完成代码来帮助我们快速编写代码。
- en: The basic code completion is the list of suggestions that appears while we are
    typing. If the list is not displayed, press *Ctrl* + the Spacebar to open it.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 基本代码补全是我们在输入时出现的建议列表。如果未显示列表，请按*Ctrl* + 空格键打开它。
- en: '![Code completion](img/5273OS_04_04.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![代码补全](img/5273OS_04_04.jpg)'
- en: Keep typing, select a command from the list, and press *Enter* or double-click
    to add it in your code.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 继续输入，从列表中选择一个命令，然后按*Enter*或双击将其添加到你的代码中。
- en: If the code we are writing is an expression, but we want to insert the expression
    in its negated form, when we select the expression from the suggestion list, instead
    of pressing *Enter* or double-clicking on it, press the exclamation mark key (*!*).
    The expression will be added with negation.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们正在编写的代码是一个表达式，但我们希望以否定的形式插入表达式，那么从建议列表中选择表达式后，不要按*Enter*或双击它，而是按感叹号键（*!*）。表达式将以否定形式添加。
- en: Another type of code completion is the **smart type code completion**. If we
    are typing a command to call a method with a `String` parameter, then just the
    `String` objects will be suggested. This smart completion occurs in the right
    part of an assignment statement, parameters of a method call, return statements
    or variable initializers. To open the smart suggestions list, press *Ctrl* + *Shift*
    + the Spacebar.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种类型的代码补全是**智能类型代码补全**。如果我们正在输入一个调用带有`String`参数的方法的命令，那么只会建议`String`对象。这种智能补全出现在赋值语句的右侧部分、方法调用的参数、返回语句或变量初始化器中。要打开智能建议列表，请按*Ctrl*
    + *Shift* + 空格键。
- en: To show the difference between these two types of suggestion lists, create in
    your code two objects of different classes, `String` and `int`. Then call to a
    method with a `String` parameter, for example, the method `i` of the `Log` class.
    When typing the `String` parameter, note the difference between opening the basic
    suggestion list (*Ctrl* + the spacebar) as the next screenshot shows, and opening
    the smart type suggestion list (*Ctrl* + *Shift* + the Spacebar) as the screenshot
    on the next page shows.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要显示这两种建议列表之间的区别，请在你的代码中创建两个不同类的对象，`String`和`int`。然后调用带有`String`参数的方法，例如`Log`类的`i`方法。在输入`String`参数时，注意下一个屏幕截图显示的基本建议列表（*Ctrl*
    + 空格键）和下一页显示的智能类型建议列表（*Ctrl* + *Shift* + 空格键）之间的区别。
- en: '![Code completion](img/5273OS_04_05.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![代码补全](img/5273OS_04_05.jpg)'
- en: In the first list, which is shown in the previous screenshot, both objects are
    suggested although the `int` object does not match the `parameter` class. In the
    second one, which is shown in the following screenshot, just `String` objects
    are suggested.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一个屏幕截图中显示的第一个列表中，尽管`int`对象与`parameter`类不匹配，但两个对象都被建议。在下面屏幕截图中显示的第二个列表中，只建议`String`对象。
- en: '![Code completion](img/5273OS_04_06.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![代码补全](img/5273OS_04_06.jpg)'
- en: One last utility of code completion is the **completion of statements**. Type
    a statement, press *Ctrl* + *Shift* + *Enter,* and notice how the closing punctuation
    is automatically added. If you press those keys after typing the keyword `if`,
    the parenthesis and the brackets are added to complete the conditional statement.
    This shortcut can also be used to complete methods declarations. Start typing
    a method and after typing the opening parenthesis, or after typing the method
    parameters, press *Ctrl* + *Shift* + *Enter*. The closing parenthesis and the
    brackets are added to complete the method specification.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 代码补全最后一个实用功能是**语句补全**。输入一个语句，按下*Ctrl* + *Shift* + *Enter*，注意结尾的标点符号是如何自动添加的。如果在输入关键字`if`后按下这些键，会添加括号和括号以完成条件语句。此快捷键也可用于完成方法声明。开始输入一个方法，并在输入左括号或输入方法参数后按下*Ctrl*
    + *Shift* + *Enter*。将添加右括号和括号以完成方法规范。
- en: Code generation
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码生成
- en: To generate blocks of code in a class, navigate to **Code** | **Generate** or
    press the shortcut *Alt* + *Insert*. We can generate constructors, getters, and
    setters methods, `equals` and `toString` methods, override or delegate methods.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要在类中生成代码块，导航到**代码** | **生成**或按下快捷键*Alt* + *Insert*。我们可以生成构造函数、getter和setter方法、`equals`和`toString`方法、重写或委托方法。
- en: Another way to generate code is surrounding some of our code with some statements
    (`if`, `if`/`else`, `while`, `for`, `try`/`catch`, and so on). Select a code line
    and navigate to **Code** | **Surround With** or press *Ctrl* + *Alt* + *T*.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种生成代码的方法是用一些语句（`if`、`if`/`else`、`while`、`for`、`try`/`catch`等）包围我们的代码。选择一行代码并导航到**代码**
    | **环绕以**或按下*Ctrl* + *Alt* + *T*。
- en: The third option is inserting code templates. Navigate to **Code** | **Insert
    Live Templates** to open a dialog box of the available templates. These templates
    can insert code to iterate collections, arrays, lists, and so on; code to print
    formatted strings, code to throw exceptions, or code to add static and final variables.
    In the left edge of the dialog, each template has a prefix, so if you type the
    prefix in the editor and press the *Tab* key, the code template is added automatically.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 第三种选项是插入代码模板。导航到**代码** | **插入实时模板**以打开可用模板的对话框。这些模板可以插入用于遍历集合、数组、列表等的代码；用于打印格式化字符串的代码、抛出异常的代码，或者添加静态和最终变量的代码。在对话框的左侧边缘，每个模板都有一个前缀，因此在编辑器中输入前缀并按下*Tab*键，代码模板会自动添加。
- en: Try to type `inn` at the end of the `onCreate` method of our main activity and
    press *Tab*. A conditional block will appear. In this new block, type `soutm`
    and press *Tab* again. The result is shown next.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试在主活动的`onCreate`方法末尾输入`inn`并按下*Tab*。将出现一个条件块。在这个新块中，输入`soutm`并再次按下*Tab*。结果如下所示。
- en: '[PRE0]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Navigating code
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导航代码
- en: The most direct way to navigate to declarations or type declarations is to press
    *Ctrl* and click on the symbol when it is displayed as a link. This option is
    also accessible from **Navigate** | **Declaration**.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 直接导航到声明或类型声明的方法是按下*Ctrl*并点击显示为链接的符号。此选项也可以从**导航** | **声明**访问。
- en: From the left edge of the editor we can navigate through the hierarchy of methods.
    Next to the method declarations that belong to a hierarchy of methods, there is
    an icon that indicates if a method is implementing an interface method, implementing
    an abstract class method, overriding a superclass method, or on the contrary,
    if a method is implemented or is overridden by other descendants.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 从编辑器的左侧边缘我们可以导航到方法的层次结构。在属于方法层次结构的方法声明旁边，有一个图标表示一个方法是否正在实现接口方法、实现抽象类方法、重写超类方法，或者相反，一个方法是否被其他后代实现或重写。
- en: Click on these icons to navigate to the methods in the hierarchy. This option
    is also available via **Navigate** | **Super Method** or **Navigate** | **Implementation(s)**.
    Test it by opening the main activity of our first project (`MainActivity.java`).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 点击这些图标以导航到层次结构中的方法。此选项也可以通过**导航** | **超级方法**或**导航** | **实现**访问。通过打开我们第一个项目的主活动(`MainActivity.java`)来测试它。
- en: '![Navigating code](img/5273OS_04_07.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![导航代码](img/5273OS_04_07.jpg)'
- en: Another useful utility related to code navigation is the use of custom regions.
    A **custom region** is just a piece of code that you want to group and give a
    name to. For example, if there is a class with a lot of methods, we can create
    some custom regions to distribute the methods among them. A region has a name
    or description and it can be collapsed or expanded using code folding.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 与代码导航相关的另一个有用工具是自定义区域的使用。一个**自定义区域**只是你想要分组并为其命名的一段代码。例如，如果一个类有很多方法，我们可以创建一些自定义区域来分配方法。一个区域有一个名称或描述，并且可以使用代码折叠来折叠或展开。
- en: 'To create a custom region we can use the code generation. Select the fragment
    of code, navigate to **Code** | **Surround With,** and select one of these two
    options:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建自定义区域，我们可以使用代码生成。选择代码片段，导航到**代码** | **环绕以**，并选择以下两个选项之一：
- en: '**<editor-fold…> Comments**'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<editor-fold…> 注释**'
- en: '**region…endregion Comments**'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**region…endregion 注释**'
- en: Both of them create a region but using a different style.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 它们都创建一个区域，但使用不同的样式。
- en: When we are using custom regions, we can navigate them using the **Navigate**
    | **Custom Region** menu.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用自定义区域时，可以通过**导航** | **自定义区域**菜单进行导航。
- en: 'The rest of the navigation options are accessible from the menu **Navigate**:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 其他导航选项可以从**导航**菜单访问：
- en: '**Class**/**File**/**Symbol**: Finds a class, a file, or a symbol by its name.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类**/**文件**/**符号**：通过名称查找类、文件或符号。'
- en: '**Line**: Goes to a line code by its number.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**行**：通过行号转到代码行。'
- en: '**Last Edit Location**: Navigates to the most recent change point.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最后编辑位置**：导航到最近的更改点。'
- en: '**Test**: Navigates to the test of the current class.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试**：导航到当前类的测试。'
- en: '**File Structure**: Opens a dialog box that shows the file structure. Open
    the file structure of our main activity and observe how the structure is presented,
    displaying the list of methods, the icons that indicate the type of element, or
    the icons that indicate the visibility of the element.![Navigating code](img/5273OS_04_08.jpg)'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文件结构**：打开一个对话框，显示文件结构。打开我们主活动的文件结构，观察结构是如何呈现的，显示方法列表，指示元素类型的图标，或指示元素可见性的图标。![导航代码](img/5273OS_04_08.jpg)'
- en: '**File Path**: Opens a dialog that shows the complete path to the file opened
    in the editor.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文件路径**：打开一个对话框，显示编辑器中打开文件的完整路径。'
- en: '**Type Hierarchy**: Opens a dialog that shows the type hierarchy of the selected
    object.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类型层次结构**：打开一个对话框，显示选定对象的类型层次结构。'
- en: '**Method Hierarchy**: Opens a dialog that shows the method hierarchy of the
    selected method.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**方法层次结构**：打开一个对话框，显示选定方法的方法层次结构。'
- en: '**Call Hierarchy**: Opens a dialog that shows the call hierarchy of the selected
    method.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**调用层次结构**：打开一个对话框，显示选定方法的调用层次结构。'
- en: '**Next Highlighted Error**: Navigates to the next error.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**下一个高亮错误**：导航到下一个错误。'
- en: '**Previous Highlighted Error**: Navigates to the previous error.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**上一个高亮错误**：导航到上一个错误。'
- en: '**Next Method**: Navigates to the next method.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**下一个方法**：导航到下一个方法。'
- en: '**Previous Method**: Navigates to the previous method.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**上一个方法**：导航到上一个方法。'
- en: Useful actions
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 有用的操作
- en: 'Some useful shortcuts are exposed in the following list:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些有用的快捷键：
- en: '*Ctrl* + *W*: Selects the expressions based on grammar. Keep pressing these
    keys again and again to expand the selection. The opposite command is *Ctrl* +
    *Shift* + *W*.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Ctrl* + *W*：根据语法选择表达式。多次按这些键以扩展选择。相反的命令是*Ctrl* + *Shift* + *W*。'
- en: '*Ctrl* + */*: Comments each line of the selected code. To use block comments
    press *Ctrl* + *Shift* + */*.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Ctrl* + */*：注释选中代码的每一行。要使用块注释，请按*Ctrl* + *Shift* + */*。'
- en: '*Ctrl* + *Alt* + *I*: Indents the selected code. Useful when you finish writing
    a block of code or method to clean it up.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Ctrl* + *Alt* + *I*：缩进选中的代码。在完成编写代码块或方法后清理代码时很有用。'
- en: '*Ctrl* + *Alt* + *O*: Optimizes the imports, removing the unused ones and reordering
    the rest of them.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Ctrl* + *Alt* + *O*：优化导入，移除未使用的并重新排序其余的。'
- en: '*Shift* + *Ctrl* + Arrows: Moves the selected code to another line.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Shift* + *Ctrl* + 方向键：将选中的代码移动到另一行。'
- en: '*Alt* + Arrows: Switches between the opened tabs of the editor.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Alt* + 方向键：在编辑器的打开标签页之间切换。'
- en: '*Ctrl* + *F*: Finds a string in the active tab of the editor.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Ctrl* + *F*：在编辑器的活动标签页中查找字符串。'
- en: '*Ctrl* + *R*: Replaces a string in the active tab of the editor.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Ctrl* + *R*：替换编辑器活动标签页中的字符串。'
- en: '*Ctrl* + *A*: Selects all the code of the opened file.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Ctrl* + *A*：选择打开文件中的所有代码。'
- en: '*Ctrl* + *D*: Copies the selected code and pastes it at the end of it. If no
    code is selected, then the entire line is copied and pasted in a new line.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Ctrl* + *D*：复制选中的代码并将其粘贴到代码末尾。如果没有选中任何代码，则会复制整行并在新行中粘贴。'
- en: '*Ctrl* + *Y*: Removes the entire line without leaving any blank line.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Ctrl* + *Y*：删除整行，且不留下任何空行。'
- en: '*Ctrl* + *Shift* + *U*: Toggles case.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Ctrl* + *Shift* + *U*：切换大小写。'
- en: '*Tab*: Moves to the next parameter.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Tab*：移动到下一个参数。'
- en: Summary
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: By the end of this chapter, the user should learn some useful tricks and useful
    actions to make the most of the code editor. We know now how to use code completion,
    code generation, and some useful shortcuts for speeding up different actions.
    We have also customized our code editor and we are now ready to start programming.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，用户应该学会一些有用的技巧和操作，以便最大限度地利用代码编辑器。我们现在知道了如何使用代码补全、代码生成以及加快不同操作的一些快捷键。我们还定制了代码编辑器，现在可以开始编程了。
- en: In the next chapter, we will start creating our first user interface using layouts.
    We will learn how to create a layout using the graphical wizard and how to create
    it editing the XML layout file using the text-based view. We will create our first
    application, a classic *Hello World* example using the text view component. We
    will also learn about how to prepare our application for multiple screen sizes
    and adapt them for different device orientations. Finally, we will learn about
    UI themes and how to handle events.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将开始使用布局创建我们的第一个用户界面。我们将学习如何使用图形向导创建布局以及如何通过文本视图编辑XML布局文件来创建布局。我们将创建第一个应用程序，一个使用文本视图组件的经典*Hello
    World*示例。我们还将学习如何准备我们的应用程序以适应多种屏幕尺寸，并使它们适应不同的设备方向。最后，我们将了解UI主题以及如何处理事件。
