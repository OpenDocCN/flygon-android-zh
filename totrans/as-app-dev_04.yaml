- en: Chapter 4. Using the Code Editor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have created your first project and you know how to navigate through the
    different folders, subfolders, and files. It's time to start programming! Have
    you ever wanted to be able to program more efficiently? How can you speed up your
    development process? Do you want to learn useful shortcuts to, for example, comment
    more than one line at once, find and replace strings, or move faster through different
    parameters in a method call?
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter we will learn how to use the code editor and how to customize
    it in order to feel more comfortable when programming. It is worth knowing the
    basic features of the code editor in order to increase the developer productivity.
    We will learn about code completion and code generation. Finally, we will learn
    some useful shortcuts and hotkeys to speed up our development process.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the topics we''ll be covering in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Customizing the code editor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code completion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code generation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Find related content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Useful shortcuts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Editor settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To open the editor settings navigate to **File** | **Settings**, section **IDE
    Settings**, menu **Editor**. This screen displays the general settings of the
    editor. We recommend checking two options that are unchecked by default:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Change font size (Zoom) with Ctrl + Mouse Wheel**: This option allows us
    to change the font size of the editor using the mouse wheel, as we do in other
    programs such as web browsers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Show quick doc on mouse move**: If we check this option, when we move the
    mouse over a piece of code and wait 500 ms, a quick doc about that code will be
    displayed in a small dialog. When we move the mouse again, the dialog automatically
    disappears, but if we move the mouse into the dialog, then we can examine the
    doc in detail. This is very useful, for example, to read what a method does and
    its parameters without navigating to it.![Editor settings](img/5273OS_04_01.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are more settings distributed among seven categories:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Smart Keys**: Configures actions to be done automatically when typing, such
    as adding closing brackets, quotes or tags; or indenting the line when we press
    the *Enter* key.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Appearance**: Configures the appearance of the editor. We recommend checking
    the next two options that are unchecked by default:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Show line numbers**: Shows the line numbers in the left edge of the editor.
    It can be very useful when we are debugging or examining the log.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Show method separators**: Visually separates the methods of a class.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Colors & Fonts**: Changes the fonts and colors. There are a lot of options
    and elements to configure (keywords, numbers, warnings, errors, comments, strings,
    and so on). We can save the configurations as schemes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Editor Tabs**: Configuration of the editor tabs. We suggest you select the
    **Mark modified tabs with asterisk** option to easily detect the modified and
    not-saved files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Code Folding**: The **code folding** option allows us to collapse or expand
    code blocks. It is very useful to hide code blocks that we are not editing, simplifying
    the code view. We can collapse or expand the blocks using the icons from the editor
    or using the **Code** | **Folding** menu.![Editor settings](img/5273OS_04_02.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Code completion**: Configures the code completion options. Code completion
    is examined in detail in the next section.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Auto Import**: Configures how the editor behaves when we paste code that
    uses classes that are not imported in the current class. By default when we do
    this, a pop up appears to add the import command. If we check the option **Add
    unambiguous imports on the fly**, the import command will be added automatically
    without our interaction.![Editor settings](img/5273OS_04_03.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code completion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Code completion helps us to write code quickly by suggestion lists and automatically
    completing the code.
  prefs: []
  type: TYPE_NORMAL
- en: The basic code completion is the list of suggestions that appears while we are
    typing. If the list is not displayed, press *Ctrl* + the Spacebar to open it.
  prefs: []
  type: TYPE_NORMAL
- en: '![Code completion](img/5273OS_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Keep typing, select a command from the list, and press *Enter* or double-click
    to add it in your code.
  prefs: []
  type: TYPE_NORMAL
- en: If the code we are writing is an expression, but we want to insert the expression
    in its negated form, when we select the expression from the suggestion list, instead
    of pressing *Enter* or double-clicking on it, press the exclamation mark key (*!*).
    The expression will be added with negation.
  prefs: []
  type: TYPE_NORMAL
- en: Another type of code completion is the **smart type code completion**. If we
    are typing a command to call a method with a `String` parameter, then just the
    `String` objects will be suggested. This smart completion occurs in the right
    part of an assignment statement, parameters of a method call, return statements
    or variable initializers. To open the smart suggestions list, press *Ctrl* + *Shift*
    + the Spacebar.
  prefs: []
  type: TYPE_NORMAL
- en: To show the difference between these two types of suggestion lists, create in
    your code two objects of different classes, `String` and `int`. Then call to a
    method with a `String` parameter, for example, the method `i` of the `Log` class.
    When typing the `String` parameter, note the difference between opening the basic
    suggestion list (*Ctrl* + the spacebar) as the next screenshot shows, and opening
    the smart type suggestion list (*Ctrl* + *Shift* + the Spacebar) as the screenshot
    on the next page shows.
  prefs: []
  type: TYPE_NORMAL
- en: '![Code completion](img/5273OS_04_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the first list, which is shown in the previous screenshot, both objects are
    suggested although the `int` object does not match the `parameter` class. In the
    second one, which is shown in the following screenshot, just `String` objects
    are suggested.
  prefs: []
  type: TYPE_NORMAL
- en: '![Code completion](img/5273OS_04_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: One last utility of code completion is the **completion of statements**. Type
    a statement, press *Ctrl* + *Shift* + *Enter,* and notice how the closing punctuation
    is automatically added. If you press those keys after typing the keyword `if`,
    the parenthesis and the brackets are added to complete the conditional statement.
    This shortcut can also be used to complete methods declarations. Start typing
    a method and after typing the opening parenthesis, or after typing the method
    parameters, press *Ctrl* + *Shift* + *Enter*. The closing parenthesis and the
    brackets are added to complete the method specification.
  prefs: []
  type: TYPE_NORMAL
- en: Code generation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To generate blocks of code in a class, navigate to **Code** | **Generate** or
    press the shortcut *Alt* + *Insert*. We can generate constructors, getters, and
    setters methods, `equals` and `toString` methods, override or delegate methods.
  prefs: []
  type: TYPE_NORMAL
- en: Another way to generate code is surrounding some of our code with some statements
    (`if`, `if`/`else`, `while`, `for`, `try`/`catch`, and so on). Select a code line
    and navigate to **Code** | **Surround With** or press *Ctrl* + *Alt* + *T*.
  prefs: []
  type: TYPE_NORMAL
- en: The third option is inserting code templates. Navigate to **Code** | **Insert
    Live Templates** to open a dialog box of the available templates. These templates
    can insert code to iterate collections, arrays, lists, and so on; code to print
    formatted strings, code to throw exceptions, or code to add static and final variables.
    In the left edge of the dialog, each template has a prefix, so if you type the
    prefix in the editor and press the *Tab* key, the code template is added automatically.
  prefs: []
  type: TYPE_NORMAL
- en: Try to type `inn` at the end of the `onCreate` method of our main activity and
    press *Tab*. A conditional block will appear. In this new block, type `soutm`
    and press *Tab* again. The result is shown next.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Navigating code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The most direct way to navigate to declarations or type declarations is to press
    *Ctrl* and click on the symbol when it is displayed as a link. This option is
    also accessible from **Navigate** | **Declaration**.
  prefs: []
  type: TYPE_NORMAL
- en: From the left edge of the editor we can navigate through the hierarchy of methods.
    Next to the method declarations that belong to a hierarchy of methods, there is
    an icon that indicates if a method is implementing an interface method, implementing
    an abstract class method, overriding a superclass method, or on the contrary,
    if a method is implemented or is overridden by other descendants.
  prefs: []
  type: TYPE_NORMAL
- en: Click on these icons to navigate to the methods in the hierarchy. This option
    is also available via **Navigate** | **Super Method** or **Navigate** | **Implementation(s)**.
    Test it by opening the main activity of our first project (`MainActivity.java`).
  prefs: []
  type: TYPE_NORMAL
- en: '![Navigating code](img/5273OS_04_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Another useful utility related to code navigation is the use of custom regions.
    A **custom region** is just a piece of code that you want to group and give a
    name to. For example, if there is a class with a lot of methods, we can create
    some custom regions to distribute the methods among them. A region has a name
    or description and it can be collapsed or expanded using code folding.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a custom region we can use the code generation. Select the fragment
    of code, navigate to **Code** | **Surround With,** and select one of these two
    options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**<editor-fold…> Comments**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**region…endregion Comments**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Both of them create a region but using a different style.
  prefs: []
  type: TYPE_NORMAL
- en: When we are using custom regions, we can navigate them using the **Navigate**
    | **Custom Region** menu.
  prefs: []
  type: TYPE_NORMAL
- en: 'The rest of the navigation options are accessible from the menu **Navigate**:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class**/**File**/**Symbol**: Finds a class, a file, or a symbol by its name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Line**: Goes to a line code by its number.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Last Edit Location**: Navigates to the most recent change point.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Test**: Navigates to the test of the current class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**File Structure**: Opens a dialog box that shows the file structure. Open
    the file structure of our main activity and observe how the structure is presented,
    displaying the list of methods, the icons that indicate the type of element, or
    the icons that indicate the visibility of the element.![Navigating code](img/5273OS_04_08.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**File Path**: Opens a dialog that shows the complete path to the file opened
    in the editor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Type Hierarchy**: Opens a dialog that shows the type hierarchy of the selected
    object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Method Hierarchy**: Opens a dialog that shows the method hierarchy of the
    selected method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Call Hierarchy**: Opens a dialog that shows the call hierarchy of the selected
    method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Next Highlighted Error**: Navigates to the next error.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Previous Highlighted Error**: Navigates to the previous error.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Next Method**: Navigates to the next method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Previous Method**: Navigates to the previous method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Useful actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Some useful shortcuts are exposed in the following list:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Ctrl* + *W*: Selects the expressions based on grammar. Keep pressing these
    keys again and again to expand the selection. The opposite command is *Ctrl* +
    *Shift* + *W*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ctrl* + */*: Comments each line of the selected code. To use block comments
    press *Ctrl* + *Shift* + */*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ctrl* + *Alt* + *I*: Indents the selected code. Useful when you finish writing
    a block of code or method to clean it up.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ctrl* + *Alt* + *O*: Optimizes the imports, removing the unused ones and reordering
    the rest of them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Shift* + *Ctrl* + Arrows: Moves the selected code to another line.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Alt* + Arrows: Switches between the opened tabs of the editor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ctrl* + *F*: Finds a string in the active tab of the editor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ctrl* + *R*: Replaces a string in the active tab of the editor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ctrl* + *A*: Selects all the code of the opened file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ctrl* + *D*: Copies the selected code and pastes it at the end of it. If no
    code is selected, then the entire line is copied and pasted in a new line.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ctrl* + *Y*: Removes the entire line without leaving any blank line.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ctrl* + *Shift* + *U*: Toggles case.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Tab*: Moves to the next parameter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By the end of this chapter, the user should learn some useful tricks and useful
    actions to make the most of the code editor. We know now how to use code completion,
    code generation, and some useful shortcuts for speeding up different actions.
    We have also customized our code editor and we are now ready to start programming.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will start creating our first user interface using layouts.
    We will learn how to create a layout using the graphical wizard and how to create
    it editing the XML layout file using the text-based view. We will create our first
    application, a classic *Hello World* example using the text view component. We
    will also learn about how to prepare our application for multiple screen sizes
    and adapt them for different device orientations. Finally, we will learn about
    UI themes and how to handle events.
  prefs: []
  type: TYPE_NORMAL
