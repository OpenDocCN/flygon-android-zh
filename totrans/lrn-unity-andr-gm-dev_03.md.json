["```java\n    using UnityEngine.UI;\n    ```", "```java\n    public static int score = 0;\n    ```", "```java\n    public Text display;\n    ```", "```java\n    public void Update() {\n      display.text = \"\" + score;\n    }\n    ```", "```java\n    using UnityEngine.UI;\n    using UnityEngine.EventSystems;\n    ```", "```java\n    public class RepeatButton : Selectable {\n    ```", "```java\n    private bool isPressed = false;\n    ```", "```java\n    public GameObject target;\n    public string function = \"\";\n    public float value = 0f;\n    ```", "```java\n    public override void OnPointerDown(PointerEventData eventData) {\n      base.OnPointerDown(eventData);\n      isPressed = true;\n    }\n    ```", "```java\n    public override void OnPointerExit(PointerEventData eventData) {\n      base.OnPointerExit(eventData);\n      isPressed = false;\n    }\n    ```", "```java\n    public override void OnPointerUp(PointerEventData eventData) {\n      base.OnPointerUp(eventData);\n      isPressed = false;\n    }\n    ```", "```java\n    public void Update() {\n      if(isPressed) {\n        target.SendMessage(function, value);\n      }\n    }\n    ```", "```java\n    public CharacterController characterControl;\n    public float moveSpeed = 10f;\n    public float rotateSpeed = 45f;\n    ```", "```java\n    public void MoveTank(float speed) {\n    ```", "```java\n        Vector3 move = characterControl.transform.forward * speed * Time.deltaTime;\n        ```", "```java\n    move.y -= 9.8f * Time.deltaTime;\n    ```", "```java\n    characterControl.Move(move);\n    }\n    ```", "```java\n    public void RotateTank(float speed) {\n      Vector3 rotate = Vector3.up * speed * Time.deltaTime;\n    ```", "```java\n    characterControl.transform.Rotate(rotate);\n    }\n    ```", "```java\n    public Transform turretPivot;\n    public Transform cannonPivot;\n\n    public float turretSpeed = 45f;\n    public float cannonSpeed = 20f;\n\n    public float lowCannonLimit = 315f;\n    public float highCannonLimit = 359.9f;\n    ```", "```java\n    public void RotateTurret(float speed) {\n      Vector3 rotate = Vector3.up * speed * Time.deltaTime;\n      turretPivot.Rotate(rotate);\n    }\n    ```", "```java\n    public void RotateCannon(float speed) {\n      float rotate = speed * Time.deltaTime;\n    ```", "```java\n    Vector3 euler = cannonPivot.localEulerAngles;\n    ```", "```java\n    euler.x = Mathf.Clamp(euler.x â€“ rotate, lowCannonLimit, highCannonLimit);\n    ```", "```java\n    cannonPivot.localEulerAngles = euler;\n    }\n    ```", "```java\n    public Renderer rightTread;\n    public Renderer leftTread;\n    ```", "```java\n    private float rightOffset = 0;\n    private float leftOffset = 0;\n    ```", "```java\n    rightOffset += speed * Time.deltaTime;\n    rightTread.material.mainTextureOffset = new Vector2(rightOffset, 0);\n    leftOffset += speed * Time.deltaTime;\n    leftTread.material.mainTextureOffset = new Vector2(leftOffset, 0);\n    ```", "```java\n    public Animator animator;\n    ```", "```java\n    public float maxIdleTime = 10f;\n    public float minIdleTime = 3f;\n    ```", "```java\n    private int timeId = -1;\n    private int wasHitId = -1;\n    private int inTheFrontId = -1;\n    ```", "```java\n    private int idleRetractId = -1;\n    private int idleExtendId = -1;\n    ```", "```java\n    public void Awake() {\n    ```", "```java\n      timeId = Animator.StringToHash(\"time\");\n      wasHitId = Animator.StringToHash(\"wasHit\");\n      inTheFrontId = Animator.StringToHash(\"inTheFront\");\n      idleRetractId = Animator.StringToHash(\"Base Layer.Idle_Retract\");\n      idleExtendId = Animator.StringToHash(\"Base Layer.Idle_Extend\");\n    }\n    ```", "```java\n    public void Update() {\n      int currentStateId = animator.GetCurrentAnimatorStateInfo(0).nameHash;\n    ```", "```java\n    if(currentStateId == idleRetractId || currentStateId == idleExtendId) {\n      SubtractTime();\n    }\n    ```", "```java\n    else {\n      if(animator.GetBool(wasHitId)) {\n        ClearHit();\n        ResetTime();\n      }\n\n      if(animator.GetFloat(timeId) < 0) {\n        ResetTime();\n      }\n    }\n    }\n    ```", "```java\n    public void SubtractTime() {\n      float curTime = animator.GetFloat(timeId);\n      curTime -= Time.deltaTime;\n      animator.SetFloat(timeId, curTime);\n    }\n    ```", "```java\n    public void ClearHit() {\n      animator.SetBool(wasHitId, false);\n      animator.SetBool(inTheFrontId, false);\n    }\n    ```", "```java\n    public void ResetTime() {\n      float newTime = Random.Range(minIdleTime, maxIdleTime);\n      animator.SetFloat(timeId, newTime);\n    }\n    ```", "```java\n    public Transform muzzlePoint;\n    public Transform targetPoint;\n    ```", "```java\n    public void Fire() {\n      RaycastHit hit;\n    ```", "```java\n    if(Physics.Raycast(muzzlePoint.position, muzzlePoint.forward, out hit)) {\n    ```", "```java\n    targetPoint.position = hit.point;\n    hit.transform.root.gameObject.SendMessage(\"Hit\", hit.point, SendMessageOptions.DontRequireReceiver);\n    }\n    ```", "```java\n      else {\n        targetPoint.position = Vector3.zero;\n      }\n    }\n    ```", "```java\n    public void Hit(Vector3 point) {\n      int currentStateId = animator.GetCurrentAnimatorStateInfo(0).nameHash;\n      if(currentStateId != idleExtendId) return;\n      animator.SetBool(wasHitId, true);\n    ```", "```java\n    Vector3 localPoint = transform.InverseTransformPoint(point);\n    if(localPoint.x > 0) {\n      animator.SetBool(inTheFrontId, false);\n      ScoreCounter.score += 5;\n    }\n    else {\n      animator.SetBool(inTheFrontId, true);\n      ScoreCounter.score += 10;\n    }\n    }\n    ```"]